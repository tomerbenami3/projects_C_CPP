
Altair_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017cf0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d68  08017e80  08017e80  00018e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018be8  08018be8  0001a224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018be8  08018be8  00019be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018bf0  08018bf0  0001a224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018bf0  08018bf0  00019bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018bf4  08018bf4  00019bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  08018bf8  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006594  20000224  08018e1c  0001a224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200067b8  08018e1c  0001a7b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fc21  00000000  00000000  0001a254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000759d  00000000  00000000  00049e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002788  00000000  00000000  00051418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e56  00000000  00000000  00053ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003327c  00000000  00000000  000559f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000364e8  00000000  00000000  00088c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011df6a  00000000  00000000  000bf15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dd0c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bcfc  00000000  00000000  001dd108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001e8e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017e68 	.word	0x08017e68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	08017e68 	.word	0x08017e68

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001062:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001064:	4a3a      	ldr	r2, [pc, #232]	@ (8001150 <MX_ADC1_Init+0x110>)
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <MX_ADC1_Init+0x10c>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106e:	4b37      	ldr	r3, [pc, #220]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001074:	4b35      	ldr	r3, [pc, #212]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800107a:	4b34      	ldr	r3, [pc, #208]	@ (800114c <MX_ADC1_Init+0x10c>)
 800107c:	2201      	movs	r2, #1
 800107e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001080:	4b32      	ldr	r3, [pc, #200]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001082:	2204      	movs	r2, #4
 8001084:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001086:	4b31      	ldr	r3, [pc, #196]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001088:	2200      	movs	r2, #0
 800108a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108c:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <MX_ADC1_Init+0x10c>)
 800108e:	2200      	movs	r2, #0
 8001090:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001092:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001094:	2202      	movs	r2, #2
 8001096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001098:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <MX_ADC1_Init+0x10c>)
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a6:	4b29      	ldr	r3, [pc, #164]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c2:	4822      	ldr	r0, [pc, #136]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010c4:	f002 ff92 	bl	8003fec <HAL_ADC_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010ce:	f001 fd4e 	bl	8002b6e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	481b      	ldr	r0, [pc, #108]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010de:	f004 f855 	bl	800518c <HAL_ADCEx_MultiModeConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010e8:	f001 fd41 	bl	8002b6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_ADC1_Init+0x114>)
 80010ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f0:	2306      	movs	r3, #6
 80010f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f8:	237f      	movs	r3, #127	@ 0x7f
 80010fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fc:	2304      	movs	r3, #4
 80010fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	4810      	ldr	r0, [pc, #64]	@ (800114c <MX_ADC1_Init+0x10c>)
 800110a:	f003 f9f1 	bl	80044f0 <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001114:	f001 fd2b 	bl	8002b6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_ADC1_Init+0x118>)
 800111a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800111c:	230c      	movs	r3, #12
 800111e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4809      	ldr	r0, [pc, #36]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001126:	f003 f9e3 	bl	80044f0 <HAL_ADC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001130:	f001 fd1d 	bl	8002b6e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Init(&hadc1);
 8001134:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001136:	f002 ff59 	bl	8003fec <HAL_ADC_Init>
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001140:	f003 f9d6 	bl	80044f0 <HAL_ADC_ConfigChannel>
  /* USER CODE END ADC1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	@ 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000240 	.word	0x20000240
 8001150:	50040000 	.word	0x50040000
 8001154:	14f00020 	.word	0x14f00020
 8001158:	19200040 	.word	0x19200040

0800115c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0ac      	sub	sp, #176	@ 0xb0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2288      	movs	r2, #136	@ 0x88
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f013 fc95 	bl	8014aac <memset>
  if(adcHandle->Instance==ADC1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a41      	ldr	r2, [pc, #260]	@ (800128c <HAL_ADC_MspInit+0x130>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d17a      	bne.n	8001282 <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800118c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001192:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001196:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011a2:	2308      	movs	r3, #8
 80011a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011a6:	2307      	movs	r3, #7
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 ff2d 	bl	800701c <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80011c8:	f001 fcd1 	bl	8002b6e <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011cc:	4b30      	ldr	r3, [pc, #192]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001202:	230b      	movs	r3, #11
 8001204:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001218:	f004 fe84 	bl	8005f24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800121e:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <HAL_ADC_MspInit+0x13c>)
 8001220:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800123c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001240:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001244:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001248:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800124a:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800124c:	2220      	movs	r2, #32
 800124e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001256:	480f      	ldr	r0, [pc, #60]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001258:	f004 f95a 	bl	8005510 <HAL_DMA_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001262:	f001 fc84 	bl	8002b6e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800126a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2012      	movs	r0, #18
 8001278:	f004 f913 	bl	80054a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800127c:	2012      	movs	r0, #18
 800127e:	f004 f92c 	bl	80054da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	37b0      	adds	r7, #176	@ 0xb0
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	50040000 	.word	0x50040000
 8001290:	40021000 	.word	0x40021000
 8001294:	200002a4 	.word	0x200002a4
 8001298:	40020008 	.word	0x40020008

0800129c <ParseCommand>:
extern osMessageQueueId_t eventQueueHandle;

static int Date_Compare(Date* a, Date* b);

void ParseCommand(const char* cmd)
{
 800129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012a0:	b0d8      	sub	sp, #352	@ 0x160
 80012a2:	af0a      	add	r7, sp, #40	@ 0x28
 80012a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012ac:	6018      	str	r0, [r3, #0]
	printf("ParseCommand received: '%s'\r\n", cmd);
 80012ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	48c7      	ldr	r0, [pc, #796]	@ (80015d8 <ParseCommand+0x33c>)
 80012ba:	f013 fb87 	bl	80149cc <iprintf>

	if(cmd[0] == '\0' || strcmp(cmd, " \r\n") == strlen(cmd)) {
 80012be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8298 	beq.w	8001800 <ParseCommand+0x564>
 80012d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012d8:	49c0      	ldr	r1, [pc, #768]	@ (80015dc <ParseCommand+0x340>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	f7fe ff78 	bl	80001d0 <strcmp>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461c      	mov	r4, r3
 80012e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f7fe ffcf 	bl	8000290 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	429c      	cmp	r4, r3
 80012f6:	f000 8283 	beq.w	8001800 <ParseCommand+0x564>
		return;
	}

    if (strncmp(cmd, "SETTIME ", 8) == 0)
 80012fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012fe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001302:	2208      	movs	r2, #8
 8001304:	49b6      	ldr	r1, [pc, #728]	@ (80015e0 <ParseCommand+0x344>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	f013 fbe5 	bl	8014ad6 <strncmp>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d15b      	bne.n	80013ca <ParseCommand+0x12e>
    {
        int year, month, day, hour, minute, second;
        if (sscanf(cmd + 8, "%d-%d-%d %d:%d:%d",
 8001312:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001316:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f103 0008 	add.w	r0, r3, #8
 8001320:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8001324:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001328:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800132c:	9303      	str	r3, [sp, #12]
 800132e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	460b      	mov	r3, r1
 8001342:	49a8      	ldr	r1, [pc, #672]	@ (80015e4 <ParseCommand+0x348>)
 8001344:	f012 fb72 	bl	8013a2c <siscanf>
 8001348:	4603      	mov	r3, r0
 800134a:	2b06      	cmp	r3, #6
 800134c:	d139      	bne.n	80013c2 <ParseCommand+0x126>
                   &year, &month, &day,
                   &hour, &minute, &second) == 6)
        {
            DateTimeSetDate(g_dt, year % 100, month, day);
 800134e:	4ba6      	ldr	r3, [pc, #664]	@ (80015e8 <ParseCommand+0x34c>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001356:	4aa5      	ldr	r2, [pc, #660]	@ (80015ec <ParseCommand+0x350>)
 8001358:	fb82 1203 	smull	r1, r2, r2, r3
 800135c:	1151      	asrs	r1, r2, #5
 800135e:	17da      	asrs	r2, r3, #31
 8001360:	1a8a      	subs	r2, r1, r2
 8001362:	2164      	movs	r1, #100	@ 0x64
 8001364:	fb01 f202 	mul.w	r2, r1, r2
 8001368:	1a9a      	subs	r2, r3, r2
 800136a:	b2d1      	uxtb	r1, r2
 800136c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001370:	b2da      	uxtb	r2, r3
 8001372:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f000 fc03 	bl	8001b82 <DateTimeSetDate>
            DateTimeSetTime(g_dt, hour, minute, second);
 800137c:	4b9a      	ldr	r3, [pc, #616]	@ (80015e8 <ParseCommand+0x34c>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001384:	b2d9      	uxtb	r1, r3
 8001386:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800138a:	b2da      	uxtb	r2, r3
 800138c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f000 fbb7 	bl	8001b04 <DateTimeSetTime>
            printf("RTC updated to: %04d-%02d-%02d %02d:%02d:%02d\r\n",
 8001396:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800139a:	f8d7 412c 	ldr.w	r4, [r7, #300]	@ 0x12c
 800139e:	f8d7 5128 	ldr.w	r5, [r7, #296]	@ 0x128
 80013a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80013a6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80013aa:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80013ae:	9102      	str	r1, [sp, #8]
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	462b      	mov	r3, r5
 80013b6:	4622      	mov	r2, r4
 80013b8:	4601      	mov	r1, r0
 80013ba:	488d      	ldr	r0, [pc, #564]	@ (80015f0 <ParseCommand+0x354>)
 80013bc:	f013 fb06 	bl	80149cc <iprintf>
 80013c0:	e21f      	b.n	8001802 <ParseCommand+0x566>
                   year, month, day, hour, minute, second);
        }
        else
        {
            printf("SETTIME format error\r\n");
 80013c2:	488c      	ldr	r0, [pc, #560]	@ (80015f4 <ParseCommand+0x358>)
 80013c4:	f013 fb6a 	bl	8014a9c <puts>
 80013c8:	e21b      	b.n	8001802 <ParseCommand+0x566>
        }
    }
    else if (strncmp(cmd, "GET ", 4) == 0)
 80013ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013ce:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013d2:	2204      	movs	r2, #4
 80013d4:	4988      	ldr	r1, [pc, #544]	@ (80015f8 <ParseCommand+0x35c>)
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	f013 fb7d 	bl	8014ad6 <strncmp>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 8116 	bne.w	8001610 <ParseCommand+0x374>
    {
        int y1, m1, d1, h1, min1, s1;
        int y2, m2, d2, h2, min2, s2;

        if (sscanf(cmd + 4, "%d-%d-%d %d:%d:%d TO %d-%d-%d %d:%d:%d",
 80013e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1d18      	adds	r0, r3, #4
 80013f0:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80013f4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80013f8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80013fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80013fe:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001402:	9308      	str	r3, [sp, #32]
 8001404:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001408:	9307      	str	r3, [sp, #28]
 800140a:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800140e:	9306      	str	r3, [sp, #24]
 8001410:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001414:	9305      	str	r3, [sp, #20]
 8001416:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800141a:	9304      	str	r3, [sp, #16]
 800141c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001420:	9303      	str	r3, [sp, #12]
 8001422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	460b      	mov	r3, r1
 8001436:	4971      	ldr	r1, [pc, #452]	@ (80015fc <ParseCommand+0x360>)
 8001438:	f012 faf8 	bl	8013a2c <siscanf>
 800143c:	4603      	mov	r3, r0
 800143e:	2b0c      	cmp	r3, #12
 8001440:	f040 80c5 	bne.w	80015ce <ParseCommand+0x332>
                   &y1, &m1, &d1, &h1, &min1, &s1,
                   &y2, &m2, &d2, &h2, &min2, &s2) == 12)
        {
            printf("Parsed GET range: %04d-%02d-%02d %02d:%02d:%02d to %04d-%02d-%02d %02d:%02d:%02d\r\n",
 8001444:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800144e:	60fa      	str	r2, [r7, #12]
 8001450:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001454:	60b8      	str	r0, [r7, #8]
 8001456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800145a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800145e:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8001462:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001466:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 800146a:	607c      	str	r4, [r7, #4]
 800146c:	f8d7 50f8 	ldr.w	r5, [r7, #248]	@ 0xf8
 8001470:	f8d7 60f4 	ldr.w	r6, [r7, #244]	@ 0xf4
 8001474:	f8d7 40f0 	ldr.w	r4, [r7, #240]	@ 0xf0
 8001478:	603c      	str	r4, [r7, #0]
 800147a:	f8d7 40ec 	ldr.w	r4, [r7, #236]	@ 0xec
 800147e:	9408      	str	r4, [sp, #32]
 8001480:	683c      	ldr	r4, [r7, #0]
 8001482:	9407      	str	r4, [sp, #28]
 8001484:	9606      	str	r6, [sp, #24]
 8001486:	9505      	str	r5, [sp, #20]
 8001488:	687c      	ldr	r4, [r7, #4]
 800148a:	9404      	str	r4, [sp, #16]
 800148c:	9003      	str	r0, [sp, #12]
 800148e:	9102      	str	r1, [sp, #8]
 8001490:	9201      	str	r2, [sp, #4]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	6939      	ldr	r1, [r7, #16]
 800149a:	4859      	ldr	r0, [pc, #356]	@ (8001600 <ParseCommand+0x364>)
 800149c:	f013 fa96 	bl	80149cc <iprintf>
                   y1, m1, d1, h1, min1, s1,
                   y2, m2, d2, h2, min2, s2);

            DateTime start = {
 80014a0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 80014b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
                .date = { .year = y1 % 100, .month = m1, .day = d1 },
 80014c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80014c4:	4a49      	ldr	r2, [pc, #292]	@ (80015ec <ParseCommand+0x350>)
 80014c6:	fb82 1203 	smull	r1, r2, r2, r3
 80014ca:	1151      	asrs	r1, r2, #5
 80014cc:	17da      	asrs	r2, r3, #31
 80014ce:	1a8a      	subs	r2, r1, r2
 80014d0:	2164      	movs	r1, #100	@ 0x64
 80014d2:	fb01 f202 	mul.w	r2, r1, r2
 80014d6:	1a9a      	subs	r2, r3, r2
            DateTime start = {
 80014d8:	b2d3      	uxtb	r3, r2
 80014da:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 80014de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 80014e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8
 80014f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
                .time = { .hours = h1, .minutes = min1, .seconds = s1 }
            };

            DateTime end = {
 80014fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
 8001512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
                .date = { .year = y2 % 100, .month = m2, .day = d2 },
 800151c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001520:	4a32      	ldr	r2, [pc, #200]	@ (80015ec <ParseCommand+0x350>)
 8001522:	fb82 1203 	smull	r1, r2, r2, r3
 8001526:	1151      	asrs	r1, r2, #5
 8001528:	17da      	asrs	r2, r3, #31
 800152a:	1a8a      	subs	r2, r1, r2
 800152c:	2164      	movs	r1, #100	@ 0x64
 800152e:	fb01 f202 	mul.w	r2, r1, r2
 8001532:	1a9a      	subs	r2, r3, r2
            DateTime end = {
 8001534:	b2d3      	uxtb	r3, r2
 8001536:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800153a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 8001544:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
 800154e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
                .time = { .hours = h2, .minutes = min2, .seconds = s2 }
            };

            DateTime current = start;
 8001558:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800155c:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8001560:	ca07      	ldmia	r2, {r0, r1, r2}
 8001562:	e883 0007 	stmia.w	r3, {r0, r1, r2}

            while (Date_Compare(&current.date, &end.date) <= 0)
 8001566:	e024      	b.n	80015b2 <ParseCommand+0x316>
            {
                char filename[20];
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
                         current.date.year + 2000,
 8001568:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
 800156c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                         current.date.month,
 8001570:	f897 20cd 	ldrb.w	r2, [r7, #205]	@ 0xcd
                         current.date.day);
 8001574:	f897 10cc 	ldrb.w	r1, [r7, #204]	@ 0xcc
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
 8001578:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800157c:	9101      	str	r1, [sp, #4]
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	4a20      	ldr	r2, [pc, #128]	@ (8001604 <ParseCommand+0x368>)
 8001582:	2114      	movs	r1, #20
 8001584:	f012 f9fa 	bl	801397c <sniprintf>

                printf("Trying to open file: %s\r\n", filename);
 8001588:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800158c:	4619      	mov	r1, r3
 800158e:	481e      	ldr	r0, [pc, #120]	@ (8001608 <ParseCommand+0x36c>)
 8001590:	f013 fa1c 	bl	80149cc <iprintf>
                SD_ReadFilePrintRange(filename, &start, &end);
 8001594:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001598:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800159c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fbe7 	bl	8002d74 <SD_ReadFilePrintRange>

                DateTime_NextDay(&current.date);
 80015a6:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80015aa:	3304      	adds	r3, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fba5 	bl	8001cfc <DateTime_NextDay>
            while (Date_Compare(&current.date, &end.date) <= 0)
 80015b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015b6:	1d1a      	adds	r2, r3, #4
 80015b8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80015bc:	3304      	adds	r3, #4
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f9c3 	bl	800194c <Date_Compare>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	ddcd      	ble.n	8001568 <ParseCommand+0x2cc>
 80015cc:	e119      	b.n	8001802 <ParseCommand+0x566>
            }
        }
        else
        {
            printf("Invalid GET command format.\r\n");
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <ParseCommand+0x370>)
 80015d0:	f013 fa64 	bl	8014a9c <puts>
 80015d4:	e115      	b.n	8001802 <ParseCommand+0x566>
 80015d6:	bf00      	nop
 80015d8:	08017e80 	.word	0x08017e80
 80015dc:	08017ea0 	.word	0x08017ea0
 80015e0:	08017ea4 	.word	0x08017ea4
 80015e4:	08017eb0 	.word	0x08017eb0
 80015e8:	2000032c 	.word	0x2000032c
 80015ec:	51eb851f 	.word	0x51eb851f
 80015f0:	08017ec4 	.word	0x08017ec4
 80015f4:	08017ef4 	.word	0x08017ef4
 80015f8:	08017f0c 	.word	0x08017f0c
 80015fc:	08017f14 	.word	0x08017f14
 8001600:	08017f3c 	.word	0x08017f3c
 8001604:	08017f90 	.word	0x08017f90
 8001608:	08017fa4 	.word	0x08017fa4
 800160c:	08017fc0 	.word	0x08017fc0
        }
    }
    else if (strncmp(cmd, "SETCONFIG ", 10) == 0)
 8001610:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001614:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001618:	220a      	movs	r2, #10
 800161a:	497c      	ldr	r1, [pc, #496]	@ (800180c <ParseCommand+0x570>)
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	f013 fa5a 	bl	8014ad6 <strncmp>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	f040 80e7 	bne.w	80017f8 <ParseCommand+0x55c>
    {
        SystemConfig newConfig;
        newConfig.magic = CONFIG_MAGIC;
 800162a:	4b79      	ldr	r3, [pc, #484]	@ (8001810 <ParseCommand+0x574>)
 800162c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

        char tempStr[128];
        strncpy(tempStr, cmd + 10, sizeof(tempStr) - 1);
 8001630:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001634:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f103 010a 	add.w	r1, r3, #10
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	227f      	movs	r2, #127	@ 0x7f
 8001644:	4618      	mov	r0, r3
 8001646:	f013 fa58 	bl	8014afa <strncpy>
        tempStr[sizeof(tempStr) - 1] = '\0';
 800164a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800164e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001652:	2200      	movs	r2, #0
 8001654:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

        char* token = strtok(tempStr, " ");
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	496d      	ldr	r1, [pc, #436]	@ (8001814 <ParseCommand+0x578>)
 800165e:	4618      	mov	r0, r3
 8001660:	f013 fa5e 	bl	8014b20 <strtok>
 8001664:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
        printf("DEBUG parsed voltage_min: %.3f\r\n", newConfig.voltage_min);
 8001668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff7b 	bl	8000568 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4868      	ldr	r0, [pc, #416]	@ (8001818 <ParseCommand+0x57c>)
 8001678:	f013 f9a8 	bl	80149cc <iprintf>
        while (token != NULL) {
 800167c:	e06d      	b.n	800175a <ParseCommand+0x4be>
            if (strncmp(token, "temp_min=", 9) == 0)
 800167e:	2209      	movs	r2, #9
 8001680:	4966      	ldr	r1, [pc, #408]	@ (800181c <ParseCommand+0x580>)
 8001682:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8001686:	f013 fa26 	bl	8014ad6 <strncmp>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10a      	bne.n	80016a6 <ParseCommand+0x40a>
                newConfig.temp_min = atoi(token + 9);
 8001690:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001694:	3309      	adds	r3, #9
 8001696:	4618      	mov	r0, r3
 8001698:	f011 fb09 	bl	8012cae <atoi>
 800169c:	4603      	mov	r3, r0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 80016a4:	e053      	b.n	800174e <ParseCommand+0x4b2>
            else if (strncmp(token, "temp_max=", 9) == 0)
 80016a6:	2209      	movs	r2, #9
 80016a8:	495d      	ldr	r1, [pc, #372]	@ (8001820 <ParseCommand+0x584>)
 80016aa:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80016ae:	f013 fa12 	bl	8014ad6 <strncmp>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10a      	bne.n	80016ce <ParseCommand+0x432>
                newConfig.temp_max = atoi(token + 9);
 80016b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80016bc:	3309      	adds	r3, #9
 80016be:	4618      	mov	r0, r3
 80016c0:	f011 faf5 	bl	8012cae <atoi>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 80016cc:	e03f      	b.n	800174e <ParseCommand+0x4b2>
            else if (strncmp(token, "humidity_min=", 13) == 0)
 80016ce:	220d      	movs	r2, #13
 80016d0:	4954      	ldr	r1, [pc, #336]	@ (8001824 <ParseCommand+0x588>)
 80016d2:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80016d6:	f013 f9fe 	bl	8014ad6 <strncmp>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <ParseCommand+0x45a>
                newConfig.humidity_min = atoi(token + 13);
 80016e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80016e4:	330d      	adds	r3, #13
 80016e6:	4618      	mov	r0, r3
 80016e8:	f011 fae1 	bl	8012cae <atoi>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 80016f4:	e02b      	b.n	800174e <ParseCommand+0x4b2>
            else if (strncmp(token, "light_min=", 10) == 0)
 80016f6:	220a      	movs	r2, #10
 80016f8:	494b      	ldr	r1, [pc, #300]	@ (8001828 <ParseCommand+0x58c>)
 80016fa:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80016fe:	f013 f9ea 	bl	8014ad6 <strncmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10a      	bne.n	800171e <ParseCommand+0x482>
                newConfig.light_min = atoi(token + 10);
 8001708:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800170c:	330a      	adds	r3, #10
 800170e:	4618      	mov	r0, r3
 8001710:	f011 facd 	bl	8012cae <atoi>
 8001714:	4603      	mov	r3, r0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 800171c:	e017      	b.n	800174e <ParseCommand+0x4b2>
            else if (strncmp(token, "voltage_min=", 12) == 0)
 800171e:	220c      	movs	r2, #12
 8001720:	4942      	ldr	r1, [pc, #264]	@ (800182c <ParseCommand+0x590>)
 8001722:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8001726:	f013 f9d6 	bl	8014ad6 <strncmp>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10e      	bne.n	800174e <ParseCommand+0x4b2>
                newConfig.voltage_min = atof(token + 12);
 8001730:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001734:	330c      	adds	r3, #12
 8001736:	4618      	mov	r0, r3
 8001738:	f011 fab6 	bl	8012ca8 <atof>
 800173c:	ec53 2b10 	vmov	r2, r3, d0
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa60 	bl	8000c08 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

            token = strtok(NULL, " ");
 800174e:	4931      	ldr	r1, [pc, #196]	@ (8001814 <ParseCommand+0x578>)
 8001750:	2000      	movs	r0, #0
 8001752:	f013 f9e5 	bl	8014b20 <strtok>
 8001756:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
        while (token != NULL) {
 800175a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800175e:	2b00      	cmp	r3, #0
 8001760:	d18d      	bne.n	800167e <ParseCommand+0x3e2>
        }

        Config_Set(newConfig);
 8001762:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800176a:	f000 f96d 	bl	8001a48 <Config_Set>
        FlashConfig_Save(&newConfig);
 800176e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fcbe 	bl	80020f4 <FlashConfig_Save>

        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
               newConfig.temp_min, newConfig.temp_max,
 8001778:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 800177c:	461d      	mov	r5, r3
               newConfig.temp_min, newConfig.temp_max,
 800177e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 8001782:	461e      	mov	r6, r3
               newConfig.humidity_min, newConfig.light_min, newConfig.voltage_min);
 8001784:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 8001788:	4698      	mov	r8, r3
               newConfig.humidity_min, newConfig.light_min, newConfig.voltage_min);
 800178a:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 800178e:	461c      	mov	r4, r3
               newConfig.humidity_min, newConfig.light_min, newConfig.voltage_min);
 8001790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fee7 	bl	8000568 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017a2:	9400      	str	r4, [sp, #0]
 80017a4:	4643      	mov	r3, r8
 80017a6:	4632      	mov	r2, r6
 80017a8:	4629      	mov	r1, r5
 80017aa:	4821      	ldr	r0, [pc, #132]	@ (8001830 <ParseCommand+0x594>)
 80017ac:	f013 f90e 	bl	80149cc <iprintf>

        SystemEvent event = {
 80017b0:	2301      	movs	r3, #1
 80017b2:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
            .type = EVENT_CONFIG_UPDATED,
            .date = g_dt->date,
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <ParseCommand+0x598>)
 80017c4:	681a      	ldr	r2, [r3, #0]
        SystemEvent event = {
 80017c6:	f107 039f 	add.w	r3, r7, #159	@ 0x9f
 80017ca:	3204      	adds	r2, #4
 80017cc:	8811      	ldrh	r1, [r2, #0]
 80017ce:	7892      	ldrb	r2, [r2, #2]
 80017d0:	8019      	strh	r1, [r3, #0]
 80017d2:	709a      	strb	r2, [r3, #2]
            .time = g_dt->time,
 80017d4:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <ParseCommand+0x598>)
 80017d6:	681a      	ldr	r2, [r3, #0]
        SystemEvent event = {
 80017d8:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 80017dc:	3207      	adds	r2, #7
 80017de:	8811      	ldrh	r1, [r2, #0]
 80017e0:	7892      	ldrb	r2, [r2, #2]
 80017e2:	8019      	strh	r1, [r3, #0]
 80017e4:	709a      	strb	r2, [r3, #2]
            .old_mode = 0,
            .new_mode = 0
        };
        osMessageQueuePut(eventQueueHandle, &event, 0, 0);
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <ParseCommand+0x59c>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 80017ee:	2300      	movs	r3, #0
 80017f0:	2200      	movs	r2, #0
 80017f2:	f00d fb5f 	bl	800eeb4 <osMessageQueuePut>
 80017f6:	e004      	b.n	8001802 <ParseCommand+0x566>
    }


    else
    {
        printf("Unknown command.\r\n");
 80017f8:	4810      	ldr	r0, [pc, #64]	@ (800183c <ParseCommand+0x5a0>)
 80017fa:	f013 f94f 	bl	8014a9c <puts>
 80017fe:	e000      	b.n	8001802 <ParseCommand+0x566>
		return;
 8001800:	bf00      	nop
    }
}
 8001802:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001806:	46bd      	mov	sp, r7
 8001808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800180c:	08017fe0 	.word	0x08017fe0
 8001810:	deadbeef 	.word	0xdeadbeef
 8001814:	08017fec 	.word	0x08017fec
 8001818:	08017ff0 	.word	0x08017ff0
 800181c:	08018014 	.word	0x08018014
 8001820:	08018020 	.word	0x08018020
 8001824:	0801802c 	.word	0x0801802c
 8001828:	0801803c 	.word	0x0801803c
 800182c:	08018048 	.word	0x08018048
 8001830:	08018058 	.word	0x08018058
 8001834:	2000032c 	.word	0x2000032c
 8001838:	20000310 	.word	0x20000310
 800183c:	08018088 	.word	0x08018088

08001840 <ParseCommand_New>:

void ParseCommand_New(const char* rawMessage)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b08b      	sub	sp, #44	@ 0x2c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
    printf("ParseCommandNew received: '%s'\r\n", rawMessage);
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	4838      	ldr	r0, [pc, #224]	@ (800192c <ParseCommand_New+0xec>)
 800184c:	f013 f8be 	bl	80149cc <iprintf>
    char tag[16];
    int length;
    const char* payload;

    // Try parsing the tag and length
    int parsed = sscanf(rawMessage, "%15s %d", tag, &length);
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	f107 0210 	add.w	r2, r7, #16
 8001858:	4935      	ldr	r1, [pc, #212]	@ (8001930 <ParseCommand_New+0xf0>)
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f012 f8e6 	bl	8013a2c <siscanf>
 8001860:	6278      	str	r0, [r7, #36]	@ 0x24
    if (parsed != 2) {
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	2b02      	cmp	r3, #2
 8001866:	d003      	beq.n	8001870 <ParseCommand_New+0x30>
        printf("Invalid command format. Expected: <TAG> <LENGTH> <DATA>\r\n");
 8001868:	4832      	ldr	r0, [pc, #200]	@ (8001934 <ParseCommand_New+0xf4>)
 800186a:	f013 f917 	bl	8014a9c <puts>
        return;
 800186e:	e059      	b.n	8001924 <ParseCommand_New+0xe4>
    }

    payload = strchr(rawMessage, ' ');
 8001870:	2120      	movs	r1, #32
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f013 f922 	bl	8014abc <strchr>
 8001878:	6238      	str	r0, [r7, #32]
    if (!payload) return;
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d04e      	beq.n	800191e <ParseCommand_New+0xde>
    payload++;
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	3301      	adds	r3, #1
 8001884:	623b      	str	r3, [r7, #32]

    payload = strchr(payload, ' ');
 8001886:	2120      	movs	r1, #32
 8001888:	6a38      	ldr	r0, [r7, #32]
 800188a:	f013 f917 	bl	8014abc <strchr>
 800188e:	6238      	str	r0, [r7, #32]
    if (!payload) return;
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d045      	beq.n	8001922 <ParseCommand_New+0xe2>
    payload++;
 8001896:	6a3b      	ldr	r3, [r7, #32]
 8001898:	3301      	adds	r3, #1
 800189a:	623b      	str	r3, [r7, #32]

    if ((int)strlen(payload) != length) {
 800189c:	6a38      	ldr	r0, [r7, #32]
 800189e:	f7fe fcf7 	bl	8000290 <strlen>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d00a      	beq.n	80018c2 <ParseCommand_New+0x82>
    	printf("Length mismatch. Declared: %d, Actual: %u\r\n", length, (unsigned int)strlen(payload));
 80018ac:	68fc      	ldr	r4, [r7, #12]
 80018ae:	6a38      	ldr	r0, [r7, #32]
 80018b0:	f7fe fcee 	bl	8000290 <strlen>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4621      	mov	r1, r4
 80018ba:	481f      	ldr	r0, [pc, #124]	@ (8001938 <ParseCommand_New+0xf8>)
 80018bc:	f013 f886 	bl	80149cc <iprintf>
        return;
 80018c0:	e030      	b.n	8001924 <ParseCommand_New+0xe4>
    }

    if (strcmp(tag, "SETTIME") == 0) {
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	491d      	ldr	r1, [pc, #116]	@ (800193c <ParseCommand_New+0xfc>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fc81 	bl	80001d0 <strcmp>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <ParseCommand_New+0x9c>
        ParseCommand(payload);
 80018d4:	6a38      	ldr	r0, [r7, #32]
 80018d6:	f7ff fce1 	bl	800129c <ParseCommand>
 80018da:	e023      	b.n	8001924 <ParseCommand_New+0xe4>
    } else if (strcmp(tag, "GET") == 0) {
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4917      	ldr	r1, [pc, #92]	@ (8001940 <ParseCommand_New+0x100>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fc74 	bl	80001d0 <strcmp>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d103      	bne.n	80018f6 <ParseCommand_New+0xb6>
        ParseCommand(payload);
 80018ee:	6a38      	ldr	r0, [r7, #32]
 80018f0:	f7ff fcd4 	bl	800129c <ParseCommand>
 80018f4:	e016      	b.n	8001924 <ParseCommand_New+0xe4>
    } else if (strcmp(tag, "SETCONFIG") == 0) {
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	4912      	ldr	r1, [pc, #72]	@ (8001944 <ParseCommand_New+0x104>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fc67 	bl	80001d0 <strcmp>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d103      	bne.n	8001910 <ParseCommand_New+0xd0>
        ParseCommand(payload);
 8001908:	6a38      	ldr	r0, [r7, #32]
 800190a:	f7ff fcc7 	bl	800129c <ParseCommand>
 800190e:	e009      	b.n	8001924 <ParseCommand_New+0xe4>
    } else {
        printf("Unknown TAG: %s\r\n", tag);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4619      	mov	r1, r3
 8001916:	480c      	ldr	r0, [pc, #48]	@ (8001948 <ParseCommand_New+0x108>)
 8001918:	f013 f858 	bl	80149cc <iprintf>
 800191c:	e002      	b.n	8001924 <ParseCommand_New+0xe4>
    if (!payload) return;
 800191e:	bf00      	nop
 8001920:	e000      	b.n	8001924 <ParseCommand_New+0xe4>
    if (!payload) return;
 8001922:	bf00      	nop
    }
}
 8001924:	372c      	adds	r7, #44	@ 0x2c
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	0801809c 	.word	0x0801809c
 8001930:	080180c0 	.word	0x080180c0
 8001934:	080180c8 	.word	0x080180c8
 8001938:	08018104 	.word	0x08018104
 800193c:	08018130 	.word	0x08018130
 8001940:	08018138 	.word	0x08018138
 8001944:	0801813c 	.word	0x0801813c
 8001948:	08018148 	.word	0x08018148

0800194c <Date_Compare>:


static int Date_Compare(Date* a, Date* b)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
    if (a->year != b->year)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	789a      	ldrb	r2, [r3, #2]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	789b      	ldrb	r3, [r3, #2]
 800195e:	429a      	cmp	r2, r3
 8001960:	d006      	beq.n	8001970 <Date_Compare+0x24>
        return a->year - b->year;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	789b      	ldrb	r3, [r3, #2]
 8001966:	461a      	mov	r2, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	789b      	ldrb	r3, [r3, #2]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	e012      	b.n	8001996 <Date_Compare+0x4a>
    if (a->month != b->month)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	785a      	ldrb	r2, [r3, #1]
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	785b      	ldrb	r3, [r3, #1]
 8001978:	429a      	cmp	r2, r3
 800197a:	d006      	beq.n	800198a <Date_Compare+0x3e>
        return a->month - b->month;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	461a      	mov	r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	785b      	ldrb	r3, [r3, #1]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	e005      	b.n	8001996 <Date_Compare+0x4a>
    return a->day - b->day;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	1ad3      	subs	r3, r2, r3
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <Config_Init>:
    .light_min = 20,
    .voltage_min = 4
};

void Config_Init(void)
{
 80019a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af04      	add	r7, sp, #16
    FlashConfig_Load(&config);
 80019ac:	481e      	ldr	r0, [pc, #120]	@ (8001a28 <Config_Init+0x84>)
 80019ae:	f000 fbe5 	bl	800217c <FlashConfig_Load>

    if (config.magic != CONFIG_MAGIC)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <Config_Init+0x84>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <Config_Init+0x88>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d015      	beq.n	80019e8 <Config_Init+0x44>
    {
        config.temp_min = 15;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <Config_Init+0x84>)
 80019be:	220f      	movs	r2, #15
 80019c0:	701a      	strb	r2, [r3, #0]
        config.temp_max = 35;
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <Config_Init+0x84>)
 80019c4:	2223      	movs	r2, #35	@ 0x23
 80019c6:	705a      	strb	r2, [r3, #1]
        config.humidity_min = 20;
 80019c8:	4b17      	ldr	r3, [pc, #92]	@ (8001a28 <Config_Init+0x84>)
 80019ca:	2214      	movs	r2, #20
 80019cc:	709a      	strb	r2, [r3, #2]
        config.light_min = 20;
 80019ce:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <Config_Init+0x84>)
 80019d0:	2214      	movs	r2, #20
 80019d2:	70da      	strb	r2, [r3, #3]
        config.voltage_min = 4.0;
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <Config_Init+0x84>)
 80019d6:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80019da:	605a      	str	r2, [r3, #4]
        config.magic = CONFIG_MAGIC;
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <Config_Init+0x84>)
 80019de:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <Config_Init+0x88>)
 80019e0:	609a      	str	r2, [r3, #8]

        FlashConfig_Save(&config);
 80019e2:	4811      	ldr	r0, [pc, #68]	@ (8001a28 <Config_Init+0x84>)
 80019e4:	f000 fb86 	bl	80020f4 <FlashConfig_Save>
    }

    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
        config.temp_min, config.temp_max, config.humidity_min,
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <Config_Init+0x84>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 80019ec:	461d      	mov	r5, r3
        config.temp_min, config.temp_max, config.humidity_min,
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <Config_Init+0x84>)
 80019f0:	785b      	ldrb	r3, [r3, #1]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 80019f2:	461e      	mov	r6, r3
        config.temp_min, config.temp_max, config.humidity_min,
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <Config_Init+0x84>)
 80019f6:	789b      	ldrb	r3, [r3, #2]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 80019f8:	4698      	mov	r8, r3
        config.light_min, config.voltage_min);
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <Config_Init+0x84>)
 80019fc:	78db      	ldrb	r3, [r3, #3]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 80019fe:	461c      	mov	r4, r3
        config.light_min, config.voltage_min);
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <Config_Init+0x84>)
 8001a02:	685b      	ldr	r3, [r3, #4]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fdaf 	bl	8000568 <__aeabi_f2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a12:	9400      	str	r4, [sp, #0]
 8001a14:	4643      	mov	r3, r8
 8001a16:	4632      	mov	r2, r6
 8001a18:	4629      	mov	r1, r5
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <Config_Init+0x8c>)
 8001a1c:	f012 ffd6 	bl	80149cc <iprintf>
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	deadbeef 	.word	0xdeadbeef
 8001a30:	0801815c 	.word	0x0801815c

08001a34 <Config_Get>:


SystemConfig* Config_Get(void) {
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
    return &config;
 8001a38:	4b02      	ldr	r3, [pc, #8]	@ (8001a44 <Config_Get+0x10>)
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	20000000 	.word	0x20000000

08001a48 <Config_Set>:

void Config_Set(SystemConfig newConfig) {
 8001a48:	b490      	push	{r4, r7}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    config = newConfig;
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <Config_Set+0x24>)
 8001a56:	461c      	mov	r4, r3
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc90      	pop	{r4, r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	20000000 	.word	0x20000000

08001a70 <DateTimeCreate>:
    31, 28, 31, 30, 31, 30,
    31, 31, 30, 31, 30, 31
};

DateTime* DateTimeCreate(RTC_HandleTypeDef *hrtc)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	if(dt.hrtc == NULL) {
 8001a78:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <DateTimeCreate+0x30>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d107      	bne.n	8001a90 <DateTimeCreate+0x20>

		if(hrtc == NULL) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <DateTimeCreate+0x1a>
			return NULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e003      	b.n	8001a92 <DateTimeCreate+0x22>
		}

		dt.hrtc = hrtc;
 8001a8a:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <DateTimeCreate+0x30>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6013      	str	r3, [r2, #0]

	}

	return &dt;
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <DateTimeCreate+0x30>)
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	200002ec 	.word	0x200002ec

08001aa4 <DateTimeGet>:

DateTimeStatus DateTimeGet(DateTime *dt)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	if(dt == NULL) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <DateTimeGet+0x12>
		return DateTime_INVALID;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e022      	b.n	8001afc <DateTimeGet+0x58>
	}

	RTC_TimeTypeDef CurrentTime;
	RTC_DateTypeDef CurrentDate;

	if (HAL_RTC_GetTime(dt->hrtc, &CurrentTime, RTC_FORMAT_BCD) != HAL_OK) {
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f107 010c 	add.w	r1, r7, #12
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f006 f88c 	bl	8007bde <HAL_RTC_GetTime>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <DateTimeGet+0x2c>
		return DateTime_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e015      	b.n	8001afc <DateTimeGet+0x58>
	}

	if (HAL_RTC_GetDate(dt->hrtc, &CurrentDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f107 0108 	add.w	r1, r7, #8
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f006 f962 	bl	8007da4 <HAL_RTC_GetDate>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <DateTimeGet+0x46>
		return DateTime_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e008      	b.n	8001afc <DateTimeGet+0x58>
	}

	PopulateDateTime(dt, &CurrentTime, &CurrentDate);
 8001aea:	f107 0208 	add.w	r2, r7, #8
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4619      	mov	r1, r3
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f882 	bl	8001bfe <PopulateDateTime>

	return DateTime_OK;
 8001afa:	2300      	movs	r3, #0

}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <DateTimeSetTime>:

DateTimeStatus DateTimeSetTime(DateTime *dt, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	70fb      	strb	r3, [r7, #3]
 8001b16:	460b      	mov	r3, r1
 8001b18:	70bb      	strb	r3, [r7, #2]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	707b      	strb	r3, [r7, #1]
	if(dt == NULL || hours >= 24 || minutes >= 60 || seconds >= 60) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <DateTimeSetTime+0x32>
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	2b17      	cmp	r3, #23
 8001b28:	d805      	bhi.n	8001b36 <DateTimeSetTime+0x32>
 8001b2a:	78bb      	ldrb	r3, [r7, #2]
 8001b2c:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b2e:	d802      	bhi.n	8001b36 <DateTimeSetTime+0x32>
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b34:	d901      	bls.n	8001b3a <DateTimeSetTime+0x36>
			return DateTime_INVALID;
 8001b36:	2302      	movs	r3, #2
 8001b38:	e01f      	b.n	8001b7a <DateTimeSetTime+0x76>
	}

	RTC_TimeTypeDef time;

	time.Hours = ConvertDec2Bcd(hours);
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f8b7 	bl	8001cb0 <ConvertDec2Bcd>
 8001b42:	4603      	mov	r3, r0
 8001b44:	733b      	strb	r3, [r7, #12]
	time.Minutes = ConvertDec2Bcd(minutes);
 8001b46:	78bb      	ldrb	r3, [r7, #2]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f8b1 	bl	8001cb0 <ConvertDec2Bcd>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	737b      	strb	r3, [r7, #13]
	time.Seconds = ConvertDec2Bcd(seconds);
 8001b52:	787b      	ldrb	r3, [r7, #1]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 f8ab 	bl	8001cb0 <ConvertDec2Bcd>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73bb      	strb	r3, [r7, #14]

	if (HAL_RTC_SetTime(dt->hrtc, &time, RTC_FORMAT_BCD) != HAL_OK) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f107 010c 	add.w	r1, r7, #12
 8001b66:	2201      	movs	r2, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f005 ff9b 	bl	8007aa4 <HAL_RTC_SetTime>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <DateTimeSetTime+0x74>
		return DateTime_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <DateTimeSetTime+0x76>
	}

	return DateTime_OK;
 8001b78:	2300      	movs	r3, #0

}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <DateTimeSetDate>:

DateTimeStatus DateTimeSetDate(DateTime *dt, uint8_t year, uint8_t month, uint8_t day)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	4608      	mov	r0, r1
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	70fb      	strb	r3, [r7, #3]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70bb      	strb	r3, [r7, #2]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	707b      	strb	r3, [r7, #1]
	if(dt == NULL || month > 12 || day > 31) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <DateTimeSetDate+0x2c>
 8001ba2:	78bb      	ldrb	r3, [r7, #2]
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d802      	bhi.n	8001bae <DateTimeSetDate+0x2c>
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b1f      	cmp	r3, #31
 8001bac:	d901      	bls.n	8001bb2 <DateTimeSetDate+0x30>
			return DateTime_INVALID;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e021      	b.n	8001bf6 <DateTimeSetDate+0x74>
	}

	RTC_DateTypeDef date;

	date.Year = ConvertDec2Bcd(year);
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f87b 	bl	8001cb0 <ConvertDec2Bcd>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]
	date.Month = ConvertDec2Bcd(month);
 8001bbe:	78bb      	ldrb	r3, [r7, #2]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f875 	bl	8001cb0 <ConvertDec2Bcd>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	737b      	strb	r3, [r7, #13]
	date.Date = ConvertDec2Bcd(day);
 8001bca:	787b      	ldrb	r3, [r7, #1]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 f86f 	bl	8001cb0 <ConvertDec2Bcd>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73bb      	strb	r3, [r7, #14]
	date.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	733b      	strb	r3, [r7, #12]

	if (HAL_RTC_SetDate(dt->hrtc, &date, RTC_FORMAT_BCD) != HAL_OK) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f107 010c 	add.w	r1, r7, #12
 8001be2:	2201      	movs	r2, #1
 8001be4:	4618      	mov	r0, r3
 8001be6:	f006 f856 	bl	8007c96 <HAL_RTC_SetDate>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <DateTimeSetDate+0x72>
		return DateTime_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <DateTimeSetDate+0x74>
	}

	return DateTime_OK;
 8001bf4:	2300      	movs	r3, #0

}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <PopulateDateTime>:

	return DateTime_OK;
}

static void PopulateDateTime(DateTime* dt, RTC_TimeTypeDef* CurrentTime, RTC_DateTypeDef* CurrentDate)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
	dt->time.hours = ConvertBcd2Dec(CurrentTime->Hours);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f835 	bl	8001c7e <ConvertBcd2Dec>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	71da      	strb	r2, [r3, #7]
	dt->time.minutes = ConvertBcd2Dec(CurrentTime->Minutes);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	785b      	ldrb	r3, [r3, #1]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f82c 	bl	8001c7e <ConvertBcd2Dec>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461a      	mov	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	721a      	strb	r2, [r3, #8]
	dt->time.seconds = ConvertBcd2Dec(CurrentTime->Seconds);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	789b      	ldrb	r3, [r3, #2]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f823 	bl	8001c7e <ConvertBcd2Dec>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	725a      	strb	r2, [r3, #9]

	dt->date.year  = ConvertBcd2Dec(CurrentDate->Year);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	78db      	ldrb	r3, [r3, #3]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f81a 	bl	8001c7e <ConvertBcd2Dec>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	719a      	strb	r2, [r3, #6]
	dt->date.month = ConvertBcd2Dec(CurrentDate->Month);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 f811 	bl	8001c7e <ConvertBcd2Dec>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	715a      	strb	r2, [r3, #5]
	dt->date.day   = ConvertBcd2Dec(CurrentDate->Date);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 f808 	bl	8001c7e <ConvertBcd2Dec>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461a      	mov	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	711a      	strb	r2, [r3, #4]
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <ConvertBcd2Dec>:

static uint8_t ConvertBcd2Dec(uint8_t byte)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
	return ((byte >> 4) * 10) + (byte & 0x0F);
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b2db      	uxtb	r3, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <ConvertDec2Bcd>:

static uint8_t ConvertDec2Bcd(uint8_t byte)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	71fb      	strb	r3, [r7, #7]
	return ((byte / 10) << 4) | (byte % 10);
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001cf8 <ConvertDec2Bcd+0x48>)
 8001cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc2:	08db      	lsrs	r3, r3, #3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	b258      	sxtb	r0, r3
 8001ccc:	79fa      	ldrb	r2, [r7, #7]
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <ConvertDec2Bcd+0x48>)
 8001cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd4:	08d9      	lsrs	r1, r3, #3
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	4303      	orrs	r3, r0
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	cccccccd 	.word	0xcccccccd

08001cfc <DateTime_NextDay>:

void DateTime_NextDay(Date* date)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
    if (!date) return;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d027      	beq.n	8001d5a <DateTime_NextDay+0x5e>

    date->day++;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	701a      	strb	r2, [r3, #0]

    uint8_t maxDay = daysInMonth[date->month - 1];
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <DateTime_NextDay+0x6c>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	73fb      	strb	r3, [r7, #15]

    if (date->day > maxDay)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d217      	bcs.n	8001d5c <DateTime_NextDay+0x60>
    {
        date->day = 1;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
        date->month++;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	705a      	strb	r2, [r3, #1]

        if (date->month > 12)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	785b      	ldrb	r3, [r3, #1]
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d90a      	bls.n	8001d5c <DateTime_NextDay+0x60>
        {
            date->month = 1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	705a      	strb	r2, [r3, #1]
            date->year++;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	789b      	ldrb	r3, [r3, #2]
 8001d50:	3301      	adds	r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	709a      	strb	r2, [r3, #2]
 8001d58:	e000      	b.n	8001d5c <DateTime_NextDay+0x60>
    if (!date) return;
 8001d5a:	bf00      	nop
        }
    }
}
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	08018568 	.word	0x08018568

08001d6c <DateTime_Compare>:

int DateTime_Compare(const DateTime* a, const DateTime* b)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
    if (a->date.year != b->date.year)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	799a      	ldrb	r2, [r3, #6]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	799b      	ldrb	r3, [r3, #6]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d006      	beq.n	8001d90 <DateTime_Compare+0x24>
        return a->date.year - b->date.year;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	799b      	ldrb	r3, [r3, #6]
 8001d86:	461a      	mov	r2, r3
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	799b      	ldrb	r3, [r3, #6]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	e039      	b.n	8001e04 <DateTime_Compare+0x98>
    if (a->date.month != b->date.month)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	795a      	ldrb	r2, [r3, #5]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	795b      	ldrb	r3, [r3, #5]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d006      	beq.n	8001daa <DateTime_Compare+0x3e>
        return a->date.month - b->date.month;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	795b      	ldrb	r3, [r3, #5]
 8001da0:	461a      	mov	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	795b      	ldrb	r3, [r3, #5]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	e02c      	b.n	8001e04 <DateTime_Compare+0x98>
    if (a->date.day != b->date.day)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	791a      	ldrb	r2, [r3, #4]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	791b      	ldrb	r3, [r3, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d006      	beq.n	8001dc4 <DateTime_Compare+0x58>
        return a->date.day - b->date.day;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	791b      	ldrb	r3, [r3, #4]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	791b      	ldrb	r3, [r3, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	e01f      	b.n	8001e04 <DateTime_Compare+0x98>
    if (a->time.hours != b->time.hours)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	79da      	ldrb	r2, [r3, #7]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	79db      	ldrb	r3, [r3, #7]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d006      	beq.n	8001dde <DateTime_Compare+0x72>
        return a->time.hours - b->time.hours;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	79db      	ldrb	r3, [r3, #7]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	79db      	ldrb	r3, [r3, #7]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	e012      	b.n	8001e04 <DateTime_Compare+0x98>
    if (a->time.minutes != b->time.minutes)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7a1a      	ldrb	r2, [r3, #8]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7a1b      	ldrb	r3, [r3, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d006      	beq.n	8001df8 <DateTime_Compare+0x8c>
        return a->time.minutes - b->time.minutes;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7a1b      	ldrb	r3, [r3, #8]
 8001dee:	461a      	mov	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	7a1b      	ldrb	r3, [r3, #8]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	e005      	b.n	8001e04 <DateTime_Compare+0x98>
    return a->time.seconds - b->time.seconds;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7a5b      	ldrb	r3, [r3, #9]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	7a5b      	ldrb	r3, [r3, #9]
 8001e02:	1ad3      	subs	r3, r2, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <DHT_Init>:

DHT11 dht = {0};
DHT11_Data data = {0};

DHT11* DHT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN, TIM_HandleTypeDef* _timer)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	817b      	strh	r3, [r7, #10]
	dht.port = GPIOx;
 8001e1e:	4a08      	ldr	r2, [pc, #32]	@ (8001e40 <DHT_Init+0x30>)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6013      	str	r3, [r2, #0]
	dht.pin = GPIO_PIN;
 8001e24:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <DHT_Init+0x30>)
 8001e26:	897b      	ldrh	r3, [r7, #10]
 8001e28:	8093      	strh	r3, [r2, #4]
	dht._timer = _timer;
 8001e2a:	4a05      	ldr	r2, [pc, #20]	@ (8001e40 <DHT_Init+0x30>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6093      	str	r3, [r2, #8]

	return &dht;
 8001e30:	4b03      	ldr	r3, [pc, #12]	@ (8001e40 <DHT_Init+0x30>)
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200002f8 	.word	0x200002f8

08001e44 <DHT11_SetAsInput>:

void DHT11_SetAsInput(DHT11* dht)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 030c 	add.w	r3, r7, #12
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->pin;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	889b      	ldrh	r3, [r3, #4]
 8001e60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e66:	2301      	movs	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f107 020c 	add.w	r2, r7, #12
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 f855 	bl	8005f24 <HAL_GPIO_Init>
}
 8001e7a:	bf00      	nop
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <DHT11_SetAsOutput>:

void DHT11_SetAsOutput(DHT11* dht)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b088      	sub	sp, #32
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->pin;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	889b      	ldrh	r3, [r3, #4]
 8001e9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f107 020c 	add.w	r2, r7, #12
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 f834 	bl	8005f24 <HAL_GPIO_Init>
}
 8001ebc:	bf00      	nop
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <DHT11_Starter>:

void DHT11_Starter(DHT11* dht)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	DHT11_SetAsOutput(dht);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ffd8 	bl	8001e82 <DHT11_SetAsOutput>

	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	4619      	mov	r1, r3
 8001ede:	f004 f9e3 	bl	80062a8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(dht->_timer) < 18000);
 8001eec:	bf00      	nop
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef6:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d9f7      	bls.n	8001eee <DHT11_Starter+0x2a>

	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_SET);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	889b      	ldrh	r3, [r3, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f004 f9cd 	bl	80062a8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(dht->_timer) < 40);
 8001f18:	bf00      	nop
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	2b27      	cmp	r3, #39	@ 0x27
 8001f24:	d9f9      	bls.n	8001f1a <DHT11_Starter+0x56>

	DHT11_SetAsInput(dht);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ff8c 	bl	8001e44 <DHT11_SetAsInput>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <DHT11_ReadData>:

uint8_t DHT11_ReadData(DHT11 *dht, DHT11_Data *data)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
	uint8_t buffer[5] = {0};
 8001f3e:	f107 0308 	add.w	r3, r7, #8
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	711a      	strb	r2, [r3, #4]

	DHT11_Starter(dht);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ffbb 	bl	8001ec4 <DHT11_Starter>

	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)
 8001f58:	e007      	b.n	8001f6a <DHT11_ReadData+0x36>
	{
		if (__HAL_TIM_GET_COUNTER(dht->_timer) > 100) return 3;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <DHT11_ReadData+0x36>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e071      	b.n	800204e <DHT11_ReadData+0x11a>
	while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	889b      	ldrh	r3, [r3, #4]
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f004 f97f 	bl	8006278 <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ec      	beq.n	8001f5a <DHT11_ReadData+0x26>
	}

	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 8001f8a:	e007      	b.n	8001f9c <DHT11_ReadData+0x68>
	{
		if (__HAL_TIM_GET_COUNTER(dht->_timer) > 100) return 3;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	2b64      	cmp	r3, #100	@ 0x64
 8001f96:	d901      	bls.n	8001f9c <DHT11_ReadData+0x68>
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e058      	b.n	800204e <DHT11_ReadData+0x11a>
	while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	889b      	ldrh	r3, [r3, #4]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f004 f966 	bl	8006278 <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d0ec      	beq.n	8001f8c <DHT11_ReadData+0x58>
	}

	for (uint8_t i = 0; i < 40; i++) {
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
 8001fb6:	e027      	b.n	8002008 <DHT11_ReadData+0xd4>
		buffer[i / 8] <<= 1;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	08db      	lsrs	r3, r3, #3
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	3310      	adds	r3, #16
 8001fc2:	443b      	add	r3, r7
 8001fc4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	f101 0310 	add.w	r3, r1, #16
 8001fd2:	443b      	add	r3, r7
 8001fd4:	f803 2c08 	strb.w	r2, [r3, #-8]
		buffer[i / 8] |= DHT11_ReadBit(dht);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f83c 	bl	8002056 <DHT11_ReadBit>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	4613      	mov	r3, r2
 8001fea:	3310      	adds	r3, #16
 8001fec:	443b      	add	r3, r7
 8001fee:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4303      	orrs	r3, r0
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	f101 0310 	add.w	r3, r1, #16
 8001ffc:	443b      	add	r3, r7
 8001ffe:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 40; i++) {
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	3301      	adds	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	2b27      	cmp	r3, #39	@ 0x27
 800200c:	d9d4      	bls.n	8001fb8 <DHT11_ReadData+0x84>
	}

	data->humidity_int = buffer[0];
 800200e:	7a3a      	ldrb	r2, [r7, #8]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	701a      	strb	r2, [r3, #0]
	data->humidity_dec = buffer[1];
 8002014:	7a7a      	ldrb	r2, [r7, #9]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	705a      	strb	r2, [r3, #1]
	data->temperature_int = buffer[2];
 800201a:	7aba      	ldrb	r2, [r7, #10]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	709a      	strb	r2, [r3, #2]
	data->temperature_dec = buffer[3];
 8002020:	7afa      	ldrb	r2, [r7, #11]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	70da      	strb	r2, [r3, #3]
	data->checksum = buffer[4];
 8002026:	7b3a      	ldrb	r2, [r7, #12]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	711a      	strb	r2, [r3, #4]


	uint8_t checksum = buffer[0] + buffer[1] + buffer[2] + buffer[3];
 800202c:	7a3a      	ldrb	r2, [r7, #8]
 800202e:	7a7b      	ldrb	r3, [r7, #9]
 8002030:	4413      	add	r3, r2
 8002032:	b2da      	uxtb	r2, r3
 8002034:	7abb      	ldrb	r3, [r7, #10]
 8002036:	4413      	add	r3, r2
 8002038:	b2da      	uxtb	r2, r3
 800203a:	7afb      	ldrb	r3, [r7, #11]
 800203c:	4413      	add	r3, r2
 800203e:	73bb      	strb	r3, [r7, #14]
	return (checksum == buffer[4]) ? 0 : 2;
 8002040:	7b3b      	ldrb	r3, [r7, #12]
 8002042:	7bba      	ldrb	r2, [r7, #14]
 8002044:	429a      	cmp	r2, r3
 8002046:	d101      	bne.n	800204c <DHT11_ReadData+0x118>
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <DHT11_ReadData+0x11a>
 800204c:	2302      	movs	r3, #2
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(DHT11 *dht)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET);
 800205e:	bf00      	nop
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	889b      	ldrh	r3, [r3, #4]
 8002068:	4619      	mov	r1, r3
 800206a:	4610      	mov	r0, r2
 800206c:	f004 f904 	bl	8006278 <HAL_GPIO_ReadPin>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f4      	beq.n	8002060 <DHT11_ReadBit+0xa>

	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2200      	movs	r2, #0
 800207e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET);
 8002080:	bf00      	nop
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	889b      	ldrh	r3, [r3, #4]
 800208a:	4619      	mov	r1, r3
 800208c:	4610      	mov	r0, r2
 800208e:	f004 f8f3 	bl	8006278 <HAL_GPIO_ReadPin>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d0f4      	beq.n	8002082 <DHT11_ReadBit+0x2c>
	uint32_t pulse_length = __HAL_TIM_GET_COUNTER(dht->_timer);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	60fb      	str	r3, [r7, #12]

	return (pulse_length > 50) ? 1 : 0;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b32      	cmp	r3, #50	@ 0x32
 80020a6:	bf8c      	ite	hi
 80020a8:	2301      	movhi	r3, #1
 80020aa:	2300      	movls	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020be:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <MX_DMA_Init+0x38>)
 80020c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c2:	4a0b      	ldr	r2, [pc, #44]	@ (80020f0 <MX_DMA_Init+0x38>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <MX_DMA_Init+0x38>)
 80020cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2105      	movs	r1, #5
 80020da:	200b      	movs	r0, #11
 80020dc:	f003 f9e1 	bl	80054a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020e0:	200b      	movs	r0, #11
 80020e2:	f003 f9fa 	bl	80054da <HAL_NVIC_EnableIRQ>

}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000

080020f4 <FlashConfig_Save>:
#include <string.h>

#define FLASH_CONFIG_START_ADDR  0x08080000

uint8_t FlashConfig_Save(SystemConfig* cfg)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b08b      	sub	sp, #44	@ 0x2c
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 80020fc:	f003 fcea 	bl	8005ad4 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInit = {
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <FlashConfig_Save+0x84>)
 8002102:	f107 0410 	add.w	r4, r7, #16
 8002106:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .NbPages = 1,
        .Banks = FLASH_BANK_2
    };

    uint32_t pageError;
    if (HAL_FLASHEx_Erase(&eraseInit, &pageError) != HAL_OK) {
 800210c:	f107 020c 	add.w	r2, r7, #12
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f003 fdc0 	bl	8005c9c <HAL_FLASHEx_Erase>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <FlashConfig_Save+0x36>
        HAL_FLASH_Lock();
 8002122:	f003 fcf9 	bl	8005b18 <HAL_FLASH_Lock>
        return 0;
 8002126:	2300      	movs	r3, #0
 8002128:	e022      	b.n	8002170 <FlashConfig_Save+0x7c>
    }

    uint64_t* data = (uint64_t*)cfg;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
    for (size_t i = 0; i < sizeof(SystemConfig); i += 8) {
 800212e:	2300      	movs	r3, #0
 8002130:	623b      	str	r3, [r7, #32]
 8002132:	e017      	b.n	8002164 <FlashConfig_Save+0x70>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_CONFIG_START_ADDR + i, *data++) != HAL_OK) {
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 800213a:	f501 2100 	add.w	r1, r1, #524288	@ 0x80000
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f103 0208 	add.w	r2, r3, #8
 8002144:	627a      	str	r2, [r7, #36]	@ 0x24
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	2000      	movs	r0, #0
 800214c:	f003 fc56 	bl	80059fc <HAL_FLASH_Program>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <FlashConfig_Save+0x6a>
            HAL_FLASH_Lock();
 8002156:	f003 fcdf 	bl	8005b18 <HAL_FLASH_Lock>
            return 0;
 800215a:	2300      	movs	r3, #0
 800215c:	e008      	b.n	8002170 <FlashConfig_Save+0x7c>
    for (size_t i = 0; i < sizeof(SystemConfig); i += 8) {
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	3308      	adds	r3, #8
 8002162:	623b      	str	r3, [r7, #32]
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	2b0b      	cmp	r3, #11
 8002168:	d9e4      	bls.n	8002134 <FlashConfig_Save+0x40>
        }
    }

    HAL_FLASH_Lock();
 800216a:	f003 fcd5 	bl	8005b18 <HAL_FLASH_Lock>
    return 1;
 800216e:	2301      	movs	r3, #1
}
 8002170:	4618      	mov	r0, r3
 8002172:	372c      	adds	r7, #44	@ 0x2c
 8002174:	46bd      	mov	sp, r7
 8002176:	bd90      	pop	{r4, r7, pc}
 8002178:	08018198 	.word	0x08018198

0800217c <FlashConfig_Load>:

uint8_t FlashConfig_Load(SystemConfig* cfg)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    memcpy(cfg, (void*)FLASH_CONFIG_START_ADDR, sizeof(SystemConfig));
 8002184:	220c      	movs	r2, #12
 8002186:	4904      	ldr	r1, [pc, #16]	@ (8002198 <FlashConfig_Load+0x1c>)
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f012 fda5 	bl	8014cd8 <memcpy>

    // You can add a checksum or magic value check here later
    return 1;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	08080000 	.word	0x08080000

0800219c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	timID = osTimerNew(SampleData, osTimerPeriodic, NULL, NULL);
 80021a0:	2300      	movs	r3, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	2101      	movs	r1, #1
 80021a6:	483d      	ldr	r0, [pc, #244]	@ (800229c <MX_FREERTOS_Init+0x100>)
 80021a8:	f00c f9f8 	bl	800e59c <osTimerNew>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a3c      	ldr	r2, [pc, #240]	@ (80022a0 <MX_FREERTOS_Init+0x104>)
 80021b0:	6013      	str	r3, [r2, #0]
	osTimerStart(timID, delay);
 80021b2:	4b3b      	ldr	r3, [pc, #236]	@ (80022a0 <MX_FREERTOS_Init+0x104>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a3b      	ldr	r2, [pc, #236]	@ (80022a4 <MX_FREERTOS_Init+0x108>)
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f00c fa69 	bl	800e694 <osTimerStart>
	HAL_TIM_Base_Start(&htim6);
 80021c2:	4839      	ldr	r0, [pc, #228]	@ (80022a8 <MX_FREERTOS_Init+0x10c>)
 80021c4:	f006 fb8a 	bl	80088dc <HAL_TIM_Base_Start>
	DHT_Init(GPIOB, GPIO_PIN_5, &htim6);
 80021c8:	4a37      	ldr	r2, [pc, #220]	@ (80022a8 <MX_FREERTOS_Init+0x10c>)
 80021ca:	2120      	movs	r1, #32
 80021cc:	4837      	ldr	r0, [pc, #220]	@ (80022ac <MX_FREERTOS_Init+0x110>)
 80021ce:	f7ff fe1f 	bl	8001e10 <DHT_Init>
	SD_Init();
 80021d2:	f000 fd95 	bl	8002d00 <SD_Init>
	g_dt = DateTimeCreate(&hrtc);
 80021d6:	4836      	ldr	r0, [pc, #216]	@ (80022b0 <MX_FREERTOS_Init+0x114>)
 80021d8:	f7ff fc4a 	bl	8001a70 <DateTimeCreate>
 80021dc:	4603      	mov	r3, r0
 80021de:	4a35      	ldr	r2, [pc, #212]	@ (80022b4 <MX_FREERTOS_Init+0x118>)
 80021e0:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	4934      	ldr	r1, [pc, #208]	@ (80022b8 <MX_FREERTOS_Init+0x11c>)
 80021e6:	4835      	ldr	r0, [pc, #212]	@ (80022bc <MX_FREERTOS_Init+0x120>)
 80021e8:	f007 faf0 	bl	80097cc <HAL_UART_Receive_IT>
	Config_Init();
 80021ec:	f7ff fbda 	bl	80019a4 <Config_Init>
	messageQueueHandle = osMessageQueueNew(10, sizeof(MessageData), NULL);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2114      	movs	r1, #20
 80021f4:	200a      	movs	r0, #10
 80021f6:	f00c fde9 	bl	800edcc <osMessageQueueNew>
 80021fa:	4603      	mov	r3, r0
 80021fc:	4a30      	ldr	r2, [pc, #192]	@ (80022c0 <MX_FREERTOS_Init+0x124>)
 80021fe:	6013      	str	r3, [r2, #0]
	eventQueueHandle = osMessageQueueNew(10, sizeof(SystemEvent), NULL);
 8002200:	2200      	movs	r2, #0
 8002202:	2109      	movs	r1, #9
 8002204:	200a      	movs	r0, #10
 8002206:	f00c fde1 	bl	800edcc <osMessageQueueNew>
 800220a:	4603      	mov	r3, r0
 800220c:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <MX_FREERTOS_Init+0x128>)
 800220e:	6013      	str	r3, [r2, #0]
	commEventFlags = osEventFlagsNew(NULL);
 8002210:	2000      	movs	r0, #0
 8002212:	f00c faa4 	bl	800e75e <osEventFlagsNew>
 8002216:	4603      	mov	r3, r0
 8002218:	4a2b      	ldr	r2, [pc, #172]	@ (80022c8 <MX_FREERTOS_Init+0x12c>)
 800221a:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	sdMutexHandle = osMutexNew(&sdMutex_attributes);
 800221c:	482b      	ldr	r0, [pc, #172]	@ (80022cc <MX_FREERTOS_Init+0x130>)
 800221e:	f00c fb84 	bl	800e92a <osMutexNew>
 8002222:	4603      	mov	r3, r0
 8002224:	4a2a      	ldr	r2, [pc, #168]	@ (80022d0 <MX_FREERTOS_Init+0x134>)
 8002226:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002228:	4a2a      	ldr	r2, [pc, #168]	@ (80022d4 <MX_FREERTOS_Init+0x138>)
 800222a:	2100      	movs	r1, #0
 800222c:	482a      	ldr	r0, [pc, #168]	@ (80022d8 <MX_FREERTOS_Init+0x13c>)
 800222e:	f00c f8f3 	bl	800e418 <osThreadNew>
 8002232:	4603      	mov	r3, r0
 8002234:	4a29      	ldr	r2, [pc, #164]	@ (80022dc <MX_FREERTOS_Init+0x140>)
 8002236:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  dhtTaskHandle = osThreadNew(DHT_Task, NULL, &dhtTask_attributes);
 8002238:	4a29      	ldr	r2, [pc, #164]	@ (80022e0 <MX_FREERTOS_Init+0x144>)
 800223a:	2100      	movs	r1, #0
 800223c:	4829      	ldr	r0, [pc, #164]	@ (80022e4 <MX_FREERTOS_Init+0x148>)
 800223e:	f00c f8eb 	bl	800e418 <osThreadNew>
 8002242:	4603      	mov	r3, r0
 8002244:	4a28      	ldr	r2, [pc, #160]	@ (80022e8 <MX_FREERTOS_Init+0x14c>)
 8002246:	6013      	str	r3, [r2, #0]
  controllerTaskHandle = osThreadNew(ControllerTask, NULL, &controllerTask_attributes);
 8002248:	4a28      	ldr	r2, [pc, #160]	@ (80022ec <MX_FREERTOS_Init+0x150>)
 800224a:	2100      	movs	r1, #0
 800224c:	4828      	ldr	r0, [pc, #160]	@ (80022f0 <MX_FREERTOS_Init+0x154>)
 800224e:	f00c f8e3 	bl	800e418 <osThreadNew>
 8002252:	4603      	mov	r3, r0
 8002254:	4a27      	ldr	r2, [pc, #156]	@ (80022f4 <MX_FREERTOS_Init+0x158>)
 8002256:	6013      	str	r3, [r2, #0]
  loggerTaskHandle = osThreadNew(LoggerTask, NULL, &loggerTask_attributes);
 8002258:	4a27      	ldr	r2, [pc, #156]	@ (80022f8 <MX_FREERTOS_Init+0x15c>)
 800225a:	2100      	movs	r1, #0
 800225c:	4827      	ldr	r0, [pc, #156]	@ (80022fc <MX_FREERTOS_Init+0x160>)
 800225e:	f00c f8db 	bl	800e418 <osThreadNew>
 8002262:	4603      	mov	r3, r0
 8002264:	4a26      	ldr	r2, [pc, #152]	@ (8002300 <MX_FREERTOS_Init+0x164>)
 8002266:	6013      	str	r3, [r2, #0]
  eventTaskHandle = osThreadNew(EventTask, NULL, &eventTask_attributes);
 8002268:	4a26      	ldr	r2, [pc, #152]	@ (8002304 <MX_FREERTOS_Init+0x168>)
 800226a:	2100      	movs	r1, #0
 800226c:	4826      	ldr	r0, [pc, #152]	@ (8002308 <MX_FREERTOS_Init+0x16c>)
 800226e:	f00c f8d3 	bl	800e418 <osThreadNew>
 8002272:	4603      	mov	r3, r0
 8002274:	4a25      	ldr	r2, [pc, #148]	@ (800230c <MX_FREERTOS_Init+0x170>)
 8002276:	6013      	str	r3, [r2, #0]
  commTaskHandle = osThreadNew(CommTask, NULL, &commTask_attributes);
 8002278:	4a25      	ldr	r2, [pc, #148]	@ (8002310 <MX_FREERTOS_Init+0x174>)
 800227a:	2100      	movs	r1, #0
 800227c:	4825      	ldr	r0, [pc, #148]	@ (8002314 <MX_FREERTOS_Init+0x178>)
 800227e:	f00c f8cb 	bl	800e418 <osThreadNew>
 8002282:	4603      	mov	r3, r0
 8002284:	4a24      	ldr	r2, [pc, #144]	@ (8002318 <MX_FREERTOS_Init+0x17c>)
 8002286:	6013      	str	r3, [r2, #0]
  keepAliveTaskHandle = osThreadNew(KeepAliveTask, NULL, &keepAliveTask_attributes);
 8002288:	4a24      	ldr	r2, [pc, #144]	@ (800231c <MX_FREERTOS_Init+0x180>)
 800228a:	2100      	movs	r1, #0
 800228c:	4824      	ldr	r0, [pc, #144]	@ (8002320 <MX_FREERTOS_Init+0x184>)
 800228e:	f00c f8c3 	bl	800e418 <osThreadNew>
 8002292:	4603      	mov	r3, r0
 8002294:	4a23      	ldr	r2, [pc, #140]	@ (8002324 <MX_FREERTOS_Init+0x188>)
 8002296:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}
 800229c:	08002339 	.word	0x08002339
 80022a0:	200003f0 	.word	0x200003f0
 80022a4:	20000010 	.word	0x20000010
 80022a8:	20000954 	.word	0x20000954
 80022ac:	48000400 	.word	0x48000400
 80022b0:	20000414 	.word	0x20000414
 80022b4:	2000032c 	.word	0x2000032c
 80022b8:	20000a28 	.word	0x20000a28
 80022bc:	200009a0 	.word	0x200009a0
 80022c0:	2000030c 	.word	0x2000030c
 80022c4:	20000310 	.word	0x20000310
 80022c8:	20000314 	.word	0x20000314
 80022cc:	08018574 	.word	0x08018574
 80022d0:	200003f4 	.word	0x200003f4
 80022d4:	0801865c 	.word	0x0801865c
 80022d8:	08002329 	.word	0x08002329
 80022dc:	20000410 	.word	0x20000410
 80022e0:	08018584 	.word	0x08018584
 80022e4:	080023c9 	.word	0x080023c9
 80022e8:	200003f8 	.word	0x200003f8
 80022ec:	080185a8 	.word	0x080185a8
 80022f0:	08002495 	.word	0x08002495
 80022f4:	200003fc 	.word	0x200003fc
 80022f8:	080185cc 	.word	0x080185cc
 80022fc:	08002559 	.word	0x08002559
 8002300:	20000400 	.word	0x20000400
 8002304:	080185f0 	.word	0x080185f0
 8002308:	080027c9 	.word	0x080027c9
 800230c:	20000404 	.word	0x20000404
 8002310:	08018614 	.word	0x08018614
 8002314:	08002871 	.word	0x08002871
 8002318:	20000408 	.word	0x20000408
 800231c:	08018638 	.word	0x08018638
 8002320:	0800291d 	.word	0x0800291d
 8002324:	2000040c 	.word	0x2000040c

08002328 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f00c f903 	bl	800e53c <osDelay>
 8002336:	e7fb      	b.n	8002330 <StartDefaultTask+0x8>

08002338 <SampleData>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void SampleData()
{
 8002338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233a:	b085      	sub	sp, #20
 800233c:	af04      	add	r7, sp, #16

	xTaskNotifyGive(dhtTaskHandle);
 800233e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <SampleData+0x74>)
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	2300      	movs	r3, #0
 8002344:	2202      	movs	r2, #2
 8002346:	2100      	movs	r1, #0
 8002348:	f00f fafe 	bl	8011948 <xTaskGenericNotify>

	HAL_ADC_Start_DMA(&hadc1, buffer, length);
 800234c:	4b18      	ldr	r3, [pc, #96]	@ (80023b0 <SampleData+0x78>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4918      	ldr	r1, [pc, #96]	@ (80023b4 <SampleData+0x7c>)
 8002354:	4818      	ldr	r0, [pc, #96]	@ (80023b8 <SampleData+0x80>)
 8002356:	f001 ff99 	bl	800428c <HAL_ADC_Start_DMA>

	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
									message.temperature_int,
 800235a:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <SampleData+0x84>)
 800235c:	781b      	ldrb	r3, [r3, #0]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 800235e:	461c      	mov	r4, r3
									message.temperature_dec,
 8002360:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <SampleData+0x84>)
 8002362:	785b      	ldrb	r3, [r3, #1]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 8002364:	461d      	mov	r5, r3
									message.humidity_int,
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <SampleData+0x84>)
 8002368:	789b      	ldrb	r3, [r3, #2]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 800236a:	461e      	mov	r6, r3
									message.humidity_dec,
 800236c:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <SampleData+0x84>)
 800236e:	78db      	ldrb	r3, [r3, #3]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 8002370:	461a      	mov	r2, r3
									message.potent_int,
 8002372:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <SampleData+0x84>)
 8002374:	889b      	ldrh	r3, [r3, #4]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 8002376:	4619      	mov	r1, r3
									message.potent_dec,
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <SampleData+0x84>)
 800237a:	88db      	ldrh	r3, [r3, #6]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 800237c:	4618      	mov	r0, r3
 800237e:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <SampleData+0x84>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	9303      	str	r3, [sp, #12]
 8002384:	9002      	str	r0, [sp, #8]
 8002386:	9101      	str	r1, [sp, #4]
 8002388:	9200      	str	r2, [sp, #0]
 800238a:	4633      	mov	r3, r6
 800238c:	462a      	mov	r2, r5
 800238e:	4621      	mov	r1, r4
 8002390:	480b      	ldr	r0, [pc, #44]	@ (80023c0 <SampleData+0x88>)
 8002392:	f012 fb1b 	bl	80149cc <iprintf>
									message.light
									);

	xTaskNotifyGive(controllerTaskHandle);
 8002396:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <SampleData+0x8c>)
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	2202      	movs	r2, #2
 800239e:	2100      	movs	r1, #0
 80023a0:	f00f fad2 	bl	8011948 <xTaskGenericNotify>
}
 80023a4:	bf00      	nop
 80023a6:	3704      	adds	r7, #4
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ac:	200003f8 	.word	0x200003f8
 80023b0:	2000000c 	.word	0x2000000c
 80023b4:	20000330 	.word	0x20000330
 80023b8:	20000240 	.word	0x20000240
 80023bc:	20000318 	.word	0x20000318
 80023c0:	08018208 	.word	0x08018208
 80023c4:	200003fc 	.word	0x200003fc

080023c8 <DHT_Task>:

void DHT_Task(void *argument)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023d4:	2001      	movs	r0, #1
 80023d6:	f00f fa6f 	bl	80118b8 <ulTaskNotifyTake>
		if (DHT11_ReadData(&dht, &data) == 0)
 80023da:	490c      	ldr	r1, [pc, #48]	@ (800240c <DHT_Task+0x44>)
 80023dc:	480c      	ldr	r0, [pc, #48]	@ (8002410 <DHT_Task+0x48>)
 80023de:	f7ff fda9 	bl	8001f34 <DHT11_ReadData>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f3      	bne.n	80023d0 <DHT_Task+0x8>
		{
			message.temperature_int = data.temperature_int;
 80023e8:	4b08      	ldr	r3, [pc, #32]	@ (800240c <DHT_Task+0x44>)
 80023ea:	789a      	ldrb	r2, [r3, #2]
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <DHT_Task+0x4c>)
 80023ee:	701a      	strb	r2, [r3, #0]
			message.temperature_dec = data.temperature_dec;
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <DHT_Task+0x44>)
 80023f2:	78da      	ldrb	r2, [r3, #3]
 80023f4:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <DHT_Task+0x4c>)
 80023f6:	705a      	strb	r2, [r3, #1]
			message.humidity_int = data.humidity_int;
 80023f8:	4b04      	ldr	r3, [pc, #16]	@ (800240c <DHT_Task+0x44>)
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <DHT_Task+0x4c>)
 80023fe:	709a      	strb	r2, [r3, #2]
			message.humidity_dec = data.humidity_dec;
 8002400:	4b02      	ldr	r3, [pc, #8]	@ (800240c <DHT_Task+0x44>)
 8002402:	785a      	ldrb	r2, [r3, #1]
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <DHT_Task+0x4c>)
 8002406:	70da      	strb	r2, [r3, #3]
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002408:	e7e2      	b.n	80023d0 <DHT_Task+0x8>
 800240a:	bf00      	nop
 800240c:	20000304 	.word	0x20000304
 8002410:	200002f8 	.word	0x200002f8
 8002414:	20000318 	.word	0x20000318

08002418 <HAL_ADC_ConvCpltCallback>:
		}
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a16      	ldr	r2, [pc, #88]	@ (8002480 <HAL_ADC_ConvCpltCallback+0x68>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d125      	bne.n	8002476 <HAL_ADC_ConvCpltCallback+0x5e>
		HAL_ADC_Stop_DMA(&hadc1);
 800242a:	4816      	ldr	r0, [pc, #88]	@ (8002484 <HAL_ADC_ConvCpltCallback+0x6c>)
 800242c:	f001 ffea 	bl	8004404 <HAL_ADC_Stop_DMA>

		uint16_t integral = buffer[0] / 1000;
 8002430:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <HAL_ADC_ConvCpltCallback+0x70>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a15      	ldr	r2, [pc, #84]	@ (800248c <HAL_ADC_ConvCpltCallback+0x74>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	81fb      	strh	r3, [r7, #14]
		uint16_t fractional = buffer[0] % 1000;
 800243e:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_ADC_ConvCpltCallback+0x70>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b12      	ldr	r3, [pc, #72]	@ (800248c <HAL_ADC_ConvCpltCallback+0x74>)
 8002444:	fba3 1302 	umull	r1, r3, r3, r2
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	81bb      	strh	r3, [r7, #12]
		uint32_t light_value = (buffer[1] * 100) / 4096;
 8002456:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <HAL_ADC_ConvCpltCallback+0x70>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2264      	movs	r2, #100	@ 0x64
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	0b1b      	lsrs	r3, r3, #12
 8002462:	60bb      	str	r3, [r7, #8]

		message.potent_int = integral;
 8002464:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <HAL_ADC_ConvCpltCallback+0x78>)
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	8093      	strh	r3, [r2, #4]
		message.potent_dec = fractional;
 800246a:	4a09      	ldr	r2, [pc, #36]	@ (8002490 <HAL_ADC_ConvCpltCallback+0x78>)
 800246c:	89bb      	ldrh	r3, [r7, #12]
 800246e:	80d3      	strh	r3, [r2, #6]
		message.light = light_value;
 8002470:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_ADC_ConvCpltCallback+0x78>)
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	6093      	str	r3, [r2, #8]
	}
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	50040000 	.word	0x50040000
 8002484:	20000240 	.word	0x20000240
 8002488:	20000330 	.word	0x20000330
 800248c:	10624dd3 	.word	0x10624dd3
 8002490:	20000318 	.word	0x20000318

08002494 <ControllerTask>:

void ControllerTask(void* argument)
{
 8002494:	b5b0      	push	{r4, r5, r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	MessageData msgCopy;
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 800249c:	2104      	movs	r1, #4
 800249e:	4827      	ldr	r0, [pc, #156]	@ (800253c <ControllerTask+0xa8>)
 80024a0:	f003 ff1a 	bl	80062d8 <HAL_GPIO_TogglePin>

	while(1)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024a8:	2001      	movs	r0, #1
 80024aa:	f00f fa05 	bl	80118b8 <ulTaskNotifyTake>
		msgCopy = message;
 80024ae:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <ControllerTask+0xac>)
 80024b0:	f107 0408 	add.w	r4, r7, #8
 80024b4:	461d      	mov	r5, r3
 80024b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ba:	682b      	ldr	r3, [r5, #0]
 80024bc:	6023      	str	r3, [r4, #0]

		DateTimeGet(g_dt);
 80024be:	4b21      	ldr	r3, [pc, #132]	@ (8002544 <ControllerTask+0xb0>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff faee 	bl	8001aa4 <DateTimeGet>

		msgCopy.time = g_dt->time;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002544 <ControllerTask+0xb0>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	3207      	adds	r2, #7
 80024d2:	8811      	ldrh	r1, [r2, #0]
 80024d4:	7892      	ldrb	r2, [r2, #2]
 80024d6:	8019      	strh	r1, [r3, #0]
 80024d8:	709a      	strb	r2, [r3, #2]
		msgCopy.date = g_dt->date;
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <ControllerTask+0xb0>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f107 0317 	add.w	r3, r7, #23
 80024e2:	3204      	adds	r2, #4
 80024e4:	8811      	ldrh	r1, [r2, #0]
 80024e6:	7892      	ldrb	r2, [r2, #2]
 80024e8:	8019      	strh	r1, [r3, #0]
 80024ea:	709a      	strb	r2, [r3, #2]

		if (SystemState_Update(&msgCopy, Config_Get())) {
 80024ec:	f7ff faa2 	bl	8001a34 <Config_Get>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f001 f815 	bl	8003528 <SystemState_Update>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <ControllerTask+0x76>

			printf("System mode changed!\r\n");
 8002504:	4810      	ldr	r0, [pc, #64]	@ (8002548 <ControllerTask+0xb4>)
 8002506:	f012 fac9 	bl	8014a9c <puts>
		}

		osStatus_t status = osMessageQueuePut(messageQueueHandle, &msgCopy, 0, 0);
 800250a:	4b10      	ldr	r3, [pc, #64]	@ (800254c <ControllerTask+0xb8>)
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	f107 0108 	add.w	r1, r7, #8
 8002512:	2300      	movs	r3, #0
 8002514:	2200      	movs	r2, #0
 8002516:	f00c fccd 	bl	800eeb4 <osMessageQueuePut>
 800251a:	61f8      	str	r0, [r7, #28]
		if (status == osOK) {
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <ControllerTask+0x96>

		} else {
		    printf("FAILED to queue message! Code: %d\r\n", status);
 8002522:	69f9      	ldr	r1, [r7, #28]
 8002524:	480a      	ldr	r0, [pc, #40]	@ (8002550 <ControllerTask+0xbc>)
 8002526:	f012 fa51 	bl	80149cc <iprintf>
		}

		xTaskNotifyGive(loggerTaskHandle);
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <ControllerTask+0xc0>)
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	2300      	movs	r3, #0
 8002530:	2202      	movs	r2, #2
 8002532:	2100      	movs	r1, #0
 8002534:	f00f fa08 	bl	8011948 <xTaskGenericNotify>
	{
 8002538:	e7b4      	b.n	80024a4 <ControllerTask+0x10>
 800253a:	bf00      	nop
 800253c:	48000800 	.word	0x48000800
 8002540:	20000318 	.word	0x20000318
 8002544:	2000032c 	.word	0x2000032c
 8002548:	08018254 	.word	0x08018254
 800254c:	2000030c 	.word	0x2000030c
 8002550:	0801826c 	.word	0x0801826c
 8002554:	20000400 	.word	0x20000400

08002558 <LoggerTask>:

	}
}

void LoggerTask(void *argument)
{
 8002558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255c:	b0c0      	sub	sp, #256	@ 0x100
 800255e:	af0c      	add	r7, sp, #48	@ 0x30
 8002560:	61f8      	str	r0, [r7, #28]
    MessageData receivedMsg;
    char buffer[128];

    while (1)
    {
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002562:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002566:	2001      	movs	r0, #1
 8002568:	f00f f9a6 	bl	80118b8 <ulTaskNotifyTake>
        if (osMessageQueueGet(messageQueueHandle, &receivedMsg, NULL, osWaitForever) == osOK)
 800256c:	4b7d      	ldr	r3, [pc, #500]	@ (8002764 <LoggerTask+0x20c>)
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8002574:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002578:	2200      	movs	r2, #0
 800257a:	f00c fcfb 	bl	800ef74 <osMessageQueueGet>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ee      	bne.n	8002562 <LoggerTask+0xa>
        {
        	SystemConfig* cfg = Config_Get();
 8002584:	f7ff fa56 	bl	8001a34 <Config_Get>
 8002588:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
        	       cfg->temp_min,
 800258c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002590:	781b      	ldrb	r3, [r3, #0]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 8002592:	461d      	mov	r5, r3
        	       cfg->temp_max,
 8002594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002598:	785b      	ldrb	r3, [r3, #1]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 800259a:	461e      	mov	r6, r3
        	       cfg->humidity_min,
 800259c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025a0:	789b      	ldrb	r3, [r3, #2]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 80025a2:	4698      	mov	r8, r3
        	       cfg->light_min,
 80025a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025a8:	78db      	ldrb	r3, [r3, #3]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 80025aa:	461c      	mov	r4, r3
        	       cfg->voltage_min);
 80025ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025b0:	685b      	ldr	r3, [r3, #4]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ffd8 	bl	8000568 <__aeabi_f2d>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025c0:	9400      	str	r4, [sp, #0]
 80025c2:	4643      	mov	r3, r8
 80025c4:	4632      	mov	r2, r6
 80025c6:	4629      	mov	r1, r5
 80025c8:	4867      	ldr	r0, [pc, #412]	@ (8002768 <LoggerTask+0x210>)
 80025ca:	f012 f9ff 	bl	80149cc <iprintf>

            char filename[20];

            if (receivedMsg.date.year == 0 || receivedMsg.date.month == 0 || receivedMsg.date.day == 0)
 80025ce:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <LoggerTask+0x8e>
 80025d6:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <LoggerTask+0x8e>
 80025de:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d108      	bne.n	80025f8 <LoggerTask+0xa0>
            {
                strcpy(filename, "fallback.TXT");
 80025e6:	f107 0320 	add.w	r3, r7, #32
 80025ea:	4a60      	ldr	r2, [pc, #384]	@ (800276c <LoggerTask+0x214>)
 80025ec:	461c      	mov	r4, r3
 80025ee:	4613      	mov	r3, r2
 80025f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025f2:	c407      	stmia	r4!, {r0, r1, r2}
 80025f4:	7023      	strb	r3, [r4, #0]
 80025f6:	e00f      	b.n	8002618 <LoggerTask+0xc0>
            }
            else
            {
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
                         receivedMsg.date.year + 2000,
 80025f8:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
 80025fc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                         receivedMsg.date.month,
 8002600:	f897 20c4 	ldrb.w	r2, [r7, #196]	@ 0xc4
                         receivedMsg.date.day);
 8002604:	f897 10c3 	ldrb.w	r1, [r7, #195]	@ 0xc3
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
 8002608:	f107 0020 	add.w	r0, r7, #32
 800260c:	9101      	str	r1, [sp, #4]
 800260e:	9200      	str	r2, [sp, #0]
 8002610:	4a57      	ldr	r2, [pc, #348]	@ (8002770 <LoggerTask+0x218>)
 8002612:	2114      	movs	r1, #20
 8002614:	f011 f9b2 	bl	801397c <sniprintf>
            }

            if (strcmp(currentLogFile, filename) != 0)
 8002618:	f107 0320 	add.w	r3, r7, #32
 800261c:	4619      	mov	r1, r3
 800261e:	4855      	ldr	r0, [pc, #340]	@ (8002774 <LoggerTask+0x21c>)
 8002620:	f7fd fdd6 	bl	80001d0 <strcmp>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d04b      	beq.n	80026c2 <LoggerTask+0x16a>
            {
                strcpy(currentLogFile, filename);
 800262a:	f107 0320 	add.w	r3, r7, #32
 800262e:	4619      	mov	r1, r3
 8002630:	4850      	ldr	r0, [pc, #320]	@ (8002774 <LoggerTask+0x21c>)
 8002632:	f012 fb49 	bl	8014cc8 <strcpy>

                if (logFileCount < MAX_LOG_DAYS)
 8002636:	4b50      	ldr	r3, [pc, #320]	@ (8002778 <LoggerTask+0x220>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b07      	cmp	r3, #7
 800263c:	dc11      	bgt.n	8002662 <LoggerTask+0x10a>
                {
                    strcpy(logFiles[logFileCount++], filename);
 800263e:	4b4e      	ldr	r3, [pc, #312]	@ (8002778 <LoggerTask+0x220>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	1c53      	adds	r3, r2, #1
 8002644:	494c      	ldr	r1, [pc, #304]	@ (8002778 <LoggerTask+0x220>)
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4a4a      	ldr	r2, [pc, #296]	@ (800277c <LoggerTask+0x224>)
 8002652:	4413      	add	r3, r2
 8002654:	f107 0220 	add.w	r2, r7, #32
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f012 fb34 	bl	8014cc8 <strcpy>
 8002660:	e029      	b.n	80026b6 <LoggerTask+0x15e>
                }
                else
                {
                    f_unlink(logFiles[0]);
 8002662:	4846      	ldr	r0, [pc, #280]	@ (800277c <LoggerTask+0x224>)
 8002664:	f00b fd05 	bl	800e072 <f_unlink>
                    for (int i = 1; i < MAX_LOG_DAYS; ++i)
 8002668:	2301      	movs	r3, #1
 800266a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800266e:	e018      	b.n	80026a2 <LoggerTask+0x14a>
                    {
                        strcpy(logFiles[i - 1], logFiles[i]);
 8002670:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002674:	1e5a      	subs	r2, r3, #1
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4a3f      	ldr	r2, [pc, #252]	@ (800277c <LoggerTask+0x224>)
 8002680:	1898      	adds	r0, r3, r2
 8002682:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4a3b      	ldr	r2, [pc, #236]	@ (800277c <LoggerTask+0x224>)
 8002690:	4413      	add	r3, r2
 8002692:	4619      	mov	r1, r3
 8002694:	f012 fb18 	bl	8014cc8 <strcpy>
                    for (int i = 1; i < MAX_LOG_DAYS; ++i)
 8002698:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800269c:	3301      	adds	r3, #1
 800269e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026a6:	2b07      	cmp	r3, #7
 80026a8:	dde2      	ble.n	8002670 <LoggerTask+0x118>
                    }
                    strcpy(logFiles[MAX_LOG_DAYS - 1], filename);
 80026aa:	f107 0320 	add.w	r3, r7, #32
 80026ae:	4619      	mov	r1, r3
 80026b0:	4833      	ldr	r0, [pc, #204]	@ (8002780 <LoggerTask+0x228>)
 80026b2:	f012 fb09 	bl	8014cc8 <strcpy>
                }

                printf("New log file: %s\r\n", filename);
 80026b6:	f107 0320 	add.w	r3, r7, #32
 80026ba:	4619      	mov	r1, r3
 80026bc:	4831      	ldr	r0, [pc, #196]	@ (8002784 <LoggerTask+0x22c>)
 80026be:	f012 f985 	bl	80149cc <iprintf>
            }

            snprintf(buffer, sizeof(buffer),
                     "%02d-%02d-%02d %02d:%02d:%02d, %d.%d°C, %d.%d%%, %d.%03dV, %lu%%\r\n",
                     receivedMsg.date.year + 2000,
 80026c2:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
            snprintf(buffer, sizeof(buffer),
 80026c6:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
                     receivedMsg.date.month,
 80026ca:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
            snprintf(buffer, sizeof(buffer),
 80026ce:	4619      	mov	r1, r3
                     receivedMsg.date.day,
 80026d0:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
            snprintf(buffer, sizeof(buffer),
 80026d4:	461c      	mov	r4, r3
                     receivedMsg.time.hours,
 80026d6:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
            snprintf(buffer, sizeof(buffer),
 80026da:	461d      	mov	r5, r3
                     receivedMsg.time.minutes,
 80026dc:	f897 30c1 	ldrb.w	r3, [r7, #193]	@ 0xc1
            snprintf(buffer, sizeof(buffer),
 80026e0:	461e      	mov	r6, r3
                     receivedMsg.time.seconds,
 80026e2:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
            snprintf(buffer, sizeof(buffer),
 80026e6:	61bb      	str	r3, [r7, #24]
                     receivedMsg.temperature_int,
 80026e8:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
            snprintf(buffer, sizeof(buffer),
 80026ec:	617b      	str	r3, [r7, #20]
                     receivedMsg.temperature_dec,
 80026ee:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
            snprintf(buffer, sizeof(buffer),
 80026f2:	613b      	str	r3, [r7, #16]
                     receivedMsg.humidity_int,
 80026f4:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
            snprintf(buffer, sizeof(buffer),
 80026f8:	60fb      	str	r3, [r7, #12]
                     receivedMsg.humidity_dec,
 80026fa:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
            snprintf(buffer, sizeof(buffer),
 80026fe:	60bb      	str	r3, [r7, #8]
                     receivedMsg.potent_int,
 8002700:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
            snprintf(buffer, sizeof(buffer),
 8002704:	607b      	str	r3, [r7, #4]
                     receivedMsg.potent_dec,
 8002706:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
            snprintf(buffer, sizeof(buffer),
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002710:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002714:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	930a      	str	r3, [sp, #40]	@ 0x28
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	9309      	str	r3, [sp, #36]	@ 0x24
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	9308      	str	r3, [sp, #32]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	9307      	str	r3, [sp, #28]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	9306      	str	r3, [sp, #24]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	9305      	str	r3, [sp, #20]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	9304      	str	r3, [sp, #16]
 8002732:	9603      	str	r6, [sp, #12]
 8002734:	9502      	str	r5, [sp, #8]
 8002736:	9401      	str	r4, [sp, #4]
 8002738:	9100      	str	r1, [sp, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	4a12      	ldr	r2, [pc, #72]	@ (8002788 <LoggerTask+0x230>)
 800273e:	2180      	movs	r1, #128	@ 0x80
 8002740:	f011 f91c 	bl	801397c <sniprintf>
                     receivedMsg.light);

            SD_AppendToFile(filename, buffer);
 8002744:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002748:	f107 0320 	add.w	r3, r7, #32
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fae4 	bl	8002d1c <SD_AppendToFile>
            printf("LOGGED: %s", buffer);
 8002754:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002758:	4619      	mov	r1, r3
 800275a:	480c      	ldr	r0, [pc, #48]	@ (800278c <LoggerTask+0x234>)
 800275c:	f012 f936 	bl	80149cc <iprintf>
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002760:	e6ff      	b.n	8002562 <LoggerTask+0xa>
 8002762:	bf00      	nop
 8002764:	2000030c 	.word	0x2000030c
 8002768:	08018290 	.word	0x08018290
 800276c:	080182d8 	.word	0x080182d8
 8002770:	080182e8 	.word	0x080182e8
 8002774:	20000338 	.word	0x20000338
 8002778:	200003ec 	.word	0x200003ec
 800277c:	2000034c 	.word	0x2000034c
 8002780:	200003d8 	.word	0x200003d8
 8002784:	080182fc 	.word	0x080182fc
 8002788:	08018310 	.word	0x08018310
 800278c:	08018354 	.word	0x08018354

08002790 <EventTypeToString>:
        }
    }
}

const char* EventTypeToString(EventType type) {
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <EventTypeToString+0x16>
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d002      	beq.n	80027aa <EventTypeToString+0x1a>
 80027a4:	e003      	b.n	80027ae <EventTypeToString+0x1e>
        case EVENT_MODE_CHANGED: return "Mode Changed";
 80027a6:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <EventTypeToString+0x2c>)
 80027a8:	e002      	b.n	80027b0 <EventTypeToString+0x20>
        case EVENT_CONFIG_UPDATED: return "Config Updated";
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <EventTypeToString+0x30>)
 80027ac:	e000      	b.n	80027b0 <EventTypeToString+0x20>
        default: return "Unknown Event";
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <EventTypeToString+0x34>)
    }
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	08018360 	.word	0x08018360
 80027c0:	08018370 	.word	0x08018370
 80027c4:	08018380 	.word	0x08018380

080027c8 <EventTask>:

void EventTask(void *argument)
{
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	b0b1      	sub	sp, #196	@ 0xc4
 80027cc:	af08      	add	r7, sp, #32
 80027ce:	60f8      	str	r0, [r7, #12]
    SystemEvent event;
    char buffer[128];

    while (1)
    {
        if (osMessageQueueGet(eventQueueHandle, &event, NULL, osWaitForever) == osOK)
 80027d0:	4b23      	ldr	r3, [pc, #140]	@ (8002860 <EventTask+0x98>)
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027dc:	2200      	movs	r2, #0
 80027de:	f00c fbc9 	bl	800ef74 <osMessageQueueGet>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f3      	bne.n	80027d0 <EventTask+0x8>
        {
            snprintf(buffer, sizeof(buffer),
                     "%02d-%02d-%02d %02d:%02d:%02d - EVENT: %s (%d → %d)\r\n",
                     event.date.year + 2000,
 80027e8:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
            snprintf(buffer, sizeof(buffer),
 80027ec:	f503 64fa 	add.w	r4, r3, #2000	@ 0x7d0
                     event.date.month,
 80027f0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
            snprintf(buffer, sizeof(buffer),
 80027f4:	461d      	mov	r5, r3
                     event.date.day,
 80027f6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
            snprintf(buffer, sizeof(buffer),
 80027fa:	461e      	mov	r6, r3
                     event.time.hours,
 80027fc:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
            snprintf(buffer, sizeof(buffer),
 8002800:	60bb      	str	r3, [r7, #8]
                     event.time.minutes,
 8002802:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
            snprintf(buffer, sizeof(buffer),
 8002806:	607b      	str	r3, [r7, #4]
                     event.time.seconds,
 8002808:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
            snprintf(buffer, sizeof(buffer),
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ffbc 	bl	8002790 <EventTypeToString>
 8002818:	4603      	mov	r3, r0
                     EventTypeToString(event.type),
                     event.old_mode,
 800281a:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
                     event.new_mode);
 800281e:	f897 1096 	ldrb.w	r1, [r7, #150]	@ 0x96
            snprintf(buffer, sizeof(buffer),
 8002822:	f107 0014 	add.w	r0, r7, #20
 8002826:	9107      	str	r1, [sp, #28]
 8002828:	9206      	str	r2, [sp, #24]
 800282a:	9305      	str	r3, [sp, #20]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	9204      	str	r2, [sp, #16]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	9203      	str	r2, [sp, #12]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	9302      	str	r3, [sp, #8]
 8002838:	9601      	str	r6, [sp, #4]
 800283a:	9500      	str	r5, [sp, #0]
 800283c:	4623      	mov	r3, r4
 800283e:	4a09      	ldr	r2, [pc, #36]	@ (8002864 <EventTask+0x9c>)
 8002840:	2180      	movs	r1, #128	@ 0x80
 8002842:	f011 f89b 	bl	801397c <sniprintf>

            SD_AppendToFile("events.TXT", buffer);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	4806      	ldr	r0, [pc, #24]	@ (8002868 <EventTask+0xa0>)
 800284e:	f000 fa65 	bl	8002d1c <SD_AppendToFile>
            printf("LOGGED EVENT: %s", buffer);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	4804      	ldr	r0, [pc, #16]	@ (800286c <EventTask+0xa4>)
 800285a:	f012 f8b7 	bl	80149cc <iprintf>
        if (osMessageQueueGet(eventQueueHandle, &event, NULL, osWaitForever) == osOK)
 800285e:	e7b7      	b.n	80027d0 <EventTask+0x8>
 8002860:	20000310 	.word	0x20000310
 8002864:	08018390 	.word	0x08018390
 8002868:	080183c8 	.word	0x080183c8
 800286c:	080183d4 	.word	0x080183d4

08002870 <CommTask>:
        }
    }
}

void CommTask(void *argument)
{
 8002870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002872:	b089      	sub	sp, #36	@ 0x24
 8002874:	af04      	add	r7, sp, #16
 8002876:	6078      	str	r0, [r7, #4]
    while (1)
    {
        uint32_t flags = osEventFlagsWait(commEventFlags,
 8002878:	4b23      	ldr	r3, [pc, #140]	@ (8002908 <CommTask+0x98>)
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002880:	2200      	movs	r2, #0
 8002882:	2103      	movs	r1, #3
 8002884:	f00b ffec 	bl	800e860 <osEventFlagsWait>
 8002888:	60f8      	str	r0, [r7, #12]
                                          COMM_EVENT_RX_COMPLETE | COMM_EVENT_KEEP_ALIVE,
                                          osFlagsWaitAny,
                                          osWaitForever);

        if (flags & COMM_EVENT_RX_COMPLETE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <CommTask+0x32>
        {
            printf("Command complete: %s\r\n", commandBuffer);
 8002894:	491d      	ldr	r1, [pc, #116]	@ (800290c <CommTask+0x9c>)
 8002896:	481e      	ldr	r0, [pc, #120]	@ (8002910 <CommTask+0xa0>)
 8002898:	f012 f898 	bl	80149cc <iprintf>
            ParseCommand_New(commandBuffer);
 800289c:	481b      	ldr	r0, [pc, #108]	@ (800290c <CommTask+0x9c>)
 800289e:	f7fe ffcf 	bl	8001840 <ParseCommand_New>
        }

        if (flags & COMM_EVENT_KEEP_ALIVE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0e5      	beq.n	8002878 <CommTask+0x8>
        {
            DateTimeGet(g_dt);
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <CommTask+0xa4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff f8f7 	bl	8001aa4 <DateTimeGet>
            SystemMode mode = SystemState_Get();
 80028b6:	f000 fe2b 	bl	8003510 <SystemState_Get>
 80028ba:	4603      	mov	r3, r0
 80028bc:	72fb      	strb	r3, [r7, #11]

            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
                   g_dt->date.year + 2000,
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <CommTask+0xa4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	799b      	ldrb	r3, [r3, #6]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80028c4:	f503 61fa 	add.w	r1, r3, #2000	@ 0x7d0
                   g_dt->date.month,
 80028c8:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <CommTask+0xa4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	795b      	ldrb	r3, [r3, #5]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80028ce:	461d      	mov	r5, r3
                   g_dt->date.day,
 80028d0:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <CommTask+0xa4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	791b      	ldrb	r3, [r3, #4]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80028d6:	461e      	mov	r6, r3
                   g_dt->time.hours,
 80028d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <CommTask+0xa4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	79db      	ldrb	r3, [r3, #7]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80028de:	461a      	mov	r2, r3
                   g_dt->time.minutes,
 80028e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002914 <CommTask+0xa4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	7a1b      	ldrb	r3, [r3, #8]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80028e6:	4618      	mov	r0, r3
                   g_dt->time.seconds,
 80028e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <CommTask+0xa4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	7a5b      	ldrb	r3, [r3, #9]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80028ee:	461c      	mov	r4, r3
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	9303      	str	r3, [sp, #12]
 80028f4:	9402      	str	r4, [sp, #8]
 80028f6:	9001      	str	r0, [sp, #4]
 80028f8:	9200      	str	r2, [sp, #0]
 80028fa:	4633      	mov	r3, r6
 80028fc:	462a      	mov	r2, r5
 80028fe:	4806      	ldr	r0, [pc, #24]	@ (8002918 <CommTask+0xa8>)
 8002900:	f012 f864 	bl	80149cc <iprintf>
    {
 8002904:	e7b8      	b.n	8002878 <CommTask+0x8>
 8002906:	bf00      	nop
 8002908:	20000314 	.word	0x20000314
 800290c:	20000a2c 	.word	0x20000a2c
 8002910:	080183e8 	.word	0x080183e8
 8002914:	2000032c 	.word	0x2000032c
 8002918:	08018400 	.word	0x08018400

0800291c <KeepAliveTask>:
    }
}


void KeepAliveTask(void *argument)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    while (1)
    {
        osDelay(6000);
 8002924:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002928:	f00b fe08 	bl	800e53c <osDelay>

        osEventFlagsSet(commEventFlags, COMM_EVENT_KEEP_ALIVE);
 800292c:	4b03      	ldr	r3, [pc, #12]	@ (800293c <KeepAliveTask+0x20>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2102      	movs	r1, #2
 8002932:	4618      	mov	r0, r3
 8002934:	f00b ff52 	bl	800e7dc <osEventFlagsSet>
        osDelay(6000);
 8002938:	bf00      	nop
 800293a:	e7f3      	b.n	8002924 <KeepAliveTask+0x8>
 800293c:	20000314 	.word	0x20000314

08002940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002946:	f107 0314 	add.w	r3, r7, #20
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]
 8002954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	4b40      	ldr	r3, [pc, #256]	@ (8002a58 <MX_GPIO_Init+0x118>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a58 <MX_GPIO_Init+0x118>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002962:	4b3d      	ldr	r3, [pc, #244]	@ (8002a58 <MX_GPIO_Init+0x118>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800296e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a58 <MX_GPIO_Init+0x118>)
 8002970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002972:	4a39      	ldr	r2, [pc, #228]	@ (8002a58 <MX_GPIO_Init+0x118>)
 8002974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800297a:	4b37      	ldr	r3, [pc, #220]	@ (8002a58 <MX_GPIO_Init+0x118>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <MX_GPIO_Init+0x118>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	4a33      	ldr	r2, [pc, #204]	@ (8002a58 <MX_GPIO_Init+0x118>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002992:	4b31      	ldr	r3, [pc, #196]	@ (8002a58 <MX_GPIO_Init+0x118>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a58 <MX_GPIO_Init+0x118>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002a58 <MX_GPIO_Init+0x118>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002a58 <MX_GPIO_Init+0x118>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_1_Pin|RGB_2_Pin|DHT_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	f246 0160 	movw	r1, #24672	@ 0x6060
 80029bc:	4827      	ldr	r0, [pc, #156]	@ (8002a5c <MX_GPIO_Init+0x11c>)
 80029be:	f003 fc73 	bl	80062a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_0_GPIO_Port, RGB_0_Pin, GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2180      	movs	r1, #128	@ 0x80
 80029c6:	4826      	ldr	r0, [pc, #152]	@ (8002a60 <MX_GPIO_Init+0x120>)
 80029c8:	f003 fc6e 	bl	80062a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80029d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	481f      	ldr	r0, [pc, #124]	@ (8002a60 <MX_GPIO_Init+0x120>)
 80029e4:	f003 fa9e 	bl	8005f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_1_Pin RGB_2_Pin DHT_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = RGB_1_Pin|RGB_2_Pin|DHT_Pin|SD_CS_Pin;
 80029e8:	f246 0360 	movw	r3, #24672	@ 0x6060
 80029ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	4816      	ldr	r0, [pc, #88]	@ (8002a5c <MX_GPIO_Init+0x11c>)
 8002a02:	f003 fa8f 	bl	8005f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_0_Pin */
  GPIO_InitStruct.Pin = RGB_0_Pin;
 8002a06:	2380      	movs	r3, #128	@ 0x80
 8002a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB_0_GPIO_Port, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4810      	ldr	r0, [pc, #64]	@ (8002a60 <MX_GPIO_Init+0x120>)
 8002a1e:	f003 fa81 	bl	8005f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8002a22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a3c:	f003 fa72 	bl	8005f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2105      	movs	r1, #5
 8002a44:	2028      	movs	r0, #40	@ 0x28
 8002a46:	f002 fd2c 	bl	80054a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a4a:	2028      	movs	r0, #40	@ 0x28
 8002a4c:	f002 fd45 	bl	80054da <HAL_NVIC_EnableIRQ>

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	@ 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	48000400 	.word	0x48000400
 8002a60:	48000800 	.word	0x48000800

08002a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b090      	sub	sp, #64	@ 0x40
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a6a:	f001 f81f 	bl	8003aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a6e:	f000 f82b 	bl	8002ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a72:	f7ff ff65 	bl	8002940 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a76:	f7ff fb1f 	bl	80020b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002a7a:	f000 fef9 	bl	8003870 <MX_USART2_UART_Init>
//  MX_IWDG_Init();
  MX_RTC_Init();
 8002a7e:	f000 f8b1 	bl	8002be4 <MX_RTC_Init>
  MX_ADC1_Init();
 8002a82:	f7fe fadd 	bl	8001040 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002a86:	f000 fde9 	bl	800365c <MX_TIM3_Init>
  MX_TIM6_Init();
 8002a8a:	f000 fe43 	bl	8003714 <MX_TIM6_Init>
  MX_FATFS_Init();
 8002a8e:	f008 f9af 	bl	800adf0 <MX_FATFS_Init>
  MX_SPI1_Init();
 8002a92:	f000 fb83 	bl	800319c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002a96:	f00b fc75 	bl	800e384 <osKernelInitialize>

  uint8_t test_buf[64];
  HAL_UART_Receive(&huart2, test_buf, sizeof(test_buf), 5000);
 8002a9a:	4639      	mov	r1, r7
 8002a9c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002aa0:	2240      	movs	r2, #64	@ 0x40
 8002aa2:	4807      	ldr	r0, [pc, #28]	@ (8002ac0 <main+0x5c>)
 8002aa4:	f006 fdc9 	bl	800963a <HAL_UART_Receive>
  printf("Received (poll): %s\r\n", test_buf);
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4805      	ldr	r0, [pc, #20]	@ (8002ac4 <main+0x60>)
 8002aae:	f011 ff8d 	bl	80149cc <iprintf>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002ab2:	f7ff fb73 	bl	800219c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002ab6:	f00b fc89 	bl	800e3cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002aba:	bf00      	nop
 8002abc:	e7fd      	b.n	8002aba <main+0x56>
 8002abe:	bf00      	nop
 8002ac0:	200009a0 	.word	0x200009a0
 8002ac4:	08018438 	.word	0x08018438

08002ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b096      	sub	sp, #88	@ 0x58
 8002acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	2244      	movs	r2, #68	@ 0x44
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f011 ffe8 	bl	8014aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002adc:	463b      	mov	r3, r7
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	60da      	str	r2, [r3, #12]
 8002ae8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002aea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002aee:	f003 fc3f 	bl	8006370 <HAL_PWREx_ControlVoltageScaling>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002af8:	f000 f839 	bl	8002b6e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002afc:	230a      	movs	r3, #10
 8002afe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b06:	2310      	movs	r3, #16
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b12:	2302      	movs	r3, #2
 8002b14:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002b1a:	230a      	movs	r3, #10
 8002b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b1e:	2307      	movs	r3, #7
 8002b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b22:	2302      	movs	r3, #2
 8002b24:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b26:	2302      	movs	r3, #2
 8002b28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 fc74 	bl	800641c <HAL_RCC_OscConfig>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002b3a:	f000 f818 	bl	8002b6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b3e:	230f      	movs	r3, #15
 8002b40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b42:	2303      	movs	r3, #3
 8002b44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b52:	463b      	mov	r3, r7
 8002b54:	2104      	movs	r1, #4
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 f83c 	bl	8006bd4 <HAL_RCC_ClockConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b62:	f000 f804 	bl	8002b6e <Error_Handler>
  }
}
 8002b66:	bf00      	nop
 8002b68:	3758      	adds	r7, #88	@ 0x58
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b72:	b672      	cpsid	i
}
 8002b74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b76:	bf00      	nop
 8002b78:	e7fd      	b.n	8002b76 <Error_Handler+0x8>
	...

08002b7c <RGB_SetColor>:
#include "config.h"



void RGB_SetColor(uint8_t _r, uint8_t _g, uint8_t _b)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
 8002b86:	460b      	mov	r3, r1
 8002b88:	71bb      	strb	r3, [r7, #6]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(RGB_RED_PORT, RGB_RED_PIN, _r ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2180      	movs	r1, #128	@ 0x80
 8002b9e:	480f      	ldr	r0, [pc, #60]	@ (8002bdc <RGB_SetColor+0x60>)
 8002ba0:	f003 fb82 	bl	80062a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB_GREEN_PORT, RGB_GREEN_PIN, _g ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002ba4:	79bb      	ldrb	r3, [r7, #6]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf0c      	ite	eq
 8002baa:	2301      	moveq	r3, #1
 8002bac:	2300      	movne	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bb6:	480a      	ldr	r0, [pc, #40]	@ (8002be0 <RGB_SetColor+0x64>)
 8002bb8:	f003 fb76 	bl	80062a8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB_BLUE_PORT, RGB_BLUE_PIN, _b ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002bbc:	797b      	ldrb	r3, [r7, #5]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf0c      	ite	eq
 8002bc2:	2301      	moveq	r3, #1
 8002bc4:	2300      	movne	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002bce:	4804      	ldr	r0, [pc, #16]	@ (8002be0 <RGB_SetColor+0x64>)
 8002bd0:	f003 fb6a 	bl	80062a8 <HAL_GPIO_WritePin>
}
 8002bd4:	bf00      	nop
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	48000800 	.word	0x48000800
 8002be0:	48000400 	.word	0x48000400

08002be4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002bfc:	4b25      	ldr	r3, [pc, #148]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002bfe:	4a26      	ldr	r2, [pc, #152]	@ (8002c98 <MX_RTC_Init+0xb4>)
 8002c00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c02:	4b24      	ldr	r3, [pc, #144]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c08:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c0a:	227f      	movs	r2, #127	@ 0x7f
 8002c0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c0e:	4b21      	ldr	r3, [pc, #132]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c10:	22ff      	movs	r2, #255	@ 0xff
 8002c12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c14:	4b1f      	ldr	r3, [pc, #124]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c20:	4b1c      	ldr	r3, [pc, #112]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c26:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c2c:	4819      	ldr	r0, [pc, #100]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c2e:	f004 feb1 	bl	8007994 <HAL_RTC_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002c38:	f7ff ff99 	bl	8002b6e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2201      	movs	r2, #1
 8002c54:	4619      	mov	r1, r3
 8002c56:	480f      	ldr	r0, [pc, #60]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c58:	f004 ff24 	bl	8007aa4 <HAL_RTC_SetTime>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002c62:	f7ff ff84 	bl	8002b6e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c66:	2301      	movs	r3, #1
 8002c68:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c76:	463b      	mov	r3, r7
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <MX_RTC_Init+0xb0>)
 8002c7e:	f005 f80a 	bl	8007c96 <HAL_RTC_SetDate>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002c88:	f7ff ff71 	bl	8002b6e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c8c:	bf00      	nop
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000414 	.word	0x20000414
 8002c98:	40002800 	.word	0x40002800

08002c9c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0a4      	sub	sp, #144	@ 0x90
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ca4:	f107 0308 	add.w	r3, r7, #8
 8002ca8:	2288      	movs	r2, #136	@ 0x88
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f011 fefd 	bl	8014aac <memset>
  if(rtcHandle->Instance==RTC)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a10      	ldr	r2, [pc, #64]	@ (8002cf8 <HAL_RTC_MspInit+0x5c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d118      	bne.n	8002cee <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002cc0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002cc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cca:	f107 0308 	add.w	r3, r7, #8
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 f9a4 	bl	800701c <HAL_RCCEx_PeriphCLKConfig>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002cda:	f7ff ff48 	bl	8002b6e <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cde:	4b07      	ldr	r3, [pc, #28]	@ (8002cfc <HAL_RTC_MspInit+0x60>)
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ce4:	4a05      	ldr	r2, [pc, #20]	@ (8002cfc <HAL_RTC_MspInit+0x60>)
 8002ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3790      	adds	r7, #144	@ 0x90
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40002800 	.word	0x40002800
 8002cfc:	40021000 	.word	0x40021000

08002d00 <SD_Init>:

static FATFS fs;
static FIL fil;
extern osMutexId_t sdMutexHandle;

void SD_Init(void) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
    f_mount(&fs, "", 1);
 8002d04:	2201      	movs	r2, #1
 8002d06:	4903      	ldr	r1, [pc, #12]	@ (8002d14 <SD_Init+0x14>)
 8002d08:	4803      	ldr	r0, [pc, #12]	@ (8002d18 <SD_Init+0x18>)
 8002d0a:	f00a fbc3 	bl	800d494 <f_mount>
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	08018450 	.word	0x08018450
 8002d18:	20000438 	.word	0x20000438

08002d1c <SD_AppendToFile>:
}



void SD_AppendToFile(const char *filename, const char *content)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
    UINT bytesWritten;
    FRESULT res = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);
 8002d26:	2232      	movs	r2, #50	@ 0x32
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4810      	ldr	r0, [pc, #64]	@ (8002d6c <SD_AppendToFile+0x50>)
 8002d2c:	f00a fc16 	bl	800d55c <f_open>
 8002d30:	4603      	mov	r3, r0
 8002d32:	73fb      	strb	r3, [r7, #15]

    if (res == FR_OK)
 8002d34:	7bfb      	ldrb	r3, [r7, #15]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10d      	bne.n	8002d56 <SD_AppendToFile+0x3a>
    {
        f_write(&fil, content, strlen(content), &bytesWritten);
 8002d3a:	6838      	ldr	r0, [r7, #0]
 8002d3c:	f7fd faa8 	bl	8000290 <strlen>
 8002d40:	4602      	mov	r2, r0
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	4808      	ldr	r0, [pc, #32]	@ (8002d6c <SD_AppendToFile+0x50>)
 8002d4a:	f00a ff36 	bl	800dbba <f_write>
        f_close(&fil);
 8002d4e:	4807      	ldr	r0, [pc, #28]	@ (8002d6c <SD_AppendToFile+0x50>)
 8002d50:	f00b f960 	bl	800e014 <f_close>
    }
    else
    {
        printf("f_open failed for '%s'. Error code: %d\r\n", filename, res);
    }
}
 8002d54:	e005      	b.n	8002d62 <SD_AppendToFile+0x46>
        printf("f_open failed for '%s'. Error code: %d\r\n", filename, res);
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4804      	ldr	r0, [pc, #16]	@ (8002d70 <SD_AppendToFile+0x54>)
 8002d5e:	f011 fe35 	bl	80149cc <iprintf>
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2000066c 	.word	0x2000066c
 8002d70:	080184a4 	.word	0x080184a4

08002d74 <SD_ReadFilePrintRange>:

void SD_ReadFilePrintRange(const char* filename, DateTime* start, DateTime* end)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	f5ad 7d5e 	sub.w	sp, sp, #888	@ 0x378
 8002d7a:	af04      	add	r7, sp, #16
 8002d7c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002d80:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002d84:	6018      	str	r0, [r3, #0]
 8002d86:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002d8a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002d8e:	6019      	str	r1, [r3, #0]
 8002d90:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002d94:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8002d98:	601a      	str	r2, [r3, #0]
    FIL file;
    char buffer[64];
    char line[128] = {0};
 8002d9a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002d9e:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8002da2:	4618      	mov	r0, r3
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	461a      	mov	r2, r3
 8002da8:	2100      	movs	r1, #0
 8002daa:	f011 fe7f 	bl	8014aac <memset>
    UINT bytesRead;
    int lineIndex = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

    osMutexAcquire(sdMutexHandle, osWaitForever);
 8002db4:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa8 <SD_ReadFilePrintRange+0x234>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f00b fe3a 	bl	800ea36 <osMutexAcquire>

    if (f_open(&file, filename, FA_READ) == FR_OK)
 8002dc2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002dc6:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002dca:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8002dce:	2201      	movs	r2, #1
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	f00a fbc3 	bl	800d55c <f_open>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f040 81c3 	bne.w	8003164 <SD_ReadFilePrintRange+0x3f0>
    {
        printf("Reading %s:\r\n", filename);
 8002dde:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002de2:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002de6:	6819      	ldr	r1, [r3, #0]
 8002de8:	4870      	ldr	r0, [pc, #448]	@ (8002fac <SD_ReadFilePrintRange+0x238>)
 8002dea:	f011 fdef 	bl	80149cc <iprintf>

        do {
            FRESULT readResult = f_read(&file, buffer, sizeof(buffer) - 1, &bytesRead);
 8002dee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002df2:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8002df6:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8002dfa:	223f      	movs	r2, #63	@ 0x3f
 8002dfc:	f00a fd6f 	bl	800d8de <f_read>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f887 335f 	strb.w	r3, [r7, #863]	@ 0x35f
            if (readResult != FR_OK) {
 8002e06:	f897 335f 	ldrb.w	r3, [r7, #863]	@ 0x35f
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <SD_ReadFilePrintRange+0xa8>
                printf("f_read error: %d\r\n", readResult);
 8002e0e:	f897 335f 	ldrb.w	r3, [r7, #863]	@ 0x35f
 8002e12:	4619      	mov	r1, r3
 8002e14:	4866      	ldr	r0, [pc, #408]	@ (8002fb0 <SD_ReadFilePrintRange+0x23c>)
 8002e16:	f011 fdd9 	bl	80149cc <iprintf>
                break;
 8002e1a:	e104      	b.n	8003026 <SD_ReadFilePrintRange+0x2b2>
            }

            buffer[bytesRead] = '\0';
 8002e1c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002e20:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8002e2a:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 8002e2e:	2100      	movs	r1, #0
 8002e30:	54d1      	strb	r1, [r2, r3]

            for (UINT i = 0; i < bytesRead; ++i)
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8002e38:	e0e3      	b.n	8003002 <SD_ReadFilePrintRange+0x28e>
            {
                if (buffer[i] == '\n' || lineIndex >= sizeof(line) - 2)
 8002e3a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002e3e:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8002e42:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b0a      	cmp	r3, #10
 8002e4c:	d004      	beq.n	8002e58 <SD_ReadFilePrintRange+0xe4>
 8002e4e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002e52:	2b7d      	cmp	r3, #125	@ 0x7d
 8002e54:	f240 80b4 	bls.w	8002fc0 <SD_ReadFilePrintRange+0x24c>
                {
                    line[lineIndex] = '\0';
 8002e58:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002e5c:	f5a3 7243 	sub.w	r2, r3, #780	@ 0x30c
 8002e60:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002e64:	4413      	add	r3, r2
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]

                    DateTime dt;
                    int full_year, month, day, hour, min, sec;

                    if (sscanf(line, "%d-%d-%d %d:%d:%d",
 8002e6a:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002e6e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002e72:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8002e76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e7a:	9303      	str	r3, [sp, #12]
 8002e7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e80:	9302      	str	r3, [sp, #8]
 8002e82:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4948      	ldr	r1, [pc, #288]	@ (8002fb4 <SD_ReadFilePrintRange+0x240>)
 8002e92:	f010 fdcb 	bl	8013a2c <siscanf>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	f040 8081 	bne.w	8002fa0 <SD_ReadFilePrintRange+0x22c>
                            &full_year, &month, &day, &hour, &min, &sec) == 6)
                    {
                        dt.date.year = full_year % 100;
 8002e9e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ea2:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a43      	ldr	r2, [pc, #268]	@ (8002fb8 <SD_ReadFilePrintRange+0x244>)
 8002eaa:	fb82 1203 	smull	r1, r2, r2, r3
 8002eae:	1151      	asrs	r1, r2, #5
 8002eb0:	17da      	asrs	r2, r3, #31
 8002eb2:	1a8a      	subs	r2, r1, r2
 8002eb4:	2164      	movs	r1, #100	@ 0x64
 8002eb6:	fb01 f202 	mul.w	r2, r1, r2
 8002eba:	1a9a      	subs	r2, r3, r2
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ec2:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002ec6:	719a      	strb	r2, [r3, #6]
                        dt.date.month = (uint8_t)month;
 8002ec8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ecc:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ed8:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002edc:	715a      	strb	r2, [r3, #5]
                        dt.date.day = (uint8_t)day;
 8002ede:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ee2:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002eee:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002ef2:	711a      	strb	r2, [r3, #4]
                        dt.time.hours = (uint8_t)hour;
 8002ef4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ef8:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f04:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002f08:	71da      	strb	r2, [r3, #7]
                        dt.time.minutes = (uint8_t)min;
 8002f0a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f0e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f1a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002f1e:	721a      	strb	r2, [r3, #8]
                        dt.time.seconds = (uint8_t)sec;
 8002f20:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f24:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f30:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002f34:	725a      	strb	r2, [r3, #9]

                        int cmp_start = DateTime_Compare(&dt, start);
 8002f36:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f3a:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002f3e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	4610      	mov	r0, r2
 8002f46:	f7fe ff11 	bl	8001d6c <DateTime_Compare>
 8002f4a:	f8c7 0358 	str.w	r0, [r7, #856]	@ 0x358
                        int cmp_end = DateTime_Compare(&dt, end);
 8002f4e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f52:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8002f56:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f7fe ff05 	bl	8001d6c <DateTime_Compare>
 8002f62:	f8c7 0354 	str.w	r0, [r7, #852]	@ 0x354

                        if (cmp_end > 0) {
 8002f66:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dd0a      	ble.n	8002f84 <SD_ReadFilePrintRange+0x210>
                            // Reached past the end — break early
                            f_close(&file);
 8002f6e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002f72:	4618      	mov	r0, r3
 8002f74:	f00b f84e 	bl	800e014 <f_close>
                            osMutexRelease(sdMutexHandle);
 8002f78:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <SD_ReadFilePrintRange+0x234>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f00b fda5 	bl	800eacc <osMutexRelease>
 8002f82:	e0fc      	b.n	800317e <SD_ReadFilePrintRange+0x40a>
                            return;
                        }

                        if (cmp_start >= 0 && cmp_end <= 0) {
 8002f84:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db09      	blt.n	8002fa0 <SD_ReadFilePrintRange+0x22c>
 8002f8c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	dc05      	bgt.n	8002fa0 <SD_ReadFilePrintRange+0x22c>
                            printf("DATA: %s\r\n", line);
 8002f94:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4808      	ldr	r0, [pc, #32]	@ (8002fbc <SD_ReadFilePrintRange+0x248>)
 8002f9c:	f011 fd16 	bl	80149cc <iprintf>
                        }
                    }

                    lineIndex = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
                {
 8002fa6:	e027      	b.n	8002ff8 <SD_ReadFilePrintRange+0x284>
 8002fa8:	200003f4 	.word	0x200003f4
 8002fac:	08018454 	.word	0x08018454
 8002fb0:	08018464 	.word	0x08018464
 8002fb4:	080184d0 	.word	0x080184d0
 8002fb8:	51eb851f 	.word	0x51eb851f
 8002fbc:	08018478 	.word	0x08018478
                }
                else if (buffer[i] != '\r')
 8002fc0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002fc4:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8002fc8:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b0d      	cmp	r3, #13
 8002fd2:	d011      	beq.n	8002ff8 <SD_ReadFilePrintRange+0x284>
                {
                    line[lineIndex++] = buffer[i];
 8002fd4:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8002fde:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8002fe2:	f5a2 7123 	sub.w	r1, r2, #652	@ 0x28c
 8002fe6:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8002fea:	440a      	add	r2, r1
 8002fec:	7811      	ldrb	r1, [r2, #0]
 8002fee:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8002ff2:	f5a2 7243 	sub.w	r2, r2, #780	@ 0x30c
 8002ff6:	54d1      	strb	r1, [r2, r3]
            for (UINT i = 0; i < bytesRead; ++i)
 8002ff8:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8003002:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003006:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8003010:	429a      	cmp	r2, r3
 8003012:	f4ff af12 	bcc.w	8002e3a <SD_ReadFilePrintRange+0xc6>
                }
            }

        } while (bytesRead > 0);
 8003016:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 800301a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f47f aee4 	bne.w	8002dee <SD_ReadFilePrintRange+0x7a>


        if (lineIndex > 0)
 8003026:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800302a:	2b00      	cmp	r3, #0
 800302c:	f340 8094 	ble.w	8003158 <SD_ReadFilePrintRange+0x3e4>
        {
            line[lineIndex] = '\0';
 8003030:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003034:	f5a3 7243 	sub.w	r2, r3, #780	@ 0x30c
 8003038:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800303c:	4413      	add	r3, r2
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]

            DateTime dt;
            int full_year, month, day, hour, min, sec;

            if (sscanf(line, "%d-%d-%d %d:%d:%d",
 8003042:	f107 0120 	add.w	r1, r7, #32
 8003046:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800304a:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 800304e:	f107 0310 	add.w	r3, r7, #16
 8003052:	9303      	str	r3, [sp, #12]
 8003054:	f107 0314 	add.w	r3, r7, #20
 8003058:	9302      	str	r3, [sp, #8]
 800305a:	f107 0318 	add.w	r3, r7, #24
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	460b      	mov	r3, r1
 8003068:	4947      	ldr	r1, [pc, #284]	@ (8003188 <SD_ReadFilePrintRange+0x414>)
 800306a:	f010 fcdf 	bl	8013a2c <siscanf>
 800306e:	4603      	mov	r3, r0
 8003070:	2b06      	cmp	r3, #6
 8003072:	d171      	bne.n	8003158 <SD_ReadFilePrintRange+0x3e4>
                    &full_year, &month, &day, &hour, &min, &sec) == 6)
            {
                dt.date.year = full_year % 100;
 8003074:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003078:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a43      	ldr	r2, [pc, #268]	@ (800318c <SD_ReadFilePrintRange+0x418>)
 8003080:	fb82 1203 	smull	r1, r2, r2, r3
 8003084:	1151      	asrs	r1, r2, #5
 8003086:	17da      	asrs	r2, r3, #31
 8003088:	1a8a      	subs	r2, r1, r2
 800308a:	2164      	movs	r1, #100	@ 0x64
 800308c:	fb01 f202 	mul.w	r2, r1, r2
 8003090:	1a9a      	subs	r2, r3, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003098:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 800309c:	719a      	strb	r2, [r3, #6]
                dt.date.month = (uint8_t)month;
 800309e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80030a2:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80030ae:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80030b2:	715a      	strb	r2, [r3, #5]
                dt.date.day = (uint8_t)day;
 80030b4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80030b8:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80030c4:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80030c8:	711a      	strb	r2, [r3, #4]
                dt.time.hours = (uint8_t)hour;
 80030ca:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80030ce:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80030da:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80030de:	71da      	strb	r2, [r3, #7]
                dt.time.minutes = (uint8_t)min;
 80030e0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80030e4:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80030f0:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 80030f4:	721a      	strb	r2, [r3, #8]
                dt.time.seconds = (uint8_t)sec;
 80030f6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80030fa:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003106:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 800310a:	725a      	strb	r2, [r3, #9]

                int cmp_start = DateTime_Compare(&dt, start);
 800310c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003110:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8003114:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003118:	6819      	ldr	r1, [r3, #0]
 800311a:	4610      	mov	r0, r2
 800311c:	f7fe fe26 	bl	8001d6c <DateTime_Compare>
 8003120:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350
                int cmp_end = DateTime_Compare(&dt, end);
 8003124:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003128:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 800312c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003130:	6819      	ldr	r1, [r3, #0]
 8003132:	4610      	mov	r0, r2
 8003134:	f7fe fe1a 	bl	8001d6c <DateTime_Compare>
 8003138:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c

                if (cmp_end <= 0 && cmp_start >= 0) {
 800313c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003140:	2b00      	cmp	r3, #0
 8003142:	dc09      	bgt.n	8003158 <SD_ReadFilePrintRange+0x3e4>
 8003144:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003148:	2b00      	cmp	r3, #0
 800314a:	db05      	blt.n	8003158 <SD_ReadFilePrintRange+0x3e4>
                    printf("DATA: %s\r\n", line);
 800314c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003150:	4619      	mov	r1, r3
 8003152:	480f      	ldr	r0, [pc, #60]	@ (8003190 <SD_ReadFilePrintRange+0x41c>)
 8003154:	f011 fc3a 	bl	80149cc <iprintf>
                }
            }
        }

        f_close(&file);
 8003158:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800315c:	4618      	mov	r0, r3
 800315e:	f00a ff59 	bl	800e014 <f_close>
 8003162:	e007      	b.n	8003174 <SD_ReadFilePrintRange+0x400>
    }
    else
    {
        printf("Failed to open %s for reading\r\n", filename);
 8003164:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003168:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	4809      	ldr	r0, [pc, #36]	@ (8003194 <SD_ReadFilePrintRange+0x420>)
 8003170:	f011 fc2c 	bl	80149cc <iprintf>
    }

    osMutexRelease(sdMutexHandle);
 8003174:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <SD_ReadFilePrintRange+0x424>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f00b fca7 	bl	800eacc <osMutexRelease>
}
 800317e:	f507 775a 	add.w	r7, r7, #872	@ 0x368
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	080184d0 	.word	0x080184d0
 800318c:	51eb851f 	.word	0x51eb851f
 8003190:	08018478 	.word	0x08018478
 8003194:	08018484 	.word	0x08018484
 8003198:	200003f4 	.word	0x200003f4

0800319c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003214 <MX_SPI1_Init+0x78>)
 80031a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80031ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031ae:	4b18      	ldr	r3, [pc, #96]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031b4:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031b6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80031ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031bc:	4b14      	ldr	r3, [pc, #80]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031be:	2200      	movs	r2, #0
 80031c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031c2:	4b13      	ldr	r3, [pc, #76]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031c8:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031d2:	2230      	movs	r2, #48	@ 0x30
 80031d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031d8:	2200      	movs	r2, #0
 80031da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031de:	2200      	movs	r2, #0
 80031e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80031e8:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031ea:	2207      	movs	r2, #7
 80031ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031ee:	4b08      	ldr	r3, [pc, #32]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031f4:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031f6:	2208      	movs	r2, #8
 80031f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031fa:	4805      	ldr	r0, [pc, #20]	@ (8003210 <MX_SPI1_Init+0x74>)
 80031fc:	f004 fef0 	bl	8007fe0 <HAL_SPI_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003206:	f7ff fcb2 	bl	8002b6e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000089c 	.word	0x2000089c
 8003214:	40013000 	.word	0x40013000

08003218 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	605a      	str	r2, [r3, #4]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	60da      	str	r2, [r3, #12]
 800322e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a17      	ldr	r2, [pc, #92]	@ (8003294 <HAL_SPI_MspInit+0x7c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d128      	bne.n	800328c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800323a:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <HAL_SPI_MspInit+0x80>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323e:	4a16      	ldr	r2, [pc, #88]	@ (8003298 <HAL_SPI_MspInit+0x80>)
 8003240:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003244:	6613      	str	r3, [r2, #96]	@ 0x60
 8003246:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <HAL_SPI_MspInit+0x80>)
 8003248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HAL_SPI_MspInit+0x80>)
 8003254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003256:	4a10      	ldr	r2, [pc, #64]	@ (8003298 <HAL_SPI_MspInit+0x80>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800325e:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <HAL_SPI_MspInit+0x80>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800326a:	23e0      	movs	r3, #224	@ 0xe0
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003276:	2303      	movs	r3, #3
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800327a:	2305      	movs	r3, #5
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003288:	f002 fe4c 	bl	8005f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800328c:	bf00      	nop
 800328e:	3728      	adds	r7, #40	@ 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40013000 	.word	0x40013000
 8003298:	40021000 	.word	0x40021000

0800329c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a2:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_MspInit+0x4c>)
 80032a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a6:	4a10      	ldr	r2, [pc, #64]	@ (80032e8 <HAL_MspInit+0x4c>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80032ae:	4b0e      	ldr	r3, [pc, #56]	@ (80032e8 <HAL_MspInit+0x4c>)
 80032b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_MspInit+0x4c>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	4a0a      	ldr	r2, [pc, #40]	@ (80032e8 <HAL_MspInit+0x4c>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032c6:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <HAL_MspInit+0x4c>)
 80032c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	210f      	movs	r1, #15
 80032d6:	f06f 0001 	mvn.w	r0, #1
 80032da:	f002 f8e2 	bl	80054a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000

080032ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <NMI_Handler+0x4>

080032f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <HardFault_Handler+0x4>

080032fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003300:	bf00      	nop
 8003302:	e7fd      	b.n	8003300 <MemManage_Handler+0x4>

08003304 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <BusFault_Handler+0x4>

0800330c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <UsageFault_Handler+0x4>

08003314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003326:	f000 fc1d 	bl	8003b64 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800332a:	f00e f91f 	bl	801156c <xTaskGetSchedulerState>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d001      	beq.n	8003338 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003334:	f00f fa38 	bl	80127a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}

0800333c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003340:	4802      	ldr	r0, [pc, #8]	@ (800334c <DMA1_Channel1_IRQHandler+0x10>)
 8003342:	f002 fa7c 	bl	800583e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200002a4 	.word	0x200002a4

08003350 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003354:	4802      	ldr	r0, [pc, #8]	@ (8003360 <USART2_IRQHandler+0x10>)
 8003356:	f006 fa85 	bl	8009864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200009a0 	.word	0x200009a0

08003364 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8003368:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800336c:	f002 ffce 	bl	800630c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003370:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003374:	f002 ffca 	bl	800630c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003378:	bf00      	nop
 800337a:	bd80      	pop	{r7, pc}

0800337c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return 1;
 8003380:	2301      	movs	r3, #1
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <_kill>:

int _kill(int pid, int sig)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003396:	f011 fc55 	bl	8014c44 <__errno>
 800339a:	4603      	mov	r3, r0
 800339c:	2216      	movs	r2, #22
 800339e:	601a      	str	r2, [r3, #0]
  return -1;
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <_exit>:

void _exit (int status)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ffe7 	bl	800338c <_kill>
  while (1) {}    /* Make sure we hang here */
 80033be:	bf00      	nop
 80033c0:	e7fd      	b.n	80033be <_exit+0x12>

080033c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e00a      	b.n	80033ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033d4:	f3af 8000 	nop.w
 80033d8:	4601      	mov	r1, r0
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	60ba      	str	r2, [r7, #8]
 80033e0:	b2ca      	uxtb	r2, r1
 80033e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3301      	adds	r3, #1
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	dbf0      	blt.n	80033d4 <_read+0x12>
  }

  return len;
 80033f2:	687b      	ldr	r3, [r7, #4]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003404:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003424:	605a      	str	r2, [r3, #4]
  return 0;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <_isatty>:

int _isatty(int file)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800343c:	2301      	movs	r3, #1
}
 800343e:	4618      	mov	r0, r3
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800344a:	b480      	push	{r7}
 800344c:	b085      	sub	sp, #20
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800346c:	4a14      	ldr	r2, [pc, #80]	@ (80034c0 <_sbrk+0x5c>)
 800346e:	4b15      	ldr	r3, [pc, #84]	@ (80034c4 <_sbrk+0x60>)
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003478:	4b13      	ldr	r3, [pc, #76]	@ (80034c8 <_sbrk+0x64>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003480:	4b11      	ldr	r3, [pc, #68]	@ (80034c8 <_sbrk+0x64>)
 8003482:	4a12      	ldr	r2, [pc, #72]	@ (80034cc <_sbrk+0x68>)
 8003484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003486:	4b10      	ldr	r3, [pc, #64]	@ (80034c8 <_sbrk+0x64>)
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d207      	bcs.n	80034a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003494:	f011 fbd6 	bl	8014c44 <__errno>
 8003498:	4603      	mov	r3, r0
 800349a:	220c      	movs	r2, #12
 800349c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800349e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034a2:	e009      	b.n	80034b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034a4:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <_sbrk+0x64>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034aa:	4b07      	ldr	r3, [pc, #28]	@ (80034c8 <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <_sbrk+0x64>)
 80034b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034b6:	68fb      	ldr	r3, [r7, #12]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20018000 	.word	0x20018000
 80034c4:	00000400 	.word	0x00000400
 80034c8:	20000900 	.word	0x20000900
 80034cc:	200067b8 	.word	0x200067b8

080034d0 <UpdateSampleRateForMode>:
extern osMessageQueueId_t eventQueueHandle;
extern DateTime* g_dt;


void UpdateSampleRateForMode(SystemMode mode)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
    uint32_t newDelay = (mode == MODE_ERROR) ? SAMPLE_RATE_ERROR : SAMPLE_RATE_NORMAL;
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d102      	bne.n	80034e6 <UpdateSampleRateForMode+0x16>
 80034e0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80034e4:	e001      	b.n	80034ea <UpdateSampleRateForMode+0x1a>
 80034e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80034ea:	60fb      	str	r3, [r7, #12]
    osTimerStop(timID);
 80034ec:	4b07      	ldr	r3, [pc, #28]	@ (800350c <UpdateSampleRateForMode+0x3c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f00b f8fd 	bl	800e6f0 <osTimerStop>
    osTimerStart(timID, newDelay);
 80034f6:	4b05      	ldr	r3, [pc, #20]	@ (800350c <UpdateSampleRateForMode+0x3c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f00b f8c9 	bl	800e694 <osTimerStart>
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200003f0 	.word	0x200003f0

08003510 <SystemState_Get>:

void SystemState_Init(void) {
    currentMode = MODE_NORMAL;
}

SystemMode SystemState_Get(void) {
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
    return currentMode;
 8003514:	4b03      	ldr	r3, [pc, #12]	@ (8003524 <SystemState_Get+0x14>)
 8003516:	781b      	ldrb	r3, [r3, #0]
}
 8003518:	4618      	mov	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000904 	.word	0x20000904

08003528 <SystemState_Update>:

int SystemState_Update(MessageData* msg, SystemConfig* cfg) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
    SystemMode newMode = MODE_NORMAL;
 8003532:	2300      	movs	r3, #0
 8003534:	75fb      	strb	r3, [r7, #23]

    if (
        msg->potent_int < cfg->voltage_min ||
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	889b      	ldrh	r3, [r3, #4]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	edd3 7a01 	vldr	s15, [r3, #4]
    if (
 8003548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800354c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003550:	d417      	bmi.n	8003582 <SystemState_Update+0x5a>
        msg->temperature_int < cfg->temp_min ||
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
        msg->potent_int < cfg->voltage_min ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d311      	bcc.n	8003582 <SystemState_Update+0x5a>
        msg->temperature_int > cfg->temp_max ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	781a      	ldrb	r2, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	785b      	ldrb	r3, [r3, #1]
        msg->temperature_int < cfg->temp_min ||
 8003566:	429a      	cmp	r2, r3
 8003568:	d80b      	bhi.n	8003582 <SystemState_Update+0x5a>
        msg->humidity_int < cfg->humidity_min ||
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	789a      	ldrb	r2, [r3, #2]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	789b      	ldrb	r3, [r3, #2]
        msg->temperature_int > cfg->temp_max ||
 8003572:	429a      	cmp	r2, r3
 8003574:	d305      	bcc.n	8003582 <SystemState_Update+0x5a>
        msg->light < cfg->light_min
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	78d2      	ldrb	r2, [r2, #3]
        msg->humidity_int < cfg->humidity_min ||
 800357e:	4293      	cmp	r3, r2
 8003580:	d201      	bcs.n	8003586 <SystemState_Update+0x5e>
    ) {
        newMode = MODE_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
    }

    if (newMode != currentMode) {
 8003586:	4b28      	ldr	r3, [pc, #160]	@ (8003628 <SystemState_Update+0x100>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	7dfa      	ldrb	r2, [r7, #23]
 800358c:	429a      	cmp	r2, r3
 800358e:	d045      	beq.n	800361c <SystemState_Update+0xf4>
        printf("MODE CHANGED: %d → %d\r\n", currentMode, newMode);
 8003590:	4b25      	ldr	r3, [pc, #148]	@ (8003628 <SystemState_Update+0x100>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	4619      	mov	r1, r3
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	461a      	mov	r2, r3
 800359a:	4824      	ldr	r0, [pc, #144]	@ (800362c <SystemState_Update+0x104>)
 800359c:	f011 fa16 	bl	80149cc <iprintf>

        SystemEvent event = {
 80035a0:	2300      	movs	r3, #0
 80035a2:	733b      	strb	r3, [r7, #12]
 80035a4:	4b20      	ldr	r3, [pc, #128]	@ (8003628 <SystemState_Update+0x100>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	737b      	strb	r3, [r7, #13]
 80035aa:	7dfb      	ldrb	r3, [r7, #23]
 80035ac:	73bb      	strb	r3, [r7, #14]
            .type = EVENT_MODE_CHANGED,
            .old_mode = currentMode,
            .new_mode = newMode,
            .date = g_dt->date,
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <SystemState_Update+0x108>)
 80035b0:	681a      	ldr	r2, [r3, #0]
        SystemEvent event = {
 80035b2:	f107 030f 	add.w	r3, r7, #15
 80035b6:	3204      	adds	r2, #4
 80035b8:	8811      	ldrh	r1, [r2, #0]
 80035ba:	7892      	ldrb	r2, [r2, #2]
 80035bc:	8019      	strh	r1, [r3, #0]
 80035be:	709a      	strb	r2, [r3, #2]
            .time = g_dt->time
 80035c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <SystemState_Update+0x108>)
 80035c2:	681a      	ldr	r2, [r3, #0]
        SystemEvent event = {
 80035c4:	f107 0312 	add.w	r3, r7, #18
 80035c8:	3207      	adds	r2, #7
 80035ca:	8811      	ldrh	r1, [r2, #0]
 80035cc:	7892      	ldrb	r2, [r2, #2]
 80035ce:	8019      	strh	r1, [r3, #0]
 80035d0:	709a      	strb	r2, [r3, #2]
        };

        osMessageQueuePut(eventQueueHandle, &event, 0, 0);
 80035d2:	4b18      	ldr	r3, [pc, #96]	@ (8003634 <SystemState_Update+0x10c>)
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	f107 010c 	add.w	r1, r7, #12
 80035da:	2300      	movs	r3, #0
 80035dc:	2200      	movs	r2, #0
 80035de:	f00b fc69 	bl	800eeb4 <osMessageQueuePut>
        currentMode = newMode;
 80035e2:	4a11      	ldr	r2, [pc, #68]	@ (8003628 <SystemState_Update+0x100>)
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	7013      	strb	r3, [r2, #0]
        UpdateSampleRateForMode(currentMode);
 80035e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003628 <SystemState_Update+0x100>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff6f 	bl	80034d0 <UpdateSampleRateForMode>

        switch (currentMode) {
 80035f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003628 <SystemState_Update+0x100>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <SystemState_Update+0xd8>
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d006      	beq.n	800360c <SystemState_Update+0xe4>
 80035fe:	e00b      	b.n	8003618 <SystemState_Update+0xf0>
            case MODE_NORMAL:
                RGB_SetColor(1, 0, 0); // Green
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	2001      	movs	r0, #1
 8003606:	f7ff fab9 	bl	8002b7c <RGB_SetColor>
                break;
 800360a:	e005      	b.n	8003618 <SystemState_Update+0xf0>
            case MODE_ERROR:
                RGB_SetColor(0, 0, 1); // Red
 800360c:	2201      	movs	r2, #1
 800360e:	2100      	movs	r1, #0
 8003610:	2000      	movs	r0, #0
 8003612:	f7ff fab3 	bl	8002b7c <RGB_SetColor>
                break;
 8003616:	bf00      	nop
        }

        return 1;
 8003618:	2301      	movs	r3, #1
 800361a:	e000      	b.n	800361e <SystemState_Update+0xf6>
    }

    return 0;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3718      	adds	r7, #24
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000904 	.word	0x20000904
 800362c:	080184e4 	.word	0x080184e4
 8003630:	2000032c 	.word	0x2000032c
 8003634:	20000310 	.word	0x20000310

08003638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <SystemInit+0x20>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	4a05      	ldr	r2, [pc, #20]	@ (8003658 <SystemInit+0x20>)
 8003644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	@ 0x28
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003662:	f107 031c 	add.w	r3, r7, #28
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800366e:	463b      	mov	r3, r7
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]
 800367c:	615a      	str	r2, [r3, #20]
 800367e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003680:	4b22      	ldr	r3, [pc, #136]	@ (800370c <MX_TIM3_Init+0xb0>)
 8003682:	4a23      	ldr	r2, [pc, #140]	@ (8003710 <MX_TIM3_Init+0xb4>)
 8003684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8003686:	4b21      	ldr	r3, [pc, #132]	@ (800370c <MX_TIM3_Init+0xb0>)
 8003688:	224f      	movs	r2, #79	@ 0x4f
 800368a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368c:	4b1f      	ldr	r3, [pc, #124]	@ (800370c <MX_TIM3_Init+0xb0>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3815;
 8003692:	4b1e      	ldr	r3, [pc, #120]	@ (800370c <MX_TIM3_Init+0xb0>)
 8003694:	f640 62e7 	movw	r2, #3815	@ 0xee7
 8003698:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800369a:	4b1c      	ldr	r3, [pc, #112]	@ (800370c <MX_TIM3_Init+0xb0>)
 800369c:	2200      	movs	r2, #0
 800369e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036a0:	4b1a      	ldr	r3, [pc, #104]	@ (800370c <MX_TIM3_Init+0xb0>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80036a6:	4819      	ldr	r0, [pc, #100]	@ (800370c <MX_TIM3_Init+0xb0>)
 80036a8:	f005 f980 	bl	80089ac <HAL_TIM_PWM_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80036b2:	f7ff fa5c 	bl	8002b6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036be:	f107 031c 	add.w	r3, r7, #28
 80036c2:	4619      	mov	r1, r3
 80036c4:	4811      	ldr	r0, [pc, #68]	@ (800370c <MX_TIM3_Init+0xb0>)
 80036c6:	f005 fe59 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80036d0:	f7ff fa4d 	bl	8002b6e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036d4:	2360      	movs	r3, #96	@ 0x60
 80036d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1907;
 80036d8:	f240 7373 	movw	r3, #1907	@ 0x773
 80036dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036de:	2300      	movs	r3, #0
 80036e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036e6:	463b      	mov	r3, r7
 80036e8:	2200      	movs	r2, #0
 80036ea:	4619      	mov	r1, r3
 80036ec:	4807      	ldr	r0, [pc, #28]	@ (800370c <MX_TIM3_Init+0xb0>)
 80036ee:	f005 f9b5 	bl	8008a5c <HAL_TIM_PWM_ConfigChannel>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80036f8:	f7ff fa39 	bl	8002b6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80036fc:	4803      	ldr	r0, [pc, #12]	@ (800370c <MX_TIM3_Init+0xb0>)
 80036fe:	f000 f87f 	bl	8003800 <HAL_TIM_MspPostInit>

}
 8003702:	bf00      	nop
 8003704:	3728      	adds	r7, #40	@ 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000908 	.word	0x20000908
 8003710:	40000400 	.word	0x40000400

08003714 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800371a:	1d3b      	adds	r3, r7, #4
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003724:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <MX_TIM6_Init+0x64>)
 8003726:	4a15      	ldr	r2, [pc, #84]	@ (800377c <MX_TIM6_Init+0x68>)
 8003728:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 800372a:	4b13      	ldr	r3, [pc, #76]	@ (8003778 <MX_TIM6_Init+0x64>)
 800372c:	224f      	movs	r2, #79	@ 0x4f
 800372e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <MX_TIM6_Init+0x64>)
 8003732:	2200      	movs	r2, #0
 8003734:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8003736:	4b10      	ldr	r3, [pc, #64]	@ (8003778 <MX_TIM6_Init+0x64>)
 8003738:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800373c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800373e:	4b0e      	ldr	r3, [pc, #56]	@ (8003778 <MX_TIM6_Init+0x64>)
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003744:	480c      	ldr	r0, [pc, #48]	@ (8003778 <MX_TIM6_Init+0x64>)
 8003746:	f005 f871 	bl	800882c <HAL_TIM_Base_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003750:	f7ff fa0d 	bl	8002b6e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003754:	2300      	movs	r3, #0
 8003756:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800375c:	1d3b      	adds	r3, r7, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4805      	ldr	r0, [pc, #20]	@ (8003778 <MX_TIM6_Init+0x64>)
 8003762:	f005 fe0b 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800376c:	f7ff f9ff 	bl	8002b6e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000954 	.word	0x20000954
 800377c:	40001000 	.word	0x40001000

08003780 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <HAL_TIM_PWM_MspInit+0x38>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10b      	bne.n	80037aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_TIM_PWM_MspInit+0x3c>)
 8003794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003796:	4a09      	ldr	r2, [pc, #36]	@ (80037bc <HAL_TIM_PWM_MspInit+0x3c>)
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	6593      	str	r3, [r2, #88]	@ 0x58
 800379e:	4b07      	ldr	r3, [pc, #28]	@ (80037bc <HAL_TIM_PWM_MspInit+0x3c>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40021000 	.word	0x40021000

080037c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <HAL_TIM_Base_MspInit+0x38>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10b      	bne.n	80037ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037d2:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <HAL_TIM_Base_MspInit+0x3c>)
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	4a09      	ldr	r2, [pc, #36]	@ (80037fc <HAL_TIM_Base_MspInit+0x3c>)
 80037d8:	f043 0310 	orr.w	r3, r3, #16
 80037dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80037de:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <HAL_TIM_Base_MspInit+0x3c>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40001000 	.word	0x40001000
 80037fc:	40021000 	.word	0x40021000

08003800 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a11      	ldr	r2, [pc, #68]	@ (8003864 <HAL_TIM_MspPostInit+0x64>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d11b      	bne.n	800385a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003822:	4b11      	ldr	r3, [pc, #68]	@ (8003868 <HAL_TIM_MspPostInit+0x68>)
 8003824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003826:	4a10      	ldr	r2, [pc, #64]	@ (8003868 <HAL_TIM_MspPostInit+0x68>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800382e:	4b0e      	ldr	r3, [pc, #56]	@ (8003868 <HAL_TIM_MspPostInit+0x68>)
 8003830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800383a:	2310      	movs	r3, #16
 800383c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383e:	2302      	movs	r3, #2
 8003840:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800384a:	2302      	movs	r3, #2
 800384c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800384e:	f107 030c 	add.w	r3, r7, #12
 8003852:	4619      	mov	r1, r3
 8003854:	4805      	ldr	r0, [pc, #20]	@ (800386c <HAL_TIM_MspPostInit+0x6c>)
 8003856:	f002 fb65 	bl	8005f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800385a:	bf00      	nop
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40000400 	.word	0x40000400
 8003868:	40021000 	.word	0x40021000
 800386c:	48000400 	.word	0x48000400

08003870 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003874:	4b14      	ldr	r3, [pc, #80]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 8003876:	4a15      	ldr	r2, [pc, #84]	@ (80038cc <MX_USART2_UART_Init+0x5c>)
 8003878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800387a:	4b13      	ldr	r3, [pc, #76]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 800387c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003882:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 8003884:	2200      	movs	r2, #0
 8003886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003888:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800388e:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 8003890:	2200      	movs	r2, #0
 8003892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003894:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 8003896:	220c      	movs	r2, #12
 8003898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800389a:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 800389c:	2200      	movs	r2, #0
 800389e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a0:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038a6:	4b08      	ldr	r3, [pc, #32]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038b2:	4805      	ldr	r0, [pc, #20]	@ (80038c8 <MX_USART2_UART_Init+0x58>)
 80038b4:	f005 fdea 	bl	800948c <HAL_UART_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038be:	f7ff f956 	bl	8002b6e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200009a0 	.word	0x200009a0
 80038cc:	40004400 	.word	0x40004400

080038d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b0ac      	sub	sp, #176	@ 0xb0
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	60da      	str	r2, [r3, #12]
 80038e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	2288      	movs	r2, #136	@ 0x88
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f011 f8db 	bl	8014aac <memset>
  if(uartHandle->Instance==USART2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a25      	ldr	r2, [pc, #148]	@ (8003990 <HAL_UART_MspInit+0xc0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d143      	bne.n	8003988 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003900:	2302      	movs	r3, #2
 8003902:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003904:	2300      	movs	r3, #0
 8003906:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4618      	mov	r0, r3
 800390e:	f003 fb85 	bl	800701c <HAL_RCCEx_PeriphCLKConfig>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003918:	f7ff f929 	bl	8002b6e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800391c:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <HAL_UART_MspInit+0xc4>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	4a1c      	ldr	r2, [pc, #112]	@ (8003994 <HAL_UART_MspInit+0xc4>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003926:	6593      	str	r3, [r2, #88]	@ 0x58
 8003928:	4b1a      	ldr	r3, [pc, #104]	@ (8003994 <HAL_UART_MspInit+0xc4>)
 800392a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003934:	4b17      	ldr	r3, [pc, #92]	@ (8003994 <HAL_UART_MspInit+0xc4>)
 8003936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003938:	4a16      	ldr	r2, [pc, #88]	@ (8003994 <HAL_UART_MspInit+0xc4>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003940:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <HAL_UART_MspInit+0xc4>)
 8003942:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800394c:	230c      	movs	r3, #12
 800394e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003964:	2307      	movs	r3, #7
 8003966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800396e:	4619      	mov	r1, r3
 8003970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003974:	f002 fad6 	bl	8005f24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003978:	2200      	movs	r2, #0
 800397a:	2105      	movs	r1, #5
 800397c:	2026      	movs	r0, #38	@ 0x26
 800397e:	f001 fd90 	bl	80054a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003982:	2026      	movs	r0, #38	@ 0x26
 8003984:	f001 fda9 	bl	80054da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003988:	bf00      	nop
 800398a:	37b0      	adds	r7, #176	@ 0xb0
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40004400 	.word	0x40004400
 8003994:	40021000 	.word	0x40021000

08003998 <_write>:
uint8_t uartRxBuffer[1];
char commandBuffer[UART_COMMAND_BUFFER_SIZE];
volatile uint8_t commandIndex = 0;

int _write(int file, char *ptr, int len)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4804      	ldr	r0, [pc, #16]	@ (80039c0 <_write+0x28>)
 80039b0:	f005 fdba 	bl	8009528 <HAL_UART_Transmit>
    return len;
 80039b4:	687b      	ldr	r3, [r7, #4]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200009a0 	.word	0x200009a0

080039c4 <HAL_UART_RxCpltCallback>:
//        HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
//    }
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a40 <HAL_UART_RxCpltCallback+0x7c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d130      	bne.n	8003a38 <HAL_UART_RxCpltCallback+0x74>
    {
        char receivedChar = uartRxBuffer[0];
 80039d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <HAL_UART_RxCpltCallback+0x80>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	73fb      	strb	r3, [r7, #15]

        if (receivedChar == 'u')  // 0x75
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b75      	cmp	r3, #117	@ 0x75
 80039e0:	d115      	bne.n	8003a0e <HAL_UART_RxCpltCallback+0x4a>
        {
            if (commandIndex > 0)
 80039e2:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <HAL_UART_RxCpltCallback+0x84>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d020      	beq.n	8003a2e <HAL_UART_RxCpltCallback+0x6a>
            {
                commandBuffer[commandIndex] = '\0';  // Null-terminate the string
 80039ec:	4b16      	ldr	r3, [pc, #88]	@ (8003a48 <HAL_UART_RxCpltCallback+0x84>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b15      	ldr	r3, [pc, #84]	@ (8003a4c <HAL_UART_RxCpltCallback+0x88>)
 80039f6:	2100      	movs	r1, #0
 80039f8:	5499      	strb	r1, [r3, r2]
                osEventFlagsSet(commEventFlags, 0x01);
 80039fa:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <HAL_UART_RxCpltCallback+0x8c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2101      	movs	r1, #1
 8003a00:	4618      	mov	r0, r3
 8003a02:	f00a feeb 	bl	800e7dc <osEventFlagsSet>
                commandIndex = 0;
 8003a06:	4b10      	ldr	r3, [pc, #64]	@ (8003a48 <HAL_UART_RxCpltCallback+0x84>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e00f      	b.n	8003a2e <HAL_UART_RxCpltCallback+0x6a>
            }
        }
        else
        {
            if (commandIndex < UART_COMMAND_BUFFER_SIZE - 1)
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a48 <HAL_UART_RxCpltCallback+0x84>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b7e      	cmp	r3, #126	@ 0x7e
 8003a16:	d80a      	bhi.n	8003a2e <HAL_UART_RxCpltCallback+0x6a>
            {
                commandBuffer[commandIndex++] = receivedChar;
 8003a18:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <HAL_UART_RxCpltCallback+0x84>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	b2d1      	uxtb	r1, r2
 8003a22:	4a09      	ldr	r2, [pc, #36]	@ (8003a48 <HAL_UART_RxCpltCallback+0x84>)
 8003a24:	7011      	strb	r1, [r2, #0]
 8003a26:	4619      	mov	r1, r3
 8003a28:	4a08      	ldr	r2, [pc, #32]	@ (8003a4c <HAL_UART_RxCpltCallback+0x88>)
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	5453      	strb	r3, [r2, r1]
            }
        }

        HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4904      	ldr	r1, [pc, #16]	@ (8003a44 <HAL_UART_RxCpltCallback+0x80>)
 8003a32:	4808      	ldr	r0, [pc, #32]	@ (8003a54 <HAL_UART_RxCpltCallback+0x90>)
 8003a34:	f005 feca 	bl	80097cc <HAL_UART_Receive_IT>
    }
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40004400 	.word	0x40004400
 8003a44:	20000a28 	.word	0x20000a28
 8003a48:	20000aac 	.word	0x20000aac
 8003a4c:	20000a2c 	.word	0x20000a2c
 8003a50:	20000314 	.word	0x20000314
 8003a54:	200009a0 	.word	0x200009a0

08003a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a5c:	f7ff fdec 	bl	8003638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a60:	480c      	ldr	r0, [pc, #48]	@ (8003a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a62:	490d      	ldr	r1, [pc, #52]	@ (8003a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a64:	4a0d      	ldr	r2, [pc, #52]	@ (8003a9c <LoopForever+0xe>)
  movs r3, #0
 8003a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a68:	e002      	b.n	8003a70 <LoopCopyDataInit>

08003a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a6e:	3304      	adds	r3, #4

08003a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a74:	d3f9      	bcc.n	8003a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a76:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a78:	4c0a      	ldr	r4, [pc, #40]	@ (8003aa4 <LoopForever+0x16>)
  movs r3, #0
 8003a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a7c:	e001      	b.n	8003a82 <LoopFillZerobss>

08003a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a80:	3204      	adds	r2, #4

08003a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a84:	d3fb      	bcc.n	8003a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a86:	f011 f8e3 	bl	8014c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a8a:	f7fe ffeb 	bl	8002a64 <main>

08003a8e <LoopForever>:

LoopForever:
    b LoopForever
 8003a8e:	e7fe      	b.n	8003a8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a98:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003a9c:	08018bf8 	.word	0x08018bf8
  ldr r2, =_sbss
 8003aa0:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8003aa4:	200067b8 	.word	0x200067b8

08003aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003aa8:	e7fe      	b.n	8003aa8 <ADC1_2_IRQHandler>
	...

08003aac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <HAL_Init+0x3c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae8 <HAL_Init+0x3c>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac2:	2003      	movs	r0, #3
 8003ac4:	f001 fce2 	bl	800548c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ac8:	200f      	movs	r0, #15
 8003aca:	f000 f80f 	bl	8003aec <HAL_InitTick>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	71fb      	strb	r3, [r7, #7]
 8003ad8:	e001      	b.n	8003ade <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ada:	f7ff fbdf 	bl	800329c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ade:	79fb      	ldrb	r3, [r7, #7]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40022000 	.word	0x40022000

08003aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003af8:	4b17      	ldr	r3, [pc, #92]	@ (8003b58 <HAL_InitTick+0x6c>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d023      	beq.n	8003b48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b00:	4b16      	ldr	r3, [pc, #88]	@ (8003b5c <HAL_InitTick+0x70>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b14      	ldr	r3, [pc, #80]	@ (8003b58 <HAL_InitTick+0x6c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 fced 	bl	80054f6 <HAL_SYSTICK_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b0f      	cmp	r3, #15
 8003b26:	d809      	bhi.n	8003b3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b30:	f001 fcb7 	bl	80054a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b34:	4a0a      	ldr	r2, [pc, #40]	@ (8003b60 <HAL_InitTick+0x74>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e007      	b.n	8003b4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	e004      	b.n	8003b4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e001      	b.n	8003b4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	2000001c 	.word	0x2000001c
 8003b5c:	20000014 	.word	0x20000014
 8003b60:	20000018 	.word	0x20000018

08003b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b68:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_IncTick+0x20>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_IncTick+0x24>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	4a04      	ldr	r2, [pc, #16]	@ (8003b88 <HAL_IncTick+0x24>)
 8003b76:	6013      	str	r3, [r2, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	2000001c 	.word	0x2000001c
 8003b88:	20000ab0 	.word	0x20000ab0

08003b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b90:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <HAL_GetTick+0x14>)
 8003b92:	681b      	ldr	r3, [r3, #0]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000ab0 	.word	0x20000ab0

08003ba4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3360      	adds	r3, #96	@ 0x60
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <LL_ADC_SetOffset+0x44>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	03fff000 	.word	0x03fff000

08003c54 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3360      	adds	r3, #96	@ 0x60
 8003c62:	461a      	mov	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3360      	adds	r3, #96	@ 0x60
 8003c90:	461a      	mov	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3330      	adds	r3, #48	@ 0x30
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	f003 030c 	and.w	r3, r3, #12
 8003cf8:	4413      	add	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	211f      	movs	r1, #31
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	401a      	ands	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	f003 011f 	and.w	r1, r3, #31
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	431a      	orrs	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3314      	adds	r3, #20
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	0e5b      	lsrs	r3, r3, #25
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	4413      	add	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	0d1b      	lsrs	r3, r3, #20
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2107      	movs	r1, #7
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	0d1b      	lsrs	r3, r3, #20
 8003d6e:	f003 031f 	and.w	r3, r3, #31
 8003d72:	6879      	ldr	r1, [r7, #4]
 8003d74:	fa01 f303 	lsl.w	r3, r1, r3
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da4:	43db      	mvns	r3, r3
 8003da6:	401a      	ands	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0318 	and.w	r3, r3, #24
 8003dae:	4908      	ldr	r1, [pc, #32]	@ (8003dd0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003db0:	40d9      	lsrs	r1, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	400b      	ands	r3, r1
 8003db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	0007ffff 	.word	0x0007ffff

08003dd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 031f 	and.w	r3, r3, #31
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003e00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6093      	str	r3, [r2, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e28:	d101      	bne.n	8003e2e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003e4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e50:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e78:	d101      	bne.n	8003e7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ea0:	f043 0201 	orr.w	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ec4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ec8:	f043 0202 	orr.w	r2, r3, #2
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <LL_ADC_IsEnabled+0x18>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <LL_ADC_IsEnabled+0x1a>
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d101      	bne.n	8003f1a <LL_ADC_IsDisableOngoing+0x18>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <LL_ADC_IsDisableOngoing+0x1a>
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f3c:	f043 0204 	orr.w	r2, r3, #4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f64:	f043 0210 	orr.w	r2, r3, #16
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d101      	bne.n	8003f90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d101      	bne.n	8003fde <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b089      	sub	sp, #36	@ 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e130      	b.n	8004268 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7fd f8a1 	bl	800115c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fef1 	bl	8003e14 <LL_ADC_IsDeepPowerDownEnabled>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d004      	beq.n	8004042 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fed7 	bl	8003df0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff ff0c 	bl	8003e64 <LL_ADC_IsInternalRegulatorEnabled>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d115      	bne.n	800407e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fef0 	bl	8003e3c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800405c:	4b84      	ldr	r3, [pc, #528]	@ (8004270 <HAL_ADC_Init+0x284>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	4a84      	ldr	r2, [pc, #528]	@ (8004274 <HAL_ADC_Init+0x288>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	099b      	lsrs	r3, r3, #6
 800406a:	3301      	adds	r3, #1
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004070:	e002      	b.n	8004078 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b01      	subs	r3, #1
 8004076:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f9      	bne.n	8004072 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff feee 	bl	8003e64 <LL_ADC_IsInternalRegulatorEnabled>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004092:	f043 0210 	orr.w	r2, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff ff62 	bl	8003f78 <LL_ADC_REG_IsConversionOngoing>
 80040b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f040 80c9 	bne.w	8004256 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f040 80c5 	bne.w	8004256 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80040d4:	f043 0202 	orr.w	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fefb 	bl	8003edc <LL_ADC_IsEnabled>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d115      	bne.n	8004118 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040ec:	4862      	ldr	r0, [pc, #392]	@ (8004278 <HAL_ADC_Init+0x28c>)
 80040ee:	f7ff fef5 	bl	8003edc <LL_ADC_IsEnabled>
 80040f2:	4604      	mov	r4, r0
 80040f4:	4861      	ldr	r0, [pc, #388]	@ (800427c <HAL_ADC_Init+0x290>)
 80040f6:	f7ff fef1 	bl	8003edc <LL_ADC_IsEnabled>
 80040fa:	4603      	mov	r3, r0
 80040fc:	431c      	orrs	r4, r3
 80040fe:	4860      	ldr	r0, [pc, #384]	@ (8004280 <HAL_ADC_Init+0x294>)
 8004100:	f7ff feec 	bl	8003edc <LL_ADC_IsEnabled>
 8004104:	4603      	mov	r3, r0
 8004106:	4323      	orrs	r3, r4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	4619      	mov	r1, r3
 8004112:	485c      	ldr	r0, [pc, #368]	@ (8004284 <HAL_ADC_Init+0x298>)
 8004114:	f7ff fd46 	bl	8003ba4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7e5b      	ldrb	r3, [r3, #25]
 800411c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004122:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004128:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800412e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004136:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d106      	bne.n	8004154 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	3b01      	subs	r3, #1
 800414c:	045b      	lsls	r3, r3, #17
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4313      	orrs	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	4b44      	ldr	r3, [pc, #272]	@ (8004288 <HAL_ADC_Init+0x29c>)
 8004178:	4013      	ands	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	69b9      	ldr	r1, [r7, #24]
 8004180:	430b      	orrs	r3, r1
 8004182:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff ff1c 	bl	8003fc6 <LL_ADC_INJ_IsConversionOngoing>
 800418e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d13d      	bne.n	8004212 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d13a      	bne.n	8004212 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80041a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80041a8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041b8:	f023 0302 	bic.w	r3, r3, #2
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	430b      	orrs	r3, r1
 80041c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d118      	bne.n	8004202 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80041da:	f023 0304 	bic.w	r3, r3, #4
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80041ec:	4311      	orrs	r1, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80041f2:	430a      	orrs	r2, r1
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0201 	orr.w	r2, r2, #1
 80041fe:	611a      	str	r2, [r3, #16]
 8004200:	e007      	b.n	8004212 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d10c      	bne.n	8004234 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004220:	f023 010f 	bic.w	r1, r3, #15
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	1e5a      	subs	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	631a      	str	r2, [r3, #48]	@ 0x30
 8004232:	e007      	b.n	8004244 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 020f 	bic.w	r2, r2, #15
 8004242:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004248:	f023 0303 	bic.w	r3, r3, #3
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	655a      	str	r2, [r3, #84]	@ 0x54
 8004254:	e007      	b.n	8004266 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425a:	f043 0210 	orr.w	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004266:	7ffb      	ldrb	r3, [r7, #31]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3724      	adds	r7, #36	@ 0x24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd90      	pop	{r4, r7, pc}
 8004270:	20000014 	.word	0x20000014
 8004274:	053e2d63 	.word	0x053e2d63
 8004278:	50040000 	.word	0x50040000
 800427c:	50040100 	.word	0x50040100
 8004280:	50040200 	.word	0x50040200
 8004284:	50040300 	.word	0x50040300
 8004288:	fff0c007 	.word	0xfff0c007

0800428c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004298:	4853      	ldr	r0, [pc, #332]	@ (80043e8 <HAL_ADC_Start_DMA+0x15c>)
 800429a:	f7ff fd9b 	bl	8003dd4 <LL_ADC_GetMultimode>
 800429e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fe67 	bl	8003f78 <LL_ADC_REG_IsConversionOngoing>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f040 8093 	bne.w	80043d8 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_ADC_Start_DMA+0x34>
 80042bc:	2302      	movs	r3, #2
 80042be:	e08e      	b.n	80043de <HAL_ADC_Start_DMA+0x152>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a47      	ldr	r2, [pc, #284]	@ (80043ec <HAL_ADC_Start_DMA+0x160>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d008      	beq.n	80042e4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d002      	beq.n	80042e4 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b09      	cmp	r3, #9
 80042e2:	d172      	bne.n	80043ca <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 fdb1 	bl	8004e4c <ADC_Enable>
 80042ea:	4603      	mov	r3, r0
 80042ec:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d165      	bne.n	80043c0 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a38      	ldr	r2, [pc, #224]	@ (80043f0 <HAL_ADC_Start_DMA+0x164>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d002      	beq.n	8004318 <HAL_ADC_Start_DMA+0x8c>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	e000      	b.n	800431a <HAL_ADC_Start_DMA+0x8e>
 8004318:	4b36      	ldr	r3, [pc, #216]	@ (80043f4 <HAL_ADC_Start_DMA+0x168>)
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	4293      	cmp	r3, r2
 8004320:	d002      	beq.n	8004328 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d006      	beq.n	800434e <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004344:	f023 0206 	bic.w	r2, r3, #6
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	659a      	str	r2, [r3, #88]	@ 0x58
 800434c:	e002      	b.n	8004354 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004358:	4a27      	ldr	r2, [pc, #156]	@ (80043f8 <HAL_ADC_Start_DMA+0x16c>)
 800435a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004360:	4a26      	ldr	r2, [pc, #152]	@ (80043fc <HAL_ADC_Start_DMA+0x170>)
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004368:	4a25      	ldr	r2, [pc, #148]	@ (8004400 <HAL_ADC_Start_DMA+0x174>)
 800436a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	221c      	movs	r2, #28
 8004372:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f042 0210 	orr.w	r2, r2, #16
 800438a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3340      	adds	r3, #64	@ 0x40
 80043a6:	4619      	mov	r1, r3
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f001 f968 	bl	8005680 <HAL_DMA_Start_IT>
 80043b0:	4603      	mov	r3, r0
 80043b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fdb5 	bl	8003f28 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80043be:	e00d      	b.n	80043dc <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80043c8:	e008      	b.n	80043dc <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80043d6:	e001      	b.n	80043dc <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
 80043da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	50040300 	.word	0x50040300
 80043ec:	50040200 	.word	0x50040200
 80043f0:	50040100 	.word	0x50040100
 80043f4:	50040000 	.word	0x50040000
 80043f8:	08005017 	.word	0x08005017
 80043fc:	080050ef 	.word	0x080050ef
 8004400:	0800510b 	.word	0x0800510b

08004404 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_ADC_Stop_DMA+0x16>
 8004416:	2302      	movs	r3, #2
 8004418:	e051      	b.n	80044be <HAL_ADC_Stop_DMA+0xba>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004422:	2103      	movs	r1, #3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 fc55 	bl	8004cd4 <ADC_ConversionStop>
 800442a:	4603      	mov	r3, r0
 800442c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d13f      	bne.n	80044b4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004448:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d10f      	bne.n	8004472 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004456:	4618      	mov	r0, r3
 8004458:	f001 f972 	bl	8005740 <HAL_DMA_Abort>
 800445c:	4603      	mov	r3, r0
 800445e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0210 	bic.w	r2, r2, #16
 8004480:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fd65 	bl	8004f58 <ADC_Disable>
 800448e:	4603      	mov	r3, r0
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	e002      	b.n	800449a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fd5f 	bl	8004f58 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	f043 0201 	orr.w	r2, r3, #1
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
	...

080044f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b0b6      	sub	sp, #216	@ 0xd8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x22>
 800450e:	2302      	movs	r3, #2
 8004510:	e3c9      	b.n	8004ca6 <HAL_ADC_ConfigChannel+0x7b6>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff fd2a 	bl	8003f78 <LL_ADC_REG_IsConversionOngoing>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	f040 83aa 	bne.w	8004c80 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b05      	cmp	r3, #5
 800453a:	d824      	bhi.n	8004586 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	3b02      	subs	r3, #2
 8004542:	2b03      	cmp	r3, #3
 8004544:	d81b      	bhi.n	800457e <HAL_ADC_ConfigChannel+0x8e>
 8004546:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <HAL_ADC_ConfigChannel+0x5c>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	0800455d 	.word	0x0800455d
 8004550:	08004565 	.word	0x08004565
 8004554:	0800456d 	.word	0x0800456d
 8004558:	08004575 	.word	0x08004575
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800455c:	230c      	movs	r3, #12
 800455e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004562:	e010      	b.n	8004586 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004564:	2312      	movs	r3, #18
 8004566:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800456a:	e00c      	b.n	8004586 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800456c:	2318      	movs	r3, #24
 800456e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004572:	e008      	b.n	8004586 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004578:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800457c:	e003      	b.n	8004586 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800457e:	2306      	movs	r3, #6
 8004580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004584:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004594:	f7ff fba2 	bl	8003cdc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff fceb 	bl	8003f78 <LL_ADC_REG_IsConversionOngoing>
 80045a2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fd0b 	bl	8003fc6 <LL_ADC_INJ_IsConversionOngoing>
 80045b0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f040 81a4 	bne.w	8004906 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f040 819f 	bne.w	8004906 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	461a      	mov	r2, r3
 80045d6:	f7ff fbad 	bl	8003d34 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695a      	ldr	r2, [r3, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	08db      	lsrs	r3, r3, #3
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d00a      	beq.n	8004612 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	6919      	ldr	r1, [r3, #16]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800460c:	f7ff fafe 	bl	8003c0c <LL_ADC_SetOffset>
 8004610:	e179      	b.n	8004906 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fb1b 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 800461e:	4603      	mov	r3, r0
 8004620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <HAL_ADC_ConfigChannel+0x14e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2100      	movs	r1, #0
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fb10 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 8004634:	4603      	mov	r3, r0
 8004636:	0e9b      	lsrs	r3, r3, #26
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	e01e      	b.n	800467c <HAL_ADC_ConfigChannel+0x18c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f7ff fb05 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 800464a:	4603      	mov	r3, r0
 800464c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800465c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004664:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800466c:	2320      	movs	r3, #32
 800466e:	e004      	b.n	800467a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004670:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004684:	2b00      	cmp	r3, #0
 8004686:	d105      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x1a4>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0e9b      	lsrs	r3, r3, #26
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	e018      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x1d6>
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046a0:	fa93 f3a3 	rbit	r3, r3
 80046a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80046a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80046ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80046b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	e004      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80046bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80046c0:	fab3 f383 	clz	r3, r3
 80046c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d106      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	2100      	movs	r1, #0
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fad4 	bl	8003c80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2101      	movs	r1, #1
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff fab8 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10a      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x214>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2101      	movs	r1, #1
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff faad 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 80046fa:	4603      	mov	r3, r0
 80046fc:	0e9b      	lsrs	r3, r3, #26
 80046fe:	f003 021f 	and.w	r2, r3, #31
 8004702:	e01e      	b.n	8004742 <HAL_ADC_ConfigChannel+0x252>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2101      	movs	r1, #1
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff faa2 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 8004710:	4603      	mov	r3, r0
 8004712:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800471a:	fa93 f3a3 	rbit	r3, r3
 800471e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004722:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004726:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800472a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004732:	2320      	movs	r3, #32
 8004734:	e004      	b.n	8004740 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004736:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474a:	2b00      	cmp	r3, #0
 800474c:	d105      	bne.n	800475a <HAL_ADC_ConfigChannel+0x26a>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	0e9b      	lsrs	r3, r3, #26
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	e018      	b.n	800478c <HAL_ADC_ConfigChannel+0x29c>
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800476e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004772:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004776:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800477e:	2320      	movs	r3, #32
 8004780:	e004      	b.n	800478c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004782:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800478c:	429a      	cmp	r2, r3
 800478e:	d106      	bne.n	800479e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2200      	movs	r2, #0
 8004796:	2101      	movs	r1, #1
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fa71 	bl	8003c80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2102      	movs	r1, #2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fa55 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10a      	bne.n	80047ca <HAL_ADC_ConfigChannel+0x2da>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2102      	movs	r1, #2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fa4a 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 80047c0:	4603      	mov	r3, r0
 80047c2:	0e9b      	lsrs	r3, r3, #26
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	e01e      	b.n	8004808 <HAL_ADC_ConfigChannel+0x318>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2102      	movs	r1, #2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fa3f 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80047e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80047f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80047f8:	2320      	movs	r3, #32
 80047fa:	e004      	b.n	8004806 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80047fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004800:	fab3 f383 	clz	r3, r3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004810:	2b00      	cmp	r3, #0
 8004812:	d105      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x330>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	0e9b      	lsrs	r3, r3, #26
 800481a:	f003 031f 	and.w	r3, r3, #31
 800481e:	e014      	b.n	800484a <HAL_ADC_ConfigChannel+0x35a>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800482e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004830:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004834:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800483c:	2320      	movs	r3, #32
 800483e:	e004      	b.n	800484a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004840:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800484a:	429a      	cmp	r2, r3
 800484c:	d106      	bne.n	800485c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	2102      	movs	r1, #2
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fa12 	bl	8003c80 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2103      	movs	r1, #3
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff f9f6 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 8004868:	4603      	mov	r3, r0
 800486a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x398>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2103      	movs	r1, #3
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff f9eb 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 800487e:	4603      	mov	r3, r0
 8004880:	0e9b      	lsrs	r3, r3, #26
 8004882:	f003 021f 	and.w	r2, r3, #31
 8004886:	e017      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x3c8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2103      	movs	r1, #3
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff f9e0 	bl	8003c54 <LL_ADC_GetOffsetChannel>
 8004894:	4603      	mov	r3, r0
 8004896:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80048a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80048a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80048aa:	2320      	movs	r3, #32
 80048ac:	e003      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80048ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048b0:	fab3 f383 	clz	r3, r3
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x3e0>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	0e9b      	lsrs	r3, r3, #26
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	e011      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x404>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048d8:	fa93 f3a3 	rbit	r3, r3
 80048dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80048de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80048e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80048e8:	2320      	movs	r3, #32
 80048ea:	e003      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80048ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ee:	fab3 f383 	clz	r3, r3
 80048f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d106      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2200      	movs	r2, #0
 80048fe:	2103      	movs	r1, #3
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff f9bd 	bl	8003c80 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fae6 	bl	8003edc <LL_ADC_IsEnabled>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	f040 8140 	bne.w	8004b98 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6819      	ldr	r1, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	461a      	mov	r2, r3
 8004926:	f7ff fa31 	bl	8003d8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	4a8f      	ldr	r2, [pc, #572]	@ (8004b6c <HAL_ADC_ConfigChannel+0x67c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	f040 8131 	bne.w	8004b98 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10b      	bne.n	800495e <HAL_ADC_ConfigChannel+0x46e>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	0e9b      	lsrs	r3, r3, #26
 800494c:	3301      	adds	r3, #1
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	2b09      	cmp	r3, #9
 8004954:	bf94      	ite	ls
 8004956:	2301      	movls	r3, #1
 8004958:	2300      	movhi	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e019      	b.n	8004992 <HAL_ADC_ConfigChannel+0x4a2>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800496c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004970:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004976:	2320      	movs	r3, #32
 8004978:	e003      	b.n	8004982 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800497a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	b2db      	uxtb	r3, r3
 8004982:	3301      	adds	r3, #1
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	2b09      	cmp	r3, #9
 800498a:	bf94      	ite	ls
 800498c:	2301      	movls	r3, #1
 800498e:	2300      	movhi	r3, #0
 8004990:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004992:	2b00      	cmp	r3, #0
 8004994:	d079      	beq.n	8004a8a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d107      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x4c2>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	0e9b      	lsrs	r3, r3, #26
 80049a8:	3301      	adds	r3, #1
 80049aa:	069b      	lsls	r3, r3, #26
 80049ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049b0:	e015      	b.n	80049de <HAL_ADC_ConfigChannel+0x4ee>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80049c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80049c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80049ca:	2320      	movs	r3, #32
 80049cc:	e003      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80049ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	069b      	lsls	r3, r3, #26
 80049da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x50e>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	0e9b      	lsrs	r3, r3, #26
 80049f0:	3301      	adds	r3, #1
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2101      	movs	r1, #1
 80049f8:	fa01 f303 	lsl.w	r3, r1, r3
 80049fc:	e017      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x53e>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a06:	fa93 f3a3 	rbit	r3, r3
 8004a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004a16:	2320      	movs	r3, #32
 8004a18:	e003      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1c:	fab3 f383 	clz	r3, r3
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	3301      	adds	r3, #1
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2e:	ea42 0103 	orr.w	r1, r2, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x564>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	0e9b      	lsrs	r3, r3, #26
 8004a44:	3301      	adds	r3, #1
 8004a46:	f003 021f 	and.w	r2, r3, #31
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	051b      	lsls	r3, r3, #20
 8004a52:	e018      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x596>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004a6c:	2320      	movs	r3, #32
 8004a6e:	e003      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a72:	fab3 f383 	clz	r3, r3
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f003 021f 	and.w	r2, r3, #31
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a86:	430b      	orrs	r3, r1
 8004a88:	e081      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d107      	bne.n	8004aa6 <HAL_ADC_ConfigChannel+0x5b6>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	0e9b      	lsrs	r3, r3, #26
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	069b      	lsls	r3, r3, #26
 8004aa0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004aa4:	e015      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x5e2>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aae:	fa93 f3a3 	rbit	r3, r3
 8004ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004abe:	2320      	movs	r3, #32
 8004ac0:	e003      	b.n	8004aca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac4:	fab3 f383 	clz	r3, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	3301      	adds	r3, #1
 8004acc:	069b      	lsls	r3, r3, #26
 8004ace:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x602>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	0e9b      	lsrs	r3, r3, #26
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	2101      	movs	r1, #1
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	e017      	b.n	8004b22 <HAL_ADC_ConfigChannel+0x632>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	fa93 f3a3 	rbit	r3, r3
 8004afe:	61bb      	str	r3, [r7, #24]
  return result;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	e003      	b.n	8004b16 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	fab3 f383 	clz	r3, r3
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	3301      	adds	r3, #1
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	ea42 0103 	orr.w	r1, r2, r3
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10d      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x65e>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	0e9b      	lsrs	r3, r3, #26
 8004b38:	3301      	adds	r3, #1
 8004b3a:	f003 021f 	and.w	r2, r3, #31
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	3b1e      	subs	r3, #30
 8004b46:	051b      	lsls	r3, r3, #20
 8004b48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b4c:	e01e      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x69c>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	60fb      	str	r3, [r7, #12]
  return result;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d104      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004b66:	2320      	movs	r3, #32
 8004b68:	e006      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x688>
 8004b6a:	bf00      	nop
 8004b6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	fab3 f383 	clz	r3, r3
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f003 021f 	and.w	r2, r3, #31
 8004b7e:	4613      	mov	r3, r2
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	4413      	add	r3, r2
 8004b84:	3b1e      	subs	r3, #30
 8004b86:	051b      	lsls	r3, r3, #20
 8004b88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b92:	4619      	mov	r1, r3
 8004b94:	f7ff f8ce 	bl	8003d34 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4b44      	ldr	r3, [pc, #272]	@ (8004cb0 <HAL_ADC_ConfigChannel+0x7c0>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d07a      	beq.n	8004c9a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ba4:	4843      	ldr	r0, [pc, #268]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004ba6:	f7ff f823 	bl	8003bf0 <LL_ADC_GetCommonPathInternalCh>
 8004baa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a41      	ldr	r2, [pc, #260]	@ (8004cb8 <HAL_ADC_ConfigChannel+0x7c8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d12c      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d126      	bne.n	8004c12 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cbc <HAL_ADC_ConfigChannel+0x7cc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_ADC_ConfigChannel+0x6e8>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a3b      	ldr	r2, [pc, #236]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d15d      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004bdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004be0:	4619      	mov	r1, r3
 8004be2:	4834      	ldr	r0, [pc, #208]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004be4:	f7fe fff1 	bl	8003bca <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004be8:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <HAL_ADC_ConfigChannel+0x7d4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	099b      	lsrs	r3, r3, #6
 8004bee:	4a36      	ldr	r2, [pc, #216]	@ (8004cc8 <HAL_ADC_ConfigChannel+0x7d8>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004c02:	e002      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f9      	bne.n	8004c04 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c10:	e040      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a2d      	ldr	r2, [pc, #180]	@ (8004ccc <HAL_ADC_ConfigChannel+0x7dc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d118      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d112      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a23      	ldr	r2, [pc, #140]	@ (8004cbc <HAL_ADC_ConfigChannel+0x7cc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d004      	beq.n	8004c3c <HAL_ADC_ConfigChannel+0x74c>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a22      	ldr	r2, [pc, #136]	@ (8004cc0 <HAL_ADC_ConfigChannel+0x7d0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d12d      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c44:	4619      	mov	r1, r3
 8004c46:	481b      	ldr	r0, [pc, #108]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004c48:	f7fe ffbf 	bl	8003bca <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c4c:	e024      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1f      	ldr	r2, [pc, #124]	@ (8004cd0 <HAL_ADC_ConfigChannel+0x7e0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d120      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11a      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <HAL_ADC_ConfigChannel+0x7cc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d115      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c76:	4619      	mov	r1, r3
 8004c78:	480e      	ldr	r0, [pc, #56]	@ (8004cb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004c7a:	f7fe ffa6 	bl	8003bca <LL_ADC_SetCommonPathInternalCh>
 8004c7e:	e00c      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c84:	f043 0220 	orr.w	r2, r3, #32
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004c92:	e002      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c94:	bf00      	nop
 8004c96:	e000      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ca2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	37d8      	adds	r7, #216	@ 0xd8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	80080000 	.word	0x80080000
 8004cb4:	50040300 	.word	0x50040300
 8004cb8:	c7520000 	.word	0xc7520000
 8004cbc:	50040000 	.word	0x50040000
 8004cc0:	50040200 	.word	0x50040200
 8004cc4:	20000014 	.word	0x20000014
 8004cc8:	053e2d63 	.word	0x053e2d63
 8004ccc:	cb840000 	.word	0xcb840000
 8004cd0:	80000001 	.word	0x80000001

08004cd4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff f944 	bl	8003f78 <LL_ADC_REG_IsConversionOngoing>
 8004cf0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff f965 	bl	8003fc6 <LL_ADC_INJ_IsConversionOngoing>
 8004cfc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 8098 	beq.w	8004e3c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d02a      	beq.n	8004d70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	7e5b      	ldrb	r3, [r3, #25]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d126      	bne.n	8004d70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7e1b      	ldrb	r3, [r3, #24]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d122      	bne.n	8004d70 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004d2e:	e014      	b.n	8004d5a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4a45      	ldr	r2, [pc, #276]	@ (8004e48 <ADC_ConversionStop+0x174>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d90d      	bls.n	8004d54 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d3c:	f043 0210 	orr.w	r2, r3, #16
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d48:	f043 0201 	orr.w	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e074      	b.n	8004e3e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	3301      	adds	r3, #1
 8004d58:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b40      	cmp	r3, #64	@ 0x40
 8004d66:	d1e3      	bne.n	8004d30 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2240      	movs	r2, #64	@ 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d014      	beq.n	8004da0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff f8fc 	bl	8003f78 <LL_ADC_REG_IsConversionOngoing>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff f8b9 	bl	8003f02 <LL_ADC_IsDisableOngoing>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d104      	bne.n	8004da0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff f8d8 	bl	8003f50 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d014      	beq.n	8004dd0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff f90b 	bl	8003fc6 <LL_ADC_INJ_IsConversionOngoing>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00c      	beq.n	8004dd0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff f8a1 	bl	8003f02 <LL_ADC_IsDisableOngoing>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff f8e7 	bl	8003f9e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d005      	beq.n	8004de2 <ADC_ConversionStop+0x10e>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d105      	bne.n	8004de8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004ddc:	230c      	movs	r3, #12
 8004dde:	617b      	str	r3, [r7, #20]
        break;
 8004de0:	e005      	b.n	8004dee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004de2:	2308      	movs	r3, #8
 8004de4:	617b      	str	r3, [r7, #20]
        break;
 8004de6:	e002      	b.n	8004dee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004de8:	2304      	movs	r3, #4
 8004dea:	617b      	str	r3, [r7, #20]
        break;
 8004dec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004dee:	f7fe fecd 	bl	8003b8c <HAL_GetTick>
 8004df2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004df4:	e01b      	b.n	8004e2e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004df6:	f7fe fec9 	bl	8003b8c <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d914      	bls.n	8004e2e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00d      	beq.n	8004e2e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e16:	f043 0210 	orr.w	r2, r3, #16
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e22:	f043 0201 	orr.w	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e007      	b.n	8004e3e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1dc      	bne.n	8004df6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	a33fffff 	.word	0xa33fffff

08004e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff f83d 	bl	8003edc <LL_ADC_IsEnabled>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d169      	bne.n	8004f3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	4b36      	ldr	r3, [pc, #216]	@ (8004f48 <ADC_Enable+0xfc>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00d      	beq.n	8004e92 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e7a:	f043 0210 	orr.w	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e86:	f043 0201 	orr.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e055      	b.n	8004f3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fff8 	bl	8003e8c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e9c:	482b      	ldr	r0, [pc, #172]	@ (8004f4c <ADC_Enable+0x100>)
 8004e9e:	f7fe fea7 	bl	8003bf0 <LL_ADC_GetCommonPathInternalCh>
 8004ea2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ea4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d013      	beq.n	8004ed4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004eac:	4b28      	ldr	r3, [pc, #160]	@ (8004f50 <ADC_Enable+0x104>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	099b      	lsrs	r3, r3, #6
 8004eb2:	4a28      	ldr	r2, [pc, #160]	@ (8004f54 <ADC_Enable+0x108>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	099b      	lsrs	r3, r3, #6
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ec6:	e002      	b.n	8004ece <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f9      	bne.n	8004ec8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ed4:	f7fe fe5a 	bl	8003b8c <HAL_GetTick>
 8004ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004eda:	e028      	b.n	8004f2e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe fffb 	bl	8003edc <LL_ADC_IsEnabled>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d104      	bne.n	8004ef6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe ffcb 	bl	8003e8c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ef6:	f7fe fe49 	bl	8003b8c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d914      	bls.n	8004f2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d00d      	beq.n	8004f2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f16:	f043 0210 	orr.w	r2, r3, #16
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f22:	f043 0201 	orr.w	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e007      	b.n	8004f3e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d1cf      	bne.n	8004edc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	8000003f 	.word	0x8000003f
 8004f4c:	50040300 	.word	0x50040300
 8004f50:	20000014 	.word	0x20000014
 8004f54:	053e2d63 	.word	0x053e2d63

08004f58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe ffcc 	bl	8003f02 <LL_ADC_IsDisableOngoing>
 8004f6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe ffb3 	bl	8003edc <LL_ADC_IsEnabled>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d047      	beq.n	800500c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d144      	bne.n	800500c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 030d 	and.w	r3, r3, #13
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10c      	bne.n	8004faa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe ff8d 	bl	8003eb4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fa2:	f7fe fdf3 	bl	8003b8c <HAL_GetTick>
 8004fa6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fa8:	e029      	b.n	8004ffe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fae:	f043 0210 	orr.w	r2, r3, #16
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e023      	b.n	800500e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fc6:	f7fe fde1 	bl	8003b8c <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d914      	bls.n	8004ffe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00d      	beq.n	8004ffe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe6:	f043 0210 	orr.w	r2, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff2:	f043 0201 	orr.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e007      	b.n	800500e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1dc      	bne.n	8004fc6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005028:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800502c:	2b00      	cmp	r3, #0
 800502e:	d14b      	bne.n	80050c8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005034:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d021      	beq.n	800508e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fe31 	bl	8003cb6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d032      	beq.n	80050c0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d12b      	bne.n	80050c0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005078:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d11f      	bne.n	80050c0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005084:	f043 0201 	orr.w	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	655a      	str	r2, [r3, #84]	@ 0x54
 800508c:	e018      	b.n	80050c0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d111      	bne.n	80050c0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b8:	f043 0201 	orr.w	r2, r3, #1
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f7fd f9a9 	bl	8002418 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050c6:	e00e      	b.n	80050e6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050cc:	f003 0310 	and.w	r3, r3, #16
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff fa00 	bl	80044da <HAL_ADC_ErrorCallback>
}
 80050da:	e004      	b.n	80050e6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f7ff f9e2 	bl	80044c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005102:	bf00      	nop
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005116:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005128:	f043 0204 	orr.w	r2, r3, #4
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff f9d2 	bl	80044da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <LL_ADC_IsEnabled>:
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <LL_ADC_IsEnabled+0x18>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <LL_ADC_IsEnabled+0x1a>
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <LL_ADC_REG_IsConversionOngoing>:
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b04      	cmp	r3, #4
 8005176:	d101      	bne.n	800517c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b09f      	sub	sp, #124	@ 0x7c
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d101      	bne.n	80051aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80051a6:	2302      	movs	r3, #2
 80051a8:	e093      	b.n	80052d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80051b2:	2300      	movs	r3, #0
 80051b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80051b6:	2300      	movs	r3, #0
 80051b8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a47      	ldr	r2, [pc, #284]	@ (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d102      	bne.n	80051ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051c4:	4b46      	ldr	r3, [pc, #280]	@ (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	e001      	b.n	80051ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e072      	b.n	80052d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff ffb8 	bl	8005164 <LL_ADC_REG_IsConversionOngoing>
 80051f4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff ffb2 	bl	8005164 <LL_ADC_REG_IsConversionOngoing>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d154      	bne.n	80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005206:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005208:	2b00      	cmp	r3, #0
 800520a:	d151      	bne.n	80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800520c:	4b35      	ldr	r3, [pc, #212]	@ (80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800520e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d02c      	beq.n	8005272 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	6859      	ldr	r1, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800522a:	035b      	lsls	r3, r3, #13
 800522c:	430b      	orrs	r3, r1
 800522e:	431a      	orrs	r2, r3
 8005230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005232:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005234:	4829      	ldr	r0, [pc, #164]	@ (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005236:	f7ff ff82 	bl	800513e <LL_ADC_IsEnabled>
 800523a:	4604      	mov	r4, r0
 800523c:	4828      	ldr	r0, [pc, #160]	@ (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800523e:	f7ff ff7e 	bl	800513e <LL_ADC_IsEnabled>
 8005242:	4603      	mov	r3, r0
 8005244:	431c      	orrs	r4, r3
 8005246:	4828      	ldr	r0, [pc, #160]	@ (80052e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005248:	f7ff ff79 	bl	800513e <LL_ADC_IsEnabled>
 800524c:	4603      	mov	r3, r0
 800524e:	4323      	orrs	r3, r4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d137      	bne.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800525c:	f023 030f 	bic.w	r3, r3, #15
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	6811      	ldr	r1, [r2, #0]
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	6892      	ldr	r2, [r2, #8]
 8005268:	430a      	orrs	r2, r1
 800526a:	431a      	orrs	r2, r3
 800526c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800526e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005270:	e028      	b.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800527a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800527c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800527e:	4817      	ldr	r0, [pc, #92]	@ (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005280:	f7ff ff5d 	bl	800513e <LL_ADC_IsEnabled>
 8005284:	4604      	mov	r4, r0
 8005286:	4816      	ldr	r0, [pc, #88]	@ (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005288:	f7ff ff59 	bl	800513e <LL_ADC_IsEnabled>
 800528c:	4603      	mov	r3, r0
 800528e:	431c      	orrs	r4, r3
 8005290:	4815      	ldr	r0, [pc, #84]	@ (80052e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005292:	f7ff ff54 	bl	800513e <LL_ADC_IsEnabled>
 8005296:	4603      	mov	r3, r0
 8005298:	4323      	orrs	r3, r4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d112      	bne.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800529e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80052a6:	f023 030f 	bic.w	r3, r3, #15
 80052aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052ae:	e009      	b.n	80052c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80052c2:	e000      	b.n	80052c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80052ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	377c      	adds	r7, #124	@ 0x7c
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd90      	pop	{r4, r7, pc}
 80052da:	bf00      	nop
 80052dc:	50040000 	.word	0x50040000
 80052e0:	50040100 	.word	0x50040100
 80052e4:	50040300 	.word	0x50040300
 80052e8:	50040200 	.word	0x50040200

080052ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <__NVIC_SetPriorityGrouping+0x44>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005308:	4013      	ands	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005314:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005318:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800531c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800531e:	4a04      	ldr	r2, [pc, #16]	@ (8005330 <__NVIC_SetPriorityGrouping+0x44>)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	60d3      	str	r3, [r2, #12]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	e000ed00 	.word	0xe000ed00

08005334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005338:	4b04      	ldr	r3, [pc, #16]	@ (800534c <__NVIC_GetPriorityGrouping+0x18>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	0a1b      	lsrs	r3, r3, #8
 800533e:	f003 0307 	and.w	r3, r3, #7
}
 8005342:	4618      	mov	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	e000ed00 	.word	0xe000ed00

08005350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800535a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800535e:	2b00      	cmp	r3, #0
 8005360:	db0b      	blt.n	800537a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	f003 021f 	and.w	r2, r3, #31
 8005368:	4907      	ldr	r1, [pc, #28]	@ (8005388 <__NVIC_EnableIRQ+0x38>)
 800536a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	2001      	movs	r0, #1
 8005372:	fa00 f202 	lsl.w	r2, r0, r2
 8005376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	e000e100 	.word	0xe000e100

0800538c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	6039      	str	r1, [r7, #0]
 8005396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539c:	2b00      	cmp	r3, #0
 800539e:	db0a      	blt.n	80053b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	490c      	ldr	r1, [pc, #48]	@ (80053d8 <__NVIC_SetPriority+0x4c>)
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	0112      	lsls	r2, r2, #4
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	440b      	add	r3, r1
 80053b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053b4:	e00a      	b.n	80053cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	4908      	ldr	r1, [pc, #32]	@ (80053dc <__NVIC_SetPriority+0x50>)
 80053bc:	79fb      	ldrb	r3, [r7, #7]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	3b04      	subs	r3, #4
 80053c4:	0112      	lsls	r2, r2, #4
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	440b      	add	r3, r1
 80053ca:	761a      	strb	r2, [r3, #24]
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000e100 	.word	0xe000e100
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b089      	sub	sp, #36	@ 0x24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f1c3 0307 	rsb	r3, r3, #7
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	bf28      	it	cs
 80053fe:	2304      	movcs	r3, #4
 8005400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	3304      	adds	r3, #4
 8005406:	2b06      	cmp	r3, #6
 8005408:	d902      	bls.n	8005410 <NVIC_EncodePriority+0x30>
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3b03      	subs	r3, #3
 800540e:	e000      	b.n	8005412 <NVIC_EncodePriority+0x32>
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005414:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	43da      	mvns	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	401a      	ands	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005428:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	fa01 f303 	lsl.w	r3, r1, r3
 8005432:	43d9      	mvns	r1, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005438:	4313      	orrs	r3, r2
         );
}
 800543a:	4618      	mov	r0, r3
 800543c:	3724      	adds	r7, #36	@ 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
	...

08005448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3b01      	subs	r3, #1
 8005454:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005458:	d301      	bcc.n	800545e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800545a:	2301      	movs	r3, #1
 800545c:	e00f      	b.n	800547e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800545e:	4a0a      	ldr	r2, [pc, #40]	@ (8005488 <SysTick_Config+0x40>)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3b01      	subs	r3, #1
 8005464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005466:	210f      	movs	r1, #15
 8005468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800546c:	f7ff ff8e 	bl	800538c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005470:	4b05      	ldr	r3, [pc, #20]	@ (8005488 <SysTick_Config+0x40>)
 8005472:	2200      	movs	r2, #0
 8005474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005476:	4b04      	ldr	r3, [pc, #16]	@ (8005488 <SysTick_Config+0x40>)
 8005478:	2207      	movs	r2, #7
 800547a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	e000e010 	.word	0xe000e010

0800548c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff ff29 	bl	80052ec <__NVIC_SetPriorityGrouping>
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	4603      	mov	r3, r0
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054b4:	f7ff ff3e 	bl	8005334 <__NVIC_GetPriorityGrouping>
 80054b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	6978      	ldr	r0, [r7, #20]
 80054c0:	f7ff ff8e 	bl	80053e0 <NVIC_EncodePriority>
 80054c4:	4602      	mov	r2, r0
 80054c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ff5d 	bl	800538c <__NVIC_SetPriority>
}
 80054d2:	bf00      	nop
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	4603      	mov	r3, r0
 80054e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff ff31 	bl	8005350 <__NVIC_EnableIRQ>
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ffa2 	bl	8005448 <SysTick_Config>
 8005504:	4603      	mov	r3, r0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e098      	b.n	8005654 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	4b4d      	ldr	r3, [pc, #308]	@ (8005660 <HAL_DMA_Init+0x150>)
 800552a:	429a      	cmp	r2, r3
 800552c:	d80f      	bhi.n	800554e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	4b4b      	ldr	r3, [pc, #300]	@ (8005664 <HAL_DMA_Init+0x154>)
 8005536:	4413      	add	r3, r2
 8005538:	4a4b      	ldr	r2, [pc, #300]	@ (8005668 <HAL_DMA_Init+0x158>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	091b      	lsrs	r3, r3, #4
 8005540:	009a      	lsls	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a48      	ldr	r2, [pc, #288]	@ (800566c <HAL_DMA_Init+0x15c>)
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40
 800554c:	e00e      	b.n	800556c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	461a      	mov	r2, r3
 8005554:	4b46      	ldr	r3, [pc, #280]	@ (8005670 <HAL_DMA_Init+0x160>)
 8005556:	4413      	add	r3, r2
 8005558:	4a43      	ldr	r2, [pc, #268]	@ (8005668 <HAL_DMA_Init+0x158>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	009a      	lsls	r2, r3, #2
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a42      	ldr	r2, [pc, #264]	@ (8005674 <HAL_DMA_Init+0x164>)
 800556a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005586:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800559c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055c6:	d039      	beq.n	800563c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	4a27      	ldr	r2, [pc, #156]	@ (800566c <HAL_DMA_Init+0x15c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d11a      	bne.n	8005608 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80055d2:	4b29      	ldr	r3, [pc, #164]	@ (8005678 <HAL_DMA_Init+0x168>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055da:	f003 031c 	and.w	r3, r3, #28
 80055de:	210f      	movs	r1, #15
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	43db      	mvns	r3, r3
 80055e6:	4924      	ldr	r1, [pc, #144]	@ (8005678 <HAL_DMA_Init+0x168>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80055ec:	4b22      	ldr	r3, [pc, #136]	@ (8005678 <HAL_DMA_Init+0x168>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6859      	ldr	r1, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f8:	f003 031c 	and.w	r3, r3, #28
 80055fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005600:	491d      	ldr	r1, [pc, #116]	@ (8005678 <HAL_DMA_Init+0x168>)
 8005602:	4313      	orrs	r3, r2
 8005604:	600b      	str	r3, [r1, #0]
 8005606:	e019      	b.n	800563c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005608:	4b1c      	ldr	r3, [pc, #112]	@ (800567c <HAL_DMA_Init+0x16c>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005610:	f003 031c 	and.w	r3, r3, #28
 8005614:	210f      	movs	r1, #15
 8005616:	fa01 f303 	lsl.w	r3, r1, r3
 800561a:	43db      	mvns	r3, r3
 800561c:	4917      	ldr	r1, [pc, #92]	@ (800567c <HAL_DMA_Init+0x16c>)
 800561e:	4013      	ands	r3, r2
 8005620:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005622:	4b16      	ldr	r3, [pc, #88]	@ (800567c <HAL_DMA_Init+0x16c>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6859      	ldr	r1, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562e:	f003 031c 	and.w	r3, r3, #28
 8005632:	fa01 f303 	lsl.w	r3, r1, r3
 8005636:	4911      	ldr	r1, [pc, #68]	@ (800567c <HAL_DMA_Init+0x16c>)
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	40020407 	.word	0x40020407
 8005664:	bffdfff8 	.word	0xbffdfff8
 8005668:	cccccccd 	.word	0xcccccccd
 800566c:	40020000 	.word	0x40020000
 8005670:	bffdfbf8 	.word	0xbffdfbf8
 8005674:	40020400 	.word	0x40020400
 8005678:	400200a8 	.word	0x400200a8
 800567c:	400204a8 	.word	0x400204a8

08005680 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_DMA_Start_IT+0x20>
 800569c:	2302      	movs	r3, #2
 800569e:	e04b      	b.n	8005738 <HAL_DMA_Start_IT+0xb8>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d13a      	bne.n	800572a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0201 	bic.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f95f 	bl	800599c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 020e 	orr.w	r2, r2, #14
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	e00f      	b.n	8005718 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0204 	bic.w	r2, r2, #4
 8005706:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 020a 	orr.w	r2, r2, #10
 8005716:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	e005      	b.n	8005736 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005732:	2302      	movs	r3, #2
 8005734:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005736:	7dfb      	ldrb	r3, [r7, #23]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d008      	beq.n	800576a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2204      	movs	r2, #4
 800575c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e022      	b.n	80057b0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 020e 	bic.w	r2, r2, #14
 8005778:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0201 	bic.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578e:	f003 021c 	and.w	r2, r3, #28
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	2101      	movs	r1, #1
 8005798:	fa01 f202 	lsl.w	r2, r1, r2
 800579c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d005      	beq.n	80057e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2204      	movs	r2, #4
 80057d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
 80057de:	e029      	b.n	8005834 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 020e 	bic.w	r2, r2, #14
 80057ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0201 	bic.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005804:	f003 021c 	and.w	r2, r3, #28
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580c:	2101      	movs	r1, #1
 800580e:	fa01 f202 	lsl.w	r2, r1, r2
 8005812:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	4798      	blx	r3
    }
  }
  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585a:	f003 031c 	and.w	r3, r3, #28
 800585e:	2204      	movs	r2, #4
 8005860:	409a      	lsls	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4013      	ands	r3, r2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d026      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x7a>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d021      	beq.n	80058b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d107      	bne.n	8005892 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0204 	bic.w	r2, r2, #4
 8005890:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005896:	f003 021c 	and.w	r2, r3, #28
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	2104      	movs	r1, #4
 80058a0:	fa01 f202 	lsl.w	r2, r1, r2
 80058a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d071      	beq.n	8005992 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80058b6:	e06c      	b.n	8005992 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058bc:	f003 031c 	and.w	r3, r3, #28
 80058c0:	2202      	movs	r2, #2
 80058c2:	409a      	lsls	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02e      	beq.n	800592a <HAL_DMA_IRQHandler+0xec>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d029      	beq.n	800592a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 020a 	bic.w	r2, r2, #10
 80058f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005900:	f003 021c 	and.w	r2, r3, #28
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	2102      	movs	r1, #2
 800590a:	fa01 f202 	lsl.w	r2, r1, r2
 800590e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d038      	beq.n	8005992 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005928:	e033      	b.n	8005992 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592e:	f003 031c 	and.w	r3, r3, #28
 8005932:	2208      	movs	r2, #8
 8005934:	409a      	lsls	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4013      	ands	r3, r2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d02a      	beq.n	8005994 <HAL_DMA_IRQHandler+0x156>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d025      	beq.n	8005994 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 020e 	bic.w	r2, r2, #14
 8005956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595c:	f003 021c 	and.w	r2, r3, #28
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f202 	lsl.w	r2, r1, r2
 800596a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005992:	bf00      	nop
 8005994:	bf00      	nop
}
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ae:	f003 021c 	and.w	r2, r3, #28
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b6:	2101      	movs	r1, #1
 80059b8:	fa01 f202 	lsl.w	r2, r1, r2
 80059bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d108      	bne.n	80059e0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059de:	e007      	b.n	80059f0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	60da      	str	r2, [r3, #12]
}
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005acc <HAL_FLASH_Program+0xd0>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_FLASH_Program+0x1e>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e053      	b.n	8005ac2 <HAL_FLASH_Program+0xc6>
 8005a1a:	4b2c      	ldr	r3, [pc, #176]	@ (8005acc <HAL_FLASH_Program+0xd0>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a20:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a24:	f000 f888 	bl	8005b38 <FLASH_WaitForLastOperation>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d143      	bne.n	8005aba <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a32:	4b26      	ldr	r3, [pc, #152]	@ (8005acc <HAL_FLASH_Program+0xd0>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005a38:	4b25      	ldr	r3, [pc, #148]	@ (8005ad0 <HAL_FLASH_Program+0xd4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005a44:	4b22      	ldr	r3, [pc, #136]	@ (8005ad0 <HAL_FLASH_Program+0xd4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a21      	ldr	r2, [pc, #132]	@ (8005ad0 <HAL_FLASH_Program+0xd4>)
 8005a4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a4e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005a50:	4b1e      	ldr	r3, [pc, #120]	@ (8005acc <HAL_FLASH_Program+0xd0>)
 8005a52:	2202      	movs	r2, #2
 8005a54:	771a      	strb	r2, [r3, #28]
 8005a56:	e002      	b.n	8005a5e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005a58:	4b1c      	ldr	r3, [pc, #112]	@ (8005acc <HAL_FLASH_Program+0xd0>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d107      	bne.n	8005a74 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a68:	68b8      	ldr	r0, [r7, #8]
 8005a6a:	f000 f8bb 	bl	8005be4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	613b      	str	r3, [r7, #16]
 8005a72:	e010      	b.n	8005a96 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d002      	beq.n	8005a80 <HAL_FLASH_Program+0x84>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d10a      	bne.n	8005a96 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	68b8      	ldr	r0, [r7, #8]
 8005a86:	f000 f8d3 	bl	8005c30 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d102      	bne.n	8005a96 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005a90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005a94:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a96:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a9a:	f000 f84d 	bl	8005b38 <FLASH_WaitForLastOperation>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d006      	beq.n	8005ab6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005aa8:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <HAL_FLASH_Program+0xd4>)
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	4907      	ldr	r1, [pc, #28]	@ (8005ad0 <HAL_FLASH_Program+0xd4>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005ab6:	f000 f9eb 	bl	8005e90 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005aba:	4b04      	ldr	r3, [pc, #16]	@ (8005acc <HAL_FLASH_Program+0xd0>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]

  return status;
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000020 	.word	0x20000020
 8005ad0:	40022000 	.word	0x40022000

08005ad4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005ade:	4b0b      	ldr	r3, [pc, #44]	@ (8005b0c <HAL_FLASH_Unlock+0x38>)
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da0b      	bge.n	8005afe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ae6:	4b09      	ldr	r3, [pc, #36]	@ (8005b0c <HAL_FLASH_Unlock+0x38>)
 8005ae8:	4a09      	ldr	r2, [pc, #36]	@ (8005b10 <HAL_FLASH_Unlock+0x3c>)
 8005aea:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005aec:	4b07      	ldr	r3, [pc, #28]	@ (8005b0c <HAL_FLASH_Unlock+0x38>)
 8005aee:	4a09      	ldr	r2, [pc, #36]	@ (8005b14 <HAL_FLASH_Unlock+0x40>)
 8005af0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005af2:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <HAL_FLASH_Unlock+0x38>)
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	da01      	bge.n	8005afe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005afe:	79fb      	ldrb	r3, [r7, #7]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40022000 	.word	0x40022000
 8005b10:	45670123 	.word	0x45670123
 8005b14:	cdef89ab 	.word	0xcdef89ab

08005b18 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005b1c:	4b05      	ldr	r3, [pc, #20]	@ (8005b34 <HAL_FLASH_Lock+0x1c>)
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	4a04      	ldr	r2, [pc, #16]	@ (8005b34 <HAL_FLASH_Lock+0x1c>)
 8005b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b26:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	40022000 	.word	0x40022000

08005b38 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005b40:	f7fe f824 	bl	8003b8c <HAL_GetTick>
 8005b44:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005b46:	e00d      	b.n	8005b64 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b4e:	d009      	beq.n	8005b64 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005b50:	f7fe f81c 	bl	8003b8c <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d801      	bhi.n	8005b64 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e036      	b.n	8005bd2 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005b64:	4b1d      	ldr	r3, [pc, #116]	@ (8005bdc <FLASH_WaitForLastOperation+0xa4>)
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1eb      	bne.n	8005b48 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005b70:	4b1a      	ldr	r3, [pc, #104]	@ (8005bdc <FLASH_WaitForLastOperation+0xa4>)
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01d      	beq.n	8005bbe <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005b82:	4b17      	ldr	r3, [pc, #92]	@ (8005be0 <FLASH_WaitForLastOperation+0xa8>)
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	4a15      	ldr	r2, [pc, #84]	@ (8005be0 <FLASH_WaitForLastOperation+0xa8>)
 8005b8c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b94:	d307      	bcc.n	8005ba6 <FLASH_WaitForLastOperation+0x6e>
 8005b96:	4b11      	ldr	r3, [pc, #68]	@ (8005bdc <FLASH_WaitForLastOperation+0xa4>)
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005ba0:	490e      	ldr	r1, [pc, #56]	@ (8005bdc <FLASH_WaitForLastOperation+0xa4>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	618b      	str	r3, [r1, #24]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <FLASH_WaitForLastOperation+0x82>
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bdc <FLASH_WaitForLastOperation+0xa4>)
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005bb8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e009      	b.n	8005bd2 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005bbe:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <FLASH_WaitForLastOperation+0xa4>)
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005bca:	4b04      	ldr	r3, [pc, #16]	@ (8005bdc <FLASH_WaitForLastOperation+0xa4>)
 8005bcc:	2201      	movs	r2, #1
 8005bce:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40022000 	.word	0x40022000
 8005be0:	20000020 	.word	0x20000020

08005be4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8005c2c <FLASH_Program_DoubleWord+0x48>)
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8005c2c <FLASH_Program_DoubleWord+0x48>)
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	683a      	ldr	r2, [r7, #0]
 8005c00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005c02:	f3bf 8f6f 	isb	sy
}
 8005c06:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005c08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	000a      	movs	r2, r1
 8005c16:	2300      	movs	r3, #0
 8005c18:	68f9      	ldr	r1, [r7, #12]
 8005c1a:	3104      	adds	r1, #4
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	600b      	str	r3, [r1, #0]
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40022000 	.word	0x40022000

08005c30 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b089      	sub	sp, #36	@ 0x24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005c3a:	2340      	movs	r3, #64	@ 0x40
 8005c3c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005c46:	4b14      	ldr	r3, [pc, #80]	@ (8005c98 <FLASH_Program_Fast+0x68>)
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	4a13      	ldr	r2, [pc, #76]	@ (8005c98 <FLASH_Program_Fast+0x68>)
 8005c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c50:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c52:	f3ef 8310 	mrs	r3, PRIMASK
 8005c56:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c58:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005c5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c5c:	b672      	cpsid	i
}
 8005c5e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	3304      	adds	r3, #4
 8005c72:	617b      	str	r3, [r7, #20]
    row_index--;
 8005c74:	7ffb      	ldrb	r3, [r7, #31]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005c7a:	7ffb      	ldrb	r3, [r7, #31]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ef      	bne.n	8005c60 <FLASH_Program_Fast+0x30>
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f383 8810 	msr	PRIMASK, r3
}
 8005c8a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005c8c:	bf00      	nop
 8005c8e:	3724      	adds	r7, #36	@ 0x24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	40022000 	.word	0x40022000

08005c9c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ca6:	4b49      	ldr	r3, [pc, #292]	@ (8005dcc <HAL_FLASHEx_Erase+0x130>)
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <HAL_FLASHEx_Erase+0x16>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e087      	b.n	8005dc2 <HAL_FLASHEx_Erase+0x126>
 8005cb2:	4b46      	ldr	r3, [pc, #280]	@ (8005dcc <HAL_FLASHEx_Erase+0x130>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005cb8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005cbc:	f7ff ff3c 	bl	8005b38 <FLASH_WaitForLastOperation>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d177      	bne.n	8005dba <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005cca:	4b40      	ldr	r3, [pc, #256]	@ (8005dcc <HAL_FLASHEx_Erase+0x130>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005cd0:	4b3f      	ldr	r3, [pc, #252]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005cdc:	4b3c      	ldr	r3, [pc, #240]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ce8:	4b39      	ldr	r3, [pc, #228]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a38      	ldr	r2, [pc, #224]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005cee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cf2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005cf4:	4b35      	ldr	r3, [pc, #212]	@ (8005dcc <HAL_FLASHEx_Erase+0x130>)
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	771a      	strb	r2, [r3, #28]
 8005cfa:	e016      	b.n	8005d2a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005cfc:	4b33      	ldr	r3, [pc, #204]	@ (8005dcc <HAL_FLASHEx_Erase+0x130>)
 8005cfe:	2201      	movs	r2, #1
 8005d00:	771a      	strb	r2, [r3, #28]
 8005d02:	e012      	b.n	8005d2a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005d04:	4b32      	ldr	r3, [pc, #200]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005d10:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2e      	ldr	r2, [pc, #184]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005d16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d1a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dcc <HAL_FLASHEx_Erase+0x130>)
 8005d1e:	2202      	movs	r2, #2
 8005d20:	771a      	strb	r2, [r3, #28]
 8005d22:	e002      	b.n	8005d2a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005d24:	4b29      	ldr	r3, [pc, #164]	@ (8005dcc <HAL_FLASHEx_Erase+0x130>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d113      	bne.n	8005d5a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f84c 	bl	8005dd4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d3c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005d40:	f7ff fefa 	bl	8005b38 <FLASH_WaitForLastOperation>
 8005d44:	4603      	mov	r3, r0
 8005d46:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005d48:	4b21      	ldr	r3, [pc, #132]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	4a20      	ldr	r2, [pc, #128]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005d4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d52:	f023 0304 	bic.w	r3, r3, #4
 8005d56:	6153      	str	r3, [r2, #20]
 8005d58:	e02d      	b.n	8005db6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d60:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	60bb      	str	r3, [r7, #8]
 8005d68:	e01d      	b.n	8005da6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	68b8      	ldr	r0, [r7, #8]
 8005d72:	f000 f857 	bl	8005e24 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d76:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005d7a:	f7ff fedd 	bl	8005b38 <FLASH_WaitForLastOperation>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005d82:	4b13      	ldr	r3, [pc, #76]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	4a12      	ldr	r2, [pc, #72]	@ (8005dd0 <HAL_FLASHEx_Erase+0x134>)
 8005d88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d8c:	f023 0302 	bic.w	r3, r3, #2
 8005d90:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	601a      	str	r2, [r3, #0]
          break;
 8005d9e:	e00a      	b.n	8005db6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d3d9      	bcc.n	8005d6a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005db6:	f000 f86b 	bl	8005e90 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005dba:	4b04      	ldr	r3, [pc, #16]	@ (8005dcc <HAL_FLASHEx_Erase+0x130>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]

  return status;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20000020 	.word	0x20000020
 8005dd0:	40022000 	.word	0x40022000

08005dd4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005de6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e20 <FLASH_MassErase+0x4c>)
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	4a0d      	ldr	r2, [pc, #52]	@ (8005e20 <FLASH_MassErase+0x4c>)
 8005dec:	f043 0304 	orr.w	r3, r3, #4
 8005df0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8005dfc:	4b08      	ldr	r3, [pc, #32]	@ (8005e20 <FLASH_MassErase+0x4c>)
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	4a07      	ldr	r2, [pc, #28]	@ (8005e20 <FLASH_MassErase+0x4c>)
 8005e02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e06:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005e08:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <FLASH_MassErase+0x4c>)
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	4a04      	ldr	r2, [pc, #16]	@ (8005e20 <FLASH_MassErase+0x4c>)
 8005e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e12:	6153      	str	r3, [r2, #20]
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	40022000 	.word	0x40022000

08005e24 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d006      	beq.n	8005e46 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005e38:	4b14      	ldr	r3, [pc, #80]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	4a13      	ldr	r2, [pc, #76]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e42:	6153      	str	r3, [r2, #20]
 8005e44:	e005      	b.n	8005e52 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8005e46:	4b11      	ldr	r3, [pc, #68]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	4a10      	ldr	r2, [pc, #64]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005e50:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005e52:	4b0e      	ldr	r3, [pc, #56]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8005e62:	490a      	ldr	r1, [pc, #40]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005e68:	4b08      	ldr	r3, [pc, #32]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	4a07      	ldr	r2, [pc, #28]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e6e:	f043 0302 	orr.w	r3, r3, #2
 8005e72:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005e74:	4b05      	ldr	r3, [pc, #20]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	4a04      	ldr	r2, [pc, #16]	@ (8005e8c <FLASH_PageErase+0x68>)
 8005e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e7e:	6153      	str	r3, [r2, #20]
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	40022000 	.word	0x40022000

08005e90 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005e96:	4b21      	ldr	r3, [pc, #132]	@ (8005f1c <FLASH_FlushCaches+0x8c>)
 8005e98:	7f1b      	ldrb	r3, [r3, #28]
 8005e9a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d002      	beq.n	8005ea8 <FLASH_FlushCaches+0x18>
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d117      	bne.n	8005ed8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1c      	ldr	r2, [pc, #112]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005eae:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005eb2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a19      	ldr	r2, [pc, #100]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005eba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	4b17      	ldr	r3, [pc, #92]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a16      	ldr	r2, [pc, #88]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005ec6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005eca:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ecc:	4b14      	ldr	r3, [pc, #80]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a13      	ldr	r2, [pc, #76]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ed6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005ed8:	79fb      	ldrb	r3, [r7, #7]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d002      	beq.n	8005ee4 <FLASH_FlushCaches+0x54>
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d111      	bne.n	8005f08 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005eea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005ef6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005efa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005efc:	4b08      	ldr	r3, [pc, #32]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a07      	ldr	r2, [pc, #28]	@ (8005f20 <FLASH_FlushCaches+0x90>)
 8005f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f06:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005f08:	4b04      	ldr	r3, [pc, #16]	@ (8005f1c <FLASH_FlushCaches+0x8c>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	771a      	strb	r2, [r3, #28]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	20000020 	.word	0x20000020
 8005f20:	40022000 	.word	0x40022000

08005f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f32:	e17f      	b.n	8006234 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	2101      	movs	r1, #1
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f40:	4013      	ands	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8171 	beq.w	800622e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d005      	beq.n	8005f64 <HAL_GPIO_Init+0x40>
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d130      	bne.n	8005fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	2203      	movs	r2, #3
 8005f70:	fa02 f303 	lsl.w	r3, r2, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	f003 0201 	and.w	r2, r3, #1
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	d118      	bne.n	8006004 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005fd8:	2201      	movs	r2, #1
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	08db      	lsrs	r3, r3, #3
 8005fee:	f003 0201 	and.w	r2, r3, #1
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f003 0303 	and.w	r3, r3, #3
 800600c:	2b03      	cmp	r3, #3
 800600e:	d017      	beq.n	8006040 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	2203      	movs	r2, #3
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	43db      	mvns	r3, r3
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4013      	ands	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d123      	bne.n	8006094 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	08da      	lsrs	r2, r3, #3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3208      	adds	r2, #8
 8006054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006058:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	220f      	movs	r2, #15
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	43db      	mvns	r3, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4013      	ands	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	08da      	lsrs	r2, r3, #3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3208      	adds	r2, #8
 800608e:	6939      	ldr	r1, [r7, #16]
 8006090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	2203      	movs	r2, #3
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4013      	ands	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f003 0203 	and.w	r2, r3, #3
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80ac 	beq.w	800622e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006254 <HAL_GPIO_Init+0x330>)
 80060d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060da:	4a5e      	ldr	r2, [pc, #376]	@ (8006254 <HAL_GPIO_Init+0x330>)
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80060e2:	4b5c      	ldr	r3, [pc, #368]	@ (8006254 <HAL_GPIO_Init+0x330>)
 80060e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80060ee:	4a5a      	ldr	r2, [pc, #360]	@ (8006258 <HAL_GPIO_Init+0x334>)
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	089b      	lsrs	r3, r3, #2
 80060f4:	3302      	adds	r3, #2
 80060f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	220f      	movs	r2, #15
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43db      	mvns	r3, r3
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4013      	ands	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006118:	d025      	beq.n	8006166 <HAL_GPIO_Init+0x242>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a4f      	ldr	r2, [pc, #316]	@ (800625c <HAL_GPIO_Init+0x338>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01f      	beq.n	8006162 <HAL_GPIO_Init+0x23e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a4e      	ldr	r2, [pc, #312]	@ (8006260 <HAL_GPIO_Init+0x33c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d019      	beq.n	800615e <HAL_GPIO_Init+0x23a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a4d      	ldr	r2, [pc, #308]	@ (8006264 <HAL_GPIO_Init+0x340>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_GPIO_Init+0x236>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a4c      	ldr	r2, [pc, #304]	@ (8006268 <HAL_GPIO_Init+0x344>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00d      	beq.n	8006156 <HAL_GPIO_Init+0x232>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a4b      	ldr	r2, [pc, #300]	@ (800626c <HAL_GPIO_Init+0x348>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <HAL_GPIO_Init+0x22e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a4a      	ldr	r2, [pc, #296]	@ (8006270 <HAL_GPIO_Init+0x34c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_GPIO_Init+0x22a>
 800614a:	2306      	movs	r3, #6
 800614c:	e00c      	b.n	8006168 <HAL_GPIO_Init+0x244>
 800614e:	2307      	movs	r3, #7
 8006150:	e00a      	b.n	8006168 <HAL_GPIO_Init+0x244>
 8006152:	2305      	movs	r3, #5
 8006154:	e008      	b.n	8006168 <HAL_GPIO_Init+0x244>
 8006156:	2304      	movs	r3, #4
 8006158:	e006      	b.n	8006168 <HAL_GPIO_Init+0x244>
 800615a:	2303      	movs	r3, #3
 800615c:	e004      	b.n	8006168 <HAL_GPIO_Init+0x244>
 800615e:	2302      	movs	r3, #2
 8006160:	e002      	b.n	8006168 <HAL_GPIO_Init+0x244>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <HAL_GPIO_Init+0x244>
 8006166:	2300      	movs	r3, #0
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	f002 0203 	and.w	r2, r2, #3
 800616e:	0092      	lsls	r2, r2, #2
 8006170:	4093      	lsls	r3, r2
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006178:	4937      	ldr	r1, [pc, #220]	@ (8006258 <HAL_GPIO_Init+0x334>)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	3302      	adds	r3, #2
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006186:	4b3b      	ldr	r3, [pc, #236]	@ (8006274 <HAL_GPIO_Init+0x350>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	43db      	mvns	r3, r3
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4013      	ands	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80061aa:	4a32      	ldr	r2, [pc, #200]	@ (8006274 <HAL_GPIO_Init+0x350>)
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80061b0:	4b30      	ldr	r3, [pc, #192]	@ (8006274 <HAL_GPIO_Init+0x350>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	43db      	mvns	r3, r3
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4013      	ands	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80061d4:	4a27      	ldr	r2, [pc, #156]	@ (8006274 <HAL_GPIO_Init+0x350>)
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80061da:	4b26      	ldr	r3, [pc, #152]	@ (8006274 <HAL_GPIO_Init+0x350>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	43db      	mvns	r3, r3
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4013      	ands	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006274 <HAL_GPIO_Init+0x350>)
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006204:	4b1b      	ldr	r3, [pc, #108]	@ (8006274 <HAL_GPIO_Init+0x350>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	43db      	mvns	r3, r3
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	4013      	ands	r3, r2
 8006212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006228:	4a12      	ldr	r2, [pc, #72]	@ (8006274 <HAL_GPIO_Init+0x350>)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	3301      	adds	r3, #1
 8006232:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	fa22 f303 	lsr.w	r3, r2, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	f47f ae78 	bne.w	8005f34 <HAL_GPIO_Init+0x10>
  }
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40021000 	.word	0x40021000
 8006258:	40010000 	.word	0x40010000
 800625c:	48000400 	.word	0x48000400
 8006260:	48000800 	.word	0x48000800
 8006264:	48000c00 	.word	0x48000c00
 8006268:	48001000 	.word	0x48001000
 800626c:	48001400 	.word	0x48001400
 8006270:	48001800 	.word	0x48001800
 8006274:	40010400 	.word	0x40010400

08006278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	887b      	ldrh	r3, [r7, #2]
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006290:	2301      	movs	r3, #1
 8006292:	73fb      	strb	r3, [r7, #15]
 8006294:	e001      	b.n	800629a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800629a:	7bfb      	ldrb	r3, [r7, #15]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	807b      	strh	r3, [r7, #2]
 80062b4:	4613      	mov	r3, r2
 80062b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062b8:	787b      	ldrb	r3, [r7, #1]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80062be:	887a      	ldrh	r2, [r7, #2]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80062c4:	e002      	b.n	80062cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80062c6:	887a      	ldrh	r2, [r7, #2]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	460b      	mov	r3, r1
 80062e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062ea:	887a      	ldrh	r2, [r7, #2]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4013      	ands	r3, r2
 80062f0:	041a      	lsls	r2, r3, #16
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	43d9      	mvns	r1, r3
 80062f6:	887b      	ldrh	r3, [r7, #2]
 80062f8:	400b      	ands	r3, r1
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	619a      	str	r2, [r3, #24]
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	4603      	mov	r3, r0
 8006314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006316:	4b08      	ldr	r3, [pc, #32]	@ (8006338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	88fb      	ldrh	r3, [r7, #6]
 800631c:	4013      	ands	r3, r2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d006      	beq.n	8006330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006322:	4a05      	ldr	r2, [pc, #20]	@ (8006338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 f806 	bl	800633c <HAL_GPIO_EXTI_Callback>
  }
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40010400 	.word	0x40010400

0800633c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006358:	4b04      	ldr	r3, [pc, #16]	@ (800636c <HAL_PWREx_GetVoltageRange+0x18>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006360:	4618      	mov	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	40007000 	.word	0x40007000

08006370 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800637e:	d130      	bne.n	80063e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006380:	4b23      	ldr	r3, [pc, #140]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006388:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800638c:	d038      	beq.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800638e:	4b20      	ldr	r3, [pc, #128]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006396:	4a1e      	ldr	r2, [pc, #120]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800639c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800639e:	4b1d      	ldr	r3, [pc, #116]	@ (8006414 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2232      	movs	r2, #50	@ 0x32
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006418 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	0c9b      	lsrs	r3, r3, #18
 80063b0:	3301      	adds	r3, #1
 80063b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063b4:	e002      	b.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063bc:	4b14      	ldr	r3, [pc, #80]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063c8:	d102      	bne.n	80063d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f2      	bne.n	80063b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063dc:	d110      	bne.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e00f      	b.n	8006402 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80063e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ee:	d007      	beq.n	8006400 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063f0:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80063f8:	4a05      	ldr	r2, [pc, #20]	@ (8006410 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80063fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40007000 	.word	0x40007000
 8006414:	20000014 	.word	0x20000014
 8006418:	431bde83 	.word	0x431bde83

0800641c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e3ca      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800642e:	4b97      	ldr	r3, [pc, #604]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 030c 	and.w	r3, r3, #12
 8006436:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006438:	4b94      	ldr	r3, [pc, #592]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80e4 	beq.w	8006618 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <HAL_RCC_OscConfig+0x4a>
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b0c      	cmp	r3, #12
 800645a:	f040 808b 	bne.w	8006574 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2b01      	cmp	r3, #1
 8006462:	f040 8087 	bne.w	8006574 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006466:	4b89      	ldr	r3, [pc, #548]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <HAL_RCC_OscConfig+0x62>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e3a2      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1a      	ldr	r2, [r3, #32]
 8006482:	4b82      	ldr	r3, [pc, #520]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <HAL_RCC_OscConfig+0x7c>
 800648e:	4b7f      	ldr	r3, [pc, #508]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006496:	e005      	b.n	80064a4 <HAL_RCC_OscConfig+0x88>
 8006498:	4b7c      	ldr	r3, [pc, #496]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800649a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800649e:	091b      	lsrs	r3, r3, #4
 80064a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d223      	bcs.n	80064f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f000 fd55 	bl	8006f5c <RCC_SetFlashLatencyFromMSIRange>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e383      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064bc:	4b73      	ldr	r3, [pc, #460]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a72      	ldr	r2, [pc, #456]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064c2:	f043 0308 	orr.w	r3, r3, #8
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	4b70      	ldr	r3, [pc, #448]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	496d      	ldr	r1, [pc, #436]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064da:	4b6c      	ldr	r3, [pc, #432]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	021b      	lsls	r3, r3, #8
 80064e8:	4968      	ldr	r1, [pc, #416]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	604b      	str	r3, [r1, #4]
 80064ee:	e025      	b.n	800653c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064f0:	4b66      	ldr	r3, [pc, #408]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a65      	ldr	r2, [pc, #404]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064f6:	f043 0308 	orr.w	r3, r3, #8
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	4b63      	ldr	r3, [pc, #396]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	4960      	ldr	r1, [pc, #384]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800650a:	4313      	orrs	r3, r2
 800650c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800650e:	4b5f      	ldr	r3, [pc, #380]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	021b      	lsls	r3, r3, #8
 800651c:	495b      	ldr	r1, [pc, #364]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800651e:	4313      	orrs	r3, r2
 8006520:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d109      	bne.n	800653c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fd15 	bl	8006f5c <RCC_SetFlashLatencyFromMSIRange>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e343      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800653c:	f000 fc4a 	bl	8006dd4 <HAL_RCC_GetSysClockFreq>
 8006540:	4602      	mov	r2, r0
 8006542:	4b52      	ldr	r3, [pc, #328]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	091b      	lsrs	r3, r3, #4
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	4950      	ldr	r1, [pc, #320]	@ (8006690 <HAL_RCC_OscConfig+0x274>)
 800654e:	5ccb      	ldrb	r3, [r1, r3]
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
 8006558:	4a4e      	ldr	r2, [pc, #312]	@ (8006694 <HAL_RCC_OscConfig+0x278>)
 800655a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800655c:	4b4e      	ldr	r3, [pc, #312]	@ (8006698 <HAL_RCC_OscConfig+0x27c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4618      	mov	r0, r3
 8006562:	f7fd fac3 	bl	8003aec <HAL_InitTick>
 8006566:	4603      	mov	r3, r0
 8006568:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d052      	beq.n	8006616 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	e327      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d032      	beq.n	80065e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800657c:	4b43      	ldr	r3, [pc, #268]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a42      	ldr	r2, [pc, #264]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006582:	f043 0301 	orr.w	r3, r3, #1
 8006586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006588:	f7fd fb00 	bl	8003b8c <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006590:	f7fd fafc 	bl	8003b8c <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e310      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065a2:	4b3a      	ldr	r3, [pc, #232]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065ae:	4b37      	ldr	r3, [pc, #220]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a36      	ldr	r2, [pc, #216]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065b4:	f043 0308 	orr.w	r3, r3, #8
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	4b34      	ldr	r3, [pc, #208]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	4931      	ldr	r1, [pc, #196]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065cc:	4b2f      	ldr	r3, [pc, #188]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	492c      	ldr	r1, [pc, #176]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	604b      	str	r3, [r1, #4]
 80065e0:	e01a      	b.n	8006618 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065e2:	4b2a      	ldr	r3, [pc, #168]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a29      	ldr	r2, [pc, #164]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 80065e8:	f023 0301 	bic.w	r3, r3, #1
 80065ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065ee:	f7fd facd 	bl	8003b8c <HAL_GetTick>
 80065f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065f6:	f7fd fac9 	bl	8003b8c <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e2dd      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006608:	4b20      	ldr	r3, [pc, #128]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1f0      	bne.n	80065f6 <HAL_RCC_OscConfig+0x1da>
 8006614:	e000      	b.n	8006618 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006616:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d074      	beq.n	800670e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	2b08      	cmp	r3, #8
 8006628:	d005      	beq.n	8006636 <HAL_RCC_OscConfig+0x21a>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	2b0c      	cmp	r3, #12
 800662e:	d10e      	bne.n	800664e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2b03      	cmp	r3, #3
 8006634:	d10b      	bne.n	800664e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006636:	4b15      	ldr	r3, [pc, #84]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d064      	beq.n	800670c <HAL_RCC_OscConfig+0x2f0>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d160      	bne.n	800670c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e2ba      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006656:	d106      	bne.n	8006666 <HAL_RCC_OscConfig+0x24a>
 8006658:	4b0c      	ldr	r3, [pc, #48]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0b      	ldr	r2, [pc, #44]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800665e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e026      	b.n	80066b4 <HAL_RCC_OscConfig+0x298>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800666e:	d115      	bne.n	800669c <HAL_RCC_OscConfig+0x280>
 8006670:	4b06      	ldr	r3, [pc, #24]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a05      	ldr	r2, [pc, #20]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006676:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	4b03      	ldr	r3, [pc, #12]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a02      	ldr	r2, [pc, #8]	@ (800668c <HAL_RCC_OscConfig+0x270>)
 8006682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	e014      	b.n	80066b4 <HAL_RCC_OscConfig+0x298>
 800668a:	bf00      	nop
 800668c:	40021000 	.word	0x40021000
 8006690:	08018680 	.word	0x08018680
 8006694:	20000014 	.word	0x20000014
 8006698:	20000018 	.word	0x20000018
 800669c:	4ba0      	ldr	r3, [pc, #640]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a9f      	ldr	r2, [pc, #636]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80066a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	4b9d      	ldr	r3, [pc, #628]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a9c      	ldr	r2, [pc, #624]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80066ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d013      	beq.n	80066e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fd fa66 	bl	8003b8c <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c4:	f7fd fa62 	bl	8003b8c <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b64      	cmp	r3, #100	@ 0x64
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e276      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066d6:	4b92      	ldr	r3, [pc, #584]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f0      	beq.n	80066c4 <HAL_RCC_OscConfig+0x2a8>
 80066e2:	e014      	b.n	800670e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fd fa52 	bl	8003b8c <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ec:	f7fd fa4e 	bl	8003b8c <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	@ 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e262      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066fe:	4b88      	ldr	r3, [pc, #544]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f0      	bne.n	80066ec <HAL_RCC_OscConfig+0x2d0>
 800670a:	e000      	b.n	800670e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800670c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d060      	beq.n	80067dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b04      	cmp	r3, #4
 800671e:	d005      	beq.n	800672c <HAL_RCC_OscConfig+0x310>
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b0c      	cmp	r3, #12
 8006724:	d119      	bne.n	800675a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d116      	bne.n	800675a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800672c:	4b7c      	ldr	r3, [pc, #496]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_OscConfig+0x328>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e23f      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006744:	4b76      	ldr	r3, [pc, #472]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	4973      	ldr	r1, [pc, #460]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006758:	e040      	b.n	80067dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d023      	beq.n	80067aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006762:	4b6f      	ldr	r3, [pc, #444]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a6e      	ldr	r2, [pc, #440]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800676c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676e:	f7fd fa0d 	bl	8003b8c <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006776:	f7fd fa09 	bl	8003b8c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e21d      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006788:	4b65      	ldr	r3, [pc, #404]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006794:	4b62      	ldr	r3, [pc, #392]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	061b      	lsls	r3, r3, #24
 80067a2:	495f      	ldr	r1, [pc, #380]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	604b      	str	r3, [r1, #4]
 80067a8:	e018      	b.n	80067dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067aa:	4b5d      	ldr	r3, [pc, #372]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a5c      	ldr	r2, [pc, #368]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b6:	f7fd f9e9 	bl	8003b8c <HAL_GetTick>
 80067ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067be:	f7fd f9e5 	bl	8003b8c <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e1f9      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067d0:	4b53      	ldr	r3, [pc, #332]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f0      	bne.n	80067be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d03c      	beq.n	8006862 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01c      	beq.n	800682a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067f0:	4b4b      	ldr	r3, [pc, #300]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f6:	4a4a      	ldr	r2, [pc, #296]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80067f8:	f043 0301 	orr.w	r3, r3, #1
 80067fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006800:	f7fd f9c4 	bl	8003b8c <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006808:	f7fd f9c0 	bl	8003b8c <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e1d4      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800681a:	4b41      	ldr	r3, [pc, #260]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800681c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d0ef      	beq.n	8006808 <HAL_RCC_OscConfig+0x3ec>
 8006828:	e01b      	b.n	8006862 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800682a:	4b3d      	ldr	r3, [pc, #244]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006830:	4a3b      	ldr	r2, [pc, #236]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006832:	f023 0301 	bic.w	r3, r3, #1
 8006836:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683a:	f7fd f9a7 	bl	8003b8c <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006840:	e008      	b.n	8006854 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006842:	f7fd f9a3 	bl	8003b8c <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e1b7      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006854:	4b32      	ldr	r3, [pc, #200]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1ef      	bne.n	8006842 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 80a6 	beq.w	80069bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006870:	2300      	movs	r3, #0
 8006872:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006874:	4b2a      	ldr	r3, [pc, #168]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10d      	bne.n	800689c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006880:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006884:	4a26      	ldr	r2, [pc, #152]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800688a:	6593      	str	r3, [r2, #88]	@ 0x58
 800688c:	4b24      	ldr	r3, [pc, #144]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800688e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006898:	2301      	movs	r3, #1
 800689a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800689c:	4b21      	ldr	r3, [pc, #132]	@ (8006924 <HAL_RCC_OscConfig+0x508>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d118      	bne.n	80068da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006924 <HAL_RCC_OscConfig+0x508>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006924 <HAL_RCC_OscConfig+0x508>)
 80068ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068b4:	f7fd f96a 	bl	8003b8c <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068bc:	f7fd f966 	bl	8003b8c <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e17a      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068ce:	4b15      	ldr	r3, [pc, #84]	@ (8006924 <HAL_RCC_OscConfig+0x508>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0f0      	beq.n	80068bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d108      	bne.n	80068f4 <HAL_RCC_OscConfig+0x4d8>
 80068e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80068e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80068ea:	f043 0301 	orr.w	r3, r3, #1
 80068ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80068f2:	e029      	b.n	8006948 <HAL_RCC_OscConfig+0x52c>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2b05      	cmp	r3, #5
 80068fa:	d115      	bne.n	8006928 <HAL_RCC_OscConfig+0x50c>
 80068fc:	4b08      	ldr	r3, [pc, #32]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 80068fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006902:	4a07      	ldr	r2, [pc, #28]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006904:	f043 0304 	orr.w	r3, r3, #4
 8006908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800690c:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006912:	4a03      	ldr	r2, [pc, #12]	@ (8006920 <HAL_RCC_OscConfig+0x504>)
 8006914:	f043 0301 	orr.w	r3, r3, #1
 8006918:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800691c:	e014      	b.n	8006948 <HAL_RCC_OscConfig+0x52c>
 800691e:	bf00      	nop
 8006920:	40021000 	.word	0x40021000
 8006924:	40007000 	.word	0x40007000
 8006928:	4b9c      	ldr	r3, [pc, #624]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692e:	4a9b      	ldr	r2, [pc, #620]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006930:	f023 0301 	bic.w	r3, r3, #1
 8006934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006938:	4b98      	ldr	r3, [pc, #608]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800693e:	4a97      	ldr	r2, [pc, #604]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006940:	f023 0304 	bic.w	r3, r3, #4
 8006944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d016      	beq.n	800697e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006950:	f7fd f91c 	bl	8003b8c <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006956:	e00a      	b.n	800696e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006958:	f7fd f918 	bl	8003b8c <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e12a      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800696e:	4b8b      	ldr	r3, [pc, #556]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0ed      	beq.n	8006958 <HAL_RCC_OscConfig+0x53c>
 800697c:	e015      	b.n	80069aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697e:	f7fd f905 	bl	8003b8c <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006984:	e00a      	b.n	800699c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fd f901 	bl	8003b8c <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e113      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800699c:	4b7f      	ldr	r3, [pc, #508]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1ed      	bne.n	8006986 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069aa:	7ffb      	ldrb	r3, [r7, #31]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d105      	bne.n	80069bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069b0:	4b7a      	ldr	r3, [pc, #488]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 80069b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b4:	4a79      	ldr	r2, [pc, #484]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 80069b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069ba:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 80fe 	beq.w	8006bc2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	f040 80d0 	bne.w	8006b70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80069d0:	4b72      	ldr	r3, [pc, #456]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f003 0203 	and.w	r2, r3, #3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d130      	bne.n	8006a46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ee:	3b01      	subs	r3, #1
 80069f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d127      	bne.n	8006a46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d11f      	bne.n	8006a46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a10:	2a07      	cmp	r2, #7
 8006a12:	bf14      	ite	ne
 8006a14:	2201      	movne	r2, #1
 8006a16:	2200      	moveq	r2, #0
 8006a18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d113      	bne.n	8006a46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a28:	085b      	lsrs	r3, r3, #1
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d109      	bne.n	8006a46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3c:	085b      	lsrs	r3, r3, #1
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d06e      	beq.n	8006b24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b0c      	cmp	r3, #12
 8006a4a:	d069      	beq.n	8006b20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a4c:	4b53      	ldr	r3, [pc, #332]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006a58:	4b50      	ldr	r3, [pc, #320]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e0ad      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a68:	4b4c      	ldr	r3, [pc, #304]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a4b      	ldr	r2, [pc, #300]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006a6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a74:	f7fd f88a 	bl	8003b8c <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a7c:	f7fd f886 	bl	8003b8c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e09a      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a8e:	4b43      	ldr	r3, [pc, #268]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a9a:	4b40      	ldr	r3, [pc, #256]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	4b40      	ldr	r3, [pc, #256]	@ (8006ba0 <HAL_RCC_OscConfig+0x784>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006aaa:	3a01      	subs	r2, #1
 8006aac:	0112      	lsls	r2, r2, #4
 8006aae:	4311      	orrs	r1, r2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ab4:	0212      	lsls	r2, r2, #8
 8006ab6:	4311      	orrs	r1, r2
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006abc:	0852      	lsrs	r2, r2, #1
 8006abe:	3a01      	subs	r2, #1
 8006ac0:	0552      	lsls	r2, r2, #21
 8006ac2:	4311      	orrs	r1, r2
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006ac8:	0852      	lsrs	r2, r2, #1
 8006aca:	3a01      	subs	r2, #1
 8006acc:	0652      	lsls	r2, r2, #25
 8006ace:	4311      	orrs	r1, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ad4:	0912      	lsrs	r2, r2, #4
 8006ad6:	0452      	lsls	r2, r2, #17
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	4930      	ldr	r1, [pc, #192]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006aea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006aec:	4b2b      	ldr	r3, [pc, #172]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006af6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006af8:	f7fd f848 	bl	8003b8c <HAL_GetTick>
 8006afc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b00:	f7fd f844 	bl	8003b8c <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e058      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b12:	4b22      	ldr	r3, [pc, #136]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0f0      	beq.n	8006b00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b1e:	e050      	b.n	8006bc2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e04f      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b24:	4b1d      	ldr	r3, [pc, #116]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d148      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b30:	4b1a      	ldr	r3, [pc, #104]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a19      	ldr	r2, [pc, #100]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006b36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b3c:	4b17      	ldr	r3, [pc, #92]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	4a16      	ldr	r2, [pc, #88]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006b42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b48:	f7fd f820 	bl	8003b8c <HAL_GetTick>
 8006b4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b4e:	e008      	b.n	8006b62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b50:	f7fd f81c 	bl	8003b8c <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e030      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b62:	4b0e      	ldr	r3, [pc, #56]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d0f0      	beq.n	8006b50 <HAL_RCC_OscConfig+0x734>
 8006b6e:	e028      	b.n	8006bc2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2b0c      	cmp	r3, #12
 8006b74:	d023      	beq.n	8006bbe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b76:	4b09      	ldr	r3, [pc, #36]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a08      	ldr	r2, [pc, #32]	@ (8006b9c <HAL_RCC_OscConfig+0x780>)
 8006b7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b82:	f7fd f803 	bl	8003b8c <HAL_GetTick>
 8006b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b88:	e00c      	b.n	8006ba4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b8a:	f7fc ffff 	bl	8003b8c <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d905      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e013      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ba4:	4b09      	ldr	r3, [pc, #36]	@ (8006bcc <HAL_RCC_OscConfig+0x7b0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1ec      	bne.n	8006b8a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006bb0:	4b06      	ldr	r3, [pc, #24]	@ (8006bcc <HAL_RCC_OscConfig+0x7b0>)
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	4905      	ldr	r1, [pc, #20]	@ (8006bcc <HAL_RCC_OscConfig+0x7b0>)
 8006bb6:	4b06      	ldr	r3, [pc, #24]	@ (8006bd0 <HAL_RCC_OscConfig+0x7b4>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	60cb      	str	r3, [r1, #12]
 8006bbc:	e001      	b.n	8006bc2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	feeefffc 	.word	0xfeeefffc

08006bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0e7      	b.n	8006db8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006be8:	4b75      	ldr	r3, [pc, #468]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d910      	bls.n	8006c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bf6:	4b72      	ldr	r3, [pc, #456]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f023 0207 	bic.w	r2, r3, #7
 8006bfe:	4970      	ldr	r1, [pc, #448]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c06:	4b6e      	ldr	r3, [pc, #440]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d001      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0cf      	b.n	8006db8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d010      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	4b66      	ldr	r3, [pc, #408]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d908      	bls.n	8006c46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c34:	4b63      	ldr	r3, [pc, #396]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	4960      	ldr	r1, [pc, #384]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d04c      	beq.n	8006cec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d107      	bne.n	8006c6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c5a:	4b5a      	ldr	r3, [pc, #360]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d121      	bne.n	8006caa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e0a6      	b.n	8006db8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d107      	bne.n	8006c82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c72:	4b54      	ldr	r3, [pc, #336]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d115      	bne.n	8006caa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e09a      	b.n	8006db8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d107      	bne.n	8006c9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c8a:	4b4e      	ldr	r3, [pc, #312]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d109      	bne.n	8006caa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e08e      	b.n	8006db8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e086      	b.n	8006db8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006caa:	4b46      	ldr	r3, [pc, #280]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f023 0203 	bic.w	r2, r3, #3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	4943      	ldr	r1, [pc, #268]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cbc:	f7fc ff66 	bl	8003b8c <HAL_GetTick>
 8006cc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc2:	e00a      	b.n	8006cda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cc4:	f7fc ff62 	bl	8003b8c <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e06e      	b.n	8006db8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cda:	4b3a      	ldr	r3, [pc, #232]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 020c 	and.w	r2, r3, #12
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d1eb      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	4b31      	ldr	r3, [pc, #196]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d208      	bcs.n	8006d1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d08:	4b2e      	ldr	r3, [pc, #184]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	492b      	ldr	r1, [pc, #172]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d1a:	4b29      	ldr	r3, [pc, #164]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d210      	bcs.n	8006d4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d28:	4b25      	ldr	r3, [pc, #148]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f023 0207 	bic.w	r2, r3, #7
 8006d30:	4923      	ldr	r1, [pc, #140]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d38:	4b21      	ldr	r3, [pc, #132]	@ (8006dc0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d001      	beq.n	8006d4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e036      	b.n	8006db8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d008      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d56:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	4918      	ldr	r1, [pc, #96]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0308 	and.w	r3, r3, #8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d009      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d74:	4b13      	ldr	r3, [pc, #76]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	4910      	ldr	r1, [pc, #64]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d88:	f000 f824 	bl	8006dd4 <HAL_RCC_GetSysClockFreq>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	f003 030f 	and.w	r3, r3, #15
 8006d98:	490b      	ldr	r1, [pc, #44]	@ (8006dc8 <HAL_RCC_ClockConfig+0x1f4>)
 8006d9a:	5ccb      	ldrb	r3, [r1, r3]
 8006d9c:	f003 031f 	and.w	r3, r3, #31
 8006da0:	fa22 f303 	lsr.w	r3, r2, r3
 8006da4:	4a09      	ldr	r2, [pc, #36]	@ (8006dcc <HAL_RCC_ClockConfig+0x1f8>)
 8006da6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006da8:	4b09      	ldr	r3, [pc, #36]	@ (8006dd0 <HAL_RCC_ClockConfig+0x1fc>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fc fe9d 	bl	8003aec <HAL_InitTick>
 8006db2:	4603      	mov	r3, r0
 8006db4:	72fb      	strb	r3, [r7, #11]

  return status;
 8006db6:	7afb      	ldrb	r3, [r7, #11]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	40022000 	.word	0x40022000
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	08018680 	.word	0x08018680
 8006dcc:	20000014 	.word	0x20000014
 8006dd0:	20000018 	.word	0x20000018

08006dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b089      	sub	sp, #36	@ 0x24
 8006dd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	61fb      	str	r3, [r7, #28]
 8006dde:	2300      	movs	r3, #0
 8006de0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006de2:	4b3e      	ldr	r3, [pc, #248]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x108>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f003 030c 	and.w	r3, r3, #12
 8006dea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006dec:	4b3b      	ldr	r3, [pc, #236]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x108>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_RCC_GetSysClockFreq+0x34>
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b0c      	cmp	r3, #12
 8006e00:	d121      	bne.n	8006e46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d11e      	bne.n	8006e46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e08:	4b34      	ldr	r3, [pc, #208]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0308 	and.w	r3, r3, #8
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d107      	bne.n	8006e24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e14:	4b31      	ldr	r3, [pc, #196]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e1a:	0a1b      	lsrs	r3, r3, #8
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	e005      	b.n	8006e30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e24:	4b2d      	ldr	r3, [pc, #180]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	f003 030f 	and.w	r3, r3, #15
 8006e2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e30:	4a2b      	ldr	r2, [pc, #172]	@ (8006ee0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10d      	bne.n	8006e5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e44:	e00a      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d102      	bne.n	8006e52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e4c:	4b25      	ldr	r3, [pc, #148]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	e004      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d101      	bne.n	8006e5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e58:	4b23      	ldr	r3, [pc, #140]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006e5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b0c      	cmp	r3, #12
 8006e60:	d134      	bne.n	8006ecc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e62:	4b1e      	ldr	r3, [pc, #120]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d003      	beq.n	8006e7a <HAL_RCC_GetSysClockFreq+0xa6>
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d003      	beq.n	8006e80 <HAL_RCC_GetSysClockFreq+0xac>
 8006e78:	e005      	b.n	8006e86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e7c:	617b      	str	r3, [r7, #20]
      break;
 8006e7e:	e005      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006e80:	4b19      	ldr	r3, [pc, #100]	@ (8006ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006e82:	617b      	str	r3, [r7, #20]
      break;
 8006e84:	e002      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	617b      	str	r3, [r7, #20]
      break;
 8006e8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e8c:	4b13      	ldr	r3, [pc, #76]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	091b      	lsrs	r3, r3, #4
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	3301      	adds	r3, #1
 8006e98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006e9a:	4b10      	ldr	r3, [pc, #64]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x108>)
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	fb03 f202 	mul.w	r2, r3, r2
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006edc <HAL_RCC_GetSysClockFreq+0x108>)
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	0e5b      	lsrs	r3, r3, #25
 8006eb8:	f003 0303 	and.w	r3, r3, #3
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006ecc:	69bb      	ldr	r3, [r7, #24]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3724      	adds	r7, #36	@ 0x24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	08018698 	.word	0x08018698
 8006ee4:	00f42400 	.word	0x00f42400
 8006ee8:	007a1200 	.word	0x007a1200

08006eec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef0:	4b03      	ldr	r3, [pc, #12]	@ (8006f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000014 	.word	0x20000014

08006f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f08:	f7ff fff0 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4904      	ldr	r1, [pc, #16]	@ (8006f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40021000 	.word	0x40021000
 8006f2c:	08018690 	.word	0x08018690

08006f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006f34:	f7ff ffda 	bl	8006eec <HAL_RCC_GetHCLKFreq>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	4b06      	ldr	r3, [pc, #24]	@ (8006f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	0adb      	lsrs	r3, r3, #11
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	4904      	ldr	r1, [pc, #16]	@ (8006f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f46:	5ccb      	ldrb	r3, [r1, r3]
 8006f48:	f003 031f 	and.w	r3, r3, #31
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40021000 	.word	0x40021000
 8006f58:	08018690 	.word	0x08018690

08006f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f68:	4b2a      	ldr	r3, [pc, #168]	@ (8007014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f74:	f7ff f9ee 	bl	8006354 <HAL_PWREx_GetVoltageRange>
 8006f78:	6178      	str	r0, [r7, #20]
 8006f7a:	e014      	b.n	8006fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f7c:	4b25      	ldr	r3, [pc, #148]	@ (8007014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f80:	4a24      	ldr	r2, [pc, #144]	@ (8007014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f88:	4b22      	ldr	r3, [pc, #136]	@ (8007014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f94:	f7ff f9de 	bl	8006354 <HAL_PWREx_GetVoltageRange>
 8006f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8007014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fa4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fac:	d10b      	bne.n	8006fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b80      	cmp	r3, #128	@ 0x80
 8006fb2:	d919      	bls.n	8006fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8006fb8:	d902      	bls.n	8006fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fba:	2302      	movs	r3, #2
 8006fbc:	613b      	str	r3, [r7, #16]
 8006fbe:	e013      	b.n	8006fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	e010      	b.n	8006fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b80      	cmp	r3, #128	@ 0x80
 8006fca:	d902      	bls.n	8006fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006fcc:	2303      	movs	r3, #3
 8006fce:	613b      	str	r3, [r7, #16]
 8006fd0:	e00a      	b.n	8006fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b80      	cmp	r3, #128	@ 0x80
 8006fd6:	d102      	bne.n	8006fde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006fd8:	2302      	movs	r3, #2
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	e004      	b.n	8006fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b70      	cmp	r3, #112	@ 0x70
 8006fe2:	d101      	bne.n	8006fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f023 0207 	bic.w	r2, r3, #7
 8006ff0:	4909      	ldr	r1, [pc, #36]	@ (8007018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ff8:	4b07      	ldr	r3, [pc, #28]	@ (8007018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0307 	and.w	r3, r3, #7
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	429a      	cmp	r2, r3
 8007004:	d001      	beq.n	800700a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40021000 	.word	0x40021000
 8007018:	40022000 	.word	0x40022000

0800701c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007024:	2300      	movs	r3, #0
 8007026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007028:	2300      	movs	r3, #0
 800702a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007034:	2b00      	cmp	r3, #0
 8007036:	d041      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800703c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007040:	d02a      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007042:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007046:	d824      	bhi.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007048:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800704c:	d008      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800704e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007052:	d81e      	bhi.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007058:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800705c:	d010      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800705e:	e018      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007060:	4b86      	ldr	r3, [pc, #536]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	4a85      	ldr	r2, [pc, #532]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007066:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800706a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800706c:	e015      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3304      	adds	r3, #4
 8007072:	2100      	movs	r1, #0
 8007074:	4618      	mov	r0, r3
 8007076:	f000 fabb 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 800707a:	4603      	mov	r3, r0
 800707c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800707e:	e00c      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	3320      	adds	r3, #32
 8007084:	2100      	movs	r1, #0
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fba6 	bl	80077d8 <RCCEx_PLLSAI2_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007090:	e003      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	74fb      	strb	r3, [r7, #19]
      break;
 8007096:	e000      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800709a:	7cfb      	ldrb	r3, [r7, #19]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10b      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070a0:	4b76      	ldr	r3, [pc, #472]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ae:	4973      	ldr	r1, [pc, #460]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80070b6:	e001      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b8:	7cfb      	ldrb	r3, [r7, #19]
 80070ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d041      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070d0:	d02a      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80070d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80070d6:	d824      	bhi.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80070d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070dc:	d008      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80070de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070e2:	d81e      	bhi.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00a      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80070e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070ec:	d010      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80070ee:	e018      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80070f0:	4b62      	ldr	r3, [pc, #392]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4a61      	ldr	r2, [pc, #388]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80070fc:	e015      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3304      	adds	r3, #4
 8007102:	2100      	movs	r1, #0
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fa73 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 800710a:	4603      	mov	r3, r0
 800710c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800710e:	e00c      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	3320      	adds	r3, #32
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fb5e 	bl	80077d8 <RCCEx_PLLSAI2_Config>
 800711c:	4603      	mov	r3, r0
 800711e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007120:	e003      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	74fb      	strb	r3, [r7, #19]
      break;
 8007126:	e000      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800712a:	7cfb      	ldrb	r3, [r7, #19]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007130:	4b52      	ldr	r3, [pc, #328]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007136:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800713e:	494f      	ldr	r1, [pc, #316]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007146:	e001      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007148:	7cfb      	ldrb	r3, [r7, #19]
 800714a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80a0 	beq.w	800729a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800715a:	2300      	movs	r3, #0
 800715c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800715e:	4b47      	ldr	r3, [pc, #284]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800716e:	2300      	movs	r3, #0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007174:	4b41      	ldr	r3, [pc, #260]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007178:	4a40      	ldr	r2, [pc, #256]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800717a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800717e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007180:	4b3e      	ldr	r3, [pc, #248]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007188:	60bb      	str	r3, [r7, #8]
 800718a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800718c:	2301      	movs	r3, #1
 800718e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007190:	4b3b      	ldr	r3, [pc, #236]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a3a      	ldr	r2, [pc, #232]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800719a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800719c:	f7fc fcf6 	bl	8003b8c <HAL_GetTick>
 80071a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071a2:	e009      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a4:	f7fc fcf2 	bl	8003b8c <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d902      	bls.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	74fb      	strb	r3, [r7, #19]
        break;
 80071b6:	e005      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80071b8:	4b31      	ldr	r3, [pc, #196]	@ (8007280 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d0ef      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80071c4:	7cfb      	ldrb	r3, [r7, #19]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d15c      	bne.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071ca:	4b2c      	ldr	r3, [pc, #176]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d01f      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d019      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071e8:	4b24      	ldr	r3, [pc, #144]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071f4:	4b21      	ldr	r3, [pc, #132]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071fa:	4a20      	ldr	r2, [pc, #128]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007204:	4b1d      	ldr	r3, [pc, #116]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720a:	4a1c      	ldr	r2, [pc, #112]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800720c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007214:	4a19      	ldr	r2, [pc, #100]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	2b00      	cmp	r3, #0
 8007224:	d016      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007226:	f7fc fcb1 	bl	8003b8c <HAL_GetTick>
 800722a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800722c:	e00b      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800722e:	f7fc fcad 	bl	8003b8c <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800723c:	4293      	cmp	r3, r2
 800723e:	d902      	bls.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	74fb      	strb	r3, [r7, #19]
            break;
 8007244:	e006      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007246:	4b0d      	ldr	r3, [pc, #52]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800724c:	f003 0302 	and.w	r3, r3, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0ec      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007254:	7cfb      	ldrb	r3, [r7, #19]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10c      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800725a:	4b08      	ldr	r3, [pc, #32]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800725c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800726a:	4904      	ldr	r1, [pc, #16]	@ (800727c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800726c:	4313      	orrs	r3, r2
 800726e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007272:	e009      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007274:	7cfb      	ldrb	r3, [r7, #19]
 8007276:	74bb      	strb	r3, [r7, #18]
 8007278:	e006      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800727a:	bf00      	nop
 800727c:	40021000 	.word	0x40021000
 8007280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007284:	7cfb      	ldrb	r3, [r7, #19]
 8007286:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007288:	7c7b      	ldrb	r3, [r7, #17]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d105      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800728e:	4b9e      	ldr	r3, [pc, #632]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007292:	4a9d      	ldr	r2, [pc, #628]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007298:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072a6:	4b98      	ldr	r3, [pc, #608]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ac:	f023 0203 	bic.w	r2, r3, #3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b4:	4994      	ldr	r1, [pc, #592]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00a      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072c8:	4b8f      	ldr	r3, [pc, #572]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ce:	f023 020c 	bic.w	r2, r3, #12
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072d6:	498c      	ldr	r1, [pc, #560]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0304 	and.w	r3, r3, #4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072ea:	4b87      	ldr	r3, [pc, #540]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f8:	4983      	ldr	r1, [pc, #524]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0308 	and.w	r3, r3, #8
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800730c:	4b7e      	ldr	r3, [pc, #504]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800730e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007312:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731a:	497b      	ldr	r1, [pc, #492]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800731c:	4313      	orrs	r3, r2
 800731e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 0310 	and.w	r3, r3, #16
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800732e:	4b76      	ldr	r3, [pc, #472]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007334:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800733c:	4972      	ldr	r1, [pc, #456]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00a      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007350:	4b6d      	ldr	r3, [pc, #436]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007356:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800735e:	496a      	ldr	r1, [pc, #424]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007372:	4b65      	ldr	r3, [pc, #404]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007378:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007380:	4961      	ldr	r1, [pc, #388]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007382:	4313      	orrs	r3, r2
 8007384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00a      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007394:	4b5c      	ldr	r3, [pc, #368]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073a2:	4959      	ldr	r1, [pc, #356]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073b6:	4b54      	ldr	r3, [pc, #336]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c4:	4950      	ldr	r1, [pc, #320]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00a      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e6:	4948      	ldr	r1, [pc, #288]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00a      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073fa:	4b43      	ldr	r3, [pc, #268]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007400:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007408:	493f      	ldr	r1, [pc, #252]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d028      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800741c:	4b3a      	ldr	r3, [pc, #232]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800741e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007422:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800742a:	4937      	ldr	r1, [pc, #220]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800742c:	4313      	orrs	r3, r2
 800742e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800743a:	d106      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800743c:	4b32      	ldr	r3, [pc, #200]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	4a31      	ldr	r2, [pc, #196]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007446:	60d3      	str	r3, [r2, #12]
 8007448:	e011      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800744e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007452:	d10c      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3304      	adds	r3, #4
 8007458:	2101      	movs	r1, #1
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f8c8 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 8007460:	4603      	mov	r3, r0
 8007462:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007464:	7cfb      	ldrb	r3, [r7, #19]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800746a:	7cfb      	ldrb	r3, [r7, #19]
 800746c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d028      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800747a:	4b23      	ldr	r3, [pc, #140]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800747c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007480:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007488:	491f      	ldr	r1, [pc, #124]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007498:	d106      	bne.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800749a:	4b1b      	ldr	r3, [pc, #108]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	4a1a      	ldr	r2, [pc, #104]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074a4:	60d3      	str	r3, [r2, #12]
 80074a6:	e011      	b.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074b0:	d10c      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3304      	adds	r3, #4
 80074b6:	2101      	movs	r1, #1
 80074b8:	4618      	mov	r0, r3
 80074ba:	f000 f899 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074c2:	7cfb      	ldrb	r3, [r7, #19]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80074c8:	7cfb      	ldrb	r3, [r7, #19]
 80074ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d02b      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074e6:	4908      	ldr	r1, [pc, #32]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074f6:	d109      	bne.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074f8:	4b03      	ldr	r3, [pc, #12]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	4a02      	ldr	r2, [pc, #8]	@ (8007508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007502:	60d3      	str	r3, [r2, #12]
 8007504:	e014      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007506:	bf00      	nop
 8007508:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007510:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007514:	d10c      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3304      	adds	r3, #4
 800751a:	2101      	movs	r1, #1
 800751c:	4618      	mov	r0, r3
 800751e:	f000 f867 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007526:	7cfb      	ldrb	r3, [r7, #19]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800752c:	7cfb      	ldrb	r3, [r7, #19]
 800752e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d02f      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800753c:	4b2b      	ldr	r3, [pc, #172]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007542:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800754a:	4928      	ldr	r1, [pc, #160]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800755a:	d10d      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3304      	adds	r3, #4
 8007560:	2102      	movs	r1, #2
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f844 	bl	80075f0 <RCCEx_PLLSAI1_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800756c:	7cfb      	ldrb	r3, [r7, #19]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d014      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007572:	7cfb      	ldrb	r3, [r7, #19]
 8007574:	74bb      	strb	r3, [r7, #18]
 8007576:	e011      	b.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800757c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007580:	d10c      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	3320      	adds	r3, #32
 8007586:	2102      	movs	r1, #2
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f925 	bl	80077d8 <RCCEx_PLLSAI2_Config>
 800758e:	4603      	mov	r3, r0
 8007590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007592:	7cfb      	ldrb	r3, [r7, #19]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007598:	7cfb      	ldrb	r3, [r7, #19]
 800759a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075a8:	4b10      	ldr	r3, [pc, #64]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075b6:	490d      	ldr	r1, [pc, #52]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075ca:	4b08      	ldr	r3, [pc, #32]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075da:	4904      	ldr	r1, [pc, #16]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80075e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40021000 	.word	0x40021000

080075f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80075fe:	4b75      	ldr	r3, [pc, #468]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d018      	beq.n	800763c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800760a:	4b72      	ldr	r3, [pc, #456]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f003 0203 	and.w	r2, r3, #3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d10d      	bne.n	8007636 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
       ||
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007622:	4b6c      	ldr	r3, [pc, #432]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	091b      	lsrs	r3, r3, #4
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
       ||
 8007632:	429a      	cmp	r2, r3
 8007634:	d047      	beq.n	80076c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	73fb      	strb	r3, [r7, #15]
 800763a:	e044      	b.n	80076c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d018      	beq.n	8007676 <RCCEx_PLLSAI1_Config+0x86>
 8007644:	2b03      	cmp	r3, #3
 8007646:	d825      	bhi.n	8007694 <RCCEx_PLLSAI1_Config+0xa4>
 8007648:	2b01      	cmp	r3, #1
 800764a:	d002      	beq.n	8007652 <RCCEx_PLLSAI1_Config+0x62>
 800764c:	2b02      	cmp	r3, #2
 800764e:	d009      	beq.n	8007664 <RCCEx_PLLSAI1_Config+0x74>
 8007650:	e020      	b.n	8007694 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007652:	4b60      	ldr	r3, [pc, #384]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d11d      	bne.n	800769a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007662:	e01a      	b.n	800769a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007664:	4b5b      	ldr	r3, [pc, #364]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800766c:	2b00      	cmp	r3, #0
 800766e:	d116      	bne.n	800769e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007674:	e013      	b.n	800769e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007676:	4b57      	ldr	r3, [pc, #348]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10f      	bne.n	80076a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007682:	4b54      	ldr	r3, [pc, #336]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007692:	e006      	b.n	80076a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e004      	b.n	80076a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800769a:	bf00      	nop
 800769c:	e002      	b.n	80076a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10d      	bne.n	80076c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80076aa:	4b4a      	ldr	r3, [pc, #296]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6819      	ldr	r1, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	430b      	orrs	r3, r1
 80076c0:	4944      	ldr	r1, [pc, #272]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d17d      	bne.n	80077c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80076cc:	4b41      	ldr	r3, [pc, #260]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a40      	ldr	r2, [pc, #256]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d8:	f7fc fa58 	bl	8003b8c <HAL_GetTick>
 80076dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076de:	e009      	b.n	80076f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076e0:	f7fc fa54 	bl	8003b8c <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d902      	bls.n	80076f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	73fb      	strb	r3, [r7, #15]
        break;
 80076f2:	e005      	b.n	8007700 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80076f4:	4b37      	ldr	r3, [pc, #220]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1ef      	bne.n	80076e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d160      	bne.n	80077c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d111      	bne.n	8007730 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800770c:	4b31      	ldr	r3, [pc, #196]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007714:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	6892      	ldr	r2, [r2, #8]
 800771c:	0211      	lsls	r1, r2, #8
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68d2      	ldr	r2, [r2, #12]
 8007722:	0912      	lsrs	r2, r2, #4
 8007724:	0452      	lsls	r2, r2, #17
 8007726:	430a      	orrs	r2, r1
 8007728:	492a      	ldr	r1, [pc, #168]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800772a:	4313      	orrs	r3, r2
 800772c:	610b      	str	r3, [r1, #16]
 800772e:	e027      	b.n	8007780 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d112      	bne.n	800775c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007736:	4b27      	ldr	r3, [pc, #156]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800773e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6892      	ldr	r2, [r2, #8]
 8007746:	0211      	lsls	r1, r2, #8
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6912      	ldr	r2, [r2, #16]
 800774c:	0852      	lsrs	r2, r2, #1
 800774e:	3a01      	subs	r2, #1
 8007750:	0552      	lsls	r2, r2, #21
 8007752:	430a      	orrs	r2, r1
 8007754:	491f      	ldr	r1, [pc, #124]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007756:	4313      	orrs	r3, r2
 8007758:	610b      	str	r3, [r1, #16]
 800775a:	e011      	b.n	8007780 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800775c:	4b1d      	ldr	r3, [pc, #116]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007764:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6892      	ldr	r2, [r2, #8]
 800776c:	0211      	lsls	r1, r2, #8
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6952      	ldr	r2, [r2, #20]
 8007772:	0852      	lsrs	r2, r2, #1
 8007774:	3a01      	subs	r2, #1
 8007776:	0652      	lsls	r2, r2, #25
 8007778:	430a      	orrs	r2, r1
 800777a:	4916      	ldr	r1, [pc, #88]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800777c:	4313      	orrs	r3, r2
 800777e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007780:	4b14      	ldr	r3, [pc, #80]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a13      	ldr	r2, [pc, #76]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007786:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800778a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800778c:	f7fc f9fe 	bl	8003b8c <HAL_GetTick>
 8007790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007792:	e009      	b.n	80077a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007794:	f7fc f9fa 	bl	8003b8c <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d902      	bls.n	80077a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	73fb      	strb	r3, [r7, #15]
          break;
 80077a6:	e005      	b.n	80077b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077a8:	4b0a      	ldr	r3, [pc, #40]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0ef      	beq.n	8007794 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d106      	bne.n	80077c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80077ba:	4b06      	ldr	r3, [pc, #24]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077bc:	691a      	ldr	r2, [r3, #16]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	4904      	ldr	r1, [pc, #16]	@ (80077d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	40021000 	.word	0x40021000

080077d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80077e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d018      	beq.n	8007824 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80077f2:	4b67      	ldr	r3, [pc, #412]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f003 0203 	and.w	r2, r3, #3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d10d      	bne.n	800781e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
       ||
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800780a:	4b61      	ldr	r3, [pc, #388]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	091b      	lsrs	r3, r3, #4
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
       ||
 800781a:	429a      	cmp	r2, r3
 800781c:	d047      	beq.n	80078ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	73fb      	strb	r3, [r7, #15]
 8007822:	e044      	b.n	80078ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b03      	cmp	r3, #3
 800782a:	d018      	beq.n	800785e <RCCEx_PLLSAI2_Config+0x86>
 800782c:	2b03      	cmp	r3, #3
 800782e:	d825      	bhi.n	800787c <RCCEx_PLLSAI2_Config+0xa4>
 8007830:	2b01      	cmp	r3, #1
 8007832:	d002      	beq.n	800783a <RCCEx_PLLSAI2_Config+0x62>
 8007834:	2b02      	cmp	r3, #2
 8007836:	d009      	beq.n	800784c <RCCEx_PLLSAI2_Config+0x74>
 8007838:	e020      	b.n	800787c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800783a:	4b55      	ldr	r3, [pc, #340]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d11d      	bne.n	8007882 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800784a:	e01a      	b.n	8007882 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800784c:	4b50      	ldr	r3, [pc, #320]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007854:	2b00      	cmp	r3, #0
 8007856:	d116      	bne.n	8007886 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800785c:	e013      	b.n	8007886 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800785e:	4b4c      	ldr	r3, [pc, #304]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10f      	bne.n	800788a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800786a:	4b49      	ldr	r3, [pc, #292]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d109      	bne.n	800788a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800787a:	e006      	b.n	800788a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	73fb      	strb	r3, [r7, #15]
      break;
 8007880:	e004      	b.n	800788c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007882:	bf00      	nop
 8007884:	e002      	b.n	800788c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007886:	bf00      	nop
 8007888:	e000      	b.n	800788c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800788a:	bf00      	nop
    }

    if(status == HAL_OK)
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10d      	bne.n	80078ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007892:	4b3f      	ldr	r3, [pc, #252]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6819      	ldr	r1, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	3b01      	subs	r3, #1
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	430b      	orrs	r3, r1
 80078a8:	4939      	ldr	r1, [pc, #228]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d167      	bne.n	8007984 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80078b4:	4b36      	ldr	r3, [pc, #216]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a35      	ldr	r2, [pc, #212]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c0:	f7fc f964 	bl	8003b8c <HAL_GetTick>
 80078c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078c6:	e009      	b.n	80078dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078c8:	f7fc f960 	bl	8003b8c <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d902      	bls.n	80078dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	73fb      	strb	r3, [r7, #15]
        break;
 80078da:	e005      	b.n	80078e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80078dc:	4b2c      	ldr	r3, [pc, #176]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d1ef      	bne.n	80078c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d14a      	bne.n	8007984 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d111      	bne.n	8007918 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80078f4:	4b26      	ldr	r3, [pc, #152]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80078fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	6892      	ldr	r2, [r2, #8]
 8007904:	0211      	lsls	r1, r2, #8
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	68d2      	ldr	r2, [r2, #12]
 800790a:	0912      	lsrs	r2, r2, #4
 800790c:	0452      	lsls	r2, r2, #17
 800790e:	430a      	orrs	r2, r1
 8007910:	491f      	ldr	r1, [pc, #124]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007912:	4313      	orrs	r3, r2
 8007914:	614b      	str	r3, [r1, #20]
 8007916:	e011      	b.n	800793c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007918:	4b1d      	ldr	r3, [pc, #116]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007920:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6892      	ldr	r2, [r2, #8]
 8007928:	0211      	lsls	r1, r2, #8
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6912      	ldr	r2, [r2, #16]
 800792e:	0852      	lsrs	r2, r2, #1
 8007930:	3a01      	subs	r2, #1
 8007932:	0652      	lsls	r2, r2, #25
 8007934:	430a      	orrs	r2, r1
 8007936:	4916      	ldr	r1, [pc, #88]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007938:	4313      	orrs	r3, r2
 800793a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800793c:	4b14      	ldr	r3, [pc, #80]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a13      	ldr	r2, [pc, #76]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007946:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007948:	f7fc f920 	bl	8003b8c <HAL_GetTick>
 800794c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800794e:	e009      	b.n	8007964 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007950:	f7fc f91c 	bl	8003b8c <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d902      	bls.n	8007964 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	73fb      	strb	r3, [r7, #15]
          break;
 8007962:	e005      	b.n	8007970 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007964:	4b0a      	ldr	r3, [pc, #40]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0ef      	beq.n	8007950 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007976:	4b06      	ldr	r3, [pc, #24]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007978:	695a      	ldr	r2, [r3, #20]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	4904      	ldr	r1, [pc, #16]	@ (8007990 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007980:	4313      	orrs	r3, r2
 8007982:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	40021000 	.word	0x40021000

08007994 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d079      	beq.n	8007a9a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d106      	bne.n	80079c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fb f96e 	bl	8002c9c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f003 0310 	and.w	r3, r3, #16
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d058      	beq.n	8007a88 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	22ca      	movs	r2, #202	@ 0xca
 80079dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2253      	movs	r2, #83	@ 0x53
 80079e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fa4e 	bl	8007e88 <RTC_EnterInitMode>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d127      	bne.n	8007a46 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007a04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a08:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6899      	ldr	r1, [r3, #8]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	68d2      	ldr	r2, [r2, #12]
 8007a30:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6919      	ldr	r1, [r3, #16]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	041a      	lsls	r2, r3, #16
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fa52 	bl	8007ef0 <RTC_ExitInitMode>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d113      	bne.n	8007a7e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0203 	bic.w	r2, r2, #3
 8007a64:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	69da      	ldr	r2, [r3, #28]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	431a      	orrs	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	22ff      	movs	r2, #255	@ 0xff
 8007a84:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a86:	e001      	b.n	8007a8c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d103      	bne.n	8007a9a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8007a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007aa4:	b590      	push	{r4, r7, lr}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_RTC_SetTime+0x1a>
 8007aba:	2302      	movs	r3, #2
 8007abc:	e08b      	b.n	8007bd6 <HAL_RTC_SetTime+0x132>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2202      	movs	r2, #2
 8007aca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	22ca      	movs	r2, #202	@ 0xca
 8007ad4:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2253      	movs	r2, #83	@ 0x53
 8007adc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f9d2 	bl	8007e88 <RTC_EnterInitMode>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007ae8:	7cfb      	ldrb	r3, [r7, #19]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d163      	bne.n	8007bb6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d126      	bne.n	8007b42 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2200      	movs	r2, #0
 8007b06:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fa2d 	bl	8007f6c <RTC_ByteToBcd2>
 8007b12:	4603      	mov	r3, r0
 8007b14:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	785b      	ldrb	r3, [r3, #1]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fa26 	bl	8007f6c <RTC_ByteToBcd2>
 8007b20:	4603      	mov	r3, r0
 8007b22:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b24:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	789b      	ldrb	r3, [r3, #2]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 fa1e 	bl	8007f6c <RTC_ByteToBcd2>
 8007b30:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b32:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	78db      	ldrb	r3, [r3, #3]
 8007b3a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e018      	b.n	8007b74 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2200      	movs	r2, #0
 8007b54:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b62:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b68:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	78db      	ldrb	r3, [r3, #3]
 8007b6e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b70:	4313      	orrs	r3, r2
 8007b72:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007b7e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007b82:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007b92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6899      	ldr	r1, [r3, #8]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	68da      	ldr	r2, [r3, #12]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	431a      	orrs	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f99f 	bl	8007ef0 <RTC_ExitInitMode>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	22ff      	movs	r2, #255	@ 0xff
 8007bbc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007bbe:	7cfb      	ldrb	r3, [r7, #19]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007bd4:	7cfb      	ldrb	r3, [r7, #19]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd90      	pop	{r4, r7, pc}

08007bde <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b086      	sub	sp, #24
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007c0c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007c10:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	0a1b      	lsrs	r3, r3, #8
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	0d9b      	lsrs	r3, r3, #22
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d11a      	bne.n	8007c8c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f9a6 	bl	8007fac <RTC_Bcd2ToByte>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	785b      	ldrb	r3, [r3, #1]
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f000 f99d 	bl	8007fac <RTC_Bcd2ToByte>
 8007c72:	4603      	mov	r3, r0
 8007c74:	461a      	mov	r2, r3
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	789b      	ldrb	r3, [r3, #2]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 f994 	bl	8007fac <RTC_Bcd2ToByte>
 8007c84:	4603      	mov	r3, r0
 8007c86:	461a      	mov	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c96:	b590      	push	{r4, r7, lr}
 8007c98:	b087      	sub	sp, #28
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_RTC_SetDate+0x1a>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e075      	b.n	8007d9c <HAL_RTC_SetDate+0x106>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10e      	bne.n	8007ce4 <HAL_RTC_SetDate+0x4e>
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	785b      	ldrb	r3, [r3, #1]
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d008      	beq.n	8007ce4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	f023 0310 	bic.w	r3, r3, #16
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	330a      	adds	r3, #10
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d11c      	bne.n	8007d24 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	78db      	ldrb	r3, [r3, #3]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f93c 	bl	8007f6c <RTC_ByteToBcd2>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 f935 	bl	8007f6c <RTC_ByteToBcd2>
 8007d02:	4603      	mov	r3, r0
 8007d04:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007d06:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	789b      	ldrb	r3, [r3, #2]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 f92d 	bl	8007f6c <RTC_ByteToBcd2>
 8007d12:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007d14:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	e00e      	b.n	8007d42 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	78db      	ldrb	r3, [r3, #3]
 8007d28:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	785b      	ldrb	r3, [r3, #1]
 8007d2e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d30:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007d36:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	22ca      	movs	r2, #202	@ 0xca
 8007d48:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2253      	movs	r2, #83	@ 0x53
 8007d50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 f898 	bl	8007e88 <RTC_EnterInitMode>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007d5c:	7cfb      	ldrb	r3, [r7, #19]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d10c      	bne.n	8007d7c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007d6c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007d70:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f8bc 	bl	8007ef0 <RTC_ExitInitMode>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	22ff      	movs	r2, #255	@ 0xff
 8007d82:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007d84:	7cfb      	ldrb	r3, [r7, #19]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d103      	bne.n	8007d92 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007d9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd90      	pop	{r4, r7, pc}

08007da4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007dba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	0c1b      	lsrs	r3, r3, #16
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	0a1b      	lsrs	r3, r3, #8
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 031f 	and.w	r3, r3, #31
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	0b5b      	lsrs	r3, r3, #13
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d11a      	bne.n	8007e34 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	78db      	ldrb	r3, [r3, #3]
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 f8d2 	bl	8007fac <RTC_Bcd2ToByte>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 f8c9 	bl	8007fac <RTC_Bcd2ToByte>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	789b      	ldrb	r3, [r3, #2]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 f8c0 	bl	8007fac <RTC_Bcd2ToByte>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
	...

08007e40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8007e84 <HAL_RTC_WaitForSynchro+0x44>)
 8007e4e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007e50:	f7fb fe9c 	bl	8003b8c <HAL_GetTick>
 8007e54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e56:	e009      	b.n	8007e6c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e58:	f7fb fe98 	bl	8003b8c <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e66:	d901      	bls.n	8007e6c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e007      	b.n	8007e7c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d0ee      	beq.n	8007e58 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	0003ff5f 	.word	0x0003ff5f

08007e88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d120      	bne.n	8007ee4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007eaa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007eac:	f7fb fe6e 	bl	8003b8c <HAL_GetTick>
 8007eb0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007eb2:	e00d      	b.n	8007ed0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007eb4:	f7fb fe6a 	bl	8003b8c <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ec2:	d905      	bls.n	8007ed0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2203      	movs	r2, #3
 8007ecc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d102      	bne.n	8007ee4 <RTC_EnterInitMode+0x5c>
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d1e7      	bne.n	8007eb4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
	...

08007ef0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007efc:	4b1a      	ldr	r3, [pc, #104]	@ (8007f68 <RTC_ExitInitMode+0x78>)
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	4a19      	ldr	r2, [pc, #100]	@ (8007f68 <RTC_ExitInitMode+0x78>)
 8007f02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f06:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007f08:	4b17      	ldr	r3, [pc, #92]	@ (8007f68 <RTC_ExitInitMode+0x78>)
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f003 0320 	and.w	r3, r3, #32
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10c      	bne.n	8007f2e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7ff ff93 	bl	8007e40 <HAL_RTC_WaitForSynchro>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d01e      	beq.n	8007f5e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2203      	movs	r2, #3
 8007f24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	73fb      	strb	r3, [r7, #15]
 8007f2c:	e017      	b.n	8007f5e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f68 <RTC_ExitInitMode+0x78>)
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	4a0d      	ldr	r2, [pc, #52]	@ (8007f68 <RTC_ExitInitMode+0x78>)
 8007f34:	f023 0320 	bic.w	r3, r3, #32
 8007f38:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff ff80 	bl	8007e40 <HAL_RTC_WaitForSynchro>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2203      	movs	r2, #3
 8007f4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007f52:	4b05      	ldr	r3, [pc, #20]	@ (8007f68 <RTC_ExitInitMode+0x78>)
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	4a04      	ldr	r2, [pc, #16]	@ (8007f68 <RTC_ExitInitMode+0x78>)
 8007f58:	f043 0320 	orr.w	r3, r3, #32
 8007f5c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	40002800 	.word	0x40002800

08007f6c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007f7e:	e005      	b.n	8007f8c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3301      	adds	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007f86:	7afb      	ldrb	r3, [r7, #11]
 8007f88:	3b0a      	subs	r3, #10
 8007f8a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007f8c:	7afb      	ldrb	r3, [r7, #11]
 8007f8e:	2b09      	cmp	r3, #9
 8007f90:	d8f6      	bhi.n	8007f80 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	7afb      	ldrb	r3, [r7, #11]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	b2db      	uxtb	r3, r3
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	091b      	lsrs	r3, r3, #4
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	0092      	lsls	r2, r2, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	f003 030f 	and.w	r3, r3, #15
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	b2db      	uxtb	r3, r3
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e095      	b.n	800811e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d108      	bne.n	800800c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008002:	d009      	beq.n	8008018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	61da      	str	r2, [r3, #28]
 800800a:	e005      	b.n	8008018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d106      	bne.n	8008038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f7fb f8f0 	bl	8003218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800804e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008058:	d902      	bls.n	8008060 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
 800805e:	e002      	b.n	8008066 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008064:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800806e:	d007      	beq.n	8008080 <HAL_SPI_Init+0xa0>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008078:	d002      	beq.n	8008080 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	695b      	ldr	r3, [r3, #20]
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	431a      	orrs	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080ae:	431a      	orrs	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	69db      	ldr	r3, [r3, #28]
 80080b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080c2:	ea42 0103 	orr.w	r1, r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	430a      	orrs	r2, r1
 80080d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	0c1b      	lsrs	r3, r3, #16
 80080dc:	f003 0204 	and.w	r2, r3, #4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	431a      	orrs	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ee:	f003 0308 	and.w	r3, r3, #8
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80080fc:	ea42 0103 	orr.w	r1, r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b08a      	sub	sp, #40	@ 0x28
 800812a:	af00      	add	r7, sp, #0
 800812c:	60f8      	str	r0, [r7, #12]
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	607a      	str	r2, [r7, #4]
 8008132:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008134:	2301      	movs	r3, #1
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008138:	f7fb fd28 	bl	8003b8c <HAL_GetTick>
 800813c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008144:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800814c:	887b      	ldrh	r3, [r7, #2]
 800814e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8008150:	887b      	ldrh	r3, [r7, #2]
 8008152:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008154:	7ffb      	ldrb	r3, [r7, #31]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d00c      	beq.n	8008174 <HAL_SPI_TransmitReceive+0x4e>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008160:	d106      	bne.n	8008170 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d102      	bne.n	8008170 <HAL_SPI_TransmitReceive+0x4a>
 800816a:	7ffb      	ldrb	r3, [r7, #31]
 800816c:	2b04      	cmp	r3, #4
 800816e:	d001      	beq.n	8008174 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008170:	2302      	movs	r3, #2
 8008172:	e1f3      	b.n	800855c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d005      	beq.n	8008186 <HAL_SPI_TransmitReceive+0x60>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_SPI_TransmitReceive+0x60>
 8008180:	887b      	ldrh	r3, [r7, #2]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e1e8      	b.n	800855c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008190:	2b01      	cmp	r3, #1
 8008192:	d101      	bne.n	8008198 <HAL_SPI_TransmitReceive+0x72>
 8008194:	2302      	movs	r3, #2
 8008196:	e1e1      	b.n	800855c <HAL_SPI_TransmitReceive+0x436>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b04      	cmp	r3, #4
 80081aa:	d003      	beq.n	80081b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2205      	movs	r2, #5
 80081b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	887a      	ldrh	r2, [r7, #2]
 80081c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	887a      	ldrh	r2, [r7, #2]
 80081cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	887a      	ldrh	r2, [r7, #2]
 80081da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	887a      	ldrh	r2, [r7, #2]
 80081e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80081f6:	d802      	bhi.n	80081fe <HAL_SPI_TransmitReceive+0xd8>
 80081f8:	8abb      	ldrh	r3, [r7, #20]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d908      	bls.n	8008210 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800820c:	605a      	str	r2, [r3, #4]
 800820e:	e007      	b.n	8008220 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800821e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800822a:	2b40      	cmp	r3, #64	@ 0x40
 800822c:	d007      	beq.n	800823e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800823c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008246:	f240 8083 	bls.w	8008350 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <HAL_SPI_TransmitReceive+0x132>
 8008252:	8afb      	ldrh	r3, [r7, #22]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d16f      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825c:	881a      	ldrh	r2, [r3, #0]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008268:	1c9a      	adds	r2, r3, #2
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008272:	b29b      	uxth	r3, r3
 8008274:	3b01      	subs	r3, #1
 8008276:	b29a      	uxth	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800827c:	e05c      	b.n	8008338 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b02      	cmp	r3, #2
 800828a:	d11b      	bne.n	80082c4 <HAL_SPI_TransmitReceive+0x19e>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008290:	b29b      	uxth	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d016      	beq.n	80082c4 <HAL_SPI_TransmitReceive+0x19e>
 8008296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008298:	2b01      	cmp	r3, #1
 800829a:	d113      	bne.n	80082c4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a0:	881a      	ldrh	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ac:	1c9a      	adds	r2, r3, #2
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	3b01      	subs	r3, #1
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082c0:	2300      	movs	r3, #0
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d11c      	bne.n	800830c <HAL_SPI_TransmitReceive+0x1e6>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082d8:	b29b      	uxth	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d016      	beq.n	800830c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e8:	b292      	uxth	r2, r2
 80082ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f0:	1c9a      	adds	r2, r3, #2
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008308:	2301      	movs	r3, #1
 800830a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800830c:	f7fb fc3e 	bl	8003b8c <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008318:	429a      	cmp	r2, r3
 800831a:	d80d      	bhi.n	8008338 <HAL_SPI_TransmitReceive+0x212>
 800831c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008322:	d009      	beq.n	8008338 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e111      	b.n	800855c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800833c:	b29b      	uxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d19d      	bne.n	800827e <HAL_SPI_TransmitReceive+0x158>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d197      	bne.n	800827e <HAL_SPI_TransmitReceive+0x158>
 800834e:	e0e5      	b.n	800851c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <HAL_SPI_TransmitReceive+0x23a>
 8008358:	8afb      	ldrh	r3, [r7, #22]
 800835a:	2b01      	cmp	r3, #1
 800835c:	f040 80d1 	bne.w	8008502 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008364:	b29b      	uxth	r3, r3
 8008366:	2b01      	cmp	r3, #1
 8008368:	d912      	bls.n	8008390 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836e:	881a      	ldrh	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837a:	1c9a      	adds	r2, r3, #2
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008384:	b29b      	uxth	r3, r3
 8008386:	3b02      	subs	r3, #2
 8008388:	b29a      	uxth	r2, r3
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800838e:	e0b8      	b.n	8008502 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	330c      	adds	r3, #12
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083b6:	e0a4      	b.n	8008502 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d134      	bne.n	8008430 <HAL_SPI_TransmitReceive+0x30a>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d02f      	beq.n	8008430 <HAL_SPI_TransmitReceive+0x30a>
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d12c      	bne.n	8008430 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d912      	bls.n	8008406 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083e4:	881a      	ldrh	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	1c9a      	adds	r2, r3, #2
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	3b02      	subs	r3, #2
 80083fe:	b29a      	uxth	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008404:	e012      	b.n	800842c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	330c      	adds	r3, #12
 8008410:	7812      	ldrb	r2, [r2, #0]
 8008412:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008418:	1c5a      	adds	r2, r3, #1
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008422:	b29b      	uxth	r3, r3
 8008424:	3b01      	subs	r3, #1
 8008426:	b29a      	uxth	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b01      	cmp	r3, #1
 800843c:	d148      	bne.n	80084d0 <HAL_SPI_TransmitReceive+0x3aa>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008444:	b29b      	uxth	r3, r3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d042      	beq.n	80084d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b01      	cmp	r3, #1
 8008454:	d923      	bls.n	800849e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68da      	ldr	r2, [r3, #12]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008460:	b292      	uxth	r2, r2
 8008462:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008468:	1c9a      	adds	r2, r3, #2
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008474:	b29b      	uxth	r3, r3
 8008476:	3b02      	subs	r3, #2
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008486:	b29b      	uxth	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	d81f      	bhi.n	80084cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	685a      	ldr	r2, [r3, #4]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800849a:	605a      	str	r2, [r3, #4]
 800849c:	e016      	b.n	80084cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f103 020c 	add.w	r2, r3, #12
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084aa:	7812      	ldrb	r2, [r2, #0]
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084cc:	2301      	movs	r3, #1
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084d0:	f7fb fb5c 	bl	8003b8c <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084dc:	429a      	cmp	r2, r3
 80084de:	d803      	bhi.n	80084e8 <HAL_SPI_TransmitReceive+0x3c2>
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084e6:	d102      	bne.n	80084ee <HAL_SPI_TransmitReceive+0x3c8>
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d109      	bne.n	8008502 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e02c      	b.n	800855c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	f47f af55 	bne.w	80083b8 <HAL_SPI_TransmitReceive+0x292>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008514:	b29b      	uxth	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	f47f af4e 	bne.w	80083b8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800851c:	6a3a      	ldr	r2, [r7, #32]
 800851e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 f93d 	bl	80087a0 <SPI_EndRxTxTransaction>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d008      	beq.n	800853e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2220      	movs	r2, #32
 8008530:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e00e      	b.n	800855c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800855a:	2300      	movs	r3, #0
  }
}
 800855c:	4618      	mov	r0, r3
 800855e:	3728      	adds	r7, #40	@ 0x28
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	603b      	str	r3, [r7, #0]
 8008570:	4613      	mov	r3, r2
 8008572:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008574:	f7fb fb0a 	bl	8003b8c <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857c:	1a9b      	subs	r3, r3, r2
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	4413      	add	r3, r2
 8008582:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008584:	f7fb fb02 	bl	8003b8c <HAL_GetTick>
 8008588:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800858a:	4b39      	ldr	r3, [pc, #228]	@ (8008670 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	015b      	lsls	r3, r3, #5
 8008590:	0d1b      	lsrs	r3, r3, #20
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	fb02 f303 	mul.w	r3, r2, r3
 8008598:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800859a:	e054      	b.n	8008646 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085a2:	d050      	beq.n	8008646 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085a4:	f7fb faf2 	bl	8003b8c <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	69fa      	ldr	r2, [r7, #28]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d902      	bls.n	80085ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d13d      	bne.n	8008636 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80085c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085d2:	d111      	bne.n	80085f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085dc:	d004      	beq.n	80085e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085e6:	d107      	bne.n	80085f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008600:	d10f      	bne.n	8008622 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008610:	601a      	str	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008620:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e017      	b.n	8008666 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800863c:	2300      	movs	r3, #0
 800863e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	3b01      	subs	r3, #1
 8008644:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4013      	ands	r3, r2
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	bf0c      	ite	eq
 8008656:	2301      	moveq	r3, #1
 8008658:	2300      	movne	r3, #0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	429a      	cmp	r2, r3
 8008662:	d19b      	bne.n	800859c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3720      	adds	r7, #32
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20000014 	.word	0x20000014

08008674 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08a      	sub	sp, #40	@ 0x28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008686:	f7fb fa81 	bl	8003b8c <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	1a9b      	subs	r3, r3, r2
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	4413      	add	r3, r2
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008696:	f7fb fa79 	bl	8003b8c <HAL_GetTick>
 800869a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	330c      	adds	r3, #12
 80086a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80086a4:	4b3d      	ldr	r3, [pc, #244]	@ (800879c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	00da      	lsls	r2, r3, #3
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	0d1b      	lsrs	r3, r3, #20
 80086b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086b6:	fb02 f303 	mul.w	r3, r2, r3
 80086ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80086bc:	e060      	b.n	8008780 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80086c4:	d107      	bne.n	80086d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086dc:	d050      	beq.n	8008780 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086de:	f7fb fa55 	bl	8003b8c <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d902      	bls.n	80086f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d13d      	bne.n	8008770 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	685a      	ldr	r2, [r3, #4]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008702:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800870c:	d111      	bne.n	8008732 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008716:	d004      	beq.n	8008722 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008720:	d107      	bne.n	8008732 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008730:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008736:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800873a:	d10f      	bne.n	800875c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800875a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e010      	b.n	8008792 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	3b01      	subs	r3, #1
 800877e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689a      	ldr	r2, [r3, #8]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4013      	ands	r3, r2
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d196      	bne.n	80086be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3728      	adds	r7, #40	@ 0x28
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	20000014 	.word	0x20000014

080087a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af02      	add	r7, sp, #8
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff ff5b 	bl	8008674 <SPI_WaitFifoStateUntilTimeout>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d007      	beq.n	80087d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087c8:	f043 0220 	orr.w	r2, r3, #32
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e027      	b.n	8008824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2200      	movs	r2, #0
 80087dc:	2180      	movs	r1, #128	@ 0x80
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff fec0 	bl	8008564 <SPI_WaitFlagStateUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d007      	beq.n	80087fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087ee:	f043 0220 	orr.w	r2, r3, #32
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e014      	b.n	8008824 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff ff34 	bl	8008674 <SPI_WaitFifoStateUntilTimeout>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d007      	beq.n	8008822 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008816:	f043 0220 	orr.w	r2, r3, #32
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e000      	b.n	8008824 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e049      	b.n	80088d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d106      	bne.n	8008858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7fa ffb4 	bl	80037c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3304      	adds	r3, #4
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f000 fa0a 	bl	8008c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d001      	beq.n	80088f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e047      	b.n	8008984 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a23      	ldr	r2, [pc, #140]	@ (8008990 <HAL_TIM_Base_Start+0xb4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d01d      	beq.n	8008942 <HAL_TIM_Base_Start+0x66>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800890e:	d018      	beq.n	8008942 <HAL_TIM_Base_Start+0x66>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a1f      	ldr	r2, [pc, #124]	@ (8008994 <HAL_TIM_Base_Start+0xb8>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d013      	beq.n	8008942 <HAL_TIM_Base_Start+0x66>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a1e      	ldr	r2, [pc, #120]	@ (8008998 <HAL_TIM_Base_Start+0xbc>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d00e      	beq.n	8008942 <HAL_TIM_Base_Start+0x66>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a1c      	ldr	r2, [pc, #112]	@ (800899c <HAL_TIM_Base_Start+0xc0>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d009      	beq.n	8008942 <HAL_TIM_Base_Start+0x66>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a1b      	ldr	r2, [pc, #108]	@ (80089a0 <HAL_TIM_Base_Start+0xc4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d004      	beq.n	8008942 <HAL_TIM_Base_Start+0x66>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a19      	ldr	r2, [pc, #100]	@ (80089a4 <HAL_TIM_Base_Start+0xc8>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d115      	bne.n	800896e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	4b17      	ldr	r3, [pc, #92]	@ (80089a8 <HAL_TIM_Base_Start+0xcc>)
 800894a:	4013      	ands	r3, r2
 800894c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b06      	cmp	r3, #6
 8008952:	d015      	beq.n	8008980 <HAL_TIM_Base_Start+0xa4>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800895a:	d011      	beq.n	8008980 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 0201 	orr.w	r2, r2, #1
 800896a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800896c:	e008      	b.n	8008980 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f042 0201 	orr.w	r2, r2, #1
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	e000      	b.n	8008982 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	40012c00 	.word	0x40012c00
 8008994:	40000400 	.word	0x40000400
 8008998:	40000800 	.word	0x40000800
 800899c:	40000c00 	.word	0x40000c00
 80089a0:	40013400 	.word	0x40013400
 80089a4:	40014000 	.word	0x40014000
 80089a8:	00010007 	.word	0x00010007

080089ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e049      	b.n	8008a52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fa fed4 	bl	8003780 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	3304      	adds	r3, #4
 80089e8:	4619      	mov	r1, r3
 80089ea:	4610      	mov	r0, r2
 80089ec:	f000 f94a 	bl	8008c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d101      	bne.n	8008a7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a76:	2302      	movs	r3, #2
 8008a78:	e0ff      	b.n	8008c7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b14      	cmp	r3, #20
 8008a86:	f200 80f0 	bhi.w	8008c6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008ae5 	.word	0x08008ae5
 8008a94:	08008c6b 	.word	0x08008c6b
 8008a98:	08008c6b 	.word	0x08008c6b
 8008a9c:	08008c6b 	.word	0x08008c6b
 8008aa0:	08008b25 	.word	0x08008b25
 8008aa4:	08008c6b 	.word	0x08008c6b
 8008aa8:	08008c6b 	.word	0x08008c6b
 8008aac:	08008c6b 	.word	0x08008c6b
 8008ab0:	08008b67 	.word	0x08008b67
 8008ab4:	08008c6b 	.word	0x08008c6b
 8008ab8:	08008c6b 	.word	0x08008c6b
 8008abc:	08008c6b 	.word	0x08008c6b
 8008ac0:	08008ba7 	.word	0x08008ba7
 8008ac4:	08008c6b 	.word	0x08008c6b
 8008ac8:	08008c6b 	.word	0x08008c6b
 8008acc:	08008c6b 	.word	0x08008c6b
 8008ad0:	08008be9 	.word	0x08008be9
 8008ad4:	08008c6b 	.word	0x08008c6b
 8008ad8:	08008c6b 	.word	0x08008c6b
 8008adc:	08008c6b 	.word	0x08008c6b
 8008ae0:	08008c29 	.word	0x08008c29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68b9      	ldr	r1, [r7, #8]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 f970 	bl	8008dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0208 	orr.w	r2, r2, #8
 8008afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	699a      	ldr	r2, [r3, #24]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0204 	bic.w	r2, r2, #4
 8008b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6999      	ldr	r1, [r3, #24]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	691a      	ldr	r2, [r3, #16]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	619a      	str	r2, [r3, #24]
      break;
 8008b22:	e0a5      	b.n	8008c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f9e0 	bl	8008ef0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	699a      	ldr	r2, [r3, #24]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6999      	ldr	r1, [r3, #24]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	021a      	lsls	r2, r3, #8
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	619a      	str	r2, [r3, #24]
      break;
 8008b64:	e084      	b.n	8008c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68b9      	ldr	r1, [r7, #8]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 fa49 	bl	8009004 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0208 	orr.w	r2, r2, #8
 8008b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69da      	ldr	r2, [r3, #28]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0204 	bic.w	r2, r2, #4
 8008b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69d9      	ldr	r1, [r3, #28]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	691a      	ldr	r2, [r3, #16]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	430a      	orrs	r2, r1
 8008ba2:	61da      	str	r2, [r3, #28]
      break;
 8008ba4:	e064      	b.n	8008c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68b9      	ldr	r1, [r7, #8]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fab1 	bl	8009114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	69da      	ldr	r2, [r3, #28]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69da      	ldr	r2, [r3, #28]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69d9      	ldr	r1, [r3, #28]
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	021a      	lsls	r2, r3, #8
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	61da      	str	r2, [r3, #28]
      break;
 8008be6:	e043      	b.n	8008c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fafa 	bl	80091e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 0208 	orr.w	r2, r2, #8
 8008c02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0204 	bic.w	r2, r2, #4
 8008c12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	691a      	ldr	r2, [r3, #16]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008c26:	e023      	b.n	8008c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 fb3e 	bl	80092b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	021a      	lsls	r2, r3, #8
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008c68:	e002      	b.n	8008c70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008c6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop

08008c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a46      	ldr	r2, [pc, #280]	@ (8008db0 <TIM_Base_SetConfig+0x12c>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d013      	beq.n	8008cc4 <TIM_Base_SetConfig+0x40>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ca2:	d00f      	beq.n	8008cc4 <TIM_Base_SetConfig+0x40>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a43      	ldr	r2, [pc, #268]	@ (8008db4 <TIM_Base_SetConfig+0x130>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00b      	beq.n	8008cc4 <TIM_Base_SetConfig+0x40>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a42      	ldr	r2, [pc, #264]	@ (8008db8 <TIM_Base_SetConfig+0x134>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d007      	beq.n	8008cc4 <TIM_Base_SetConfig+0x40>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a41      	ldr	r2, [pc, #260]	@ (8008dbc <TIM_Base_SetConfig+0x138>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d003      	beq.n	8008cc4 <TIM_Base_SetConfig+0x40>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a40      	ldr	r2, [pc, #256]	@ (8008dc0 <TIM_Base_SetConfig+0x13c>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d108      	bne.n	8008cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a35      	ldr	r2, [pc, #212]	@ (8008db0 <TIM_Base_SetConfig+0x12c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d01f      	beq.n	8008d1e <TIM_Base_SetConfig+0x9a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce4:	d01b      	beq.n	8008d1e <TIM_Base_SetConfig+0x9a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a32      	ldr	r2, [pc, #200]	@ (8008db4 <TIM_Base_SetConfig+0x130>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d017      	beq.n	8008d1e <TIM_Base_SetConfig+0x9a>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a31      	ldr	r2, [pc, #196]	@ (8008db8 <TIM_Base_SetConfig+0x134>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d013      	beq.n	8008d1e <TIM_Base_SetConfig+0x9a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a30      	ldr	r2, [pc, #192]	@ (8008dbc <TIM_Base_SetConfig+0x138>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00f      	beq.n	8008d1e <TIM_Base_SetConfig+0x9a>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a2f      	ldr	r2, [pc, #188]	@ (8008dc0 <TIM_Base_SetConfig+0x13c>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00b      	beq.n	8008d1e <TIM_Base_SetConfig+0x9a>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a2e      	ldr	r2, [pc, #184]	@ (8008dc4 <TIM_Base_SetConfig+0x140>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d007      	beq.n	8008d1e <TIM_Base_SetConfig+0x9a>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a2d      	ldr	r2, [pc, #180]	@ (8008dc8 <TIM_Base_SetConfig+0x144>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d003      	beq.n	8008d1e <TIM_Base_SetConfig+0x9a>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a2c      	ldr	r2, [pc, #176]	@ (8008dcc <TIM_Base_SetConfig+0x148>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d108      	bne.n	8008d30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a16      	ldr	r2, [pc, #88]	@ (8008db0 <TIM_Base_SetConfig+0x12c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00f      	beq.n	8008d7c <TIM_Base_SetConfig+0xf8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a18      	ldr	r2, [pc, #96]	@ (8008dc0 <TIM_Base_SetConfig+0x13c>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00b      	beq.n	8008d7c <TIM_Base_SetConfig+0xf8>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a17      	ldr	r2, [pc, #92]	@ (8008dc4 <TIM_Base_SetConfig+0x140>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d007      	beq.n	8008d7c <TIM_Base_SetConfig+0xf8>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a16      	ldr	r2, [pc, #88]	@ (8008dc8 <TIM_Base_SetConfig+0x144>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d003      	beq.n	8008d7c <TIM_Base_SetConfig+0xf8>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a15      	ldr	r2, [pc, #84]	@ (8008dcc <TIM_Base_SetConfig+0x148>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d103      	bne.n	8008d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	691a      	ldr	r2, [r3, #16]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d105      	bne.n	8008da2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f023 0201 	bic.w	r2, r3, #1
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	611a      	str	r2, [r3, #16]
  }
}
 8008da2:	bf00      	nop
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	40012c00 	.word	0x40012c00
 8008db4:	40000400 	.word	0x40000400
 8008db8:	40000800 	.word	0x40000800
 8008dbc:	40000c00 	.word	0x40000c00
 8008dc0:	40013400 	.word	0x40013400
 8008dc4:	40014000 	.word	0x40014000
 8008dc8:	40014400 	.word	0x40014400
 8008dcc:	40014800 	.word	0x40014800

08008dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b087      	sub	sp, #28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a1b      	ldr	r3, [r3, #32]
 8008dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	f023 0201 	bic.w	r2, r3, #1
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0303 	bic.w	r3, r3, #3
 8008e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f023 0302 	bic.w	r3, r3, #2
 8008e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8008edc <TIM_OC1_SetConfig+0x10c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d00f      	beq.n	8008e50 <TIM_OC1_SetConfig+0x80>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a2b      	ldr	r2, [pc, #172]	@ (8008ee0 <TIM_OC1_SetConfig+0x110>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00b      	beq.n	8008e50 <TIM_OC1_SetConfig+0x80>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ee4 <TIM_OC1_SetConfig+0x114>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d007      	beq.n	8008e50 <TIM_OC1_SetConfig+0x80>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a29      	ldr	r2, [pc, #164]	@ (8008ee8 <TIM_OC1_SetConfig+0x118>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <TIM_OC1_SetConfig+0x80>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a28      	ldr	r2, [pc, #160]	@ (8008eec <TIM_OC1_SetConfig+0x11c>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d10c      	bne.n	8008e6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f023 0308 	bic.w	r3, r3, #8
 8008e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f023 0304 	bic.w	r3, r3, #4
 8008e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8008edc <TIM_OC1_SetConfig+0x10c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00f      	beq.n	8008e92 <TIM_OC1_SetConfig+0xc2>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee0 <TIM_OC1_SetConfig+0x110>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d00b      	beq.n	8008e92 <TIM_OC1_SetConfig+0xc2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a19      	ldr	r2, [pc, #100]	@ (8008ee4 <TIM_OC1_SetConfig+0x114>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d007      	beq.n	8008e92 <TIM_OC1_SetConfig+0xc2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a18      	ldr	r2, [pc, #96]	@ (8008ee8 <TIM_OC1_SetConfig+0x118>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d003      	beq.n	8008e92 <TIM_OC1_SetConfig+0xc2>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a17      	ldr	r2, [pc, #92]	@ (8008eec <TIM_OC1_SetConfig+0x11c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d111      	bne.n	8008eb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	621a      	str	r2, [r3, #32]
}
 8008ed0:	bf00      	nop
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	40012c00 	.word	0x40012c00
 8008ee0:	40013400 	.word	0x40013400
 8008ee4:	40014000 	.word	0x40014000
 8008ee8:	40014400 	.word	0x40014400
 8008eec:	40014800 	.word	0x40014800

08008ef0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	f023 0210 	bic.w	r2, r3, #16
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	021b      	lsls	r3, r3, #8
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f023 0320 	bic.w	r3, r3, #32
 8008f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	697a      	ldr	r2, [r7, #20]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a28      	ldr	r2, [pc, #160]	@ (8008ff0 <TIM_OC2_SetConfig+0x100>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d003      	beq.n	8008f5c <TIM_OC2_SetConfig+0x6c>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a27      	ldr	r2, [pc, #156]	@ (8008ff4 <TIM_OC2_SetConfig+0x104>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d10d      	bne.n	8008f78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	011b      	lsls	r3, r3, #4
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff0 <TIM_OC2_SetConfig+0x100>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00f      	beq.n	8008fa0 <TIM_OC2_SetConfig+0xb0>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a1c      	ldr	r2, [pc, #112]	@ (8008ff4 <TIM_OC2_SetConfig+0x104>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00b      	beq.n	8008fa0 <TIM_OC2_SetConfig+0xb0>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ff8 <TIM_OC2_SetConfig+0x108>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d007      	beq.n	8008fa0 <TIM_OC2_SetConfig+0xb0>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a1a      	ldr	r2, [pc, #104]	@ (8008ffc <TIM_OC2_SetConfig+0x10c>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d003      	beq.n	8008fa0 <TIM_OC2_SetConfig+0xb0>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a19      	ldr	r2, [pc, #100]	@ (8009000 <TIM_OC2_SetConfig+0x110>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d113      	bne.n	8008fc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	621a      	str	r2, [r3, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	40012c00 	.word	0x40012c00
 8008ff4:	40013400 	.word	0x40013400
 8008ff8:	40014000 	.word	0x40014000
 8008ffc:	40014400 	.word	0x40014400
 8009000:	40014800 	.word	0x40014800

08009004 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0303 	bic.w	r3, r3, #3
 800903e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	021b      	lsls	r3, r3, #8
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a27      	ldr	r2, [pc, #156]	@ (8009100 <TIM_OC3_SetConfig+0xfc>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d003      	beq.n	800906e <TIM_OC3_SetConfig+0x6a>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a26      	ldr	r2, [pc, #152]	@ (8009104 <TIM_OC3_SetConfig+0x100>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d10d      	bne.n	800908a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	021b      	lsls	r3, r3, #8
 800907c:	697a      	ldr	r2, [r7, #20]
 800907e:	4313      	orrs	r3, r2
 8009080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a1c      	ldr	r2, [pc, #112]	@ (8009100 <TIM_OC3_SetConfig+0xfc>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d00f      	beq.n	80090b2 <TIM_OC3_SetConfig+0xae>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a1b      	ldr	r2, [pc, #108]	@ (8009104 <TIM_OC3_SetConfig+0x100>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00b      	beq.n	80090b2 <TIM_OC3_SetConfig+0xae>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a1a      	ldr	r2, [pc, #104]	@ (8009108 <TIM_OC3_SetConfig+0x104>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d007      	beq.n	80090b2 <TIM_OC3_SetConfig+0xae>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a19      	ldr	r2, [pc, #100]	@ (800910c <TIM_OC3_SetConfig+0x108>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d003      	beq.n	80090b2 <TIM_OC3_SetConfig+0xae>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a18      	ldr	r2, [pc, #96]	@ (8009110 <TIM_OC3_SetConfig+0x10c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d113      	bne.n	80090da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	621a      	str	r2, [r3, #32]
}
 80090f4:	bf00      	nop
 80090f6:	371c      	adds	r7, #28
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	40012c00 	.word	0x40012c00
 8009104:	40013400 	.word	0x40013400
 8009108:	40014000 	.word	0x40014000
 800910c:	40014400 	.word	0x40014400
 8009110:	40014800 	.word	0x40014800

08009114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800914e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	021b      	lsls	r3, r3, #8
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	031b      	lsls	r3, r3, #12
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a18      	ldr	r2, [pc, #96]	@ (80091d4 <TIM_OC4_SetConfig+0xc0>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d00f      	beq.n	8009198 <TIM_OC4_SetConfig+0x84>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a17      	ldr	r2, [pc, #92]	@ (80091d8 <TIM_OC4_SetConfig+0xc4>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00b      	beq.n	8009198 <TIM_OC4_SetConfig+0x84>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a16      	ldr	r2, [pc, #88]	@ (80091dc <TIM_OC4_SetConfig+0xc8>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d007      	beq.n	8009198 <TIM_OC4_SetConfig+0x84>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a15      	ldr	r2, [pc, #84]	@ (80091e0 <TIM_OC4_SetConfig+0xcc>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d003      	beq.n	8009198 <TIM_OC4_SetConfig+0x84>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a14      	ldr	r2, [pc, #80]	@ (80091e4 <TIM_OC4_SetConfig+0xd0>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d109      	bne.n	80091ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800919e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	019b      	lsls	r3, r3, #6
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	621a      	str	r2, [r3, #32]
}
 80091c6:	bf00      	nop
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	40012c00 	.word	0x40012c00
 80091d8:	40013400 	.word	0x40013400
 80091dc:	40014000 	.word	0x40014000
 80091e0:	40014400 	.word	0x40014400
 80091e4:	40014800 	.word	0x40014800

080091e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800920e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800921a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4313      	orrs	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800922c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	041b      	lsls	r3, r3, #16
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	4313      	orrs	r3, r2
 8009238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a17      	ldr	r2, [pc, #92]	@ (800929c <TIM_OC5_SetConfig+0xb4>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00f      	beq.n	8009262 <TIM_OC5_SetConfig+0x7a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a16      	ldr	r2, [pc, #88]	@ (80092a0 <TIM_OC5_SetConfig+0xb8>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00b      	beq.n	8009262 <TIM_OC5_SetConfig+0x7a>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a15      	ldr	r2, [pc, #84]	@ (80092a4 <TIM_OC5_SetConfig+0xbc>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d007      	beq.n	8009262 <TIM_OC5_SetConfig+0x7a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a14      	ldr	r2, [pc, #80]	@ (80092a8 <TIM_OC5_SetConfig+0xc0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d003      	beq.n	8009262 <TIM_OC5_SetConfig+0x7a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a13      	ldr	r2, [pc, #76]	@ (80092ac <TIM_OC5_SetConfig+0xc4>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d109      	bne.n	8009276 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	021b      	lsls	r3, r3, #8
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	4313      	orrs	r3, r2
 8009274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	697a      	ldr	r2, [r7, #20]
 800927a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	621a      	str	r2, [r3, #32]
}
 8009290:	bf00      	nop
 8009292:	371c      	adds	r7, #28
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	40012c00 	.word	0x40012c00
 80092a0:	40013400 	.word	0x40013400
 80092a4:	40014000 	.word	0x40014000
 80092a8:	40014400 	.word	0x40014400
 80092ac:	40014800 	.word	0x40014800

080092b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	021b      	lsls	r3, r3, #8
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	051b      	lsls	r3, r3, #20
 80092fe:	693a      	ldr	r2, [r7, #16]
 8009300:	4313      	orrs	r3, r2
 8009302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a18      	ldr	r2, [pc, #96]	@ (8009368 <TIM_OC6_SetConfig+0xb8>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d00f      	beq.n	800932c <TIM_OC6_SetConfig+0x7c>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a17      	ldr	r2, [pc, #92]	@ (800936c <TIM_OC6_SetConfig+0xbc>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00b      	beq.n	800932c <TIM_OC6_SetConfig+0x7c>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a16      	ldr	r2, [pc, #88]	@ (8009370 <TIM_OC6_SetConfig+0xc0>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d007      	beq.n	800932c <TIM_OC6_SetConfig+0x7c>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a15      	ldr	r2, [pc, #84]	@ (8009374 <TIM_OC6_SetConfig+0xc4>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d003      	beq.n	800932c <TIM_OC6_SetConfig+0x7c>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a14      	ldr	r2, [pc, #80]	@ (8009378 <TIM_OC6_SetConfig+0xc8>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d109      	bne.n	8009340 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	029b      	lsls	r3, r3, #10
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	4313      	orrs	r3, r2
 800933e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	621a      	str	r2, [r3, #32]
}
 800935a:	bf00      	nop
 800935c:	371c      	adds	r7, #28
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	40012c00 	.word	0x40012c00
 800936c:	40013400 	.word	0x40013400
 8009370:	40014000 	.word	0x40014000
 8009374:	40014400 	.word	0x40014400
 8009378:	40014800 	.word	0x40014800

0800937c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009390:	2302      	movs	r3, #2
 8009392:	e068      	b.n	8009466 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a2e      	ldr	r2, [pc, #184]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d004      	beq.n	80093c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a2d      	ldr	r2, [pc, #180]	@ (8009478 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d108      	bne.n	80093da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80093ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009474 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d01d      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009406:	d018      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1b      	ldr	r2, [pc, #108]	@ (800947c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d013      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a1a      	ldr	r2, [pc, #104]	@ (8009480 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00e      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a18      	ldr	r2, [pc, #96]	@ (8009484 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d009      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a13      	ldr	r2, [pc, #76]	@ (8009478 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d004      	beq.n	800943a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a14      	ldr	r2, [pc, #80]	@ (8009488 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d10c      	bne.n	8009454 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	4313      	orrs	r3, r2
 800944a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40012c00 	.word	0x40012c00
 8009478:	40013400 	.word	0x40013400
 800947c:	40000400 	.word	0x40000400
 8009480:	40000800 	.word	0x40000800
 8009484:	40000c00 	.word	0x40000c00
 8009488:	40014000 	.word	0x40014000

0800948c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e040      	b.n	8009520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d106      	bne.n	80094b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7fa fa0e 	bl	80038d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2224      	movs	r2, #36	@ 0x24
 80094b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 0201 	bic.w	r2, r2, #1
 80094c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 ffa4 	bl	800a420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fce9 	bl	8009eb0 <UART_SetConfig>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d101      	bne.n	80094e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e01b      	b.n	8009520 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685a      	ldr	r2, [r3, #4]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80094f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0201 	orr.w	r2, r2, #1
 8009516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f001 f823 	bl	800a564 <UART_CheckIdleState>
 800951e:	4603      	mov	r3, r0
}
 8009520:	4618      	mov	r0, r3
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08a      	sub	sp, #40	@ 0x28
 800952c:	af02      	add	r7, sp, #8
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	603b      	str	r3, [r7, #0]
 8009534:	4613      	mov	r3, r2
 8009536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800953c:	2b20      	cmp	r3, #32
 800953e:	d177      	bne.n	8009630 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <HAL_UART_Transmit+0x24>
 8009546:	88fb      	ldrh	r3, [r7, #6]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e070      	b.n	8009632 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2221      	movs	r2, #33	@ 0x21
 800955c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800955e:	f7fa fb15 	bl	8003b8c <HAL_GetTick>
 8009562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	88fa      	ldrh	r2, [r7, #6]
 8009570:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800957c:	d108      	bne.n	8009590 <HAL_UART_Transmit+0x68>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d104      	bne.n	8009590 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	61bb      	str	r3, [r7, #24]
 800958e:	e003      	b.n	8009598 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009594:	2300      	movs	r3, #0
 8009596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009598:	e02f      	b.n	80095fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2200      	movs	r2, #0
 80095a2:	2180      	movs	r1, #128	@ 0x80
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f001 f885 	bl	800a6b4 <UART_WaitOnFlagUntilTimeout>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d004      	beq.n	80095ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2220      	movs	r2, #32
 80095b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80095b6:	2303      	movs	r3, #3
 80095b8:	e03b      	b.n	8009632 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10b      	bne.n	80095d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	881a      	ldrh	r2, [r3, #0]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095cc:	b292      	uxth	r2, r2
 80095ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	3302      	adds	r3, #2
 80095d4:	61bb      	str	r3, [r7, #24]
 80095d6:	e007      	b.n	80095e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	781a      	ldrb	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	3301      	adds	r3, #1
 80095e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	3b01      	subs	r3, #1
 80095f2:	b29a      	uxth	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8009600:	b29b      	uxth	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1c9      	bne.n	800959a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2200      	movs	r2, #0
 800960e:	2140      	movs	r1, #64	@ 0x40
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f001 f84f 	bl	800a6b4 <UART_WaitOnFlagUntilTimeout>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2220      	movs	r2, #32
 8009620:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e005      	b.n	8009632 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2220      	movs	r2, #32
 800962a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	e000      	b.n	8009632 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009630:	2302      	movs	r3, #2
  }
}
 8009632:	4618      	mov	r0, r3
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b08a      	sub	sp, #40	@ 0x28
 800963e:	af02      	add	r7, sp, #8
 8009640:	60f8      	str	r0, [r7, #12]
 8009642:	60b9      	str	r1, [r7, #8]
 8009644:	603b      	str	r3, [r7, #0]
 8009646:	4613      	mov	r3, r2
 8009648:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009650:	2b20      	cmp	r3, #32
 8009652:	f040 80b6 	bne.w	80097c2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <HAL_UART_Receive+0x28>
 800965c:	88fb      	ldrh	r3, [r7, #6]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d101      	bne.n	8009666 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e0ae      	b.n	80097c4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2222      	movs	r2, #34	@ 0x22
 8009672:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800967c:	f7fa fa86 	bl	8003b8c <HAL_GetTick>
 8009680:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	88fa      	ldrh	r2, [r7, #6]
 8009686:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	88fa      	ldrh	r2, [r7, #6]
 800968e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800969a:	d10e      	bne.n	80096ba <HAL_UART_Receive+0x80>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d105      	bne.n	80096b0 <HAL_UART_Receive+0x76>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80096aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80096ae:	e02d      	b.n	800970c <HAL_UART_Receive+0xd2>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	22ff      	movs	r2, #255	@ 0xff
 80096b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80096b8:	e028      	b.n	800970c <HAL_UART_Receive+0xd2>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10d      	bne.n	80096de <HAL_UART_Receive+0xa4>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d104      	bne.n	80096d4 <HAL_UART_Receive+0x9a>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	22ff      	movs	r2, #255	@ 0xff
 80096ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80096d2:	e01b      	b.n	800970c <HAL_UART_Receive+0xd2>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	227f      	movs	r2, #127	@ 0x7f
 80096d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80096dc:	e016      	b.n	800970c <HAL_UART_Receive+0xd2>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096e6:	d10d      	bne.n	8009704 <HAL_UART_Receive+0xca>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d104      	bne.n	80096fa <HAL_UART_Receive+0xc0>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	227f      	movs	r2, #127	@ 0x7f
 80096f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80096f8:	e008      	b.n	800970c <HAL_UART_Receive+0xd2>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	223f      	movs	r2, #63	@ 0x3f
 80096fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009702:	e003      	b.n	800970c <HAL_UART_Receive+0xd2>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009712:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800971c:	d108      	bne.n	8009730 <HAL_UART_Receive+0xf6>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d104      	bne.n	8009730 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009726:	2300      	movs	r3, #0
 8009728:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	61bb      	str	r3, [r7, #24]
 800972e:	e003      	b.n	8009738 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009734:	2300      	movs	r3, #0
 8009736:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009738:	e037      	b.n	80097aa <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2200      	movs	r2, #0
 8009742:	2120      	movs	r1, #32
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 ffb5 	bl	800a6b4 <UART_WaitOnFlagUntilTimeout>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2220      	movs	r2, #32
 8009754:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e033      	b.n	80097c4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10c      	bne.n	800977c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009768:	b29a      	uxth	r2, r3
 800976a:	8a7b      	ldrh	r3, [r7, #18]
 800976c:	4013      	ands	r3, r2
 800976e:	b29a      	uxth	r2, r3
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	3302      	adds	r3, #2
 8009778:	61bb      	str	r3, [r7, #24]
 800977a:	e00d      	b.n	8009798 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009782:	b29b      	uxth	r3, r3
 8009784:	b2da      	uxtb	r2, r3
 8009786:	8a7b      	ldrh	r3, [r7, #18]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	4013      	ands	r3, r2
 800978c:	b2da      	uxtb	r2, r3
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	3301      	adds	r3, #1
 8009796:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800979e:	b29b      	uxth	r3, r3
 80097a0:	3b01      	subs	r3, #1
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1c1      	bne.n	800973a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2220      	movs	r2, #32
 80097ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	e000      	b.n	80097c4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80097c2:	2302      	movs	r3, #2
  }
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3720      	adds	r7, #32
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b08a      	sub	sp, #40	@ 0x28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	4613      	mov	r3, r2
 80097d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e0:	2b20      	cmp	r3, #32
 80097e2:	d137      	bne.n	8009854 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <HAL_UART_Receive_IT+0x24>
 80097ea:	88fb      	ldrh	r3, [r7, #6]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e030      	b.n	8009856 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a18      	ldr	r2, [pc, #96]	@ (8009860 <HAL_UART_Receive_IT+0x94>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d01f      	beq.n	8009844 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d018      	beq.n	8009844 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	e853 3f00 	ldrex	r3, [r3]
 800981e:	613b      	str	r3, [r7, #16]
   return(result);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009826:	627b      	str	r3, [r7, #36]	@ 0x24
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	461a      	mov	r2, r3
 800982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009830:	623b      	str	r3, [r7, #32]
 8009832:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009834:	69f9      	ldr	r1, [r7, #28]
 8009836:	6a3a      	ldr	r2, [r7, #32]
 8009838:	e841 2300 	strex	r3, r2, [r1]
 800983c:	61bb      	str	r3, [r7, #24]
   return(result);
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1e6      	bne.n	8009812 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009844:	88fb      	ldrh	r3, [r7, #6]
 8009846:	461a      	mov	r2, r3
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 ffa0 	bl	800a790 <UART_Start_Receive_IT>
 8009850:	4603      	mov	r3, r0
 8009852:	e000      	b.n	8009856 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009854:	2302      	movs	r3, #2
  }
}
 8009856:	4618      	mov	r0, r3
 8009858:	3728      	adds	r7, #40	@ 0x28
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	40008000 	.word	0x40008000

08009864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b0ba      	sub	sp, #232	@ 0xe8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800988a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800988e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009892:	4013      	ands	r3, r2
 8009894:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800989c:	2b00      	cmp	r3, #0
 800989e:	d115      	bne.n	80098cc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80098a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00f      	beq.n	80098cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80098ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098b0:	f003 0320 	and.w	r3, r3, #32
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d009      	beq.n	80098cc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 82ca 	beq.w	8009e56 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
      }
      return;
 80098ca:	e2c4      	b.n	8009e56 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80098cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 8117 	beq.w	8009b04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80098d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d106      	bne.n	80098f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80098e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80098e6:	4b85      	ldr	r3, [pc, #532]	@ (8009afc <HAL_UART_IRQHandler+0x298>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 810a 	beq.w	8009b04 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d011      	beq.n	8009920 <HAL_UART_IRQHandler+0xbc>
 80098fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00b      	beq.n	8009920 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2201      	movs	r2, #1
 800990e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009916:	f043 0201 	orr.w	r2, r3, #1
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d011      	beq.n	8009950 <HAL_UART_IRQHandler+0xec>
 800992c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00b      	beq.n	8009950 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2202      	movs	r2, #2
 800993e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009946:	f043 0204 	orr.w	r2, r3, #4
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	d011      	beq.n	8009980 <HAL_UART_IRQHandler+0x11c>
 800995c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00b      	beq.n	8009980 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2204      	movs	r2, #4
 800996e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009976:	f043 0202 	orr.w	r2, r3, #2
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009984:	f003 0308 	and.w	r3, r3, #8
 8009988:	2b00      	cmp	r3, #0
 800998a:	d017      	beq.n	80099bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800998c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009990:	f003 0320 	and.w	r3, r3, #32
 8009994:	2b00      	cmp	r3, #0
 8009996:	d105      	bne.n	80099a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800999c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2208      	movs	r2, #8
 80099aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099b2:	f043 0208 	orr.w	r2, r3, #8
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80099bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d012      	beq.n	80099ee <HAL_UART_IRQHandler+0x18a>
 80099c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00c      	beq.n	80099ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099e4:	f043 0220 	orr.w	r2, r3, #32
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 8230 	beq.w	8009e5a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80099fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099fe:	f003 0320 	and.w	r3, r3, #32
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00d      	beq.n	8009a22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d007      	beq.n	8009a22 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d003      	beq.n	8009a22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a36:	2b40      	cmp	r3, #64	@ 0x40
 8009a38:	d005      	beq.n	8009a46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d04f      	beq.n	8009ae6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 ff68 	bl	800a91c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a56:	2b40      	cmp	r3, #64	@ 0x40
 8009a58:	d141      	bne.n	8009ade <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3308      	adds	r3, #8
 8009a60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3308      	adds	r3, #8
 8009a82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a96:	e841 2300 	strex	r3, r2, [r1]
 8009a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1d9      	bne.n	8009a5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d013      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ab2:	4a13      	ldr	r2, [pc, #76]	@ (8009b00 <HAL_UART_IRQHandler+0x29c>)
 8009ab4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7fb fe7e 	bl	80057bc <HAL_DMA_Abort_IT>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d017      	beq.n	8009af6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ad4:	e00f      	b.n	8009af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f9d4 	bl	8009e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009adc:	e00b      	b.n	8009af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f9d0 	bl	8009e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae4:	e007      	b.n	8009af6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f9cc 	bl	8009e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009af4:	e1b1      	b.n	8009e5a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009af6:	bf00      	nop
    return;
 8009af8:	e1af      	b.n	8009e5a <HAL_UART_IRQHandler+0x5f6>
 8009afa:	bf00      	nop
 8009afc:	04000120 	.word	0x04000120
 8009b00:	0800a9e5 	.word	0x0800a9e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	f040 816a 	bne.w	8009de2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b12:	f003 0310 	and.w	r3, r3, #16
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	f000 8163 	beq.w	8009de2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f000 815c 	beq.w	8009de2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2210      	movs	r2, #16
 8009b30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b3c:	2b40      	cmp	r3, #64	@ 0x40
 8009b3e:	f040 80d4 	bne.w	8009cea <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 80ad 	beq.w	8009cb2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b62:	429a      	cmp	r2, r3
 8009b64:	f080 80a5 	bcs.w	8009cb2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f040 8086 	bne.w	8009c90 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b90:	e853 3f00 	ldrex	r3, [r3]
 8009b94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009bae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009bb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009bba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1da      	bne.n	8009b84 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	3308      	adds	r3, #8
 8009bd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009bd8:	e853 3f00 	ldrex	r3, [r3]
 8009bdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009bde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009be0:	f023 0301 	bic.w	r3, r3, #1
 8009be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3308      	adds	r3, #8
 8009bee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009bf2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009bfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e1      	bne.n	8009bce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3308      	adds	r3, #8
 8009c2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009c2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009c30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009c34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e3      	bne.n	8009c0a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2220      	movs	r2, #32
 8009c46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c58:	e853 3f00 	ldrex	r3, [r3]
 8009c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c60:	f023 0310 	bic.w	r3, r3, #16
 8009c64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c7a:	e841 2300 	strex	r3, r2, [r1]
 8009c7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1e4      	bne.n	8009c50 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fb fd58 	bl	8005740 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2202      	movs	r2, #2
 8009c94:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	4619      	mov	r1, r3
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f8f4 	bl	8009e98 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009cb0:	e0d5      	b.n	8009e5e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009cb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	f040 80ce 	bne.w	8009e5e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f003 0320 	and.w	r3, r3, #32
 8009cce:	2b20      	cmp	r3, #32
 8009cd0:	f040 80c5 	bne.w	8009e5e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 f8d8 	bl	8009e98 <HAL_UARTEx_RxEventCallback>
      return;
 8009ce8:	e0b9      	b.n	8009e5e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 80ab 	beq.w	8009e62 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009d0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 80a6 	beq.w	8009e62 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	461a      	mov	r2, r3
 8009d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d40:	e841 2300 	strex	r3, r2, [r1]
 8009d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1e4      	bne.n	8009d16 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3308      	adds	r3, #8
 8009d52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8009d5c:	6a3b      	ldr	r3, [r7, #32]
 8009d5e:	f023 0301 	bic.w	r3, r3, #1
 8009d62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3308      	adds	r3, #8
 8009d6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009d70:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d78:	e841 2300 	strex	r3, r2, [r1]
 8009d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e3      	bne.n	8009d4c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	e853 3f00 	ldrex	r3, [r3]
 8009da4:	60fb      	str	r3, [r7, #12]
   return(result);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f023 0310 	bic.w	r3, r3, #16
 8009dac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	461a      	mov	r2, r3
 8009db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009dba:	61fb      	str	r3, [r7, #28]
 8009dbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	69b9      	ldr	r1, [r7, #24]
 8009dc0:	69fa      	ldr	r2, [r7, #28]
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e4      	bne.n	8009d98 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f85c 	bl	8009e98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009de0:	e03f      	b.n	8009e62 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00e      	beq.n	8009e0c <HAL_UART_IRQHandler+0x5a8>
 8009dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d008      	beq.n	8009e0c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009e02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 ffe9 	bl	800addc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e0a:	e02d      	b.n	8009e68 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00e      	beq.n	8009e36 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d008      	beq.n	8009e36 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d01c      	beq.n	8009e66 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	4798      	blx	r3
    }
    return;
 8009e34:	e017      	b.n	8009e66 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d012      	beq.n	8009e68 <HAL_UART_IRQHandler+0x604>
 8009e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00c      	beq.n	8009e68 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fdde 	bl	800aa10 <UART_EndTransmit_IT>
    return;
 8009e54:	e008      	b.n	8009e68 <HAL_UART_IRQHandler+0x604>
      return;
 8009e56:	bf00      	nop
 8009e58:	e006      	b.n	8009e68 <HAL_UART_IRQHandler+0x604>
    return;
 8009e5a:	bf00      	nop
 8009e5c:	e004      	b.n	8009e68 <HAL_UART_IRQHandler+0x604>
      return;
 8009e5e:	bf00      	nop
 8009e60:	e002      	b.n	8009e68 <HAL_UART_IRQHandler+0x604>
      return;
 8009e62:	bf00      	nop
 8009e64:	e000      	b.n	8009e68 <HAL_UART_IRQHandler+0x604>
    return;
 8009e66:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009e68:	37e8      	adds	r7, #232	@ 0xe8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop

08009e70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009eb4:	b08a      	sub	sp, #40	@ 0x28
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	689a      	ldr	r2, [r3, #8]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	691b      	ldr	r3, [r3, #16]
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	431a      	orrs	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	69db      	ldr	r3, [r3, #28]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	4ba4      	ldr	r3, [pc, #656]	@ (800a170 <UART_SetConfig+0x2c0>)
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	6812      	ldr	r2, [r2, #0]
 8009ee6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ee8:	430b      	orrs	r3, r1
 8009eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	430a      	orrs	r2, r1
 8009f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a99      	ldr	r2, [pc, #612]	@ (800a174 <UART_SetConfig+0x2c4>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d004      	beq.n	8009f1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a90      	ldr	r2, [pc, #576]	@ (800a178 <UART_SetConfig+0x2c8>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d126      	bne.n	8009f88 <UART_SetConfig+0xd8>
 8009f3a:	4b90      	ldr	r3, [pc, #576]	@ (800a17c <UART_SetConfig+0x2cc>)
 8009f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f40:	f003 0303 	and.w	r3, r3, #3
 8009f44:	2b03      	cmp	r3, #3
 8009f46:	d81b      	bhi.n	8009f80 <UART_SetConfig+0xd0>
 8009f48:	a201      	add	r2, pc, #4	@ (adr r2, 8009f50 <UART_SetConfig+0xa0>)
 8009f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4e:	bf00      	nop
 8009f50:	08009f61 	.word	0x08009f61
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009f79 	.word	0x08009f79
 8009f60:	2301      	movs	r3, #1
 8009f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f66:	e116      	b.n	800a196 <UART_SetConfig+0x2e6>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f6e:	e112      	b.n	800a196 <UART_SetConfig+0x2e6>
 8009f70:	2304      	movs	r3, #4
 8009f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f76:	e10e      	b.n	800a196 <UART_SetConfig+0x2e6>
 8009f78:	2308      	movs	r3, #8
 8009f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f7e:	e10a      	b.n	800a196 <UART_SetConfig+0x2e6>
 8009f80:	2310      	movs	r3, #16
 8009f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f86:	e106      	b.n	800a196 <UART_SetConfig+0x2e6>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a7c      	ldr	r2, [pc, #496]	@ (800a180 <UART_SetConfig+0x2d0>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d138      	bne.n	800a004 <UART_SetConfig+0x154>
 8009f92:	4b7a      	ldr	r3, [pc, #488]	@ (800a17c <UART_SetConfig+0x2cc>)
 8009f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f98:	f003 030c 	and.w	r3, r3, #12
 8009f9c:	2b0c      	cmp	r3, #12
 8009f9e:	d82d      	bhi.n	8009ffc <UART_SetConfig+0x14c>
 8009fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa8 <UART_SetConfig+0xf8>)
 8009fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa6:	bf00      	nop
 8009fa8:	08009fdd 	.word	0x08009fdd
 8009fac:	08009ffd 	.word	0x08009ffd
 8009fb0:	08009ffd 	.word	0x08009ffd
 8009fb4:	08009ffd 	.word	0x08009ffd
 8009fb8:	08009fed 	.word	0x08009fed
 8009fbc:	08009ffd 	.word	0x08009ffd
 8009fc0:	08009ffd 	.word	0x08009ffd
 8009fc4:	08009ffd 	.word	0x08009ffd
 8009fc8:	08009fe5 	.word	0x08009fe5
 8009fcc:	08009ffd 	.word	0x08009ffd
 8009fd0:	08009ffd 	.word	0x08009ffd
 8009fd4:	08009ffd 	.word	0x08009ffd
 8009fd8:	08009ff5 	.word	0x08009ff5
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fe2:	e0d8      	b.n	800a196 <UART_SetConfig+0x2e6>
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009fea:	e0d4      	b.n	800a196 <UART_SetConfig+0x2e6>
 8009fec:	2304      	movs	r3, #4
 8009fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ff2:	e0d0      	b.n	800a196 <UART_SetConfig+0x2e6>
 8009ff4:	2308      	movs	r3, #8
 8009ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ffa:	e0cc      	b.n	800a196 <UART_SetConfig+0x2e6>
 8009ffc:	2310      	movs	r3, #16
 8009ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a002:	e0c8      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a5e      	ldr	r2, [pc, #376]	@ (800a184 <UART_SetConfig+0x2d4>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d125      	bne.n	800a05a <UART_SetConfig+0x1aa>
 800a00e:	4b5b      	ldr	r3, [pc, #364]	@ (800a17c <UART_SetConfig+0x2cc>)
 800a010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a014:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a018:	2b30      	cmp	r3, #48	@ 0x30
 800a01a:	d016      	beq.n	800a04a <UART_SetConfig+0x19a>
 800a01c:	2b30      	cmp	r3, #48	@ 0x30
 800a01e:	d818      	bhi.n	800a052 <UART_SetConfig+0x1a2>
 800a020:	2b20      	cmp	r3, #32
 800a022:	d00a      	beq.n	800a03a <UART_SetConfig+0x18a>
 800a024:	2b20      	cmp	r3, #32
 800a026:	d814      	bhi.n	800a052 <UART_SetConfig+0x1a2>
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <UART_SetConfig+0x182>
 800a02c:	2b10      	cmp	r3, #16
 800a02e:	d008      	beq.n	800a042 <UART_SetConfig+0x192>
 800a030:	e00f      	b.n	800a052 <UART_SetConfig+0x1a2>
 800a032:	2300      	movs	r3, #0
 800a034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a038:	e0ad      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a03a:	2302      	movs	r3, #2
 800a03c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a040:	e0a9      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a042:	2304      	movs	r3, #4
 800a044:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a048:	e0a5      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a04a:	2308      	movs	r3, #8
 800a04c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a050:	e0a1      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a052:	2310      	movs	r3, #16
 800a054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a058:	e09d      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a4a      	ldr	r2, [pc, #296]	@ (800a188 <UART_SetConfig+0x2d8>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d125      	bne.n	800a0b0 <UART_SetConfig+0x200>
 800a064:	4b45      	ldr	r3, [pc, #276]	@ (800a17c <UART_SetConfig+0x2cc>)
 800a066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a06a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a06e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a070:	d016      	beq.n	800a0a0 <UART_SetConfig+0x1f0>
 800a072:	2bc0      	cmp	r3, #192	@ 0xc0
 800a074:	d818      	bhi.n	800a0a8 <UART_SetConfig+0x1f8>
 800a076:	2b80      	cmp	r3, #128	@ 0x80
 800a078:	d00a      	beq.n	800a090 <UART_SetConfig+0x1e0>
 800a07a:	2b80      	cmp	r3, #128	@ 0x80
 800a07c:	d814      	bhi.n	800a0a8 <UART_SetConfig+0x1f8>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <UART_SetConfig+0x1d8>
 800a082:	2b40      	cmp	r3, #64	@ 0x40
 800a084:	d008      	beq.n	800a098 <UART_SetConfig+0x1e8>
 800a086:	e00f      	b.n	800a0a8 <UART_SetConfig+0x1f8>
 800a088:	2300      	movs	r3, #0
 800a08a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a08e:	e082      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a090:	2302      	movs	r3, #2
 800a092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a096:	e07e      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a098:	2304      	movs	r3, #4
 800a09a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a09e:	e07a      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a0a0:	2308      	movs	r3, #8
 800a0a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0a6:	e076      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a0a8:	2310      	movs	r3, #16
 800a0aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0ae:	e072      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a35      	ldr	r2, [pc, #212]	@ (800a18c <UART_SetConfig+0x2dc>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d12a      	bne.n	800a110 <UART_SetConfig+0x260>
 800a0ba:	4b30      	ldr	r3, [pc, #192]	@ (800a17c <UART_SetConfig+0x2cc>)
 800a0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0c8:	d01a      	beq.n	800a100 <UART_SetConfig+0x250>
 800a0ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0ce:	d81b      	bhi.n	800a108 <UART_SetConfig+0x258>
 800a0d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d4:	d00c      	beq.n	800a0f0 <UART_SetConfig+0x240>
 800a0d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0da:	d815      	bhi.n	800a108 <UART_SetConfig+0x258>
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d003      	beq.n	800a0e8 <UART_SetConfig+0x238>
 800a0e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0e4:	d008      	beq.n	800a0f8 <UART_SetConfig+0x248>
 800a0e6:	e00f      	b.n	800a108 <UART_SetConfig+0x258>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0ee:	e052      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0f6:	e04e      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a0f8:	2304      	movs	r3, #4
 800a0fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a0fe:	e04a      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a100:	2308      	movs	r3, #8
 800a102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a106:	e046      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a108:	2310      	movs	r3, #16
 800a10a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a10e:	e042      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a17      	ldr	r2, [pc, #92]	@ (800a174 <UART_SetConfig+0x2c4>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d13a      	bne.n	800a190 <UART_SetConfig+0x2e0>
 800a11a:	4b18      	ldr	r3, [pc, #96]	@ (800a17c <UART_SetConfig+0x2cc>)
 800a11c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a120:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a124:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a128:	d01a      	beq.n	800a160 <UART_SetConfig+0x2b0>
 800a12a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a12e:	d81b      	bhi.n	800a168 <UART_SetConfig+0x2b8>
 800a130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a134:	d00c      	beq.n	800a150 <UART_SetConfig+0x2a0>
 800a136:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a13a:	d815      	bhi.n	800a168 <UART_SetConfig+0x2b8>
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d003      	beq.n	800a148 <UART_SetConfig+0x298>
 800a140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a144:	d008      	beq.n	800a158 <UART_SetConfig+0x2a8>
 800a146:	e00f      	b.n	800a168 <UART_SetConfig+0x2b8>
 800a148:	2300      	movs	r3, #0
 800a14a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a14e:	e022      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a150:	2302      	movs	r3, #2
 800a152:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a156:	e01e      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a158:	2304      	movs	r3, #4
 800a15a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a15e:	e01a      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a160:	2308      	movs	r3, #8
 800a162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a166:	e016      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a168:	2310      	movs	r3, #16
 800a16a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a16e:	e012      	b.n	800a196 <UART_SetConfig+0x2e6>
 800a170:	efff69f3 	.word	0xefff69f3
 800a174:	40008000 	.word	0x40008000
 800a178:	40013800 	.word	0x40013800
 800a17c:	40021000 	.word	0x40021000
 800a180:	40004400 	.word	0x40004400
 800a184:	40004800 	.word	0x40004800
 800a188:	40004c00 	.word	0x40004c00
 800a18c:	40005000 	.word	0x40005000
 800a190:	2310      	movs	r3, #16
 800a192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a9f      	ldr	r2, [pc, #636]	@ (800a418 <UART_SetConfig+0x568>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d17a      	bne.n	800a296 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a1a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a1a4:	2b08      	cmp	r3, #8
 800a1a6:	d824      	bhi.n	800a1f2 <UART_SetConfig+0x342>
 800a1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b0 <UART_SetConfig+0x300>)
 800a1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ae:	bf00      	nop
 800a1b0:	0800a1d5 	.word	0x0800a1d5
 800a1b4:	0800a1f3 	.word	0x0800a1f3
 800a1b8:	0800a1dd 	.word	0x0800a1dd
 800a1bc:	0800a1f3 	.word	0x0800a1f3
 800a1c0:	0800a1e3 	.word	0x0800a1e3
 800a1c4:	0800a1f3 	.word	0x0800a1f3
 800a1c8:	0800a1f3 	.word	0x0800a1f3
 800a1cc:	0800a1f3 	.word	0x0800a1f3
 800a1d0:	0800a1eb 	.word	0x0800a1eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1d4:	f7fc fe96 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 800a1d8:	61f8      	str	r0, [r7, #28]
        break;
 800a1da:	e010      	b.n	800a1fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1dc:	4b8f      	ldr	r3, [pc, #572]	@ (800a41c <UART_SetConfig+0x56c>)
 800a1de:	61fb      	str	r3, [r7, #28]
        break;
 800a1e0:	e00d      	b.n	800a1fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1e2:	f7fc fdf7 	bl	8006dd4 <HAL_RCC_GetSysClockFreq>
 800a1e6:	61f8      	str	r0, [r7, #28]
        break;
 800a1e8:	e009      	b.n	800a1fe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1ee:	61fb      	str	r3, [r7, #28]
        break;
 800a1f0:	e005      	b.n	800a1fe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a1fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2b00      	cmp	r3, #0
 800a202:	f000 80fb 	beq.w	800a3fc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	4613      	mov	r3, r2
 800a20c:	005b      	lsls	r3, r3, #1
 800a20e:	4413      	add	r3, r2
 800a210:	69fa      	ldr	r2, [r7, #28]
 800a212:	429a      	cmp	r2, r3
 800a214:	d305      	bcc.n	800a222 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a21c:	69fa      	ldr	r2, [r7, #28]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d903      	bls.n	800a22a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a228:	e0e8      	b.n	800a3fc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	2200      	movs	r2, #0
 800a22e:	461c      	mov	r4, r3
 800a230:	4615      	mov	r5, r2
 800a232:	f04f 0200 	mov.w	r2, #0
 800a236:	f04f 0300 	mov.w	r3, #0
 800a23a:	022b      	lsls	r3, r5, #8
 800a23c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a240:	0222      	lsls	r2, r4, #8
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	6849      	ldr	r1, [r1, #4]
 800a246:	0849      	lsrs	r1, r1, #1
 800a248:	2000      	movs	r0, #0
 800a24a:	4688      	mov	r8, r1
 800a24c:	4681      	mov	r9, r0
 800a24e:	eb12 0a08 	adds.w	sl, r2, r8
 800a252:	eb43 0b09 	adc.w	fp, r3, r9
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	603b      	str	r3, [r7, #0]
 800a25e:	607a      	str	r2, [r7, #4]
 800a260:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a264:	4650      	mov	r0, sl
 800a266:	4659      	mov	r1, fp
 800a268:	f7f6 fd1e 	bl	8000ca8 <__aeabi_uldivmod>
 800a26c:	4602      	mov	r2, r0
 800a26e:	460b      	mov	r3, r1
 800a270:	4613      	mov	r3, r2
 800a272:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a27a:	d308      	bcc.n	800a28e <UART_SetConfig+0x3de>
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a282:	d204      	bcs.n	800a28e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	69ba      	ldr	r2, [r7, #24]
 800a28a:	60da      	str	r2, [r3, #12]
 800a28c:	e0b6      	b.n	800a3fc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a294:	e0b2      	b.n	800a3fc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a29e:	d15e      	bne.n	800a35e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a2a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a2a4:	2b08      	cmp	r3, #8
 800a2a6:	d828      	bhi.n	800a2fa <UART_SetConfig+0x44a>
 800a2a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a2b0 <UART_SetConfig+0x400>)
 800a2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ae:	bf00      	nop
 800a2b0:	0800a2d5 	.word	0x0800a2d5
 800a2b4:	0800a2dd 	.word	0x0800a2dd
 800a2b8:	0800a2e5 	.word	0x0800a2e5
 800a2bc:	0800a2fb 	.word	0x0800a2fb
 800a2c0:	0800a2eb 	.word	0x0800a2eb
 800a2c4:	0800a2fb 	.word	0x0800a2fb
 800a2c8:	0800a2fb 	.word	0x0800a2fb
 800a2cc:	0800a2fb 	.word	0x0800a2fb
 800a2d0:	0800a2f3 	.word	0x0800a2f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2d4:	f7fc fe16 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 800a2d8:	61f8      	str	r0, [r7, #28]
        break;
 800a2da:	e014      	b.n	800a306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2dc:	f7fc fe28 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 800a2e0:	61f8      	str	r0, [r7, #28]
        break;
 800a2e2:	e010      	b.n	800a306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2e4:	4b4d      	ldr	r3, [pc, #308]	@ (800a41c <UART_SetConfig+0x56c>)
 800a2e6:	61fb      	str	r3, [r7, #28]
        break;
 800a2e8:	e00d      	b.n	800a306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2ea:	f7fc fd73 	bl	8006dd4 <HAL_RCC_GetSysClockFreq>
 800a2ee:	61f8      	str	r0, [r7, #28]
        break;
 800a2f0:	e009      	b.n	800a306 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2f6:	61fb      	str	r3, [r7, #28]
        break;
 800a2f8:	e005      	b.n	800a306 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d077      	beq.n	800a3fc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	005a      	lsls	r2, r3, #1
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	085b      	lsrs	r3, r3, #1
 800a316:	441a      	add	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a320:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	2b0f      	cmp	r3, #15
 800a326:	d916      	bls.n	800a356 <UART_SetConfig+0x4a6>
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a32e:	d212      	bcs.n	800a356 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	b29b      	uxth	r3, r3
 800a334:	f023 030f 	bic.w	r3, r3, #15
 800a338:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	085b      	lsrs	r3, r3, #1
 800a33e:	b29b      	uxth	r3, r3
 800a340:	f003 0307 	and.w	r3, r3, #7
 800a344:	b29a      	uxth	r2, r3
 800a346:	8afb      	ldrh	r3, [r7, #22]
 800a348:	4313      	orrs	r3, r2
 800a34a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	8afa      	ldrh	r2, [r7, #22]
 800a352:	60da      	str	r2, [r3, #12]
 800a354:	e052      	b.n	800a3fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a35c:	e04e      	b.n	800a3fc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a35e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a362:	2b08      	cmp	r3, #8
 800a364:	d827      	bhi.n	800a3b6 <UART_SetConfig+0x506>
 800a366:	a201      	add	r2, pc, #4	@ (adr r2, 800a36c <UART_SetConfig+0x4bc>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a391 	.word	0x0800a391
 800a370:	0800a399 	.word	0x0800a399
 800a374:	0800a3a1 	.word	0x0800a3a1
 800a378:	0800a3b7 	.word	0x0800a3b7
 800a37c:	0800a3a7 	.word	0x0800a3a7
 800a380:	0800a3b7 	.word	0x0800a3b7
 800a384:	0800a3b7 	.word	0x0800a3b7
 800a388:	0800a3b7 	.word	0x0800a3b7
 800a38c:	0800a3af 	.word	0x0800a3af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a390:	f7fc fdb8 	bl	8006f04 <HAL_RCC_GetPCLK1Freq>
 800a394:	61f8      	str	r0, [r7, #28]
        break;
 800a396:	e014      	b.n	800a3c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a398:	f7fc fdca 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 800a39c:	61f8      	str	r0, [r7, #28]
        break;
 800a39e:	e010      	b.n	800a3c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3a0:	4b1e      	ldr	r3, [pc, #120]	@ (800a41c <UART_SetConfig+0x56c>)
 800a3a2:	61fb      	str	r3, [r7, #28]
        break;
 800a3a4:	e00d      	b.n	800a3c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3a6:	f7fc fd15 	bl	8006dd4 <HAL_RCC_GetSysClockFreq>
 800a3aa:	61f8      	str	r0, [r7, #28]
        break;
 800a3ac:	e009      	b.n	800a3c2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3b2:	61fb      	str	r3, [r7, #28]
        break;
 800a3b4:	e005      	b.n	800a3c2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a3c0:	bf00      	nop
    }

    if (pclk != 0U)
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d019      	beq.n	800a3fc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	085a      	lsrs	r2, r3, #1
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	441a      	add	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	2b0f      	cmp	r3, #15
 800a3e0:	d909      	bls.n	800a3f6 <UART_SetConfig+0x546>
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3e8:	d205      	bcs.n	800a3f6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	60da      	str	r2, [r3, #12]
 800a3f4:	e002      	b.n	800a3fc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a408:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3728      	adds	r7, #40	@ 0x28
 800a410:	46bd      	mov	sp, r7
 800a412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a416:	bf00      	nop
 800a418:	40008000 	.word	0x40008000
 800a41c:	00f42400 	.word	0x00f42400

0800a420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42c:	f003 0308 	and.w	r3, r3, #8
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00a      	beq.n	800a44a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	430a      	orrs	r2, r1
 800a448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a470:	f003 0302 	and.w	r3, r3, #2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00a      	beq.n	800a48e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a492:	f003 0304 	and.w	r3, r3, #4
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b4:	f003 0310 	and.w	r3, r3, #16
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00a      	beq.n	800a4d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d6:	f003 0320 	and.w	r3, r3, #32
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d01a      	beq.n	800a536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a51a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a51e:	d10a      	bne.n	800a536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00a      	beq.n	800a558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	605a      	str	r2, [r3, #4]
  }
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b098      	sub	sp, #96	@ 0x60
 800a568:	af02      	add	r7, sp, #8
 800a56a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a574:	f7f9 fb0a 	bl	8003b8c <HAL_GetTick>
 800a578:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0308 	and.w	r3, r3, #8
 800a584:	2b08      	cmp	r3, #8
 800a586:	d12e      	bne.n	800a5e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a588:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a590:	2200      	movs	r2, #0
 800a592:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 f88c 	bl	800a6b4 <UART_WaitOnFlagUntilTimeout>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d021      	beq.n	800a5e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5aa:	e853 3f00 	ldrex	r3, [r3]
 800a5ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a5c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5c8:	e841 2300 	strex	r3, r2, [r1]
 800a5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1e6      	bne.n	800a5a2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2220      	movs	r2, #32
 800a5d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e062      	b.n	800a6ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0304 	and.w	r3, r3, #4
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d149      	bne.n	800a688 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f856 	bl	800a6b4 <UART_WaitOnFlagUntilTimeout>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d03c      	beq.n	800a688 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a616:	e853 3f00 	ldrex	r3, [r3]
 800a61a:	623b      	str	r3, [r7, #32]
   return(result);
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	461a      	mov	r2, r3
 800a62a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a62c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a62e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a630:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a634:	e841 2300 	strex	r3, r2, [r1]
 800a638:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1e6      	bne.n	800a60e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3308      	adds	r3, #8
 800a646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	e853 3f00 	ldrex	r3, [r3]
 800a64e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 0301 	bic.w	r3, r3, #1
 800a656:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3308      	adds	r3, #8
 800a65e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a660:	61fa      	str	r2, [r7, #28]
 800a662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a664:	69b9      	ldr	r1, [r7, #24]
 800a666:	69fa      	ldr	r2, [r7, #28]
 800a668:	e841 2300 	strex	r3, r2, [r1]
 800a66c:	617b      	str	r3, [r7, #20]
   return(result);
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1e5      	bne.n	800a640 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2220      	movs	r2, #32
 800a678:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a684:	2303      	movs	r3, #3
 800a686:	e011      	b.n	800a6ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2220      	movs	r2, #32
 800a68c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2220      	movs	r2, #32
 800a692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2200      	movs	r2, #0
 800a69a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3758      	adds	r7, #88	@ 0x58
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	603b      	str	r3, [r7, #0]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6c4:	e04f      	b.n	800a766 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6cc:	d04b      	beq.n	800a766 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6ce:	f7f9 fa5d 	bl	8003b8c <HAL_GetTick>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	1ad3      	subs	r3, r2, r3
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d302      	bcc.n	800a6e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e04e      	b.n	800a786 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 0304 	and.w	r3, r3, #4
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d037      	beq.n	800a766 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b80      	cmp	r3, #128	@ 0x80
 800a6fa:	d034      	beq.n	800a766 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2b40      	cmp	r3, #64	@ 0x40
 800a700:	d031      	beq.n	800a766 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	f003 0308 	and.w	r3, r3, #8
 800a70c:	2b08      	cmp	r3, #8
 800a70e:	d110      	bne.n	800a732 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2208      	movs	r2, #8
 800a716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 f8ff 	bl	800a91c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2208      	movs	r2, #8
 800a722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2200      	movs	r2, #0
 800a72a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e029      	b.n	800a786 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a73c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a740:	d111      	bne.n	800a766 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a74a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f8e5 	bl	800a91c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2220      	movs	r2, #32
 800a756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e00f      	b.n	800a786 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69da      	ldr	r2, [r3, #28]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4013      	ands	r3, r2
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	429a      	cmp	r2, r3
 800a774:	bf0c      	ite	eq
 800a776:	2301      	moveq	r3, #1
 800a778:	2300      	movne	r3, #0
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	461a      	mov	r2, r3
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	429a      	cmp	r2, r3
 800a782:	d0a0      	beq.n	800a6c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a790:	b480      	push	{r7}
 800a792:	b097      	sub	sp, #92	@ 0x5c
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	4613      	mov	r3, r2
 800a79c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	88fa      	ldrh	r2, [r7, #6]
 800a7a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	88fa      	ldrh	r2, [r7, #6]
 800a7b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7c2:	d10e      	bne.n	800a7e2 <UART_Start_Receive_IT+0x52>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <UART_Start_Receive_IT+0x48>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a7d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a7d6:	e02d      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	22ff      	movs	r2, #255	@ 0xff
 800a7dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a7e0:	e028      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10d      	bne.n	800a806 <UART_Start_Receive_IT+0x76>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d104      	bne.n	800a7fc <UART_Start_Receive_IT+0x6c>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	22ff      	movs	r2, #255	@ 0xff
 800a7f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a7fa:	e01b      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	227f      	movs	r2, #127	@ 0x7f
 800a800:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a804:	e016      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a80e:	d10d      	bne.n	800a82c <UART_Start_Receive_IT+0x9c>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d104      	bne.n	800a822 <UART_Start_Receive_IT+0x92>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	227f      	movs	r2, #127	@ 0x7f
 800a81c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a820:	e008      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	223f      	movs	r2, #63	@ 0x3f
 800a826:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a82a:	e003      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2222      	movs	r2, #34	@ 0x22
 800a840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3308      	adds	r3, #8
 800a84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a84e:	e853 3f00 	ldrex	r3, [r3]
 800a852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a856:	f043 0301 	orr.w	r3, r3, #1
 800a85a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3308      	adds	r3, #8
 800a862:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a864:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a866:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a868:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a86a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a86c:	e841 2300 	strex	r3, r2, [r1]
 800a870:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1e5      	bne.n	800a844 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a880:	d107      	bne.n	800a892 <UART_Start_Receive_IT+0x102>
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d103      	bne.n	800a892 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4a21      	ldr	r2, [pc, #132]	@ (800a914 <UART_Start_Receive_IT+0x184>)
 800a88e:	669a      	str	r2, [r3, #104]	@ 0x68
 800a890:	e002      	b.n	800a898 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	4a20      	ldr	r2, [pc, #128]	@ (800a918 <UART_Start_Receive_IT+0x188>)
 800a896:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	691b      	ldr	r3, [r3, #16]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d019      	beq.n	800a8d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a8:	e853 3f00 	ldrex	r3, [r3]
 800a8ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a8b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8c0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8c6:	e841 2300 	strex	r3, r2, [r1]
 800a8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1e6      	bne.n	800a8a0 <UART_Start_Receive_IT+0x110>
 800a8d2:	e018      	b.n	800a906 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	f043 0320 	orr.w	r3, r3, #32
 800a8e8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8f2:	623b      	str	r3, [r7, #32]
 800a8f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f6:	69f9      	ldr	r1, [r7, #28]
 800a8f8:	6a3a      	ldr	r2, [r7, #32]
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	61bb      	str	r3, [r7, #24]
   return(result);
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e6      	bne.n	800a8d4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	375c      	adds	r7, #92	@ 0x5c
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	0800ac21 	.word	0x0800ac21
 800a918:	0800aa65 	.word	0x0800aa65

0800a91c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b095      	sub	sp, #84	@ 0x54
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a92c:	e853 3f00 	ldrex	r3, [r3]
 800a930:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a942:	643b      	str	r3, [r7, #64]	@ 0x40
 800a944:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a94a:	e841 2300 	strex	r3, r2, [r1]
 800a94e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1e6      	bne.n	800a924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3308      	adds	r3, #8
 800a95c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	e853 3f00 	ldrex	r3, [r3]
 800a964:	61fb      	str	r3, [r7, #28]
   return(result);
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	f023 0301 	bic.w	r3, r3, #1
 800a96c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	3308      	adds	r3, #8
 800a974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a97a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a97c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a97e:	e841 2300 	strex	r3, r2, [r1]
 800a982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1e5      	bne.n	800a956 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d118      	bne.n	800a9c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	e853 3f00 	ldrex	r3, [r3]
 800a99e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	f023 0310 	bic.w	r3, r3, #16
 800a9a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9b0:	61bb      	str	r3, [r7, #24]
 800a9b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6979      	ldr	r1, [r7, #20]
 800a9b6:	69ba      	ldr	r2, [r7, #24]
 800a9b8:	e841 2300 	strex	r3, r2, [r1]
 800a9bc:	613b      	str	r3, [r7, #16]
   return(result);
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e6      	bne.n	800a992 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a9d8:	bf00      	nop
 800a9da:	3754      	adds	r7, #84	@ 0x54
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f7ff fa3e 	bl	8009e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa08:	bf00      	nop
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b088      	sub	sp, #32
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	e853 3f00 	ldrex	r3, [r3]
 800aa24:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa2c:	61fb      	str	r3, [r7, #28]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	61bb      	str	r3, [r7, #24]
 800aa38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3a:	6979      	ldr	r1, [r7, #20]
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	e841 2300 	strex	r3, r2, [r1]
 800aa42:	613b      	str	r3, [r7, #16]
   return(result);
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1e6      	bne.n	800aa18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2220      	movs	r2, #32
 800aa4e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7ff fa0a 	bl	8009e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa5c:	bf00      	nop
 800aa5e:	3720      	adds	r7, #32
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b09c      	sub	sp, #112	@ 0x70
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aa72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aa7c:	2b22      	cmp	r3, #34	@ 0x22
 800aa7e:	f040 80be 	bne.w	800abfe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800aa88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aa8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800aa90:	b2d9      	uxtb	r1, r3
 800aa92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa9c:	400a      	ands	r2, r1
 800aa9e:	b2d2      	uxtb	r2, r2
 800aaa0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaa6:	1c5a      	adds	r2, r3, #1
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	3b01      	subs	r3, #1
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	f040 80a3 	bne.w	800ac12 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aadc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aae0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	461a      	mov	r2, r3
 800aae8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aaea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aaec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aaf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aaf2:	e841 2300 	strex	r3, r2, [r1]
 800aaf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aaf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1e6      	bne.n	800aacc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	3308      	adds	r3, #8
 800ab04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab08:	e853 3f00 	ldrex	r3, [r3]
 800ab0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab10:	f023 0301 	bic.w	r3, r3, #1
 800ab14:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	3308      	adds	r3, #8
 800ab1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab1e:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab26:	e841 2300 	strex	r3, r2, [r1]
 800ab2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1e5      	bne.n	800aafe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a34      	ldr	r2, [pc, #208]	@ (800ac1c <UART_RxISR_8BIT+0x1b8>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d01f      	beq.n	800ab90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d018      	beq.n	800ab90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab6c:	6a3b      	ldr	r3, [r7, #32]
 800ab6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ab72:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	461a      	mov	r2, r3
 800ab7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab7c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab84:	e841 2300 	strex	r3, r2, [r1]
 800ab88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1e6      	bne.n	800ab5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d12e      	bne.n	800abf6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	e853 3f00 	ldrex	r3, [r3]
 800abaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f023 0310 	bic.w	r3, r3, #16
 800abb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	461a      	mov	r2, r3
 800abba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abbc:	61fb      	str	r3, [r7, #28]
 800abbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abc0:	69b9      	ldr	r1, [r7, #24]
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	e841 2300 	strex	r3, r2, [r1]
 800abc8:	617b      	str	r3, [r7, #20]
   return(result);
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1e6      	bne.n	800ab9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	69db      	ldr	r3, [r3, #28]
 800abd6:	f003 0310 	and.w	r3, r3, #16
 800abda:	2b10      	cmp	r3, #16
 800abdc:	d103      	bne.n	800abe6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2210      	movs	r2, #16
 800abe4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800abec:	4619      	mov	r1, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff f952 	bl	8009e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800abf4:	e00d      	b.n	800ac12 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7f8 fee4 	bl	80039c4 <HAL_UART_RxCpltCallback>
}
 800abfc:	e009      	b.n	800ac12 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	8b1b      	ldrh	r3, [r3, #24]
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f042 0208 	orr.w	r2, r2, #8
 800ac0e:	b292      	uxth	r2, r2
 800ac10:	831a      	strh	r2, [r3, #24]
}
 800ac12:	bf00      	nop
 800ac14:	3770      	adds	r7, #112	@ 0x70
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	40008000 	.word	0x40008000

0800ac20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b09c      	sub	sp, #112	@ 0x70
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac2e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac38:	2b22      	cmp	r3, #34	@ 0x22
 800ac3a:	f040 80be 	bne.w	800adba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ac44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac4c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ac4e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800ac52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800ac56:	4013      	ands	r3, r2
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ac5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac62:	1c9a      	adds	r2, r3, #2
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	3b01      	subs	r3, #1
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f040 80a3 	bne.w	800adce <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac90:	e853 3f00 	ldrex	r3, [r3]
 800ac94:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ac96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ac9c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aca6:	657b      	str	r3, [r7, #84]	@ 0x54
 800aca8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800acac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800acae:	e841 2300 	strex	r3, r2, [r1]
 800acb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800acb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1e6      	bne.n	800ac88 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3308      	adds	r3, #8
 800acc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc4:	e853 3f00 	ldrex	r3, [r3]
 800acc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800acca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800accc:	f023 0301 	bic.w	r3, r3, #1
 800acd0:	663b      	str	r3, [r7, #96]	@ 0x60
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3308      	adds	r3, #8
 800acd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800acda:	643a      	str	r2, [r7, #64]	@ 0x40
 800acdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ace0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ace2:	e841 2300 	strex	r3, r2, [r1]
 800ace6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ace8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1e5      	bne.n	800acba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2220      	movs	r2, #32
 800acf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a34      	ldr	r2, [pc, #208]	@ (800add8 <UART_RxISR_16BIT+0x1b8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d01f      	beq.n	800ad4c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d018      	beq.n	800ad4c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	e853 3f00 	ldrex	r3, [r3]
 800ad26:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	461a      	mov	r2, r3
 800ad36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad3a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad40:	e841 2300 	strex	r3, r2, [r1]
 800ad44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d1e6      	bne.n	800ad1a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d12e      	bne.n	800adb2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	e853 3f00 	ldrex	r3, [r3]
 800ad66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	f023 0310 	bic.w	r3, r3, #16
 800ad6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad78:	61bb      	str	r3, [r7, #24]
 800ad7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7c:	6979      	ldr	r1, [r7, #20]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	e841 2300 	strex	r3, r2, [r1]
 800ad84:	613b      	str	r3, [r7, #16]
   return(result);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e6      	bne.n	800ad5a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	f003 0310 	and.w	r3, r3, #16
 800ad96:	2b10      	cmp	r3, #16
 800ad98:	d103      	bne.n	800ada2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2210      	movs	r2, #16
 800ada0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff f874 	bl	8009e98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800adb0:	e00d      	b.n	800adce <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7f8 fe06 	bl	80039c4 <HAL_UART_RxCpltCallback>
}
 800adb8:	e009      	b.n	800adce <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	8b1b      	ldrh	r3, [r3, #24]
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f042 0208 	orr.w	r2, r2, #8
 800adca:	b292      	uxth	r2, r2
 800adcc:	831a      	strh	r2, [r3, #24]
}
 800adce:	bf00      	nop
 800add0:	3770      	adds	r7, #112	@ 0x70
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	40008000 	.word	0x40008000

0800addc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800addc:	b480      	push	{r7}
 800adde:	b083      	sub	sp, #12
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ade4:	bf00      	nop
 800ade6:	370c      	adds	r7, #12
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800adf4:	4904      	ldr	r1, [pc, #16]	@ (800ae08 <MX_FATFS_Init+0x18>)
 800adf6:	4805      	ldr	r0, [pc, #20]	@ (800ae0c <MX_FATFS_Init+0x1c>)
 800adf8:	f003 fa3a 	bl	800e270 <FATFS_LinkDriver>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
 800ae00:	4b03      	ldr	r3, [pc, #12]	@ (800ae10 <MX_FATFS_Init+0x20>)
 800ae02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae04:	bf00      	nop
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	20000ab8 	.word	0x20000ab8
 800ae0c:	20000040 	.word	0x20000040
 800ae10:	20000ab4 	.word	0x20000ab4

0800ae14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ae14:	b480      	push	{r7}
 800ae16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ae18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 f9d9 	bl	800b1e8 <USER_SPI_initialize>
 800ae36:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	4603      	mov	r3, r0
 800ae48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800ae4a:	79fb      	ldrb	r3, [r7, #7]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fab7 	bl	800b3c0 <USER_SPI_status>
 800ae52:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60b9      	str	r1, [r7, #8]
 800ae64:	607a      	str	r2, [r7, #4]
 800ae66:	603b      	str	r3, [r7, #0]
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800ae6c:	7bf8      	ldrb	r0, [r7, #15]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	f000 faba 	bl	800b3ec <USER_SPI_read>
 800ae78:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
 800ae8c:	603b      	str	r3, [r7, #0]
 800ae8e:	4603      	mov	r3, r0
 800ae90:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800ae92:	7bf8      	ldrb	r0, [r7, #15]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	68b9      	ldr	r1, [r7, #8]
 800ae9a:	f000 fb0d 	bl	800b4b8 <USER_SPI_write>
 800ae9e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	603a      	str	r2, [r7, #0]
 800aeb2:	71fb      	strb	r3, [r7, #7]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800aeb8:	79b9      	ldrb	r1, [r7, #6]
 800aeba:	79fb      	ldrb	r3, [r7, #7]
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fb76 	bl	800b5b0 <USER_SPI_ioctl>
 800aec4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
	...

0800aed0 <SPI_Timer_On>:
  BYTE CardType;			/* Card type flags */

  uint32_t spiTimerTickStart;
  uint32_t spiTimerTickDelay;

  void SPI_Timer_On(uint32_t waitTicks) {
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
      spiTimerTickStart = HAL_GetTick();
 800aed8:	f7f8 fe58 	bl	8003b8c <HAL_GetTick>
 800aedc:	4603      	mov	r3, r0
 800aede:	4a04      	ldr	r2, [pc, #16]	@ (800aef0 <SPI_Timer_On+0x20>)
 800aee0:	6013      	str	r3, [r2, #0]
      spiTimerTickDelay = waitTicks;
 800aee2:	4a04      	ldr	r2, [pc, #16]	@ (800aef4 <SPI_Timer_On+0x24>)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6013      	str	r3, [r2, #0]
  }
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20000ac0 	.word	0x20000ac0
 800aef4:	20000ac4 	.word	0x20000ac4

0800aef8 <SPI_Timer_Status>:

  uint8_t SPI_Timer_Status() {
 800aef8:	b580      	push	{r7, lr}
 800aefa:	af00      	add	r7, sp, #0
      return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800aefc:	f7f8 fe46 	bl	8003b8c <HAL_GetTick>
 800af00:	4602      	mov	r2, r0
 800af02:	4b06      	ldr	r3, [pc, #24]	@ (800af1c <SPI_Timer_Status+0x24>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	1ad2      	subs	r2, r2, r3
 800af08:	4b05      	ldr	r3, [pc, #20]	@ (800af20 <SPI_Timer_Status+0x28>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	bf34      	ite	cc
 800af10:	2301      	movcc	r3, #1
 800af12:	2300      	movcs	r3, #0
 800af14:	b2db      	uxtb	r3, r3
  }
 800af16:	4618      	mov	r0, r3
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20000ac0 	.word	0x20000ac0
 800af20:	20000ac4 	.word	0x20000ac4

0800af24 <xchg_spi>:
  /* Exchange a byte */
  static
  BYTE xchg_spi (
  	BYTE dat	/* Data to send */
  )
  {
 800af24:	b580      	push	{r7, lr}
 800af26:	b086      	sub	sp, #24
 800af28:	af02      	add	r7, sp, #8
 800af2a:	4603      	mov	r3, r0
 800af2c:	71fb      	strb	r3, [r7, #7]
  	BYTE rxDat;
      HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800af2e:	f107 020f 	add.w	r2, r7, #15
 800af32:	1df9      	adds	r1, r7, #7
 800af34:	2332      	movs	r3, #50	@ 0x32
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	2301      	movs	r3, #1
 800af3a:	4804      	ldr	r0, [pc, #16]	@ (800af4c <xchg_spi+0x28>)
 800af3c:	f7fd f8f3 	bl	8008126 <HAL_SPI_TransmitReceive>
      return rxDat;
 800af40:	7bfb      	ldrb	r3, [r7, #15]
  }
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	2000089c 	.word	0x2000089c

0800af50 <rcvr_spi_multi>:
  static
  void rcvr_spi_multi (
  	BYTE *buff,		/* Pointer to data buffer */
  	UINT btr		/* Number of bytes to receive (even number) */
  )
  {
 800af50:	b590      	push	{r4, r7, lr}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  	for(UINT i=0; i<btr; i++) {
 800af5a:	2300      	movs	r3, #0
 800af5c:	60fb      	str	r3, [r7, #12]
 800af5e:	e00a      	b.n	800af76 <rcvr_spi_multi+0x26>
  		*(buff+i) = xchg_spi(0xFF);
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	18d4      	adds	r4, r2, r3
 800af66:	20ff      	movs	r0, #255	@ 0xff
 800af68:	f7ff ffdc 	bl	800af24 <xchg_spi>
 800af6c:	4603      	mov	r3, r0
 800af6e:	7023      	strb	r3, [r4, #0]
  	for(UINT i=0; i<btr; i++) {
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3301      	adds	r3, #1
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d3f0      	bcc.n	800af60 <rcvr_spi_multi+0x10>
  	}
  }
 800af7e:	bf00      	nop
 800af80:	bf00      	nop
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	bd90      	pop	{r4, r7, pc}

0800af88 <xmit_spi_multi>:
  static
  void xmit_spi_multi (
  	const BYTE *buff,	/* Pointer to the data */
  	UINT btx			/* Number of bytes to send (even number) */
  )
  {
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  	for(UINT i=0; i<btx; i++) {
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	e009      	b.n	800afac <xmit_spi_multi+0x24>
  		xchg_spi(*(buff+i));
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	4413      	add	r3, r2
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff ffbf 	bl	800af24 <xchg_spi>
  	for(UINT i=0; i<btx; i++) {
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3301      	adds	r3, #1
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d3f1      	bcc.n	800af98 <xmit_spi_multi+0x10>
  	}
  }
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <wait_ready>:

  static
  int wait_ready (	/* 1:Ready, 0:Timeout */
  	UINT wt			/* Timeout [ms] */
  )
  {
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b086      	sub	sp, #24
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
  	//wait_ready needs its own timer, unfortunately, so it can't use the
  	//spi_timer functions
  	uint32_t waitSpiTimerTickStart;
  	uint32_t waitSpiTimerTickDelay;

  	waitSpiTimerTickStart = HAL_GetTick();
 800afc6:	f7f8 fde1 	bl	8003b8c <HAL_GetTick>
 800afca:	6178      	str	r0, [r7, #20]
  	waitSpiTimerTickDelay = (uint32_t)wt;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	613b      	str	r3, [r7, #16]
  	do {
  		d = xchg_spi(0xFF);
 800afd0:	20ff      	movs	r0, #255	@ 0xff
 800afd2:	f7ff ffa7 	bl	800af24 <xchg_spi>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73fb      	strb	r3, [r7, #15]
  		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
  	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	2bff      	cmp	r3, #255	@ 0xff
 800afde:	d007      	beq.n	800aff0 <wait_ready+0x32>
 800afe0:	f7f8 fdd4 	bl	8003b8c <HAL_GetTick>
 800afe4:	4602      	mov	r2, r0
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	429a      	cmp	r2, r3
 800afee:	d8ef      	bhi.n	800afd0 <wait_ready+0x12>

  	return (d == 0xFF) ? 1 : 0;
 800aff0:	7bfb      	ldrb	r3, [r7, #15]
 800aff2:	2bff      	cmp	r3, #255	@ 0xff
 800aff4:	bf0c      	ite	eq
 800aff6:	2301      	moveq	r3, #1
 800aff8:	2300      	movne	r3, #0
 800affa:	b2db      	uxtb	r3, r3
  }
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <despiselect>:
  /* Despiselect card and release SPI                                         */
  /*-----------------------------------------------------------------------*/

  static
  void despiselect (void)
  {
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0
  	CS_HIGH();		/* Set CS# high */
 800b008:	2201      	movs	r2, #1
 800b00a:	2140      	movs	r1, #64	@ 0x40
 800b00c:	4803      	ldr	r0, [pc, #12]	@ (800b01c <despiselect+0x18>)
 800b00e:	f7fb f94b 	bl	80062a8 <HAL_GPIO_WritePin>
  	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b012:	20ff      	movs	r0, #255	@ 0xff
 800b014:	f7ff ff86 	bl	800af24 <xchg_spi>

  }
 800b018:	bf00      	nop
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	48000400 	.word	0x48000400

0800b020 <spiselect>:
  /* Select card and wait for ready                                        */
  /*-----------------------------------------------------------------------*/

  static
  int spiselect (void)	/* 1:OK, 0:Timeout */
  {
 800b020:	b580      	push	{r7, lr}
 800b022:	af00      	add	r7, sp, #0
  	CS_LOW();		/* Set CS# low */
 800b024:	2200      	movs	r2, #0
 800b026:	2140      	movs	r1, #64	@ 0x40
 800b028:	4809      	ldr	r0, [pc, #36]	@ (800b050 <spiselect+0x30>)
 800b02a:	f7fb f93d 	bl	80062a8 <HAL_GPIO_WritePin>
  	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b02e:	20ff      	movs	r0, #255	@ 0xff
 800b030:	f7ff ff78 	bl	800af24 <xchg_spi>
  	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b034:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b038:	f7ff ffc1 	bl	800afbe <wait_ready>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d001      	beq.n	800b046 <spiselect+0x26>
 800b042:	2301      	movs	r3, #1
 800b044:	e002      	b.n	800b04c <spiselect+0x2c>

  	despiselect();
 800b046:	f7ff ffdd 	bl	800b004 <despiselect>
  	return 0;	/* Timeout */
 800b04a:	2300      	movs	r3, #0
  }
 800b04c:	4618      	mov	r0, r3
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	48000400 	.word	0x48000400

0800b054 <rcvr_datablock>:
  static
  int rcvr_datablock (	/* 1:OK, 0:Error */
  	BYTE *buff,			/* Data buffer */
  	UINT btr			/* Data block length (byte) */
  )
  {
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
 800b05c:	6039      	str	r1, [r7, #0]
  	BYTE token;


  	SPI_Timer_On(200);
 800b05e:	20c8      	movs	r0, #200	@ 0xc8
 800b060:	f7ff ff36 	bl	800aed0 <SPI_Timer_On>
  	do {							/* Wait for DataStart token in timeout of 200ms */
  		token = xchg_spi(0xFF);
 800b064:	20ff      	movs	r0, #255	@ 0xff
 800b066:	f7ff ff5d 	bl	800af24 <xchg_spi>
 800b06a:	4603      	mov	r3, r0
 800b06c:	73fb      	strb	r3, [r7, #15]
  		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
  	} while ((token == 0xFF) && SPI_Timer_Status());
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
 800b070:	2bff      	cmp	r3, #255	@ 0xff
 800b072:	d104      	bne.n	800b07e <rcvr_datablock+0x2a>
 800b074:	f7ff ff40 	bl	800aef8 <SPI_Timer_Status>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1f2      	bne.n	800b064 <rcvr_datablock+0x10>
  	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b07e:	7bfb      	ldrb	r3, [r7, #15]
 800b080:	2bfe      	cmp	r3, #254	@ 0xfe
 800b082:	d001      	beq.n	800b088 <rcvr_datablock+0x34>
 800b084:	2300      	movs	r3, #0
 800b086:	e00a      	b.n	800b09e <rcvr_datablock+0x4a>

  	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff ff60 	bl	800af50 <rcvr_spi_multi>
  	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b090:	20ff      	movs	r0, #255	@ 0xff
 800b092:	f7ff ff47 	bl	800af24 <xchg_spi>
 800b096:	20ff      	movs	r0, #255	@ 0xff
 800b098:	f7ff ff44 	bl	800af24 <xchg_spi>

  	return 1;						/* Function succeeded */
 800b09c:	2301      	movs	r3, #1
  }
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <xmit_datablock>:
  static
  int xmit_datablock (	/* 1:OK, 0:Failed */
  	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
  	BYTE token			/* Token */
  )
  {
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b084      	sub	sp, #16
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	70fb      	strb	r3, [r7, #3]
  	BYTE resp;


  	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b0b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800b0b6:	f7ff ff82 	bl	800afbe <wait_ready>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <xmit_datablock+0x1e>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	e01e      	b.n	800b102 <xmit_datablock+0x5c>

  	xchg_spi(token);					/* Send token */
 800b0c4:	78fb      	ldrb	r3, [r7, #3]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff ff2c 	bl	800af24 <xchg_spi>
  	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b0cc:	78fb      	ldrb	r3, [r7, #3]
 800b0ce:	2bfd      	cmp	r3, #253	@ 0xfd
 800b0d0:	d016      	beq.n	800b100 <xmit_datablock+0x5a>
  		xmit_spi_multi(buff, 512);		/* Data */
 800b0d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f7ff ff56 	bl	800af88 <xmit_spi_multi>
  		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b0dc:	20ff      	movs	r0, #255	@ 0xff
 800b0de:	f7ff ff21 	bl	800af24 <xchg_spi>
 800b0e2:	20ff      	movs	r0, #255	@ 0xff
 800b0e4:	f7ff ff1e 	bl	800af24 <xchg_spi>

  		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b0e8:	20ff      	movs	r0, #255	@ 0xff
 800b0ea:	f7ff ff1b 	bl	800af24 <xchg_spi>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	73fb      	strb	r3, [r7, #15]
  		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
 800b0f4:	f003 031f 	and.w	r3, r3, #31
 800b0f8:	2b05      	cmp	r3, #5
 800b0fa:	d001      	beq.n	800b100 <xmit_datablock+0x5a>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	e000      	b.n	800b102 <xmit_datablock+0x5c>
  	}
  	return 1;
 800b100:	2301      	movs	r3, #1
  }
 800b102:	4618      	mov	r0, r3
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <send_cmd>:
  static
  BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
  	BYTE cmd,		/* Command index */
  	DWORD arg		/* Argument */
  )
  {
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	4603      	mov	r3, r0
 800b112:	6039      	str	r1, [r7, #0]
 800b114:	71fb      	strb	r3, [r7, #7]
  	BYTE n, res;


  	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	da0e      	bge.n	800b13c <send_cmd+0x32>
  		cmd &= 0x7F;
 800b11e:	79fb      	ldrb	r3, [r7, #7]
 800b120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b124:	71fb      	strb	r3, [r7, #7]
  		res = send_cmd(CMD55, 0);
 800b126:	2100      	movs	r1, #0
 800b128:	2037      	movs	r0, #55	@ 0x37
 800b12a:	f7ff ffee 	bl	800b10a <send_cmd>
 800b12e:	4603      	mov	r3, r0
 800b130:	73bb      	strb	r3, [r7, #14]
  		if (res > 1) return res;
 800b132:	7bbb      	ldrb	r3, [r7, #14]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d901      	bls.n	800b13c <send_cmd+0x32>
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	e051      	b.n	800b1e0 <send_cmd+0xd6>
  	}

  	/* Select the card and wait for ready except to stop multiple block read */
  	if (cmd != CMD12) {
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	2b0c      	cmp	r3, #12
 800b140:	d008      	beq.n	800b154 <send_cmd+0x4a>
  		despiselect();
 800b142:	f7ff ff5f 	bl	800b004 <despiselect>
  		if (!spiselect()) return 0xFF;
 800b146:	f7ff ff6b 	bl	800b020 <spiselect>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <send_cmd+0x4a>
 800b150:	23ff      	movs	r3, #255	@ 0xff
 800b152:	e045      	b.n	800b1e0 <send_cmd+0xd6>
  	}

  	/* Send command packet */
  	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff fee1 	bl	800af24 <xchg_spi>
  	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	0e1b      	lsrs	r3, r3, #24
 800b166:	b2db      	uxtb	r3, r3
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff fedb 	bl	800af24 <xchg_spi>
  	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	0c1b      	lsrs	r3, r3, #16
 800b172:	b2db      	uxtb	r3, r3
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff fed5 	bl	800af24 <xchg_spi>
  	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	0a1b      	lsrs	r3, r3, #8
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff fecf 	bl	800af24 <xchg_spi>
  	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff feca 	bl	800af24 <xchg_spi>
  	n = 0x01;							/* Dummy CRC + Stop */
 800b190:	2301      	movs	r3, #1
 800b192:	73fb      	strb	r3, [r7, #15]
  	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b194:	79fb      	ldrb	r3, [r7, #7]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d101      	bne.n	800b19e <send_cmd+0x94>
 800b19a:	2395      	movs	r3, #149	@ 0x95
 800b19c:	73fb      	strb	r3, [r7, #15]
  	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b19e:	79fb      	ldrb	r3, [r7, #7]
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d101      	bne.n	800b1a8 <send_cmd+0x9e>
 800b1a4:	2387      	movs	r3, #135	@ 0x87
 800b1a6:	73fb      	strb	r3, [r7, #15]
  	xchg_spi(n);
 800b1a8:	7bfb      	ldrb	r3, [r7, #15]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7ff feba 	bl	800af24 <xchg_spi>

  	/* Receive command resp */
  	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b1b0:	79fb      	ldrb	r3, [r7, #7]
 800b1b2:	2b0c      	cmp	r3, #12
 800b1b4:	d102      	bne.n	800b1bc <send_cmd+0xb2>
 800b1b6:	20ff      	movs	r0, #255	@ 0xff
 800b1b8:	f7ff feb4 	bl	800af24 <xchg_spi>
  	n = 10;								/* Wait for response (10 bytes max) */
 800b1bc:	230a      	movs	r3, #10
 800b1be:	73fb      	strb	r3, [r7, #15]
  	do {
  		res = xchg_spi(0xFF);
 800b1c0:	20ff      	movs	r0, #255	@ 0xff
 800b1c2:	f7ff feaf 	bl	800af24 <xchg_spi>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73bb      	strb	r3, [r7, #14]
  	} while ((res & 0x80) && --n);
 800b1ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	da05      	bge.n	800b1de <send_cmd+0xd4>
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	73fb      	strb	r3, [r7, #15]
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1f0      	bne.n	800b1c0 <send_cmd+0xb6>

  	return res;							/* Return received response */
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
  }
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USER_SPI_initialize>:
  /*-----------------------------------------------------------------------*/

  inline DSTATUS USER_SPI_initialize (
  	BYTE drv		/* Physical drive number (0) */
  )
  {
 800b1e8:	b590      	push	{r4, r7, lr}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	71fb      	strb	r3, [r7, #7]
  	BYTE n, cmd, ty, ocr[4];

  	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b1f2:	79fb      	ldrb	r3, [r7, #7]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <USER_SPI_initialize+0x14>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e0d6      	b.n	800b3aa <USER_SPI_initialize+0x1c2>
  	//assume SPI already init init_spi();	/* Initialize SPI */

  	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b1fc:	4b6d      	ldr	r3, [pc, #436]	@ (800b3b4 <USER_SPI_initialize+0x1cc>)
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	b2db      	uxtb	r3, r3
 800b202:	f003 0302 	and.w	r3, r3, #2
 800b206:	2b00      	cmp	r3, #0
 800b208:	d003      	beq.n	800b212 <USER_SPI_initialize+0x2a>
 800b20a:	4b6a      	ldr	r3, [pc, #424]	@ (800b3b4 <USER_SPI_initialize+0x1cc>)
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	e0cb      	b.n	800b3aa <USER_SPI_initialize+0x1c2>

  	FCLK_SLOW();
 800b212:	4b69      	ldr	r3, [pc, #420]	@ (800b3b8 <USER_SPI_initialize+0x1d0>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800b21c:	4b66      	ldr	r3, [pc, #408]	@ (800b3b8 <USER_SPI_initialize+0x1d0>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800b224:	601a      	str	r2, [r3, #0]
  	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b226:	230a      	movs	r3, #10
 800b228:	73fb      	strb	r3, [r7, #15]
 800b22a:	e005      	b.n	800b238 <USER_SPI_initialize+0x50>
 800b22c:	20ff      	movs	r0, #255	@ 0xff
 800b22e:	f7ff fe79 	bl	800af24 <xchg_spi>
 800b232:	7bfb      	ldrb	r3, [r7, #15]
 800b234:	3b01      	subs	r3, #1
 800b236:	73fb      	strb	r3, [r7, #15]
 800b238:	7bfb      	ldrb	r3, [r7, #15]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1f6      	bne.n	800b22c <USER_SPI_initialize+0x44>

  	ty = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	737b      	strb	r3, [r7, #13]
  	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b242:	2100      	movs	r1, #0
 800b244:	2000      	movs	r0, #0
 800b246:	f7ff ff60 	bl	800b10a <send_cmd>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	f040 808b 	bne.w	800b368 <USER_SPI_initialize+0x180>
  		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b252:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800b256:	f7ff fe3b 	bl	800aed0 <SPI_Timer_On>
  		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b25a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800b25e:	2008      	movs	r0, #8
 800b260:	f7ff ff53 	bl	800b10a <send_cmd>
 800b264:	4603      	mov	r3, r0
 800b266:	2b01      	cmp	r3, #1
 800b268:	d151      	bne.n	800b30e <USER_SPI_initialize+0x126>
  			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b26a:	2300      	movs	r3, #0
 800b26c:	73fb      	strb	r3, [r7, #15]
 800b26e:	e00d      	b.n	800b28c <USER_SPI_initialize+0xa4>
 800b270:	7bfc      	ldrb	r4, [r7, #15]
 800b272:	20ff      	movs	r0, #255	@ 0xff
 800b274:	f7ff fe56 	bl	800af24 <xchg_spi>
 800b278:	4603      	mov	r3, r0
 800b27a:	461a      	mov	r2, r3
 800b27c:	f104 0310 	add.w	r3, r4, #16
 800b280:	443b      	add	r3, r7
 800b282:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b286:	7bfb      	ldrb	r3, [r7, #15]
 800b288:	3301      	adds	r3, #1
 800b28a:	73fb      	strb	r3, [r7, #15]
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d9ee      	bls.n	800b270 <USER_SPI_initialize+0x88>
  			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b292:	7abb      	ldrb	r3, [r7, #10]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d167      	bne.n	800b368 <USER_SPI_initialize+0x180>
 800b298:	7afb      	ldrb	r3, [r7, #11]
 800b29a:	2baa      	cmp	r3, #170	@ 0xaa
 800b29c:	d164      	bne.n	800b368 <USER_SPI_initialize+0x180>
  				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b29e:	bf00      	nop
 800b2a0:	f7ff fe2a 	bl	800aef8 <SPI_Timer_Status>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d007      	beq.n	800b2ba <USER_SPI_initialize+0xd2>
 800b2aa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b2ae:	20a9      	movs	r0, #169	@ 0xa9
 800b2b0:	f7ff ff2b 	bl	800b10a <send_cmd>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1f2      	bne.n	800b2a0 <USER_SPI_initialize+0xb8>
  				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b2ba:	f7ff fe1d 	bl	800aef8 <SPI_Timer_Status>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d051      	beq.n	800b368 <USER_SPI_initialize+0x180>
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	203a      	movs	r0, #58	@ 0x3a
 800b2c8:	f7ff ff1f 	bl	800b10a <send_cmd>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d14a      	bne.n	800b368 <USER_SPI_initialize+0x180>
  					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
 800b2d6:	e00d      	b.n	800b2f4 <USER_SPI_initialize+0x10c>
 800b2d8:	7bfc      	ldrb	r4, [r7, #15]
 800b2da:	20ff      	movs	r0, #255	@ 0xff
 800b2dc:	f7ff fe22 	bl	800af24 <xchg_spi>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	f104 0310 	add.w	r3, r4, #16
 800b2e8:	443b      	add	r3, r7
 800b2ea:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	73fb      	strb	r3, [r7, #15]
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d9ee      	bls.n	800b2d8 <USER_SPI_initialize+0xf0>
  					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b2fa:	7a3b      	ldrb	r3, [r7, #8]
 800b2fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <USER_SPI_initialize+0x120>
 800b304:	230c      	movs	r3, #12
 800b306:	e000      	b.n	800b30a <USER_SPI_initialize+0x122>
 800b308:	2304      	movs	r3, #4
 800b30a:	737b      	strb	r3, [r7, #13]
 800b30c:	e02c      	b.n	800b368 <USER_SPI_initialize+0x180>
  				}
  			}
  		} else {	/* Not SDv2 card */
  			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b30e:	2100      	movs	r1, #0
 800b310:	20a9      	movs	r0, #169	@ 0xa9
 800b312:	f7ff fefa 	bl	800b10a <send_cmd>
 800b316:	4603      	mov	r3, r0
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d804      	bhi.n	800b326 <USER_SPI_initialize+0x13e>
  				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b31c:	2302      	movs	r3, #2
 800b31e:	737b      	strb	r3, [r7, #13]
 800b320:	23a9      	movs	r3, #169	@ 0xa9
 800b322:	73bb      	strb	r3, [r7, #14]
 800b324:	e003      	b.n	800b32e <USER_SPI_initialize+0x146>
  			} else {
  				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b326:	2301      	movs	r3, #1
 800b328:	737b      	strb	r3, [r7, #13]
 800b32a:	2301      	movs	r3, #1
 800b32c:	73bb      	strb	r3, [r7, #14]
  			}
  			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b32e:	bf00      	nop
 800b330:	f7ff fde2 	bl	800aef8 <SPI_Timer_Status>
 800b334:	4603      	mov	r3, r0
 800b336:	2b00      	cmp	r3, #0
 800b338:	d007      	beq.n	800b34a <USER_SPI_initialize+0x162>
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	2100      	movs	r1, #0
 800b33e:	4618      	mov	r0, r3
 800b340:	f7ff fee3 	bl	800b10a <send_cmd>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1f2      	bne.n	800b330 <USER_SPI_initialize+0x148>
  			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b34a:	f7ff fdd5 	bl	800aef8 <SPI_Timer_Status>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d007      	beq.n	800b364 <USER_SPI_initialize+0x17c>
 800b354:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b358:	2010      	movs	r0, #16
 800b35a:	f7ff fed6 	bl	800b10a <send_cmd>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <USER_SPI_initialize+0x180>
  				ty = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	737b      	strb	r3, [r7, #13]
  		}
  	}
  	CardType = ty;	/* Card type */
 800b368:	4a14      	ldr	r2, [pc, #80]	@ (800b3bc <USER_SPI_initialize+0x1d4>)
 800b36a:	7b7b      	ldrb	r3, [r7, #13]
 800b36c:	7013      	strb	r3, [r2, #0]
  	despiselect();
 800b36e:	f7ff fe49 	bl	800b004 <despiselect>

  	if (ty) {			/* OK */
 800b372:	7b7b      	ldrb	r3, [r7, #13]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d012      	beq.n	800b39e <USER_SPI_initialize+0x1b6>
  		FCLK_FAST();			/* Set fast clock */
 800b378:	4b0f      	ldr	r3, [pc, #60]	@ (800b3b8 <USER_SPI_initialize+0x1d0>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800b382:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b8 <USER_SPI_initialize+0x1d0>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f042 0210 	orr.w	r2, r2, #16
 800b38a:	601a      	str	r2, [r3, #0]
  		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b38c:	4b09      	ldr	r3, [pc, #36]	@ (800b3b4 <USER_SPI_initialize+0x1cc>)
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	b2db      	uxtb	r3, r3
 800b392:	f023 0301 	bic.w	r3, r3, #1
 800b396:	b2da      	uxtb	r2, r3
 800b398:	4b06      	ldr	r3, [pc, #24]	@ (800b3b4 <USER_SPI_initialize+0x1cc>)
 800b39a:	701a      	strb	r2, [r3, #0]
 800b39c:	e002      	b.n	800b3a4 <USER_SPI_initialize+0x1bc>
  	} else {			/* Failed */
  		Stat = STA_NOINIT;
 800b39e:	4b05      	ldr	r3, [pc, #20]	@ (800b3b4 <USER_SPI_initialize+0x1cc>)
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	701a      	strb	r2, [r3, #0]
  	}

  	return Stat;
 800b3a4:	4b03      	ldr	r3, [pc, #12]	@ (800b3b4 <USER_SPI_initialize+0x1cc>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	b2db      	uxtb	r3, r3
  }
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd90      	pop	{r4, r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000054 	.word	0x20000054
 800b3b8:	2000089c 	.word	0x2000089c
 800b3bc:	20000abc 	.word	0x20000abc

0800b3c0 <USER_SPI_status>:
  /*-----------------------------------------------------------------------*/

  inline DSTATUS USER_SPI_status (
  	BYTE drv		/* Physical drive number (0) */
  )
  {
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	71fb      	strb	r3, [r7, #7]
  	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <USER_SPI_status+0x14>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e002      	b.n	800b3da <USER_SPI_status+0x1a>

  	return Stat;	/* Return disk status */
 800b3d4:	4b04      	ldr	r3, [pc, #16]	@ (800b3e8 <USER_SPI_status+0x28>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	b2db      	uxtb	r3, r3
  }
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	20000054 	.word	0x20000054

0800b3ec <USER_SPI_read>:
  	BYTE drv,		/* Physical drive number (0) */
  	BYTE *buff,		/* Pointer to the data buffer to store read data */
  	DWORD sector,	/* Start sector number (LBA) */
  	UINT count		/* Number of sectors to read (1..128) */
  )
  {
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	603b      	str	r3, [r7, #0]
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]
  	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d102      	bne.n	800b408 <USER_SPI_read+0x1c>
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d101      	bne.n	800b40c <USER_SPI_read+0x20>
 800b408:	2304      	movs	r3, #4
 800b40a:	e04d      	b.n	800b4a8 <USER_SPI_read+0xbc>
  	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b40c:	4b28      	ldr	r3, [pc, #160]	@ (800b4b0 <USER_SPI_read+0xc4>)
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	b2db      	uxtb	r3, r3
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <USER_SPI_read+0x32>
 800b41a:	2303      	movs	r3, #3
 800b41c:	e044      	b.n	800b4a8 <USER_SPI_read+0xbc>

  	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b41e:	4b25      	ldr	r3, [pc, #148]	@ (800b4b4 <USER_SPI_read+0xc8>)
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	f003 0308 	and.w	r3, r3, #8
 800b426:	2b00      	cmp	r3, #0
 800b428:	d102      	bne.n	800b430 <USER_SPI_read+0x44>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	025b      	lsls	r3, r3, #9
 800b42e:	607b      	str	r3, [r7, #4]

  	if (count == 1) {	/* Single sector read */
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d111      	bne.n	800b45a <USER_SPI_read+0x6e>
  		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	2011      	movs	r0, #17
 800b43a:	f7ff fe66 	bl	800b10a <send_cmd>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d129      	bne.n	800b498 <USER_SPI_read+0xac>
  			&& rcvr_datablock(buff, 512)) {
 800b444:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b448:	68b8      	ldr	r0, [r7, #8]
 800b44a:	f7ff fe03 	bl	800b054 <rcvr_datablock>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d021      	beq.n	800b498 <USER_SPI_read+0xac>
  			count = 0;
 800b454:	2300      	movs	r3, #0
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	e01e      	b.n	800b498 <USER_SPI_read+0xac>
  		}
  	}
  	else {				/* Multiple sector read */
  		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	2012      	movs	r0, #18
 800b45e:	f7ff fe54 	bl	800b10a <send_cmd>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d117      	bne.n	800b498 <USER_SPI_read+0xac>
  			do {
  				if (!rcvr_datablock(buff, 512)) break;
 800b468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b46c:	68b8      	ldr	r0, [r7, #8]
 800b46e:	f7ff fdf1 	bl	800b054 <rcvr_datablock>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d00a      	beq.n	800b48e <USER_SPI_read+0xa2>
  				buff += 512;
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b47e:	60bb      	str	r3, [r7, #8]
  			} while (--count);
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	3b01      	subs	r3, #1
 800b484:	603b      	str	r3, [r7, #0]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1ed      	bne.n	800b468 <USER_SPI_read+0x7c>
 800b48c:	e000      	b.n	800b490 <USER_SPI_read+0xa4>
  				if (!rcvr_datablock(buff, 512)) break;
 800b48e:	bf00      	nop
  			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b490:	2100      	movs	r1, #0
 800b492:	200c      	movs	r0, #12
 800b494:	f7ff fe39 	bl	800b10a <send_cmd>
  		}
  	}
  	despiselect();
 800b498:	f7ff fdb4 	bl	800b004 <despiselect>

  	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	bf14      	ite	ne
 800b4a2:	2301      	movne	r3, #1
 800b4a4:	2300      	moveq	r3, #0
 800b4a6:	b2db      	uxtb	r3, r3
  }
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	20000054 	.word	0x20000054
 800b4b4:	20000abc 	.word	0x20000abc

0800b4b8 <USER_SPI_write>:
  	BYTE drv,			/* Physical drive number (0) */
  	const BYTE *buff,	/* Ponter to the data to write */
  	DWORD sector,		/* Start sector number (LBA) */
  	UINT count			/* Number of sectors to write (1..128) */
  )
  {
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60b9      	str	r1, [r7, #8]
 800b4c0:	607a      	str	r2, [r7, #4]
 800b4c2:	603b      	str	r3, [r7, #0]
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	73fb      	strb	r3, [r7, #15]
  	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b4c8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d102      	bne.n	800b4d4 <USER_SPI_write+0x1c>
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <USER_SPI_write+0x20>
 800b4d4:	2304      	movs	r3, #4
 800b4d6:	e063      	b.n	800b5a0 <USER_SPI_write+0xe8>
  	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b4d8:	4b33      	ldr	r3, [pc, #204]	@ (800b5a8 <USER_SPI_write+0xf0>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	f003 0301 	and.w	r3, r3, #1
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <USER_SPI_write+0x32>
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e05a      	b.n	800b5a0 <USER_SPI_write+0xe8>
  	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b5a8 <USER_SPI_write+0xf0>)
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	b2db      	uxtb	r3, r3
 800b4f0:	f003 0304 	and.w	r3, r3, #4
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d001      	beq.n	800b4fc <USER_SPI_write+0x44>
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	e051      	b.n	800b5a0 <USER_SPI_write+0xe8>

  	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b4fc:	4b2b      	ldr	r3, [pc, #172]	@ (800b5ac <USER_SPI_write+0xf4>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	f003 0308 	and.w	r3, r3, #8
 800b504:	2b00      	cmp	r3, #0
 800b506:	d102      	bne.n	800b50e <USER_SPI_write+0x56>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	025b      	lsls	r3, r3, #9
 800b50c:	607b      	str	r3, [r7, #4]

  	if (count == 1) {	/* Single sector write */
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b01      	cmp	r3, #1
 800b512:	d110      	bne.n	800b536 <USER_SPI_write+0x7e>
  		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b514:	6879      	ldr	r1, [r7, #4]
 800b516:	2018      	movs	r0, #24
 800b518:	f7ff fdf7 	bl	800b10a <send_cmd>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d136      	bne.n	800b590 <USER_SPI_write+0xd8>
  			&& xmit_datablock(buff, 0xFE)) {
 800b522:	21fe      	movs	r1, #254	@ 0xfe
 800b524:	68b8      	ldr	r0, [r7, #8]
 800b526:	f7ff fdbe 	bl	800b0a6 <xmit_datablock>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d02f      	beq.n	800b590 <USER_SPI_write+0xd8>
  			count = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	603b      	str	r3, [r7, #0]
 800b534:	e02c      	b.n	800b590 <USER_SPI_write+0xd8>
  		}
  	}
  	else {				/* Multiple sector write */
  		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b536:	4b1d      	ldr	r3, [pc, #116]	@ (800b5ac <USER_SPI_write+0xf4>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	f003 0306 	and.w	r3, r3, #6
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <USER_SPI_write+0x92>
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	2097      	movs	r0, #151	@ 0x97
 800b546:	f7ff fde0 	bl	800b10a <send_cmd>
  		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b54a:	6879      	ldr	r1, [r7, #4]
 800b54c:	2019      	movs	r0, #25
 800b54e:	f7ff fddc 	bl	800b10a <send_cmd>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d11b      	bne.n	800b590 <USER_SPI_write+0xd8>
  			do {
  				if (!xmit_datablock(buff, 0xFC)) break;
 800b558:	21fc      	movs	r1, #252	@ 0xfc
 800b55a:	68b8      	ldr	r0, [r7, #8]
 800b55c:	f7ff fda3 	bl	800b0a6 <xmit_datablock>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00a      	beq.n	800b57c <USER_SPI_write+0xc4>
  				buff += 512;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b56c:	60bb      	str	r3, [r7, #8]
  			} while (--count);
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	3b01      	subs	r3, #1
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1ee      	bne.n	800b558 <USER_SPI_write+0xa0>
 800b57a:	e000      	b.n	800b57e <USER_SPI_write+0xc6>
  				if (!xmit_datablock(buff, 0xFC)) break;
 800b57c:	bf00      	nop
  			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b57e:	21fd      	movs	r1, #253	@ 0xfd
 800b580:	2000      	movs	r0, #0
 800b582:	f7ff fd90 	bl	800b0a6 <xmit_datablock>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <USER_SPI_write+0xd8>
 800b58c:	2301      	movs	r3, #1
 800b58e:	603b      	str	r3, [r7, #0]
  		}
  	}
  	despiselect();
 800b590:	f7ff fd38 	bl	800b004 <despiselect>

  	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	bf14      	ite	ne
 800b59a:	2301      	movne	r3, #1
 800b59c:	2300      	moveq	r3, #0
 800b59e:	b2db      	uxtb	r3, r3
  }
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3710      	adds	r7, #16
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	20000054 	.word	0x20000054
 800b5ac:	20000abc 	.word	0x20000abc

0800b5b0 <USER_SPI_ioctl>:
  inline DRESULT USER_SPI_ioctl (
  	BYTE drv,		/* Physical drive number (0) */
  	BYTE cmd,		/* Control command code */
  	void *buff		/* Pointer to the conrtol data */
  )
  {
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b08c      	sub	sp, #48	@ 0x30
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	603a      	str	r2, [r7, #0]
 800b5ba:	71fb      	strb	r3, [r7, #7]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	71bb      	strb	r3, [r7, #6]
  	DRESULT res;
  	BYTE n, csd[16];
  	DWORD *dp, st, ed, csize;


  	if (drv) return RES_PARERR;					/* Check parameter */
 800b5c0:	79fb      	ldrb	r3, [r7, #7]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <USER_SPI_ioctl+0x1a>
 800b5c6:	2304      	movs	r3, #4
 800b5c8:	e15a      	b.n	800b880 <USER_SPI_ioctl+0x2d0>
  	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b5ca:	4baf      	ldr	r3, [pc, #700]	@ (800b888 <USER_SPI_ioctl+0x2d8>)
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d001      	beq.n	800b5dc <USER_SPI_ioctl+0x2c>
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e151      	b.n	800b880 <USER_SPI_ioctl+0x2d0>

  	res = RES_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  	switch (cmd) {
 800b5e2:	79bb      	ldrb	r3, [r7, #6]
 800b5e4:	2b04      	cmp	r3, #4
 800b5e6:	f200 8136 	bhi.w	800b856 <USER_SPI_ioctl+0x2a6>
 800b5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f0 <USER_SPI_ioctl+0x40>)
 800b5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f0:	0800b605 	.word	0x0800b605
 800b5f4:	0800b619 	.word	0x0800b619
 800b5f8:	0800b857 	.word	0x0800b857
 800b5fc:	0800b6c5 	.word	0x0800b6c5
 800b600:	0800b7bb 	.word	0x0800b7bb
  	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
  		if (spiselect()) res = RES_OK;
 800b604:	f7ff fd0c 	bl	800b020 <spiselect>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 8127 	beq.w	800b85e <USER_SPI_ioctl+0x2ae>
 800b610:	2300      	movs	r3, #0
 800b612:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		break;
 800b616:	e122      	b.n	800b85e <USER_SPI_ioctl+0x2ae>

  	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
  		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b618:	2100      	movs	r1, #0
 800b61a:	2009      	movs	r0, #9
 800b61c:	f7ff fd75 	bl	800b10a <send_cmd>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	f040 811d 	bne.w	800b862 <USER_SPI_ioctl+0x2b2>
 800b628:	f107 030c 	add.w	r3, r7, #12
 800b62c:	2110      	movs	r1, #16
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff fd10 	bl	800b054 <rcvr_datablock>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 8113 	beq.w	800b862 <USER_SPI_ioctl+0x2b2>
  			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b63c:	7b3b      	ldrb	r3, [r7, #12]
 800b63e:	099b      	lsrs	r3, r3, #6
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b01      	cmp	r3, #1
 800b644:	d111      	bne.n	800b66a <USER_SPI_ioctl+0xba>
  				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b646:	7d7b      	ldrb	r3, [r7, #21]
 800b648:	461a      	mov	r2, r3
 800b64a:	7d3b      	ldrb	r3, [r7, #20]
 800b64c:	021b      	lsls	r3, r3, #8
 800b64e:	4413      	add	r3, r2
 800b650:	461a      	mov	r2, r3
 800b652:	7cfb      	ldrb	r3, [r7, #19]
 800b654:	041b      	lsls	r3, r3, #16
 800b656:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800b65a:	4413      	add	r3, r2
 800b65c:	3301      	adds	r3, #1
 800b65e:	61fb      	str	r3, [r7, #28]
  				*(DWORD*)buff = csize << 10;
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	029a      	lsls	r2, r3, #10
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	601a      	str	r2, [r3, #0]
 800b668:	e028      	b.n	800b6bc <USER_SPI_ioctl+0x10c>
  			} else {					/* SDC ver 1.XX or MMC ver 3 */
  				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b66a:	7c7b      	ldrb	r3, [r7, #17]
 800b66c:	f003 030f 	and.w	r3, r3, #15
 800b670:	b2da      	uxtb	r2, r3
 800b672:	7dbb      	ldrb	r3, [r7, #22]
 800b674:	09db      	lsrs	r3, r3, #7
 800b676:	b2db      	uxtb	r3, r3
 800b678:	4413      	add	r3, r2
 800b67a:	b2da      	uxtb	r2, r3
 800b67c:	7d7b      	ldrb	r3, [r7, #21]
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	b2db      	uxtb	r3, r3
 800b682:	f003 0306 	and.w	r3, r3, #6
 800b686:	b2db      	uxtb	r3, r3
 800b688:	4413      	add	r3, r2
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	3302      	adds	r3, #2
 800b68e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b692:	7d3b      	ldrb	r3, [r7, #20]
 800b694:	099b      	lsrs	r3, r3, #6
 800b696:	b2db      	uxtb	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	7cfb      	ldrb	r3, [r7, #19]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	441a      	add	r2, r3
 800b6a0:	7cbb      	ldrb	r3, [r7, #18]
 800b6a2:	029b      	lsls	r3, r3, #10
 800b6a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b6a8:	4413      	add	r3, r2
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	61fb      	str	r3, [r7, #28]
  				*(DWORD*)buff = csize << (n - 9);
 800b6ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b6b2:	3b09      	subs	r3, #9
 800b6b4:	69fa      	ldr	r2, [r7, #28]
 800b6b6:	409a      	lsls	r2, r3
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	601a      	str	r2, [r3, #0]
  			}
  			res = RES_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		}
  		break;
 800b6c2:	e0ce      	b.n	800b862 <USER_SPI_ioctl+0x2b2>

  	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
  		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b6c4:	4b71      	ldr	r3, [pc, #452]	@ (800b88c <USER_SPI_ioctl+0x2dc>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d031      	beq.n	800b734 <USER_SPI_ioctl+0x184>
  			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	208d      	movs	r0, #141	@ 0x8d
 800b6d4:	f7ff fd19 	bl	800b10a <send_cmd>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f040 80c3 	bne.w	800b866 <USER_SPI_ioctl+0x2b6>
  				xchg_spi(0xFF);
 800b6e0:	20ff      	movs	r0, #255	@ 0xff
 800b6e2:	f7ff fc1f 	bl	800af24 <xchg_spi>
  				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b6e6:	f107 030c 	add.w	r3, r7, #12
 800b6ea:	2110      	movs	r1, #16
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff fcb1 	bl	800b054 <rcvr_datablock>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 80b6 	beq.w	800b866 <USER_SPI_ioctl+0x2b6>
  					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b6fa:	2330      	movs	r3, #48	@ 0x30
 800b6fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b700:	e007      	b.n	800b712 <USER_SPI_ioctl+0x162>
 800b702:	20ff      	movs	r0, #255	@ 0xff
 800b704:	f7ff fc0e 	bl	800af24 <xchg_spi>
 800b708:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b70c:	3b01      	subs	r3, #1
 800b70e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b712:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1f3      	bne.n	800b702 <USER_SPI_ioctl+0x152>
  					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b71a:	7dbb      	ldrb	r3, [r7, #22]
 800b71c:	091b      	lsrs	r3, r3, #4
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	461a      	mov	r2, r3
 800b722:	2310      	movs	r3, #16
 800b724:	fa03 f202 	lsl.w	r2, r3, r2
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	601a      	str	r2, [r3, #0]
  					res = RES_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
  				}
  				res = RES_OK;
  			}
  		}
  		break;
 800b732:	e098      	b.n	800b866 <USER_SPI_ioctl+0x2b6>
  			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b734:	2100      	movs	r1, #0
 800b736:	2009      	movs	r0, #9
 800b738:	f7ff fce7 	bl	800b10a <send_cmd>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	f040 8091 	bne.w	800b866 <USER_SPI_ioctl+0x2b6>
 800b744:	f107 030c 	add.w	r3, r7, #12
 800b748:	2110      	movs	r1, #16
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff fc82 	bl	800b054 <rcvr_datablock>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 8087 	beq.w	800b866 <USER_SPI_ioctl+0x2b6>
  				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b758:	4b4c      	ldr	r3, [pc, #304]	@ (800b88c <USER_SPI_ioctl+0x2dc>)
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d012      	beq.n	800b78a <USER_SPI_ioctl+0x1da>
  					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b764:	7dbb      	ldrb	r3, [r7, #22]
 800b766:	005b      	lsls	r3, r3, #1
 800b768:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800b76c:	7dfa      	ldrb	r2, [r7, #23]
 800b76e:	09d2      	lsrs	r2, r2, #7
 800b770:	b2d2      	uxtb	r2, r2
 800b772:	4413      	add	r3, r2
 800b774:	1c5a      	adds	r2, r3, #1
 800b776:	7e7b      	ldrb	r3, [r7, #25]
 800b778:	099b      	lsrs	r3, r3, #6
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	3b01      	subs	r3, #1
 800b77e:	fa02 f303 	lsl.w	r3, r2, r3
 800b782:	461a      	mov	r2, r3
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	e013      	b.n	800b7b2 <USER_SPI_ioctl+0x202>
  					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b78a:	7dbb      	ldrb	r3, [r7, #22]
 800b78c:	109b      	asrs	r3, r3, #2
 800b78e:	b29b      	uxth	r3, r3
 800b790:	f003 031f 	and.w	r3, r3, #31
 800b794:	3301      	adds	r3, #1
 800b796:	7dfa      	ldrb	r2, [r7, #23]
 800b798:	00d2      	lsls	r2, r2, #3
 800b79a:	f002 0218 	and.w	r2, r2, #24
 800b79e:	7df9      	ldrb	r1, [r7, #23]
 800b7a0:	0949      	lsrs	r1, r1, #5
 800b7a2:	b2c9      	uxtb	r1, r1
 800b7a4:	440a      	add	r2, r1
 800b7a6:	3201      	adds	r2, #1
 800b7a8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	601a      	str	r2, [r3, #0]
  				res = RES_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		break;
 800b7b8:	e055      	b.n	800b866 <USER_SPI_ioctl+0x2b6>

  	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
  		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b7ba:	4b34      	ldr	r3, [pc, #208]	@ (800b88c <USER_SPI_ioctl+0x2dc>)
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	f003 0306 	and.w	r3, r3, #6
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d051      	beq.n	800b86a <USER_SPI_ioctl+0x2ba>
  		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b7c6:	f107 020c 	add.w	r2, r7, #12
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	210b      	movs	r1, #11
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7ff feee 	bl	800b5b0 <USER_SPI_ioctl>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d149      	bne.n	800b86e <USER_SPI_ioctl+0x2be>
  		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b7da:	7b3b      	ldrb	r3, [r7, #12]
 800b7dc:	099b      	lsrs	r3, r3, #6
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d104      	bne.n	800b7ee <USER_SPI_ioctl+0x23e>
 800b7e4:	7dbb      	ldrb	r3, [r7, #22]
 800b7e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d041      	beq.n	800b872 <USER_SPI_ioctl+0x2c2>
  		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	623b      	str	r3, [r7, #32]
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7f8:	6a3b      	ldr	r3, [r7, #32]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	627b      	str	r3, [r7, #36]	@ 0x24
  		if (!(CardType & CT_BLOCK)) {
 800b7fe:	4b23      	ldr	r3, [pc, #140]	@ (800b88c <USER_SPI_ioctl+0x2dc>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	f003 0308 	and.w	r3, r3, #8
 800b806:	2b00      	cmp	r3, #0
 800b808:	d105      	bne.n	800b816 <USER_SPI_ioctl+0x266>
  			st *= 512; ed *= 512;
 800b80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80c:	025b      	lsls	r3, r3, #9
 800b80e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b812:	025b      	lsls	r3, r3, #9
 800b814:	627b      	str	r3, [r7, #36]	@ 0x24
  		}
  		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b818:	2020      	movs	r0, #32
 800b81a:	f7ff fc76 	bl	800b10a <send_cmd>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d128      	bne.n	800b876 <USER_SPI_ioctl+0x2c6>
 800b824:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b826:	2021      	movs	r0, #33	@ 0x21
 800b828:	f7ff fc6f 	bl	800b10a <send_cmd>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d121      	bne.n	800b876 <USER_SPI_ioctl+0x2c6>
 800b832:	2100      	movs	r1, #0
 800b834:	2026      	movs	r0, #38	@ 0x26
 800b836:	f7ff fc68 	bl	800b10a <send_cmd>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d11a      	bne.n	800b876 <USER_SPI_ioctl+0x2c6>
 800b840:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b844:	f7ff fbbb 	bl	800afbe <wait_ready>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d013      	beq.n	800b876 <USER_SPI_ioctl+0x2c6>
  			res = RES_OK;	/* FatFs does not check result of this command */
 800b84e:	2300      	movs	r3, #0
 800b850:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		}
  		break;
 800b854:	e00f      	b.n	800b876 <USER_SPI_ioctl+0x2c6>

  	default:
  		res = RES_PARERR;
 800b856:	2304      	movs	r3, #4
 800b858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b85c:	e00c      	b.n	800b878 <USER_SPI_ioctl+0x2c8>
  		break;
 800b85e:	bf00      	nop
 800b860:	e00a      	b.n	800b878 <USER_SPI_ioctl+0x2c8>
  		break;
 800b862:	bf00      	nop
 800b864:	e008      	b.n	800b878 <USER_SPI_ioctl+0x2c8>
  		break;
 800b866:	bf00      	nop
 800b868:	e006      	b.n	800b878 <USER_SPI_ioctl+0x2c8>
  		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b86a:	bf00      	nop
 800b86c:	e004      	b.n	800b878 <USER_SPI_ioctl+0x2c8>
  		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b86e:	bf00      	nop
 800b870:	e002      	b.n	800b878 <USER_SPI_ioctl+0x2c8>
  		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b872:	bf00      	nop
 800b874:	e000      	b.n	800b878 <USER_SPI_ioctl+0x2c8>
  		break;
 800b876:	bf00      	nop
  	}

  	despiselect();
 800b878:	f7ff fbc4 	bl	800b004 <despiselect>

  	return res;
 800b87c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
  }
 800b880:	4618      	mov	r0, r3
 800b882:	3730      	adds	r7, #48	@ 0x30
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	20000054 	.word	0x20000054
 800b88c:	20000abc 	.word	0x20000abc

0800b890 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	4603      	mov	r3, r0
 800b898:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b89a:	79fb      	ldrb	r3, [r7, #7]
 800b89c:	4a08      	ldr	r2, [pc, #32]	@ (800b8c0 <disk_status+0x30>)
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4413      	add	r3, r2
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	79fa      	ldrb	r2, [r7, #7]
 800b8a8:	4905      	ldr	r1, [pc, #20]	@ (800b8c0 <disk_status+0x30>)
 800b8aa:	440a      	add	r2, r1
 800b8ac:	7a12      	ldrb	r2, [r2, #8]
 800b8ae:	4610      	mov	r0, r2
 800b8b0:	4798      	blx	r3
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	20000af0 	.word	0x20000af0

0800b8c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b8d2:	79fb      	ldrb	r3, [r7, #7]
 800b8d4:	4a0d      	ldr	r2, [pc, #52]	@ (800b90c <disk_initialize+0x48>)
 800b8d6:	5cd3      	ldrb	r3, [r2, r3]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d111      	bne.n	800b900 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b8dc:	79fb      	ldrb	r3, [r7, #7]
 800b8de:	4a0b      	ldr	r2, [pc, #44]	@ (800b90c <disk_initialize+0x48>)
 800b8e0:	2101      	movs	r1, #1
 800b8e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b8e4:	79fb      	ldrb	r3, [r7, #7]
 800b8e6:	4a09      	ldr	r2, [pc, #36]	@ (800b90c <disk_initialize+0x48>)
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4413      	add	r3, r2
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	79fa      	ldrb	r2, [r7, #7]
 800b8f2:	4906      	ldr	r1, [pc, #24]	@ (800b90c <disk_initialize+0x48>)
 800b8f4:	440a      	add	r2, r1
 800b8f6:	7a12      	ldrb	r2, [r2, #8]
 800b8f8:	4610      	mov	r0, r2
 800b8fa:	4798      	blx	r3
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b900:	7bfb      	ldrb	r3, [r7, #15]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	20000af0 	.word	0x20000af0

0800b910 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b910:	b590      	push	{r4, r7, lr}
 800b912:	b087      	sub	sp, #28
 800b914:	af00      	add	r7, sp, #0
 800b916:	60b9      	str	r1, [r7, #8]
 800b918:	607a      	str	r2, [r7, #4]
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	4603      	mov	r3, r0
 800b91e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	4a0a      	ldr	r2, [pc, #40]	@ (800b94c <disk_read+0x3c>)
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	689c      	ldr	r4, [r3, #8]
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
 800b92e:	4a07      	ldr	r2, [pc, #28]	@ (800b94c <disk_read+0x3c>)
 800b930:	4413      	add	r3, r2
 800b932:	7a18      	ldrb	r0, [r3, #8]
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	68b9      	ldr	r1, [r7, #8]
 800b93a:	47a0      	blx	r4
 800b93c:	4603      	mov	r3, r0
 800b93e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
}
 800b942:	4618      	mov	r0, r3
 800b944:	371c      	adds	r7, #28
 800b946:	46bd      	mov	sp, r7
 800b948:	bd90      	pop	{r4, r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20000af0 	.word	0x20000af0

0800b950 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b950:	b590      	push	{r4, r7, lr}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	607a      	str	r2, [r7, #4]
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	4603      	mov	r3, r0
 800b95e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	4a0a      	ldr	r2, [pc, #40]	@ (800b98c <disk_write+0x3c>)
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4413      	add	r3, r2
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	68dc      	ldr	r4, [r3, #12]
 800b96c:	7bfb      	ldrb	r3, [r7, #15]
 800b96e:	4a07      	ldr	r2, [pc, #28]	@ (800b98c <disk_write+0x3c>)
 800b970:	4413      	add	r3, r2
 800b972:	7a18      	ldrb	r0, [r3, #8]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	68b9      	ldr	r1, [r7, #8]
 800b97a:	47a0      	blx	r4
 800b97c:	4603      	mov	r3, r0
 800b97e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b980:	7dfb      	ldrb	r3, [r7, #23]
}
 800b982:	4618      	mov	r0, r3
 800b984:	371c      	adds	r7, #28
 800b986:	46bd      	mov	sp, r7
 800b988:	bd90      	pop	{r4, r7, pc}
 800b98a:	bf00      	nop
 800b98c:	20000af0 	.word	0x20000af0

0800b990 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	603a      	str	r2, [r7, #0]
 800b99a:	71fb      	strb	r3, [r7, #7]
 800b99c:	460b      	mov	r3, r1
 800b99e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b9a0:	79fb      	ldrb	r3, [r7, #7]
 800b9a2:	4a09      	ldr	r2, [pc, #36]	@ (800b9c8 <disk_ioctl+0x38>)
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	79fa      	ldrb	r2, [r7, #7]
 800b9ae:	4906      	ldr	r1, [pc, #24]	@ (800b9c8 <disk_ioctl+0x38>)
 800b9b0:	440a      	add	r2, r1
 800b9b2:	7a10      	ldrb	r0, [r2, #8]
 800b9b4:	79b9      	ldrb	r1, [r7, #6]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	4798      	blx	r3
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	20000af0 	.word	0x20000af0

0800b9cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b9dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b9e0:	021b      	lsls	r3, r3, #8
 800b9e2:	b21a      	sxth	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	b21b      	sxth	r3, r3
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	b21b      	sxth	r3, r3
 800b9ee:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b9f0:	89fb      	ldrh	r3, [r7, #14]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3714      	adds	r7, #20
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b085      	sub	sp, #20
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	3303      	adds	r3, #3
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	021b      	lsls	r3, r3, #8
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	3202      	adds	r2, #2
 800ba16:	7812      	ldrb	r2, [r2, #0]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	021b      	lsls	r3, r3, #8
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	3201      	adds	r2, #1
 800ba24:	7812      	ldrb	r2, [r2, #0]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	021b      	lsls	r3, r3, #8
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	7812      	ldrb	r2, [r2, #0]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba36:	68fb      	ldr	r3, [r7, #12]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	607a      	str	r2, [r7, #4]
 800ba56:	887a      	ldrh	r2, [r7, #2]
 800ba58:	b2d2      	uxtb	r2, r2
 800ba5a:	701a      	strb	r2, [r3, #0]
 800ba5c:	887b      	ldrh	r3, [r7, #2]
 800ba5e:	0a1b      	lsrs	r3, r3, #8
 800ba60:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	607a      	str	r2, [r7, #4]
 800ba68:	887a      	ldrh	r2, [r7, #2]
 800ba6a:	b2d2      	uxtb	r2, r2
 800ba6c:	701a      	strb	r2, [r3, #0]
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b083      	sub	sp, #12
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
 800ba82:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	1c5a      	adds	r2, r3, #1
 800ba88:	607a      	str	r2, [r7, #4]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	b2d2      	uxtb	r2, r2
 800ba8e:	701a      	strb	r2, [r3, #0]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	0a1b      	lsrs	r3, r3, #8
 800ba94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	1c5a      	adds	r2, r3, #1
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	b2d2      	uxtb	r2, r2
 800baa0:	701a      	strb	r2, [r3, #0]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	0a1b      	lsrs	r3, r3, #8
 800baa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	1c5a      	adds	r2, r3, #1
 800baac:	607a      	str	r2, [r7, #4]
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	b2d2      	uxtb	r2, r2
 800bab2:	701a      	strb	r2, [r3, #0]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	0a1b      	lsrs	r3, r3, #8
 800bab8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	607a      	str	r2, [r7, #4]
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	b2d2      	uxtb	r2, r2
 800bac4:	701a      	strb	r2, [r3, #0]
}
 800bac6:	bf00      	nop
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bad2:	b480      	push	{r7}
 800bad4:	b087      	sub	sp, #28
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00d      	beq.n	800bb08 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800baec:	693a      	ldr	r2, [r7, #16]
 800baee:	1c53      	adds	r3, r2, #1
 800baf0:	613b      	str	r3, [r7, #16]
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	1c59      	adds	r1, r3, #1
 800baf6:	6179      	str	r1, [r7, #20]
 800baf8:	7812      	ldrb	r2, [r2, #0]
 800bafa:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1f1      	bne.n	800baec <mem_cpy+0x1a>
	}
}
 800bb08:	bf00      	nop
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bb14:	b480      	push	{r7}
 800bb16:	b087      	sub	sp, #28
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	617a      	str	r2, [r7, #20]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	b2d2      	uxtb	r2, r2
 800bb2e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3b01      	subs	r3, #1
 800bb34:	607b      	str	r3, [r7, #4]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1f3      	bne.n	800bb24 <mem_set+0x10>
}
 800bb3c:	bf00      	nop
 800bb3e:	bf00      	nop
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bb4a:	b480      	push	{r7}
 800bb4c:	b089      	sub	sp, #36	@ 0x24
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	60f8      	str	r0, [r7, #12]
 800bb52:	60b9      	str	r1, [r7, #8]
 800bb54:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	61fb      	str	r3, [r7, #28]
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	1c5a      	adds	r2, r3, #1
 800bb66:	61fa      	str	r2, [r7, #28]
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	61ba      	str	r2, [r7, #24]
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	1acb      	subs	r3, r1, r3
 800bb76:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	607b      	str	r3, [r7, #4]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <mem_cmp+0x40>
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d0eb      	beq.n	800bb62 <mem_cmp+0x18>

	return r;
 800bb8a:	697b      	ldr	r3, [r7, #20]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3724      	adds	r7, #36	@ 0x24
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bba2:	e002      	b.n	800bbaa <chk_chr+0x12>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	3301      	adds	r3, #1
 800bba8:	607b      	str	r3, [r7, #4]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d005      	beq.n	800bbbe <chk_chr+0x26>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d1f2      	bne.n	800bba4 <chk_chr+0xc>
	return *str;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	370c      	adds	r7, #12
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr

0800bbce <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b082      	sub	sp, #8
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d009      	beq.n	800bbf0 <lock_fs+0x22>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f002 fb7b 	bl	800e2dc <ff_req_grant>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <lock_fs+0x22>
 800bbec:	2301      	movs	r3, #1
 800bbee:	e000      	b.n	800bbf2 <lock_fs+0x24>
 800bbf0:	2300      	movs	r3, #0
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b082      	sub	sp, #8
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	460b      	mov	r3, r1
 800bc04:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00d      	beq.n	800bc28 <unlock_fs+0x2e>
 800bc0c:	78fb      	ldrb	r3, [r7, #3]
 800bc0e:	2b0c      	cmp	r3, #12
 800bc10:	d00a      	beq.n	800bc28 <unlock_fs+0x2e>
 800bc12:	78fb      	ldrb	r3, [r7, #3]
 800bc14:	2b0b      	cmp	r3, #11
 800bc16:	d007      	beq.n	800bc28 <unlock_fs+0x2e>
 800bc18:	78fb      	ldrb	r3, [r7, #3]
 800bc1a:	2b0f      	cmp	r3, #15
 800bc1c:	d004      	beq.n	800bc28 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	4618      	mov	r0, r3
 800bc24:	f002 fb6f 	bl	800e306 <ff_rel_grant>
	}
}
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60bb      	str	r3, [r7, #8]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	e029      	b.n	800bc98 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bc44:	4a27      	ldr	r2, [pc, #156]	@ (800bce4 <chk_lock+0xb4>)
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	011b      	lsls	r3, r3, #4
 800bc4a:	4413      	add	r3, r2
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d01d      	beq.n	800bc8e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc52:	4a24      	ldr	r2, [pc, #144]	@ (800bce4 <chk_lock+0xb4>)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	011b      	lsls	r3, r3, #4
 800bc58:	4413      	add	r3, r2
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d116      	bne.n	800bc92 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bc64:	4a1f      	ldr	r2, [pc, #124]	@ (800bce4 <chk_lock+0xb4>)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	011b      	lsls	r3, r3, #4
 800bc6a:	4413      	add	r3, r2
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d10c      	bne.n	800bc92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc78:	4a1a      	ldr	r2, [pc, #104]	@ (800bce4 <chk_lock+0xb4>)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	011b      	lsls	r3, r3, #4
 800bc7e:	4413      	add	r3, r2
 800bc80:	3308      	adds	r3, #8
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d102      	bne.n	800bc92 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc8c:	e007      	b.n	800bc9e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	3301      	adds	r3, #1
 800bc96:	60fb      	str	r3, [r7, #12]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d9d2      	bls.n	800bc44 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d109      	bne.n	800bcb8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d102      	bne.n	800bcb0 <chk_lock+0x80>
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b02      	cmp	r3, #2
 800bcae:	d101      	bne.n	800bcb4 <chk_lock+0x84>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	e010      	b.n	800bcd6 <chk_lock+0xa6>
 800bcb4:	2312      	movs	r3, #18
 800bcb6:	e00e      	b.n	800bcd6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d108      	bne.n	800bcd0 <chk_lock+0xa0>
 800bcbe:	4a09      	ldr	r2, [pc, #36]	@ (800bce4 <chk_lock+0xb4>)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	011b      	lsls	r3, r3, #4
 800bcc4:	4413      	add	r3, r2
 800bcc6:	330c      	adds	r3, #12
 800bcc8:	881b      	ldrh	r3, [r3, #0]
 800bcca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcce:	d101      	bne.n	800bcd4 <chk_lock+0xa4>
 800bcd0:	2310      	movs	r3, #16
 800bcd2:	e000      	b.n	800bcd6 <chk_lock+0xa6>
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3714      	adds	r7, #20
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	20000ad0 	.word	0x20000ad0

0800bce8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	607b      	str	r3, [r7, #4]
 800bcf2:	e002      	b.n	800bcfa <enq_lock+0x12>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	607b      	str	r3, [r7, #4]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d806      	bhi.n	800bd0e <enq_lock+0x26>
 800bd00:	4a09      	ldr	r2, [pc, #36]	@ (800bd28 <enq_lock+0x40>)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	011b      	lsls	r3, r3, #4
 800bd06:	4413      	add	r3, r2
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d1f2      	bne.n	800bcf4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	bf14      	ite	ne
 800bd14:	2301      	movne	r3, #1
 800bd16:	2300      	moveq	r3, #0
 800bd18:	b2db      	uxtb	r3, r3
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	20000ad0 	.word	0x20000ad0

0800bd2c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd36:	2300      	movs	r3, #0
 800bd38:	60fb      	str	r3, [r7, #12]
 800bd3a:	e01f      	b.n	800bd7c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bd3c:	4a41      	ldr	r2, [pc, #260]	@ (800be44 <inc_lock+0x118>)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	011b      	lsls	r3, r3, #4
 800bd42:	4413      	add	r3, r2
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d113      	bne.n	800bd76 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bd4e:	4a3d      	ldr	r2, [pc, #244]	@ (800be44 <inc_lock+0x118>)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	011b      	lsls	r3, r3, #4
 800bd54:	4413      	add	r3, r2
 800bd56:	3304      	adds	r3, #4
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d109      	bne.n	800bd76 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bd62:	4a38      	ldr	r2, [pc, #224]	@ (800be44 <inc_lock+0x118>)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	4413      	add	r3, r2
 800bd6a:	3308      	adds	r3, #8
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d006      	beq.n	800bd84 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d9dc      	bls.n	800bd3c <inc_lock+0x10>
 800bd82:	e000      	b.n	800bd86 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bd84:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d132      	bne.n	800bdf2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	60fb      	str	r3, [r7, #12]
 800bd90:	e002      	b.n	800bd98 <inc_lock+0x6c>
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	3301      	adds	r3, #1
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d806      	bhi.n	800bdac <inc_lock+0x80>
 800bd9e:	4a29      	ldr	r2, [pc, #164]	@ (800be44 <inc_lock+0x118>)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	011b      	lsls	r3, r3, #4
 800bda4:	4413      	add	r3, r2
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1f2      	bne.n	800bd92 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d101      	bne.n	800bdb6 <inc_lock+0x8a>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e040      	b.n	800be38 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	4922      	ldr	r1, [pc, #136]	@ (800be44 <inc_lock+0x118>)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	011b      	lsls	r3, r3, #4
 800bdc0:	440b      	add	r3, r1
 800bdc2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	689a      	ldr	r2, [r3, #8]
 800bdc8:	491e      	ldr	r1, [pc, #120]	@ (800be44 <inc_lock+0x118>)
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	011b      	lsls	r3, r3, #4
 800bdce:	440b      	add	r3, r1
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	695a      	ldr	r2, [r3, #20]
 800bdd8:	491a      	ldr	r1, [pc, #104]	@ (800be44 <inc_lock+0x118>)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	011b      	lsls	r3, r3, #4
 800bdde:	440b      	add	r3, r1
 800bde0:	3308      	adds	r3, #8
 800bde2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bde4:	4a17      	ldr	r2, [pc, #92]	@ (800be44 <inc_lock+0x118>)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	4413      	add	r3, r2
 800bdec:	330c      	adds	r3, #12
 800bdee:	2200      	movs	r2, #0
 800bdf0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d009      	beq.n	800be0c <inc_lock+0xe0>
 800bdf8:	4a12      	ldr	r2, [pc, #72]	@ (800be44 <inc_lock+0x118>)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	011b      	lsls	r3, r3, #4
 800bdfe:	4413      	add	r3, r2
 800be00:	330c      	adds	r3, #12
 800be02:	881b      	ldrh	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <inc_lock+0xe0>
 800be08:	2300      	movs	r3, #0
 800be0a:	e015      	b.n	800be38 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d108      	bne.n	800be24 <inc_lock+0xf8>
 800be12:	4a0c      	ldr	r2, [pc, #48]	@ (800be44 <inc_lock+0x118>)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	011b      	lsls	r3, r3, #4
 800be18:	4413      	add	r3, r2
 800be1a:	330c      	adds	r3, #12
 800be1c:	881b      	ldrh	r3, [r3, #0]
 800be1e:	3301      	adds	r3, #1
 800be20:	b29a      	uxth	r2, r3
 800be22:	e001      	b.n	800be28 <inc_lock+0xfc>
 800be24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800be28:	4906      	ldr	r1, [pc, #24]	@ (800be44 <inc_lock+0x118>)
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	011b      	lsls	r3, r3, #4
 800be2e:	440b      	add	r3, r1
 800be30:	330c      	adds	r3, #12
 800be32:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3301      	adds	r3, #1
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	20000ad0 	.word	0x20000ad0

0800be48 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800be48:	b480      	push	{r7}
 800be4a:	b085      	sub	sp, #20
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3b01      	subs	r3, #1
 800be54:	607b      	str	r3, [r7, #4]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d825      	bhi.n	800bea8 <dec_lock+0x60>
		n = Files[i].ctr;
 800be5c:	4a17      	ldr	r2, [pc, #92]	@ (800bebc <dec_lock+0x74>)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	011b      	lsls	r3, r3, #4
 800be62:	4413      	add	r3, r2
 800be64:	330c      	adds	r3, #12
 800be66:	881b      	ldrh	r3, [r3, #0]
 800be68:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800be6a:	89fb      	ldrh	r3, [r7, #14]
 800be6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be70:	d101      	bne.n	800be76 <dec_lock+0x2e>
 800be72:	2300      	movs	r3, #0
 800be74:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800be76:	89fb      	ldrh	r3, [r7, #14]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <dec_lock+0x3a>
 800be7c:	89fb      	ldrh	r3, [r7, #14]
 800be7e:	3b01      	subs	r3, #1
 800be80:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800be82:	4a0e      	ldr	r2, [pc, #56]	@ (800bebc <dec_lock+0x74>)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	011b      	lsls	r3, r3, #4
 800be88:	4413      	add	r3, r2
 800be8a:	330c      	adds	r3, #12
 800be8c:	89fa      	ldrh	r2, [r7, #14]
 800be8e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800be90:	89fb      	ldrh	r3, [r7, #14]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d105      	bne.n	800bea2 <dec_lock+0x5a>
 800be96:	4a09      	ldr	r2, [pc, #36]	@ (800bebc <dec_lock+0x74>)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	4413      	add	r3, r2
 800be9e:	2200      	movs	r2, #0
 800bea0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	737b      	strb	r3, [r7, #13]
 800bea6:	e001      	b.n	800beac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bea8:	2302      	movs	r3, #2
 800beaa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800beac:	7b7b      	ldrb	r3, [r7, #13]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	20000ad0 	.word	0x20000ad0

0800bec0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bec8:	2300      	movs	r3, #0
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	e010      	b.n	800bef0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bece:	4a0d      	ldr	r2, [pc, #52]	@ (800bf04 <clear_lock+0x44>)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	011b      	lsls	r3, r3, #4
 800bed4:	4413      	add	r3, r2
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d105      	bne.n	800beea <clear_lock+0x2a>
 800bede:	4a09      	ldr	r2, [pc, #36]	@ (800bf04 <clear_lock+0x44>)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	011b      	lsls	r3, r3, #4
 800bee4:	4413      	add	r3, r2
 800bee6:	2200      	movs	r2, #0
 800bee8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3301      	adds	r3, #1
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d9eb      	bls.n	800bece <clear_lock+0xe>
	}
}
 800bef6:	bf00      	nop
 800bef8:	bf00      	nop
 800befa:	3714      	adds	r7, #20
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr
 800bf04:	20000ad0 	.word	0x20000ad0

0800bf08 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	78db      	ldrb	r3, [r3, #3]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d034      	beq.n	800bf86 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	7858      	ldrb	r0, [r3, #1]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	f7ff fd0e 	bl	800b950 <disk_write>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d002      	beq.n	800bf40 <sync_window+0x38>
			res = FR_DISK_ERR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	73fb      	strb	r3, [r7, #15]
 800bf3e:	e022      	b.n	800bf86 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf4a:	697a      	ldr	r2, [r7, #20]
 800bf4c:	1ad2      	subs	r2, r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d217      	bcs.n	800bf86 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	789b      	ldrb	r3, [r3, #2]
 800bf5a:	613b      	str	r3, [r7, #16]
 800bf5c:	e010      	b.n	800bf80 <sync_window+0x78>
					wsect += fs->fsize;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	69db      	ldr	r3, [r3, #28]
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	4413      	add	r3, r2
 800bf66:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	7858      	ldrb	r0, [r3, #1]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bf72:	2301      	movs	r3, #1
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	f7ff fceb 	bl	800b950 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	613b      	str	r3, [r7, #16]
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d8eb      	bhi.n	800bf5e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bf86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d01b      	beq.n	800bfe0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff ffad 	bl	800bf08 <sync_window>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bfb2:	7bfb      	ldrb	r3, [r7, #15]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d113      	bne.n	800bfe0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	7858      	ldrb	r0, [r3, #1]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	683a      	ldr	r2, [r7, #0]
 800bfc6:	f7ff fca3 	bl	800b910 <disk_read>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d004      	beq.n	800bfda <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bfd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfd4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	683a      	ldr	r2, [r7, #0]
 800bfde:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800bfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
	...

0800bfec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f7ff ff87 	bl	800bf08 <sync_window>
 800bffa:	4603      	mov	r3, r0
 800bffc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d158      	bne.n	800c0b6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	2b03      	cmp	r3, #3
 800c00a:	d148      	bne.n	800c09e <sync_fs+0xb2>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	791b      	ldrb	r3, [r3, #4]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d144      	bne.n	800c09e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	3334      	adds	r3, #52	@ 0x34
 800c018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c01c:	2100      	movs	r1, #0
 800c01e:	4618      	mov	r0, r3
 800c020:	f7ff fd78 	bl	800bb14 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3334      	adds	r3, #52	@ 0x34
 800c028:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c02c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800c030:	4618      	mov	r0, r3
 800c032:	f7ff fd07 	bl	800ba44 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	3334      	adds	r3, #52	@ 0x34
 800c03a:	4921      	ldr	r1, [pc, #132]	@ (800c0c0 <sync_fs+0xd4>)
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fd1c 	bl	800ba7a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	3334      	adds	r3, #52	@ 0x34
 800c046:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c04a:	491e      	ldr	r1, [pc, #120]	@ (800c0c4 <sync_fs+0xd8>)
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff fd14 	bl	800ba7a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3334      	adds	r3, #52	@ 0x34
 800c056:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	4619      	mov	r1, r3
 800c060:	4610      	mov	r0, r2
 800c062:	f7ff fd0a 	bl	800ba7a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	3334      	adds	r3, #52	@ 0x34
 800c06a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	4619      	mov	r1, r3
 800c074:	4610      	mov	r0, r2
 800c076:	f7ff fd00 	bl	800ba7a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6a1b      	ldr	r3, [r3, #32]
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	7858      	ldrb	r0, [r3, #1]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c092:	2301      	movs	r3, #1
 800c094:	f7ff fc5c 	bl	800b950 <disk_write>
			fs->fsi_flag = 0;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	785b      	ldrb	r3, [r3, #1]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff fc72 	bl	800b990 <disk_ioctl>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d001      	beq.n	800c0b6 <sync_fs+0xca>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	41615252 	.word	0x41615252
 800c0c4:	61417272 	.word	0x61417272

0800c0c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	3b02      	subs	r3, #2
 800c0d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	3b02      	subs	r3, #2
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d301      	bcc.n	800c0e8 <clust2sect+0x20>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	e008      	b.n	800c0fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	895b      	ldrh	r3, [r3, #10]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	fb03 f202 	mul.w	r2, r3, r2
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0f8:	4413      	add	r3, r2
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b086      	sub	sp, #24
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d904      	bls.n	800c126 <get_fat+0x20>
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	683a      	ldr	r2, [r7, #0]
 800c122:	429a      	cmp	r2, r3
 800c124:	d302      	bcc.n	800c12c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c126:	2301      	movs	r3, #1
 800c128:	617b      	str	r3, [r7, #20]
 800c12a:	e08e      	b.n	800c24a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c12c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c130:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	2b03      	cmp	r3, #3
 800c138:	d061      	beq.n	800c1fe <get_fat+0xf8>
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	dc7b      	bgt.n	800c236 <get_fat+0x130>
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d002      	beq.n	800c148 <get_fat+0x42>
 800c142:	2b02      	cmp	r3, #2
 800c144:	d041      	beq.n	800c1ca <get_fat+0xc4>
 800c146:	e076      	b.n	800c236 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	085b      	lsrs	r3, r3, #1
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	4413      	add	r3, r2
 800c154:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	0a5b      	lsrs	r3, r3, #9
 800c15e:	4413      	add	r3, r2
 800c160:	4619      	mov	r1, r3
 800c162:	6938      	ldr	r0, [r7, #16]
 800c164:	f7ff ff14 	bl	800bf90 <move_window>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d166      	bne.n	800c23c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	60fa      	str	r2, [r7, #12]
 800c174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c178:	693a      	ldr	r2, [r7, #16]
 800c17a:	4413      	add	r3, r2
 800c17c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c180:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	0a5b      	lsrs	r3, r3, #9
 800c18a:	4413      	add	r3, r2
 800c18c:	4619      	mov	r1, r3
 800c18e:	6938      	ldr	r0, [r7, #16]
 800c190:	f7ff fefe 	bl	800bf90 <move_window>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d152      	bne.n	800c240 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c1a8:	021b      	lsls	r3, r3, #8
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	f003 0301 	and.w	r3, r3, #1
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d002      	beq.n	800c1c0 <get_fat+0xba>
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	091b      	lsrs	r3, r3, #4
 800c1be:	e002      	b.n	800c1c6 <get_fat+0xc0>
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1c6:	617b      	str	r3, [r7, #20]
			break;
 800c1c8:	e03f      	b.n	800c24a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	0a1b      	lsrs	r3, r3, #8
 800c1d2:	4413      	add	r3, r2
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6938      	ldr	r0, [r7, #16]
 800c1d8:	f7ff feda 	bl	800bf90 <move_window>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d130      	bne.n	800c244 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	005b      	lsls	r3, r3, #1
 800c1ec:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c1f0:	4413      	add	r3, r2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff fbea 	bl	800b9cc <ld_word>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	617b      	str	r3, [r7, #20]
			break;
 800c1fc:	e025      	b.n	800c24a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	09db      	lsrs	r3, r3, #7
 800c206:	4413      	add	r3, r2
 800c208:	4619      	mov	r1, r3
 800c20a:	6938      	ldr	r0, [r7, #16]
 800c20c:	f7ff fec0 	bl	800bf90 <move_window>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d118      	bne.n	800c248 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c224:	4413      	add	r3, r2
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff fbe9 	bl	800b9fe <ld_dword>
 800c22c:	4603      	mov	r3, r0
 800c22e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c232:	617b      	str	r3, [r7, #20]
			break;
 800c234:	e009      	b.n	800c24a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c236:	2301      	movs	r3, #1
 800c238:	617b      	str	r3, [r7, #20]
 800c23a:	e006      	b.n	800c24a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c23c:	bf00      	nop
 800c23e:	e004      	b.n	800c24a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c240:	bf00      	nop
 800c242:	e002      	b.n	800c24a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c244:	bf00      	nop
 800c246:	e000      	b.n	800c24a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c248:	bf00      	nop
		}
	}

	return val;
 800c24a:	697b      	ldr	r3, [r7, #20]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3718      	adds	r7, #24
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c254:	b590      	push	{r4, r7, lr}
 800c256:	b089      	sub	sp, #36	@ 0x24
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c260:	2302      	movs	r3, #2
 800c262:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	2b01      	cmp	r3, #1
 800c268:	f240 80d9 	bls.w	800c41e <put_fat+0x1ca>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	429a      	cmp	r2, r3
 800c274:	f080 80d3 	bcs.w	800c41e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	2b03      	cmp	r3, #3
 800c27e:	f000 8096 	beq.w	800c3ae <put_fat+0x15a>
 800c282:	2b03      	cmp	r3, #3
 800c284:	f300 80cb 	bgt.w	800c41e <put_fat+0x1ca>
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d002      	beq.n	800c292 <put_fat+0x3e>
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d06e      	beq.n	800c36e <put_fat+0x11a>
 800c290:	e0c5      	b.n	800c41e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	61bb      	str	r3, [r7, #24]
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	085b      	lsrs	r3, r3, #1
 800c29a:	69ba      	ldr	r2, [r7, #24]
 800c29c:	4413      	add	r3, r2
 800c29e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	0a5b      	lsrs	r3, r3, #9
 800c2a8:	4413      	add	r3, r2
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f7ff fe6f 	bl	800bf90 <move_window>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2b6:	7ffb      	ldrb	r3, [r7, #31]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	f040 80a9 	bne.w	800c410 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	1c59      	adds	r1, r3, #1
 800c2c8:	61b9      	str	r1, [r7, #24]
 800c2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2ce:	4413      	add	r3, r2
 800c2d0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00d      	beq.n	800c2f8 <put_fat+0xa4>
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	b25b      	sxtb	r3, r3
 800c2e2:	f003 030f 	and.w	r3, r3, #15
 800c2e6:	b25a      	sxtb	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	b25b      	sxtb	r3, r3
 800c2ec:	011b      	lsls	r3, r3, #4
 800c2ee:	b25b      	sxtb	r3, r3
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	b25b      	sxtb	r3, r3
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	e001      	b.n	800c2fc <put_fat+0xa8>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	697a      	ldr	r2, [r7, #20]
 800c2fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2201      	movs	r2, #1
 800c304:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	0a5b      	lsrs	r3, r3, #9
 800c30e:	4413      	add	r3, r2
 800c310:	4619      	mov	r1, r3
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f7ff fe3c 	bl	800bf90 <move_window>
 800c318:	4603      	mov	r3, r0
 800c31a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c31c:	7ffb      	ldrb	r3, [r7, #31]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d178      	bne.n	800c414 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c32e:	4413      	add	r3, r2
 800c330:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	f003 0301 	and.w	r3, r3, #1
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d003      	beq.n	800c344 <put_fat+0xf0>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	091b      	lsrs	r3, r3, #4
 800c340:	b2db      	uxtb	r3, r3
 800c342:	e00e      	b.n	800c362 <put_fat+0x10e>
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	b25b      	sxtb	r3, r3
 800c34a:	f023 030f 	bic.w	r3, r3, #15
 800c34e:	b25a      	sxtb	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	0a1b      	lsrs	r3, r3, #8
 800c354:	b25b      	sxtb	r3, r3
 800c356:	f003 030f 	and.w	r3, r3, #15
 800c35a:	b25b      	sxtb	r3, r3
 800c35c:	4313      	orrs	r3, r2
 800c35e:	b25b      	sxtb	r3, r3
 800c360:	b2db      	uxtb	r3, r3
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2201      	movs	r2, #1
 800c36a:	70da      	strb	r2, [r3, #3]
			break;
 800c36c:	e057      	b.n	800c41e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	0a1b      	lsrs	r3, r3, #8
 800c376:	4413      	add	r3, r2
 800c378:	4619      	mov	r1, r3
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f7ff fe08 	bl	800bf90 <move_window>
 800c380:	4603      	mov	r3, r0
 800c382:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c384:	7ffb      	ldrb	r3, [r7, #31]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d146      	bne.n	800c418 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	005b      	lsls	r3, r3, #1
 800c394:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c398:	4413      	add	r3, r2
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	b292      	uxth	r2, r2
 800c39e:	4611      	mov	r1, r2
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff fb4f 	bl	800ba44 <st_word>
			fs->wflag = 1;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	70da      	strb	r2, [r3, #3]
			break;
 800c3ac:	e037      	b.n	800c41e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	09db      	lsrs	r3, r3, #7
 800c3b6:	4413      	add	r3, r2
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	f7ff fde8 	bl	800bf90 <move_window>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3c4:	7ffb      	ldrb	r3, [r7, #31]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d128      	bne.n	800c41c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c3de:	4413      	add	r3, r2
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7ff fb0c 	bl	800b9fe <ld_dword>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c3ec:	4323      	orrs	r3, r4
 800c3ee:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c3fe:	4413      	add	r3, r2
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	4618      	mov	r0, r3
 800c404:	f7ff fb39 	bl	800ba7a <st_dword>
			fs->wflag = 1;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2201      	movs	r2, #1
 800c40c:	70da      	strb	r2, [r3, #3]
			break;
 800c40e:	e006      	b.n	800c41e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c410:	bf00      	nop
 800c412:	e004      	b.n	800c41e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c414:	bf00      	nop
 800c416:	e002      	b.n	800c41e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c418:	bf00      	nop
 800c41a:	e000      	b.n	800c41e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c41c:	bf00      	nop
		}
	}
	return res;
 800c41e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3724      	adds	r7, #36	@ 0x24
 800c424:	46bd      	mov	sp, r7
 800c426:	bd90      	pop	{r4, r7, pc}

0800c428 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b088      	sub	sp, #32
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d904      	bls.n	800c44e <remove_chain+0x26>
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d301      	bcc.n	800c452 <remove_chain+0x2a>
 800c44e:	2302      	movs	r3, #2
 800c450:	e04b      	b.n	800c4ea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00c      	beq.n	800c472 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c45c:	6879      	ldr	r1, [r7, #4]
 800c45e:	69b8      	ldr	r0, [r7, #24]
 800c460:	f7ff fef8 	bl	800c254 <put_fat>
 800c464:	4603      	mov	r3, r0
 800c466:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c468:	7ffb      	ldrb	r3, [r7, #31]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d001      	beq.n	800c472 <remove_chain+0x4a>
 800c46e:	7ffb      	ldrb	r3, [r7, #31]
 800c470:	e03b      	b.n	800c4ea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c472:	68b9      	ldr	r1, [r7, #8]
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	f7ff fe46 	bl	800c106 <get_fat>
 800c47a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d031      	beq.n	800c4e6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d101      	bne.n	800c48c <remove_chain+0x64>
 800c488:	2302      	movs	r3, #2
 800c48a:	e02e      	b.n	800c4ea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c492:	d101      	bne.n	800c498 <remove_chain+0x70>
 800c494:	2301      	movs	r3, #1
 800c496:	e028      	b.n	800c4ea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c498:	2200      	movs	r2, #0
 800c49a:	68b9      	ldr	r1, [r7, #8]
 800c49c:	69b8      	ldr	r0, [r7, #24]
 800c49e:	f7ff fed9 	bl	800c254 <put_fat>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c4a6:	7ffb      	ldrb	r3, [r7, #31]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <remove_chain+0x88>
 800c4ac:	7ffb      	ldrb	r3, [r7, #31]
 800c4ae:	e01c      	b.n	800c4ea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	695a      	ldr	r2, [r3, #20]
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	699b      	ldr	r3, [r3, #24]
 800c4b8:	3b02      	subs	r3, #2
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d20b      	bcs.n	800c4d6 <remove_chain+0xae>
			fs->free_clst++;
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	69bb      	ldr	r3, [r7, #24]
 800c4c6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	791b      	ldrb	r3, [r3, #4]
 800c4cc:	f043 0301 	orr.w	r3, r3, #1
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	699b      	ldr	r3, [r3, #24]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d3c6      	bcc.n	800c472 <remove_chain+0x4a>
 800c4e4:	e000      	b.n	800c4e8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c4e6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3720      	adds	r7, #32
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b088      	sub	sp, #32
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10d      	bne.n	800c524 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <create_chain+0x2c>
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	699b      	ldr	r3, [r3, #24]
 800c518:	69ba      	ldr	r2, [r7, #24]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d31b      	bcc.n	800c556 <create_chain+0x64>
 800c51e:	2301      	movs	r3, #1
 800c520:	61bb      	str	r3, [r7, #24]
 800c522:	e018      	b.n	800c556 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7ff fded 	bl	800c106 <get_fat>
 800c52c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2b01      	cmp	r3, #1
 800c532:	d801      	bhi.n	800c538 <create_chain+0x46>
 800c534:	2301      	movs	r3, #1
 800c536:	e070      	b.n	800c61a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c53e:	d101      	bne.n	800c544 <create_chain+0x52>
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	e06a      	b.n	800c61a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d201      	bcs.n	800c552 <create_chain+0x60>
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	e063      	b.n	800c61a <create_chain+0x128>
		scl = clst;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	3301      	adds	r3, #1
 800c55e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	69fa      	ldr	r2, [r7, #28]
 800c566:	429a      	cmp	r2, r3
 800c568:	d307      	bcc.n	800c57a <create_chain+0x88>
				ncl = 2;
 800c56a:	2302      	movs	r3, #2
 800c56c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c56e:	69fa      	ldr	r2, [r7, #28]
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	429a      	cmp	r2, r3
 800c574:	d901      	bls.n	800c57a <create_chain+0x88>
 800c576:	2300      	movs	r3, #0
 800c578:	e04f      	b.n	800c61a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c57a:	69f9      	ldr	r1, [r7, #28]
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff fdc2 	bl	800c106 <get_fat>
 800c582:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00e      	beq.n	800c5a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d003      	beq.n	800c598 <create_chain+0xa6>
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c596:	d101      	bne.n	800c59c <create_chain+0xaa>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	e03e      	b.n	800c61a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c59c:	69fa      	ldr	r2, [r7, #28]
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d1da      	bne.n	800c55a <create_chain+0x68>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e038      	b.n	800c61a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c5a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c5aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c5ae:	69f9      	ldr	r1, [r7, #28]
 800c5b0:	6938      	ldr	r0, [r7, #16]
 800c5b2:	f7ff fe4f 	bl	800c254 <put_fat>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c5ba:	7dfb      	ldrb	r3, [r7, #23]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d109      	bne.n	800c5d4 <create_chain+0xe2>
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d006      	beq.n	800c5d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	6938      	ldr	r0, [r7, #16]
 800c5cc:	f7ff fe42 	bl	800c254 <put_fat>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c5d4:	7dfb      	ldrb	r3, [r7, #23]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d116      	bne.n	800c608 <create_chain+0x116>
		fs->last_clst = ncl;
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	69fa      	ldr	r2, [r7, #28]
 800c5de:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	695a      	ldr	r2, [r3, #20]
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	3b02      	subs	r3, #2
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d804      	bhi.n	800c5f8 <create_chain+0x106>
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	695b      	ldr	r3, [r3, #20]
 800c5f2:	1e5a      	subs	r2, r3, #1
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	791b      	ldrb	r3, [r3, #4]
 800c5fc:	f043 0301 	orr.w	r3, r3, #1
 800c600:	b2da      	uxtb	r2, r3
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	711a      	strb	r2, [r3, #4]
 800c606:	e007      	b.n	800c618 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c608:	7dfb      	ldrb	r3, [r7, #23]
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d102      	bne.n	800c614 <create_chain+0x122>
 800c60e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c612:	e000      	b.n	800c616 <create_chain+0x124>
 800c614:	2301      	movs	r3, #1
 800c616:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c618:	69fb      	ldr	r3, [r7, #28]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3720      	adds	r7, #32
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c622:	b480      	push	{r7}
 800c624:	b087      	sub	sp, #28
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c636:	3304      	adds	r3, #4
 800c638:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	0a5b      	lsrs	r3, r3, #9
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	8952      	ldrh	r2, [r2, #10]
 800c642:	fbb3 f3f2 	udiv	r3, r3, r2
 800c646:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	1d1a      	adds	r2, r3, #4
 800c64c:	613a      	str	r2, [r7, #16]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d101      	bne.n	800c65c <clmt_clust+0x3a>
 800c658:	2300      	movs	r3, #0
 800c65a:	e010      	b.n	800c67e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	429a      	cmp	r2, r3
 800c662:	d307      	bcc.n	800c674 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	617b      	str	r3, [r7, #20]
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	3304      	adds	r3, #4
 800c670:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c672:	e7e9      	b.n	800c648 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c674:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	4413      	add	r3, r2
}
 800c67e:	4618      	mov	r0, r3
 800c680:	371c      	adds	r7, #28
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b086      	sub	sp, #24
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
 800c692:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c6a0:	d204      	bcs.n	800c6ac <dir_sdi+0x22>
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	f003 031f 	and.w	r3, r3, #31
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d001      	beq.n	800c6b0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	e063      	b.n	800c778 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d106      	bne.n	800c6d0 <dir_sdi+0x46>
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d902      	bls.n	800c6d0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10c      	bne.n	800c6f0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	095b      	lsrs	r3, r3, #5
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	8912      	ldrh	r2, [r2, #8]
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	d301      	bcc.n	800c6e6 <dir_sdi+0x5c>
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	e048      	b.n	800c778 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	61da      	str	r2, [r3, #28]
 800c6ee:	e029      	b.n	800c744 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	895b      	ldrh	r3, [r3, #10]
 800c6f4:	025b      	lsls	r3, r3, #9
 800c6f6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6f8:	e019      	b.n	800c72e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6979      	ldr	r1, [r7, #20]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7ff fd01 	bl	800c106 <get_fat>
 800c704:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c70c:	d101      	bne.n	800c712 <dir_sdi+0x88>
 800c70e:	2301      	movs	r3, #1
 800c710:	e032      	b.n	800c778 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	2b01      	cmp	r3, #1
 800c716:	d904      	bls.n	800c722 <dir_sdi+0x98>
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	699b      	ldr	r3, [r3, #24]
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d301      	bcc.n	800c726 <dir_sdi+0x9c>
 800c722:	2302      	movs	r3, #2
 800c724:	e028      	b.n	800c778 <dir_sdi+0xee>
			ofs -= csz;
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	1ad3      	subs	r3, r2, r3
 800c72c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	429a      	cmp	r2, r3
 800c734:	d2e1      	bcs.n	800c6fa <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c736:	6979      	ldr	r1, [r7, #20]
 800c738:	6938      	ldr	r0, [r7, #16]
 800c73a:	f7ff fcc5 	bl	800c0c8 <clust2sect>
 800c73e:	4602      	mov	r2, r0
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	69db      	ldr	r3, [r3, #28]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d101      	bne.n	800c756 <dir_sdi+0xcc>
 800c752:	2302      	movs	r3, #2
 800c754:	e010      	b.n	800c778 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	69da      	ldr	r2, [r3, #28]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	0a5b      	lsrs	r3, r3, #9
 800c75e:	441a      	add	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c770:	441a      	add	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3718      	adds	r7, #24
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	3320      	adds	r3, #32
 800c796:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	69db      	ldr	r3, [r3, #28]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d003      	beq.n	800c7a8 <dir_next+0x28>
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c7a6:	d301      	bcc.n	800c7ac <dir_next+0x2c>
 800c7a8:	2304      	movs	r3, #4
 800c7aa:	e0aa      	b.n	800c902 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f040 8098 	bne.w	800c8e8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	69db      	ldr	r3, [r3, #28]
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	699b      	ldr	r3, [r3, #24]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d10b      	bne.n	800c7e2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	095b      	lsrs	r3, r3, #5
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	8912      	ldrh	r2, [r2, #8]
 800c7d2:	4293      	cmp	r3, r2
 800c7d4:	f0c0 8088 	bcc.w	800c8e8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	61da      	str	r2, [r3, #28]
 800c7de:	2304      	movs	r3, #4
 800c7e0:	e08f      	b.n	800c902 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	0a5b      	lsrs	r3, r3, #9
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	8952      	ldrh	r2, [r2, #10]
 800c7ea:	3a01      	subs	r2, #1
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d17a      	bne.n	800c8e8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	699b      	ldr	r3, [r3, #24]
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	f7ff fc83 	bl	800c106 <get_fat>
 800c800:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d801      	bhi.n	800c80c <dir_next+0x8c>
 800c808:	2302      	movs	r3, #2
 800c80a:	e07a      	b.n	800c902 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c812:	d101      	bne.n	800c818 <dir_next+0x98>
 800c814:	2301      	movs	r3, #1
 800c816:	e074      	b.n	800c902 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d358      	bcc.n	800c8d4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d104      	bne.n	800c832 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	61da      	str	r2, [r3, #28]
 800c82e:	2304      	movs	r3, #4
 800c830:	e067      	b.n	800c902 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	4619      	mov	r1, r3
 800c83a:	4610      	mov	r0, r2
 800c83c:	f7ff fe59 	bl	800c4f2 <create_chain>
 800c840:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d101      	bne.n	800c84c <dir_next+0xcc>
 800c848:	2307      	movs	r3, #7
 800c84a:	e05a      	b.n	800c902 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	2b01      	cmp	r3, #1
 800c850:	d101      	bne.n	800c856 <dir_next+0xd6>
 800c852:	2302      	movs	r3, #2
 800c854:	e055      	b.n	800c902 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c85c:	d101      	bne.n	800c862 <dir_next+0xe2>
 800c85e:	2301      	movs	r3, #1
 800c860:	e04f      	b.n	800c902 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c862:	68f8      	ldr	r0, [r7, #12]
 800c864:	f7ff fb50 	bl	800bf08 <sync_window>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d001      	beq.n	800c872 <dir_next+0xf2>
 800c86e:	2301      	movs	r3, #1
 800c870:	e047      	b.n	800c902 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3334      	adds	r3, #52	@ 0x34
 800c876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c87a:	2100      	movs	r1, #0
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff f949 	bl	800bb14 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c882:	2300      	movs	r3, #0
 800c884:	613b      	str	r3, [r7, #16]
 800c886:	6979      	ldr	r1, [r7, #20]
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	f7ff fc1d 	bl	800c0c8 <clust2sect>
 800c88e:	4602      	mov	r2, r0
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	631a      	str	r2, [r3, #48]	@ 0x30
 800c894:	e012      	b.n	800c8bc <dir_next+0x13c>
						fs->wflag = 1;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2201      	movs	r2, #1
 800c89a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c89c:	68f8      	ldr	r0, [r7, #12]
 800c89e:	f7ff fb33 	bl	800bf08 <sync_window>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d001      	beq.n	800c8ac <dir_next+0x12c>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e02a      	b.n	800c902 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	613b      	str	r3, [r7, #16]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	631a      	str	r2, [r3, #48]	@ 0x30
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	895b      	ldrh	r3, [r3, #10]
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d3e6      	bcc.n	800c896 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	1ad2      	subs	r2, r2, r3
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c8da:	6979      	ldr	r1, [r7, #20]
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f7ff fbf3 	bl	800c0c8 <clust2sect>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8fa:	441a      	add	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b086      	sub	sp, #24
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c91a:	2100      	movs	r1, #0
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7ff feb4 	bl	800c68a <dir_sdi>
 800c922:	4603      	mov	r3, r0
 800c924:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c926:	7dfb      	ldrb	r3, [r7, #23]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d12b      	bne.n	800c984 <dir_alloc+0x7a>
		n = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	69db      	ldr	r3, [r3, #28]
 800c934:	4619      	mov	r1, r3
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff fb2a 	bl	800bf90 <move_window>
 800c93c:	4603      	mov	r3, r0
 800c93e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c940:	7dfb      	ldrb	r3, [r7, #23]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d11d      	bne.n	800c982 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	2be5      	cmp	r3, #229	@ 0xe5
 800c94e:	d004      	beq.n	800c95a <dir_alloc+0x50>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d107      	bne.n	800c96a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	3301      	adds	r3, #1
 800c95e:	613b      	str	r3, [r7, #16]
 800c960:	693a      	ldr	r2, [r7, #16]
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	429a      	cmp	r2, r3
 800c966:	d102      	bne.n	800c96e <dir_alloc+0x64>
 800c968:	e00c      	b.n	800c984 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c96a:	2300      	movs	r3, #0
 800c96c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c96e:	2101      	movs	r1, #1
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f7ff ff05 	bl	800c780 <dir_next>
 800c976:	4603      	mov	r3, r0
 800c978:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d0d7      	beq.n	800c930 <dir_alloc+0x26>
 800c980:	e000      	b.n	800c984 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c982:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c984:	7dfb      	ldrb	r3, [r7, #23]
 800c986:	2b04      	cmp	r3, #4
 800c988:	d101      	bne.n	800c98e <dir_alloc+0x84>
 800c98a:	2307      	movs	r3, #7
 800c98c:	75fb      	strb	r3, [r7, #23]
	return res;
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3718      	adds	r7, #24
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	331a      	adds	r3, #26
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7ff f810 	bl	800b9cc <ld_word>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	2b03      	cmp	r3, #3
 800c9b6:	d109      	bne.n	800c9cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	3314      	adds	r3, #20
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7ff f805 	bl	800b9cc <ld_word>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	041b      	lsls	r3, r3, #16
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	60f8      	str	r0, [r7, #12]
 800c9de:	60b9      	str	r1, [r7, #8]
 800c9e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	331a      	adds	r3, #26
 800c9e6:	687a      	ldr	r2, [r7, #4]
 800c9e8:	b292      	uxth	r2, r2
 800c9ea:	4611      	mov	r1, r2
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff f829 	bl	800ba44 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	2b03      	cmp	r3, #3
 800c9f8:	d109      	bne.n	800ca0e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f103 0214 	add.w	r2, r3, #20
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	0c1b      	lsrs	r3, r3, #16
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	4619      	mov	r1, r3
 800ca08:	4610      	mov	r0, r2
 800ca0a:	f7ff f81b 	bl	800ba44 <st_word>
	}
}
 800ca0e:	bf00      	nop
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b086      	sub	sp, #24
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
 800ca1e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ca20:	2304      	movs	r3, #4
 800ca22:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800ca2a:	e03c      	b.n	800caa6 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	69db      	ldr	r3, [r3, #28]
 800ca30:	4619      	mov	r1, r3
 800ca32:	6938      	ldr	r0, [r7, #16]
 800ca34:	f7ff faac 	bl	800bf90 <move_window>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca3c:	7dfb      	ldrb	r3, [r7, #23]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d136      	bne.n	800cab0 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d102      	bne.n	800ca56 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ca50:	2304      	movs	r3, #4
 800ca52:	75fb      	strb	r3, [r7, #23]
 800ca54:	e031      	b.n	800caba <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	330b      	adds	r3, #11
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca62:	73bb      	strb	r3, [r7, #14]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	7bba      	ldrb	r2, [r7, #14]
 800ca68:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	2be5      	cmp	r3, #229	@ 0xe5
 800ca6e:	d011      	beq.n	800ca94 <dir_read+0x7e>
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca74:	d00e      	beq.n	800ca94 <dir_read+0x7e>
 800ca76:	7bbb      	ldrb	r3, [r7, #14]
 800ca78:	2b0f      	cmp	r3, #15
 800ca7a:	d00b      	beq.n	800ca94 <dir_read+0x7e>
 800ca7c:	7bbb      	ldrb	r3, [r7, #14]
 800ca7e:	f023 0320 	bic.w	r3, r3, #32
 800ca82:	2b08      	cmp	r3, #8
 800ca84:	bf0c      	ite	eq
 800ca86:	2301      	moveq	r3, #1
 800ca88:	2300      	movne	r3, #0
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00f      	beq.n	800cab4 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ca94:	2100      	movs	r1, #0
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7ff fe72 	bl	800c780 <dir_next>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d108      	bne.n	800cab8 <dir_read+0xa2>
	while (dp->sect) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d1be      	bne.n	800ca2c <dir_read+0x16>
 800caae:	e004      	b.n	800caba <dir_read+0xa4>
		if (res != FR_OK) break;
 800cab0:	bf00      	nop
 800cab2:	e002      	b.n	800caba <dir_read+0xa4>
				break;
 800cab4:	bf00      	nop
 800cab6:	e000      	b.n	800caba <dir_read+0xa4>
		if (res != FR_OK) break;
 800cab8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800caba:	7dfb      	ldrb	r3, [r7, #23]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <dir_read+0xb0>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	61da      	str	r2, [r3, #28]
	return res;
 800cac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3718      	adds	r7, #24
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cade:	2100      	movs	r1, #0
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f7ff fdd2 	bl	800c68a <dir_sdi>
 800cae6:	4603      	mov	r3, r0
 800cae8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800caea:	7dfb      	ldrb	r3, [r7, #23]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <dir_find+0x24>
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
 800caf2:	e03e      	b.n	800cb72 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	69db      	ldr	r3, [r3, #28]
 800caf8:	4619      	mov	r1, r3
 800cafa:	6938      	ldr	r0, [r7, #16]
 800cafc:	f7ff fa48 	bl	800bf90 <move_window>
 800cb00:	4603      	mov	r3, r0
 800cb02:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb04:	7dfb      	ldrb	r3, [r7, #23]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d12f      	bne.n	800cb6a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6a1b      	ldr	r3, [r3, #32]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d102      	bne.n	800cb1e <dir_find+0x4e>
 800cb18:	2304      	movs	r3, #4
 800cb1a:	75fb      	strb	r3, [r7, #23]
 800cb1c:	e028      	b.n	800cb70 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	330b      	adds	r3, #11
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a1b      	ldr	r3, [r3, #32]
 800cb34:	330b      	adds	r3, #11
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	f003 0308 	and.w	r3, r3, #8
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10a      	bne.n	800cb56 <dir_find+0x86>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6a18      	ldr	r0, [r3, #32]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	3324      	adds	r3, #36	@ 0x24
 800cb48:	220b      	movs	r2, #11
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	f7fe fffd 	bl	800bb4a <mem_cmp>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00b      	beq.n	800cb6e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cb56:	2100      	movs	r1, #0
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7ff fe11 	bl	800c780 <dir_next>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d0c5      	beq.n	800caf4 <dir_find+0x24>
 800cb68:	e002      	b.n	800cb70 <dir_find+0xa0>
		if (res != FR_OK) break;
 800cb6a:	bf00      	nop
 800cb6c:	e000      	b.n	800cb70 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cb6e:	bf00      	nop

	return res;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}

0800cb7a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cb7a:	b580      	push	{r7, lr}
 800cb7c:	b084      	sub	sp, #16
 800cb7e:	af00      	add	r7, sp, #0
 800cb80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cb88:	2101      	movs	r1, #1
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff febd 	bl	800c90a <dir_alloc>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d11c      	bne.n	800cbd4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	69db      	ldr	r3, [r3, #28]
 800cb9e:	4619      	mov	r1, r3
 800cba0:	68b8      	ldr	r0, [r7, #8]
 800cba2:	f7ff f9f5 	bl	800bf90 <move_window>
 800cba6:	4603      	mov	r3, r0
 800cba8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d111      	bne.n	800cbd4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6a1b      	ldr	r3, [r3, #32]
 800cbb4:	2220      	movs	r2, #32
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7fe ffab 	bl	800bb14 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a18      	ldr	r0, [r3, #32]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	3324      	adds	r3, #36	@ 0x24
 800cbc6:	220b      	movs	r2, #11
 800cbc8:	4619      	mov	r1, r3
 800cbca:	f7fe ff82 	bl	800bad2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	69db      	ldr	r3, [r3, #28]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7ff f9cc 	bl	800bf90 <move_window>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800cbfc:	7afb      	ldrb	r3, [r7, #11]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	22e5      	movs	r2, #229	@ 0xe5
 800cc08:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800cc10:	7afb      	ldrb	r3, [r7, #11]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3710      	adds	r7, #16
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
	...

0800cc1c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b088      	sub	sp, #32
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3324      	adds	r3, #36	@ 0x24
 800cc30:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cc32:	220b      	movs	r2, #11
 800cc34:	2120      	movs	r1, #32
 800cc36:	68b8      	ldr	r0, [r7, #8]
 800cc38:	f7fe ff6c 	bl	800bb14 <mem_set>
	si = i = 0; ni = 8;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	613b      	str	r3, [r7, #16]
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	61fb      	str	r3, [r7, #28]
 800cc44:	2308      	movs	r3, #8
 800cc46:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	1c5a      	adds	r2, r3, #1
 800cc4c:	61fa      	str	r2, [r7, #28]
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	4413      	add	r3, r2
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cc56:	7efb      	ldrb	r3, [r7, #27]
 800cc58:	2b20      	cmp	r3, #32
 800cc5a:	d94e      	bls.n	800ccfa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cc5c:	7efb      	ldrb	r3, [r7, #27]
 800cc5e:	2b2f      	cmp	r3, #47	@ 0x2f
 800cc60:	d006      	beq.n	800cc70 <create_name+0x54>
 800cc62:	7efb      	ldrb	r3, [r7, #27]
 800cc64:	2b5c      	cmp	r3, #92	@ 0x5c
 800cc66:	d110      	bne.n	800cc8a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cc68:	e002      	b.n	800cc70 <create_name+0x54>
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	61fb      	str	r3, [r7, #28]
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	4413      	add	r3, r2
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	2b2f      	cmp	r3, #47	@ 0x2f
 800cc7a:	d0f6      	beq.n	800cc6a <create_name+0x4e>
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	4413      	add	r3, r2
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b5c      	cmp	r3, #92	@ 0x5c
 800cc86:	d0f0      	beq.n	800cc6a <create_name+0x4e>
			break;
 800cc88:	e038      	b.n	800ccfc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cc8a:	7efb      	ldrb	r3, [r7, #27]
 800cc8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc8e:	d003      	beq.n	800cc98 <create_name+0x7c>
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d30c      	bcc.n	800ccb2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b0b      	cmp	r3, #11
 800cc9c:	d002      	beq.n	800cca4 <create_name+0x88>
 800cc9e:	7efb      	ldrb	r3, [r7, #27]
 800cca0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cca2:	d001      	beq.n	800cca8 <create_name+0x8c>
 800cca4:	2306      	movs	r3, #6
 800cca6:	e044      	b.n	800cd32 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cca8:	2308      	movs	r3, #8
 800ccaa:	613b      	str	r3, [r7, #16]
 800ccac:	230b      	movs	r3, #11
 800ccae:	617b      	str	r3, [r7, #20]
			continue;
 800ccb0:	e022      	b.n	800ccf8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ccb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	da04      	bge.n	800ccc4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ccba:	7efb      	ldrb	r3, [r7, #27]
 800ccbc:	3b80      	subs	r3, #128	@ 0x80
 800ccbe:	4a1f      	ldr	r2, [pc, #124]	@ (800cd3c <create_name+0x120>)
 800ccc0:	5cd3      	ldrb	r3, [r2, r3]
 800ccc2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ccc4:	7efb      	ldrb	r3, [r7, #27]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	481d      	ldr	r0, [pc, #116]	@ (800cd40 <create_name+0x124>)
 800ccca:	f7fe ff65 	bl	800bb98 <chk_chr>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <create_name+0xbc>
 800ccd4:	2306      	movs	r3, #6
 800ccd6:	e02c      	b.n	800cd32 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ccd8:	7efb      	ldrb	r3, [r7, #27]
 800ccda:	2b60      	cmp	r3, #96	@ 0x60
 800ccdc:	d905      	bls.n	800ccea <create_name+0xce>
 800ccde:	7efb      	ldrb	r3, [r7, #27]
 800cce0:	2b7a      	cmp	r3, #122	@ 0x7a
 800cce2:	d802      	bhi.n	800ccea <create_name+0xce>
 800cce4:	7efb      	ldrb	r3, [r7, #27]
 800cce6:	3b20      	subs	r3, #32
 800cce8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	613a      	str	r2, [r7, #16]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	7efa      	ldrb	r2, [r7, #27]
 800ccf6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ccf8:	e7a6      	b.n	800cc48 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ccfa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	441a      	add	r2, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d101      	bne.n	800cd10 <create_name+0xf4>
 800cd0c:	2306      	movs	r3, #6
 800cd0e:	e010      	b.n	800cd32 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2be5      	cmp	r3, #229	@ 0xe5
 800cd16:	d102      	bne.n	800cd1e <create_name+0x102>
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2205      	movs	r2, #5
 800cd1c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cd1e:	7efb      	ldrb	r3, [r7, #27]
 800cd20:	2b20      	cmp	r3, #32
 800cd22:	d801      	bhi.n	800cd28 <create_name+0x10c>
 800cd24:	2204      	movs	r2, #4
 800cd26:	e000      	b.n	800cd2a <create_name+0x10e>
 800cd28:	2200      	movs	r2, #0
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	330b      	adds	r3, #11
 800cd2e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cd30:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3720      	adds	r7, #32
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	080186c8 	.word	0x080186c8
 800cd40:	08018500 	.word	0x08018500

0800cd44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b086      	sub	sp, #24
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cd58:	e002      	b.n	800cd60 <follow_path+0x1c>
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	603b      	str	r3, [r7, #0]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	2b2f      	cmp	r3, #47	@ 0x2f
 800cd66:	d0f8      	beq.n	800cd5a <follow_path+0x16>
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	2b5c      	cmp	r3, #92	@ 0x5c
 800cd6e:	d0f4      	beq.n	800cd5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	2200      	movs	r2, #0
 800cd74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	2b1f      	cmp	r3, #31
 800cd7c:	d80a      	bhi.n	800cd94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2280      	movs	r2, #128	@ 0x80
 800cd82:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800cd86:	2100      	movs	r1, #0
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7ff fc7e 	bl	800c68a <dir_sdi>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	75fb      	strb	r3, [r7, #23]
 800cd92:	e043      	b.n	800ce1c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd94:	463b      	mov	r3, r7
 800cd96:	4619      	mov	r1, r3
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff ff3f 	bl	800cc1c <create_name>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cda2:	7dfb      	ldrb	r3, [r7, #23]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d134      	bne.n	800ce12 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f7ff fe91 	bl	800cad0 <dir_find>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cdb8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00a      	beq.n	800cdd6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cdc0:	7dfb      	ldrb	r3, [r7, #23]
 800cdc2:	2b04      	cmp	r3, #4
 800cdc4:	d127      	bne.n	800ce16 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cdc6:	7afb      	ldrb	r3, [r7, #11]
 800cdc8:	f003 0304 	and.w	r3, r3, #4
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d122      	bne.n	800ce16 <follow_path+0xd2>
 800cdd0:	2305      	movs	r3, #5
 800cdd2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cdd4:	e01f      	b.n	800ce16 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cdd6:	7afb      	ldrb	r3, [r7, #11]
 800cdd8:	f003 0304 	and.w	r3, r3, #4
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d11c      	bne.n	800ce1a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	799b      	ldrb	r3, [r3, #6]
 800cde4:	f003 0310 	and.w	r3, r3, #16
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d102      	bne.n	800cdf2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cdec:	2305      	movs	r3, #5
 800cdee:	75fb      	strb	r3, [r7, #23]
 800cdf0:	e014      	b.n	800ce1c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	695b      	ldr	r3, [r3, #20]
 800cdfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce00:	4413      	add	r3, r2
 800ce02:	4619      	mov	r1, r3
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff fdc7 	bl	800c998 <ld_clust>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce10:	e7c0      	b.n	800cd94 <follow_path+0x50>
			if (res != FR_OK) break;
 800ce12:	bf00      	nop
 800ce14:	e002      	b.n	800ce1c <follow_path+0xd8>
				break;
 800ce16:	bf00      	nop
 800ce18:	e000      	b.n	800ce1c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce1a:	bf00      	nop
			}
		}
	}

	return res;
 800ce1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ce26:	b480      	push	{r7}
 800ce28:	b087      	sub	sp, #28
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ce2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce32:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d031      	beq.n	800cea0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	617b      	str	r3, [r7, #20]
 800ce42:	e002      	b.n	800ce4a <get_ldnumber+0x24>
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	3301      	adds	r3, #1
 800ce48:	617b      	str	r3, [r7, #20]
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	2b20      	cmp	r3, #32
 800ce50:	d903      	bls.n	800ce5a <get_ldnumber+0x34>
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	2b3a      	cmp	r3, #58	@ 0x3a
 800ce58:	d1f4      	bne.n	800ce44 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ce60:	d11c      	bne.n	800ce9c <get_ldnumber+0x76>
			tp = *path;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	1c5a      	adds	r2, r3, #1
 800ce6c:	60fa      	str	r2, [r7, #12]
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	3b30      	subs	r3, #48	@ 0x30
 800ce72:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	2b09      	cmp	r3, #9
 800ce78:	d80e      	bhi.n	800ce98 <get_ldnumber+0x72>
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d10a      	bne.n	800ce98 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d107      	bne.n	800ce98 <get_ldnumber+0x72>
					vol = (int)i;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	617b      	str	r3, [r7, #20]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	697a      	ldr	r2, [r7, #20]
 800ce96:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	e002      	b.n	800cea2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cea0:	693b      	ldr	r3, [r7, #16]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	371c      	adds	r7, #28
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
	...

0800ceb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	70da      	strb	r2, [r3, #3]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cec6:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7ff f860 	bl	800bf90 <move_window>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <check_fs+0x2a>
 800ced6:	2304      	movs	r3, #4
 800ced8:	e038      	b.n	800cf4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	3334      	adds	r3, #52	@ 0x34
 800cede:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fe fd72 	bl	800b9cc <ld_word>
 800cee8:	4603      	mov	r3, r0
 800ceea:	461a      	mov	r2, r3
 800ceec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d001      	beq.n	800cef8 <check_fs+0x48>
 800cef4:	2303      	movs	r3, #3
 800cef6:	e029      	b.n	800cf4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cefe:	2be9      	cmp	r3, #233	@ 0xe9
 800cf00:	d009      	beq.n	800cf16 <check_fs+0x66>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf08:	2beb      	cmp	r3, #235	@ 0xeb
 800cf0a:	d11e      	bne.n	800cf4a <check_fs+0x9a>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800cf12:	2b90      	cmp	r3, #144	@ 0x90
 800cf14:	d119      	bne.n	800cf4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	3334      	adds	r3, #52	@ 0x34
 800cf1a:	3336      	adds	r3, #54	@ 0x36
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fe fd6e 	bl	800b9fe <ld_dword>
 800cf22:	4603      	mov	r3, r0
 800cf24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cf28:	4a0a      	ldr	r2, [pc, #40]	@ (800cf54 <check_fs+0xa4>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d101      	bne.n	800cf32 <check_fs+0x82>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	e00c      	b.n	800cf4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	3334      	adds	r3, #52	@ 0x34
 800cf36:	3352      	adds	r3, #82	@ 0x52
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fe fd60 	bl	800b9fe <ld_dword>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	4a05      	ldr	r2, [pc, #20]	@ (800cf58 <check_fs+0xa8>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d101      	bne.n	800cf4a <check_fs+0x9a>
 800cf46:	2300      	movs	r3, #0
 800cf48:	e000      	b.n	800cf4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cf4a:	2302      	movs	r3, #2
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	00544146 	.word	0x00544146
 800cf58:	33544146 	.word	0x33544146

0800cf5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b096      	sub	sp, #88	@ 0x58
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	4613      	mov	r3, r2
 800cf68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	f7ff ff58 	bl	800ce26 <get_ldnumber>
 800cf76:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	da01      	bge.n	800cf82 <find_volume+0x26>
 800cf7e:	230b      	movs	r3, #11
 800cf80:	e235      	b.n	800d3ee <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cf82:	4aa5      	ldr	r2, [pc, #660]	@ (800d218 <find_volume+0x2bc>)
 800cf84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d101      	bne.n	800cf96 <find_volume+0x3a>
 800cf92:	230c      	movs	r3, #12
 800cf94:	e22b      	b.n	800d3ee <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800cf96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf98:	f7fe fe19 	bl	800bbce <lock_fs>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <find_volume+0x4a>
 800cfa2:	230f      	movs	r3, #15
 800cfa4:	e223      	b.n	800d3ee <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfaa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	f023 0301 	bic.w	r3, r3, #1
 800cfb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d01a      	beq.n	800cff2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfbe:	785b      	ldrb	r3, [r3, #1]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fc65 	bl	800b890 <disk_status>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cfcc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10c      	bne.n	800cff2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d007      	beq.n	800cfee <find_volume+0x92>
 800cfde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cfe2:	f003 0304 	and.w	r3, r3, #4
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800cfea:	230a      	movs	r3, #10
 800cfec:	e1ff      	b.n	800d3ee <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800cfee:	2300      	movs	r3, #0
 800cff0:	e1fd      	b.n	800d3ee <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cff4:	2200      	movs	r2, #0
 800cff6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cffe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d002:	785b      	ldrb	r3, [r3, #1]
 800d004:	4618      	mov	r0, r3
 800d006:	f7fe fc5d 	bl	800b8c4 <disk_initialize>
 800d00a:	4603      	mov	r3, r0
 800d00c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d010:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d014:	f003 0301 	and.w	r3, r3, #1
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d001      	beq.n	800d020 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d01c:	2303      	movs	r3, #3
 800d01e:	e1e6      	b.n	800d3ee <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d020:	79fb      	ldrb	r3, [r7, #7]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d007      	beq.n	800d036 <find_volume+0xda>
 800d026:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d02a:	f003 0304 	and.w	r3, r3, #4
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d032:	230a      	movs	r3, #10
 800d034:	e1db      	b.n	800d3ee <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d03a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d03c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d03e:	f7ff ff37 	bl	800ceb0 <check_fs>
 800d042:	4603      	mov	r3, r0
 800d044:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d048:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d149      	bne.n	800d0e4 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d050:	2300      	movs	r3, #0
 800d052:	643b      	str	r3, [r7, #64]	@ 0x40
 800d054:	e01e      	b.n	800d094 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d058:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d05c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d05e:	011b      	lsls	r3, r3, #4
 800d060:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d064:	4413      	add	r3, r2
 800d066:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d06a:	3304      	adds	r3, #4
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d006      	beq.n	800d080 <find_volume+0x124>
 800d072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d074:	3308      	adds	r3, #8
 800d076:	4618      	mov	r0, r3
 800d078:	f7fe fcc1 	bl	800b9fe <ld_dword>
 800d07c:	4602      	mov	r2, r0
 800d07e:	e000      	b.n	800d082 <find_volume+0x126>
 800d080:	2200      	movs	r2, #0
 800d082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	3358      	adds	r3, #88	@ 0x58
 800d088:	443b      	add	r3, r7
 800d08a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d090:	3301      	adds	r3, #1
 800d092:	643b      	str	r3, [r7, #64]	@ 0x40
 800d094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d096:	2b03      	cmp	r3, #3
 800d098:	d9dd      	bls.n	800d056 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d09a:	2300      	movs	r3, #0
 800d09c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d09e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <find_volume+0x14e>
 800d0a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d0aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	3358      	adds	r3, #88	@ 0x58
 800d0b0:	443b      	add	r3, r7
 800d0b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d0b6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d0b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d005      	beq.n	800d0ca <find_volume+0x16e>
 800d0be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d0c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d0c2:	f7ff fef5 	bl	800ceb0 <check_fs>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	e000      	b.n	800d0cc <find_volume+0x170>
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d0d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d905      	bls.n	800d0e4 <find_volume+0x188>
 800d0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0da:	3301      	adds	r3, #1
 800d0dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0e0:	2b03      	cmp	r3, #3
 800d0e2:	d9e2      	bls.n	800d0aa <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d0e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0e8:	2b04      	cmp	r3, #4
 800d0ea:	d101      	bne.n	800d0f0 <find_volume+0x194>
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e17e      	b.n	800d3ee <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d0f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d901      	bls.n	800d0fc <find_volume+0x1a0>
 800d0f8:	230d      	movs	r3, #13
 800d0fa:	e178      	b.n	800d3ee <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0fe:	3334      	adds	r3, #52	@ 0x34
 800d100:	330b      	adds	r3, #11
 800d102:	4618      	mov	r0, r3
 800d104:	f7fe fc62 	bl	800b9cc <ld_word>
 800d108:	4603      	mov	r3, r0
 800d10a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d10e:	d001      	beq.n	800d114 <find_volume+0x1b8>
 800d110:	230d      	movs	r3, #13
 800d112:	e16c      	b.n	800d3ee <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d116:	3334      	adds	r3, #52	@ 0x34
 800d118:	3316      	adds	r3, #22
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fe fc56 	bl	800b9cc <ld_word>
 800d120:	4603      	mov	r3, r0
 800d122:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d126:	2b00      	cmp	r3, #0
 800d128:	d106      	bne.n	800d138 <find_volume+0x1dc>
 800d12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12c:	3334      	adds	r3, #52	@ 0x34
 800d12e:	3324      	adds	r3, #36	@ 0x24
 800d130:	4618      	mov	r0, r3
 800d132:	f7fe fc64 	bl	800b9fe <ld_dword>
 800d136:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d13c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d140:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d146:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14a:	789b      	ldrb	r3, [r3, #2]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d005      	beq.n	800d15c <find_volume+0x200>
 800d150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d152:	789b      	ldrb	r3, [r3, #2]
 800d154:	2b02      	cmp	r3, #2
 800d156:	d001      	beq.n	800d15c <find_volume+0x200>
 800d158:	230d      	movs	r3, #13
 800d15a:	e148      	b.n	800d3ee <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d15e:	789b      	ldrb	r3, [r3, #2]
 800d160:	461a      	mov	r2, r3
 800d162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d164:	fb02 f303 	mul.w	r3, r2, r3
 800d168:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d16c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d170:	461a      	mov	r2, r3
 800d172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d174:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d178:	895b      	ldrh	r3, [r3, #10]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d008      	beq.n	800d190 <find_volume+0x234>
 800d17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d180:	895b      	ldrh	r3, [r3, #10]
 800d182:	461a      	mov	r2, r3
 800d184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d186:	895b      	ldrh	r3, [r3, #10]
 800d188:	3b01      	subs	r3, #1
 800d18a:	4013      	ands	r3, r2
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <find_volume+0x238>
 800d190:	230d      	movs	r3, #13
 800d192:	e12c      	b.n	800d3ee <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d196:	3334      	adds	r3, #52	@ 0x34
 800d198:	3311      	adds	r3, #17
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fe fc16 	bl	800b9cc <ld_word>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1aa:	891b      	ldrh	r3, [r3, #8]
 800d1ac:	f003 030f 	and.w	r3, r3, #15
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <find_volume+0x25e>
 800d1b6:	230d      	movs	r3, #13
 800d1b8:	e119      	b.n	800d3ee <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1bc:	3334      	adds	r3, #52	@ 0x34
 800d1be:	3313      	adds	r3, #19
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fe fc03 	bl	800b9cc <ld_word>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d1ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d106      	bne.n	800d1de <find_volume+0x282>
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d2:	3334      	adds	r3, #52	@ 0x34
 800d1d4:	3320      	adds	r3, #32
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe fc11 	bl	800b9fe <ld_dword>
 800d1dc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e0:	3334      	adds	r3, #52	@ 0x34
 800d1e2:	330e      	adds	r3, #14
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fe fbf1 	bl	800b9cc <ld_word>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d1ee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d101      	bne.n	800d1f8 <find_volume+0x29c>
 800d1f4:	230d      	movs	r3, #13
 800d1f6:	e0fa      	b.n	800d3ee <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d1f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d1fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1fc:	4413      	add	r3, r2
 800d1fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d200:	8912      	ldrh	r2, [r2, #8]
 800d202:	0912      	lsrs	r2, r2, #4
 800d204:	b292      	uxth	r2, r2
 800d206:	4413      	add	r3, r2
 800d208:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d20a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d20e:	429a      	cmp	r2, r3
 800d210:	d204      	bcs.n	800d21c <find_volume+0x2c0>
 800d212:	230d      	movs	r3, #13
 800d214:	e0eb      	b.n	800d3ee <find_volume+0x492>
 800d216:	bf00      	nop
 800d218:	20000ac8 	.word	0x20000ac8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d21c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d224:	8952      	ldrh	r2, [r2, #10]
 800d226:	fbb3 f3f2 	udiv	r3, r3, r2
 800d22a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d101      	bne.n	800d236 <find_volume+0x2da>
 800d232:	230d      	movs	r3, #13
 800d234:	e0db      	b.n	800d3ee <find_volume+0x492>
		fmt = FS_FAT32;
 800d236:	2303      	movs	r3, #3
 800d238:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d23e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d242:	4293      	cmp	r3, r2
 800d244:	d802      	bhi.n	800d24c <find_volume+0x2f0>
 800d246:	2302      	movs	r3, #2
 800d248:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d252:	4293      	cmp	r3, r2
 800d254:	d802      	bhi.n	800d25c <find_volume+0x300>
 800d256:	2301      	movs	r3, #1
 800d258:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25e:	1c9a      	adds	r2, r3, #2
 800d260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d262:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d266:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d268:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d26a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d26c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d26e:	441a      	add	r2, r3
 800d270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d272:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d274:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d278:	441a      	add	r2, r3
 800d27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27c:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800d27e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d282:	2b03      	cmp	r3, #3
 800d284:	d11e      	bne.n	800d2c4 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d288:	3334      	adds	r3, #52	@ 0x34
 800d28a:	332a      	adds	r3, #42	@ 0x2a
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7fe fb9d 	bl	800b9cc <ld_word>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d001      	beq.n	800d29c <find_volume+0x340>
 800d298:	230d      	movs	r3, #13
 800d29a:	e0a8      	b.n	800d3ee <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29e:	891b      	ldrh	r3, [r3, #8]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <find_volume+0x34c>
 800d2a4:	230d      	movs	r3, #13
 800d2a6:	e0a2      	b.n	800d3ee <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2aa:	3334      	adds	r3, #52	@ 0x34
 800d2ac:	332c      	adds	r3, #44	@ 0x2c
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7fe fba5 	bl	800b9fe <ld_dword>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b8:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2c2:	e01f      	b.n	800d304 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c6:	891b      	ldrh	r3, [r3, #8]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <find_volume+0x374>
 800d2cc:	230d      	movs	r3, #13
 800d2ce:	e08e      	b.n	800d3ee <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2d6:	441a      	add	r2, r3
 800d2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2da:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d2dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d103      	bne.n	800d2ec <find_volume+0x390>
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	e00a      	b.n	800d302 <find_volume+0x3a6>
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ee:	699a      	ldr	r2, [r3, #24]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	4413      	add	r3, r2
 800d2f6:	085a      	lsrs	r2, r3, #1
 800d2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2fa:	699b      	ldr	r3, [r3, #24]
 800d2fc:	f003 0301 	and.w	r3, r3, #1
 800d300:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d302:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d306:	69da      	ldr	r2, [r3, #28]
 800d308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d30a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d30e:	0a5b      	lsrs	r3, r3, #9
 800d310:	429a      	cmp	r2, r3
 800d312:	d201      	bcs.n	800d318 <find_volume+0x3bc>
 800d314:	230d      	movs	r3, #13
 800d316:	e06a      	b.n	800d3ee <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d31a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d31e:	615a      	str	r2, [r3, #20]
 800d320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d322:	695a      	ldr	r2, [r3, #20]
 800d324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d326:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d32a:	2280      	movs	r2, #128	@ 0x80
 800d32c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d32e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d332:	2b03      	cmp	r3, #3
 800d334:	d149      	bne.n	800d3ca <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d338:	3334      	adds	r3, #52	@ 0x34
 800d33a:	3330      	adds	r3, #48	@ 0x30
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7fe fb45 	bl	800b9cc <ld_word>
 800d342:	4603      	mov	r3, r0
 800d344:	2b01      	cmp	r3, #1
 800d346:	d140      	bne.n	800d3ca <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d34a:	3301      	adds	r3, #1
 800d34c:	4619      	mov	r1, r3
 800d34e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d350:	f7fe fe1e 	bl	800bf90 <move_window>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d137      	bne.n	800d3ca <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800d35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35c:	2200      	movs	r2, #0
 800d35e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d362:	3334      	adds	r3, #52	@ 0x34
 800d364:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fe fb2f 	bl	800b9cc <ld_word>
 800d36e:	4603      	mov	r3, r0
 800d370:	461a      	mov	r2, r3
 800d372:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d376:	429a      	cmp	r2, r3
 800d378:	d127      	bne.n	800d3ca <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37c:	3334      	adds	r3, #52	@ 0x34
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fe fb3d 	bl	800b9fe <ld_dword>
 800d384:	4603      	mov	r3, r0
 800d386:	4a1c      	ldr	r2, [pc, #112]	@ (800d3f8 <find_volume+0x49c>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d11e      	bne.n	800d3ca <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38e:	3334      	adds	r3, #52	@ 0x34
 800d390:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d394:	4618      	mov	r0, r3
 800d396:	f7fe fb32 	bl	800b9fe <ld_dword>
 800d39a:	4603      	mov	r3, r0
 800d39c:	4a17      	ldr	r2, [pc, #92]	@ (800d3fc <find_volume+0x4a0>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d113      	bne.n	800d3ca <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a4:	3334      	adds	r3, #52	@ 0x34
 800d3a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe fb27 	bl	800b9fe <ld_dword>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3b8:	3334      	adds	r3, #52	@ 0x34
 800d3ba:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fe fb1d 	bl	800b9fe <ld_dword>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3cc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d3d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800d400 <find_volume+0x4a4>)
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	4b09      	ldr	r3, [pc, #36]	@ (800d400 <find_volume+0x4a4>)
 800d3dc:	801a      	strh	r2, [r3, #0]
 800d3de:	4b08      	ldr	r3, [pc, #32]	@ (800d400 <find_volume+0x4a4>)
 800d3e0:	881a      	ldrh	r2, [r3, #0]
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d3e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d3e8:	f7fe fd6a 	bl	800bec0 <clear_lock>
#endif
	return FR_OK;
 800d3ec:	2300      	movs	r3, #0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3758      	adds	r7, #88	@ 0x58
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	41615252 	.word	0x41615252
 800d3fc:	61417272 	.word	0x61417272
 800d400:	20000acc 	.word	0x20000acc

0800d404 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d40e:	2309      	movs	r3, #9
 800d410:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d02e      	beq.n	800d476 <validate+0x72>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d02a      	beq.n	800d476 <validate+0x72>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d025      	beq.n	800d476 <validate+0x72>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	889a      	ldrh	r2, [r3, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	88db      	ldrh	r3, [r3, #6]
 800d434:	429a      	cmp	r2, r3
 800d436:	d11e      	bne.n	800d476 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe fbc6 	bl	800bbce <lock_fs>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	d014      	beq.n	800d472 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	785b      	ldrb	r3, [r3, #1]
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fe fa1e 	bl	800b890 <disk_status>
 800d454:	4603      	mov	r3, r0
 800d456:	f003 0301 	and.w	r3, r3, #1
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d102      	bne.n	800d464 <validate+0x60>
				res = FR_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	73fb      	strb	r3, [r7, #15]
 800d462:	e008      	b.n	800d476 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	2100      	movs	r1, #0
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fe fbc5 	bl	800bbfa <unlock_fs>
 800d470:	e001      	b.n	800d476 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d472:	230f      	movs	r3, #15
 800d474:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d476:	7bfb      	ldrb	r3, [r7, #15]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d102      	bne.n	800d482 <validate+0x7e>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	e000      	b.n	800d484 <validate+0x80>
 800d482:	2300      	movs	r3, #0
 800d484:	683a      	ldr	r2, [r7, #0]
 800d486:	6013      	str	r3, [r2, #0]
	return res;
 800d488:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3710      	adds	r7, #16
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
	...

0800d494 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d4a6:	f107 0310 	add.w	r3, r7, #16
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7ff fcbb 	bl	800ce26 <get_ldnumber>
 800d4b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d4b2:	69fb      	ldr	r3, [r7, #28]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	da01      	bge.n	800d4bc <f_mount+0x28>
 800d4b8:	230b      	movs	r3, #11
 800d4ba:	e048      	b.n	800d54e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d4bc:	4a26      	ldr	r2, [pc, #152]	@ (800d558 <f_mount+0xc4>)
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00f      	beq.n	800d4ec <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d4cc:	69b8      	ldr	r0, [r7, #24]
 800d4ce:	f7fe fcf7 	bl	800bec0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 fef4 	bl	800e2c4 <ff_del_syncobj>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d101      	bne.n	800d4e6 <f_mount+0x52>
 800d4e2:	2302      	movs	r3, #2
 800d4e4:	e033      	b.n	800d54e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00f      	beq.n	800d512 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	330c      	adds	r3, #12
 800d500:	4619      	mov	r1, r3
 800d502:	4610      	mov	r0, r2
 800d504:	f000 fec3 	bl	800e28e <ff_cre_syncobj>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <f_mount+0x7e>
 800d50e:	2302      	movs	r3, #2
 800d510:	e01d      	b.n	800d54e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d512:	68fa      	ldr	r2, [r7, #12]
 800d514:	4910      	ldr	r1, [pc, #64]	@ (800d558 <f_mount+0xc4>)
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d002      	beq.n	800d528 <f_mount+0x94>
 800d522:	79fb      	ldrb	r3, [r7, #7]
 800d524:	2b01      	cmp	r3, #1
 800d526:	d001      	beq.n	800d52c <f_mount+0x98>
 800d528:	2300      	movs	r3, #0
 800d52a:	e010      	b.n	800d54e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d52c:	f107 010c 	add.w	r1, r7, #12
 800d530:	f107 0308 	add.w	r3, r7, #8
 800d534:	2200      	movs	r2, #0
 800d536:	4618      	mov	r0, r3
 800d538:	f7ff fd10 	bl	800cf5c <find_volume>
 800d53c:	4603      	mov	r3, r0
 800d53e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	7dfa      	ldrb	r2, [r7, #23]
 800d544:	4611      	mov	r1, r2
 800d546:	4618      	mov	r0, r3
 800d548:	f7fe fb57 	bl	800bbfa <unlock_fs>
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3720      	adds	r7, #32
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	20000ac8 	.word	0x20000ac8

0800d55c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b098      	sub	sp, #96	@ 0x60
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d101      	bne.n	800d574 <f_open+0x18>
 800d570:	2309      	movs	r3, #9
 800d572:	e1b0      	b.n	800d8d6 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d574:	79fb      	ldrb	r3, [r7, #7]
 800d576:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d57a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d57c:	79fa      	ldrb	r2, [r7, #7]
 800d57e:	f107 0110 	add.w	r1, r7, #16
 800d582:	f107 0308 	add.w	r3, r7, #8
 800d586:	4618      	mov	r0, r3
 800d588:	f7ff fce8 	bl	800cf5c <find_volume>
 800d58c:	4603      	mov	r3, r0
 800d58e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d592:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d596:	2b00      	cmp	r3, #0
 800d598:	f040 818d 	bne.w	800d8b6 <f_open+0x35a>
		dj.obj.fs = fs;
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	f107 0314 	add.w	r3, r7, #20
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7ff fbcb 	bl	800cd44 <follow_path>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d5b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d118      	bne.n	800d5ee <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d5bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d5c0:	b25b      	sxtb	r3, r3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	da03      	bge.n	800d5ce <f_open+0x72>
				res = FR_INVALID_NAME;
 800d5c6:	2306      	movs	r3, #6
 800d5c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d5cc:	e00f      	b.n	800d5ee <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5ce:	79fb      	ldrb	r3, [r7, #7]
 800d5d0:	2b01      	cmp	r3, #1
 800d5d2:	bf8c      	ite	hi
 800d5d4:	2301      	movhi	r3, #1
 800d5d6:	2300      	movls	r3, #0
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	461a      	mov	r2, r3
 800d5dc:	f107 0314 	add.w	r3, r7, #20
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fe fb24 	bl	800bc30 <chk_lock>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d5ee:	79fb      	ldrb	r3, [r7, #7]
 800d5f0:	f003 031c 	and.w	r3, r3, #28
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d07f      	beq.n	800d6f8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d5f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d017      	beq.n	800d630 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d600:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d604:	2b04      	cmp	r3, #4
 800d606:	d10e      	bne.n	800d626 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d608:	f7fe fb6e 	bl	800bce8 <enq_lock>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d006      	beq.n	800d620 <f_open+0xc4>
 800d612:	f107 0314 	add.w	r3, r7, #20
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff faaf 	bl	800cb7a <dir_register>
 800d61c:	4603      	mov	r3, r0
 800d61e:	e000      	b.n	800d622 <f_open+0xc6>
 800d620:	2312      	movs	r3, #18
 800d622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d626:	79fb      	ldrb	r3, [r7, #7]
 800d628:	f043 0308 	orr.w	r3, r3, #8
 800d62c:	71fb      	strb	r3, [r7, #7]
 800d62e:	e010      	b.n	800d652 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d630:	7ebb      	ldrb	r3, [r7, #26]
 800d632:	f003 0311 	and.w	r3, r3, #17
 800d636:	2b00      	cmp	r3, #0
 800d638:	d003      	beq.n	800d642 <f_open+0xe6>
					res = FR_DENIED;
 800d63a:	2307      	movs	r3, #7
 800d63c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d640:	e007      	b.n	800d652 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d642:	79fb      	ldrb	r3, [r7, #7]
 800d644:	f003 0304 	and.w	r3, r3, #4
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d002      	beq.n	800d652 <f_open+0xf6>
 800d64c:	2308      	movs	r3, #8
 800d64e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d652:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d656:	2b00      	cmp	r3, #0
 800d658:	d168      	bne.n	800d72c <f_open+0x1d0>
 800d65a:	79fb      	ldrb	r3, [r7, #7]
 800d65c:	f003 0308 	and.w	r3, r3, #8
 800d660:	2b00      	cmp	r3, #0
 800d662:	d063      	beq.n	800d72c <f_open+0x1d0>
				dw = GET_FATTIME();
 800d664:	f7fd fbd6 	bl	800ae14 <get_fattime>
 800d668:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66c:	330e      	adds	r3, #14
 800d66e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d670:	4618      	mov	r0, r3
 800d672:	f7fe fa02 	bl	800ba7a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d678:	3316      	adds	r3, #22
 800d67a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7fe f9fc 	bl	800ba7a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d684:	330b      	adds	r3, #11
 800d686:	2220      	movs	r2, #32
 800d688:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d68e:	4611      	mov	r1, r2
 800d690:	4618      	mov	r0, r3
 800d692:	f7ff f981 	bl	800c998 <ld_clust>
 800d696:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d69c:	2200      	movs	r2, #0
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7ff f999 	bl	800c9d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6a6:	331c      	adds	r3, #28
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe f9e5 	bl	800ba7a <st_dword>
					fs->wflag = 1;
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d6b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d037      	beq.n	800d72c <f_open+0x1d0>
						dw = fs->winsect;
 800d6bc:	693b      	ldr	r3, [r7, #16]
 800d6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6c0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d6c2:	f107 0314 	add.w	r3, r7, #20
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fe feac 	bl	800c428 <remove_chain>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d6d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d126      	bne.n	800d72c <f_open+0x1d0>
							res = move_window(fs, dw);
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fe fc54 	bl	800bf90 <move_window>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d6f2:	3a01      	subs	r2, #1
 800d6f4:	611a      	str	r2, [r3, #16]
 800d6f6:	e019      	b.n	800d72c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d6f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d115      	bne.n	800d72c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d700:	7ebb      	ldrb	r3, [r7, #26]
 800d702:	f003 0310 	and.w	r3, r3, #16
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <f_open+0x1b6>
					res = FR_NO_FILE;
 800d70a:	2304      	movs	r3, #4
 800d70c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d710:	e00c      	b.n	800d72c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d712:	79fb      	ldrb	r3, [r7, #7]
 800d714:	f003 0302 	and.w	r3, r3, #2
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d007      	beq.n	800d72c <f_open+0x1d0>
 800d71c:	7ebb      	ldrb	r3, [r7, #26]
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <f_open+0x1d0>
						res = FR_DENIED;
 800d726:	2307      	movs	r3, #7
 800d728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d72c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d730:	2b00      	cmp	r3, #0
 800d732:	d126      	bne.n	800d782 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d734:	79fb      	ldrb	r3, [r7, #7]
 800d736:	f003 0308 	and.w	r3, r3, #8
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d003      	beq.n	800d746 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d73e:	79fb      	ldrb	r3, [r7, #7]
 800d740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d744:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d74e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	2b01      	cmp	r3, #1
 800d758:	bf8c      	ite	hi
 800d75a:	2301      	movhi	r3, #1
 800d75c:	2300      	movls	r3, #0
 800d75e:	b2db      	uxtb	r3, r3
 800d760:	461a      	mov	r2, r3
 800d762:	f107 0314 	add.w	r3, r7, #20
 800d766:	4611      	mov	r1, r2
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fe fadf 	bl	800bd2c <inc_lock>
 800d76e:	4602      	mov	r2, r0
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	691b      	ldr	r3, [r3, #16]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d102      	bne.n	800d782 <f_open+0x226>
 800d77c:	2302      	movs	r3, #2
 800d77e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d782:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d786:	2b00      	cmp	r3, #0
 800d788:	f040 8095 	bne.w	800d8b6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d790:	4611      	mov	r1, r2
 800d792:	4618      	mov	r0, r3
 800d794:	f7ff f900 	bl	800c998 <ld_clust>
 800d798:	4602      	mov	r2, r0
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d79e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7a0:	331c      	adds	r3, #28
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fe f92b 	bl	800b9fe <ld_dword>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	88da      	ldrh	r2, [r3, #6]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	79fa      	ldrb	r2, [r7, #7]
 800d7c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	3330      	adds	r3, #48	@ 0x30
 800d7de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fe f995 	bl	800bb14 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d7ea:	79fb      	ldrb	r3, [r7, #7]
 800d7ec:	f003 0320 	and.w	r3, r3, #32
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d060      	beq.n	800d8b6 <f_open+0x35a>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d05c      	beq.n	800d8b6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	68da      	ldr	r2, [r3, #12]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	895b      	ldrh	r3, [r3, #10]
 800d808:	025b      	lsls	r3, r3, #9
 800d80a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	689b      	ldr	r3, [r3, #8]
 800d810:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	657b      	str	r3, [r7, #84]	@ 0x54
 800d818:	e016      	b.n	800d848 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d81e:	4618      	mov	r0, r3
 800d820:	f7fe fc71 	bl	800c106 <get_fat>
 800d824:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d826:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d802      	bhi.n	800d832 <f_open+0x2d6>
 800d82c:	2302      	movs	r3, #2
 800d82e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d832:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d838:	d102      	bne.n	800d840 <f_open+0x2e4>
 800d83a:	2301      	movs	r3, #1
 800d83c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d840:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	657b      	str	r3, [r7, #84]	@ 0x54
 800d848:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d103      	bne.n	800d858 <f_open+0x2fc>
 800d850:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d854:	429a      	cmp	r2, r3
 800d856:	d8e0      	bhi.n	800d81a <f_open+0x2be>
				}
				fp->clust = clst;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d85c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d85e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d862:	2b00      	cmp	r3, #0
 800d864:	d127      	bne.n	800d8b6 <f_open+0x35a>
 800d866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d022      	beq.n	800d8b6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d874:	4618      	mov	r0, r3
 800d876:	f7fe fc27 	bl	800c0c8 <clust2sect>
 800d87a:	6478      	str	r0, [r7, #68]	@ 0x44
 800d87c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d103      	bne.n	800d88a <f_open+0x32e>
						res = FR_INT_ERR;
 800d882:	2302      	movs	r3, #2
 800d884:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d888:	e015      	b.n	800d8b6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d88a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d88c:	0a5a      	lsrs	r2, r3, #9
 800d88e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d890:	441a      	add	r2, r3
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	7858      	ldrb	r0, [r3, #1]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	6a1a      	ldr	r2, [r3, #32]
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	f7fe f833 	bl	800b910 <disk_read>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d002      	beq.n	800d8b6 <f_open+0x35a>
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d8b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d002      	beq.n	800d8c4 <f_open+0x368>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800d8ca:	4611      	mov	r1, r2
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7fe f994 	bl	800bbfa <unlock_fs>
 800d8d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3760      	adds	r7, #96	@ 0x60
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b08e      	sub	sp, #56	@ 0x38
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	60f8      	str	r0, [r7, #12]
 800d8e6:	60b9      	str	r1, [r7, #8]
 800d8e8:	607a      	str	r2, [r7, #4]
 800d8ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	f107 0214 	add.w	r2, r7, #20
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7ff fd80 	bl	800d404 <validate>
 800d904:	4603      	mov	r3, r0
 800d906:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d90a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d107      	bne.n	800d922 <f_read+0x44>
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	7d5b      	ldrb	r3, [r3, #21]
 800d916:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d91a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d009      	beq.n	800d936 <f_read+0x58>
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d928:	4611      	mov	r1, r2
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe f965 	bl	800bbfa <unlock_fs>
 800d930:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d934:	e13d      	b.n	800dbb2 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	7d1b      	ldrb	r3, [r3, #20]
 800d93a:	f003 0301 	and.w	r3, r3, #1
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d106      	bne.n	800d950 <f_read+0x72>
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	2107      	movs	r1, #7
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe f957 	bl	800bbfa <unlock_fs>
 800d94c:	2307      	movs	r3, #7
 800d94e:	e130      	b.n	800dbb2 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	68da      	ldr	r2, [r3, #12]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	699b      	ldr	r3, [r3, #24]
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	6a3b      	ldr	r3, [r7, #32]
 800d960:	429a      	cmp	r2, r3
 800d962:	f240 811c 	bls.w	800db9e <f_read+0x2c0>
 800d966:	6a3b      	ldr	r3, [r7, #32]
 800d968:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d96a:	e118      	b.n	800db9e <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	699b      	ldr	r3, [r3, #24]
 800d970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d974:	2b00      	cmp	r3, #0
 800d976:	f040 80e4 	bne.w	800db42 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	699b      	ldr	r3, [r3, #24]
 800d97e:	0a5b      	lsrs	r3, r3, #9
 800d980:	697a      	ldr	r2, [r7, #20]
 800d982:	8952      	ldrh	r2, [r2, #10]
 800d984:	3a01      	subs	r2, #1
 800d986:	4013      	ands	r3, r2
 800d988:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d139      	bne.n	800da04 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d103      	bne.n	800d9a0 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d99e:	e013      	b.n	800d9c8 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d007      	beq.n	800d9b8 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f7fe fe37 	bl	800c622 <clmt_clust>
 800d9b4:	6338      	str	r0, [r7, #48]	@ 0x30
 800d9b6:	e007      	b.n	800d9c8 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	69db      	ldr	r3, [r3, #28]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	f7fe fba0 	bl	800c106 <get_fat>
 800d9c6:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d809      	bhi.n	800d9e2 <f_read+0x104>
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	755a      	strb	r2, [r3, #21]
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	2102      	movs	r1, #2
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fe f90e 	bl	800bbfa <unlock_fs>
 800d9de:	2302      	movs	r3, #2
 800d9e0:	e0e7      	b.n	800dbb2 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9e8:	d109      	bne.n	800d9fe <f_read+0x120>
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	755a      	strb	r2, [r3, #21]
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7fe f900 	bl	800bbfa <unlock_fs>
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	e0d9      	b.n	800dbb2 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da02:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da04:	697a      	ldr	r2, [r7, #20]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	69db      	ldr	r3, [r3, #28]
 800da0a:	4619      	mov	r1, r3
 800da0c:	4610      	mov	r0, r2
 800da0e:	f7fe fb5b 	bl	800c0c8 <clust2sect>
 800da12:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d109      	bne.n	800da2e <f_read+0x150>
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2202      	movs	r2, #2
 800da1e:	755a      	strb	r2, [r3, #21]
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	2102      	movs	r1, #2
 800da24:	4618      	mov	r0, r3
 800da26:	f7fe f8e8 	bl	800bbfa <unlock_fs>
 800da2a:	2302      	movs	r3, #2
 800da2c:	e0c1      	b.n	800dbb2 <f_read+0x2d4>
			sect += csect;
 800da2e:	69ba      	ldr	r2, [r7, #24]
 800da30:	69fb      	ldr	r3, [r7, #28]
 800da32:	4413      	add	r3, r2
 800da34:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	0a5b      	lsrs	r3, r3, #9
 800da3a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800da3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d03e      	beq.n	800dac0 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800da42:	69fa      	ldr	r2, [r7, #28]
 800da44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da46:	4413      	add	r3, r2
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	8952      	ldrh	r2, [r2, #10]
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d905      	bls.n	800da5c <f_read+0x17e>
					cc = fs->csize - csect;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	895b      	ldrh	r3, [r3, #10]
 800da54:	461a      	mov	r2, r3
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	7858      	ldrb	r0, [r3, #1]
 800da60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da62:	69ba      	ldr	r2, [r7, #24]
 800da64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da66:	f7fd ff53 	bl	800b910 <disk_read>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d009      	beq.n	800da84 <f_read+0x1a6>
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2201      	movs	r2, #1
 800da74:	755a      	strb	r2, [r3, #21]
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	2101      	movs	r1, #1
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fe f8bd 	bl	800bbfa <unlock_fs>
 800da80:	2301      	movs	r3, #1
 800da82:	e096      	b.n	800dbb2 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	7d1b      	ldrb	r3, [r3, #20]
 800da88:	b25b      	sxtb	r3, r3
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	da14      	bge.n	800dab8 <f_read+0x1da>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	6a1a      	ldr	r2, [r3, #32]
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	1ad3      	subs	r3, r2, r3
 800da96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da98:	429a      	cmp	r2, r3
 800da9a:	d90d      	bls.n	800dab8 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	6a1a      	ldr	r2, [r3, #32]
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	1ad3      	subs	r3, r2, r3
 800daa4:	025b      	lsls	r3, r3, #9
 800daa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800daa8:	18d0      	adds	r0, r2, r3
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	3330      	adds	r3, #48	@ 0x30
 800daae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dab2:	4619      	mov	r1, r3
 800dab4:	f7fe f80d 	bl	800bad2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daba:	025b      	lsls	r3, r3, #9
 800dabc:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800dabe:	e05a      	b.n	800db76 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6a1b      	ldr	r3, [r3, #32]
 800dac4:	69ba      	ldr	r2, [r7, #24]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d038      	beq.n	800db3c <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	7d1b      	ldrb	r3, [r3, #20]
 800dace:	b25b      	sxtb	r3, r3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	da1d      	bge.n	800db10 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	7858      	ldrb	r0, [r3, #1]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	6a1a      	ldr	r2, [r3, #32]
 800dae2:	2301      	movs	r3, #1
 800dae4:	f7fd ff34 	bl	800b950 <disk_write>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d009      	beq.n	800db02 <f_read+0x224>
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2201      	movs	r2, #1
 800daf2:	755a      	strb	r2, [r3, #21]
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	2101      	movs	r1, #1
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fe f87e 	bl	800bbfa <unlock_fs>
 800dafe:	2301      	movs	r3, #1
 800db00:	e057      	b.n	800dbb2 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	7d1b      	ldrb	r3, [r3, #20]
 800db06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db0a:	b2da      	uxtb	r2, r3
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	7858      	ldrb	r0, [r3, #1]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db1a:	2301      	movs	r3, #1
 800db1c:	69ba      	ldr	r2, [r7, #24]
 800db1e:	f7fd fef7 	bl	800b910 <disk_read>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d009      	beq.n	800db3c <f_read+0x25e>
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2201      	movs	r2, #1
 800db2c:	755a      	strb	r2, [r3, #21]
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	2101      	movs	r1, #1
 800db32:	4618      	mov	r0, r3
 800db34:	f7fe f861 	bl	800bbfa <unlock_fs>
 800db38:	2301      	movs	r3, #1
 800db3a:	e03a      	b.n	800dbb2 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	69ba      	ldr	r2, [r7, #24]
 800db40:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db4a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800db4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800db50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	429a      	cmp	r2, r3
 800db56:	d901      	bls.n	800db5c <f_read+0x27e>
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	699b      	ldr	r3, [r3, #24]
 800db66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db6a:	4413      	add	r3, r2
 800db6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db6e:	4619      	mov	r1, r3
 800db70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db72:	f7fd ffae 	bl	800bad2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800db76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7a:	4413      	add	r3, r2
 800db7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	699a      	ldr	r2, [r3, #24]
 800db82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db84:	441a      	add	r2, r3
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	619a      	str	r2, [r3, #24]
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db90:	441a      	add	r2, r3
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db9a:	1ad3      	subs	r3, r2, r3
 800db9c:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	f47f aee3 	bne.w	800d96c <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	2100      	movs	r1, #0
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fe f825 	bl	800bbfa <unlock_fs>
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3738      	adds	r7, #56	@ 0x38
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}

0800dbba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dbba:	b580      	push	{r7, lr}
 800dbbc:	b08c      	sub	sp, #48	@ 0x30
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	60f8      	str	r0, [r7, #12]
 800dbc2:	60b9      	str	r1, [r7, #8]
 800dbc4:	607a      	str	r2, [r7, #4]
 800dbc6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f107 0210 	add.w	r2, r7, #16
 800dbd8:	4611      	mov	r1, r2
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7ff fc12 	bl	800d404 <validate>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dbe6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d107      	bne.n	800dbfe <f_write+0x44>
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	7d5b      	ldrb	r3, [r3, #21]
 800dbf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800dbf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d009      	beq.n	800dc12 <f_write+0x58>
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800dc04:	4611      	mov	r1, r2
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fd fff7 	bl	800bbfa <unlock_fs>
 800dc0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800dc10:	e173      	b.n	800defa <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	7d1b      	ldrb	r3, [r3, #20]
 800dc16:	f003 0302 	and.w	r3, r3, #2
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <f_write+0x72>
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	2107      	movs	r1, #7
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fd ffe9 	bl	800bbfa <unlock_fs>
 800dc28:	2307      	movs	r3, #7
 800dc2a:	e166      	b.n	800defa <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	699a      	ldr	r2, [r3, #24]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	441a      	add	r2, r3
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	699b      	ldr	r3, [r3, #24]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	f080 814b 	bcs.w	800ded4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	699b      	ldr	r3, [r3, #24]
 800dc42:	43db      	mvns	r3, r3
 800dc44:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dc46:	e145      	b.n	800ded4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f040 8101 	bne.w	800de58 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	699b      	ldr	r3, [r3, #24]
 800dc5a:	0a5b      	lsrs	r3, r3, #9
 800dc5c:	693a      	ldr	r2, [r7, #16]
 800dc5e:	8952      	ldrh	r2, [r2, #10]
 800dc60:	3a01      	subs	r2, #1
 800dc62:	4013      	ands	r3, r2
 800dc64:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d14d      	bne.n	800dd08 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	699b      	ldr	r3, [r3, #24]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10c      	bne.n	800dc8e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dc7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d11a      	bne.n	800dcb6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2100      	movs	r1, #0
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fe fc34 	bl	800c4f2 <create_chain>
 800dc8a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dc8c:	e013      	b.n	800dcb6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d007      	beq.n	800dca6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	4619      	mov	r1, r3
 800dc9c:	68f8      	ldr	r0, [r7, #12]
 800dc9e:	f7fe fcc0 	bl	800c622 <clmt_clust>
 800dca2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dca4:	e007      	b.n	800dcb6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dca6:	68fa      	ldr	r2, [r7, #12]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	69db      	ldr	r3, [r3, #28]
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f7fe fc1f 	bl	800c4f2 <create_chain>
 800dcb4:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f000 8110 	beq.w	800dede <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dcbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d109      	bne.n	800dcd8 <f_write+0x11e>
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	755a      	strb	r2, [r3, #21]
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	2102      	movs	r1, #2
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fd ff93 	bl	800bbfa <unlock_fs>
 800dcd4:	2302      	movs	r3, #2
 800dcd6:	e110      	b.n	800defa <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcde:	d109      	bne.n	800dcf4 <f_write+0x13a>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2201      	movs	r2, #1
 800dce4:	755a      	strb	r2, [r3, #21]
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	2101      	movs	r1, #1
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fd ff85 	bl	800bbfa <unlock_fs>
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e102      	b.n	800defa <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dcf8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d102      	bne.n	800dd08 <f_write+0x14e>
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd06:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	7d1b      	ldrb	r3, [r3, #20]
 800dd0c:	b25b      	sxtb	r3, r3
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	da1d      	bge.n	800dd4e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	7858      	ldrb	r0, [r3, #1]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6a1a      	ldr	r2, [r3, #32]
 800dd20:	2301      	movs	r3, #1
 800dd22:	f7fd fe15 	bl	800b950 <disk_write>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d009      	beq.n	800dd40 <f_write+0x186>
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	755a      	strb	r2, [r3, #21]
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	2101      	movs	r1, #1
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fd ff5f 	bl	800bbfa <unlock_fs>
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e0dc      	b.n	800defa <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	7d1b      	ldrb	r3, [r3, #20]
 800dd44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd48:	b2da      	uxtb	r2, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dd4e:	693a      	ldr	r2, [r7, #16]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	69db      	ldr	r3, [r3, #28]
 800dd54:	4619      	mov	r1, r3
 800dd56:	4610      	mov	r0, r2
 800dd58:	f7fe f9b6 	bl	800c0c8 <clust2sect>
 800dd5c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d109      	bne.n	800dd78 <f_write+0x1be>
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2202      	movs	r2, #2
 800dd68:	755a      	strb	r2, [r3, #21]
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	2102      	movs	r1, #2
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fd ff43 	bl	800bbfa <unlock_fs>
 800dd74:	2302      	movs	r3, #2
 800dd76:	e0c0      	b.n	800defa <f_write+0x340>
			sect += csect;
 800dd78:	697a      	ldr	r2, [r7, #20]
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	0a5b      	lsrs	r3, r3, #9
 800dd84:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dd86:	6a3b      	ldr	r3, [r7, #32]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d041      	beq.n	800de10 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dd8c:	69ba      	ldr	r2, [r7, #24]
 800dd8e:	6a3b      	ldr	r3, [r7, #32]
 800dd90:	4413      	add	r3, r2
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	8952      	ldrh	r2, [r2, #10]
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d905      	bls.n	800dda6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	895b      	ldrh	r3, [r3, #10]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	7858      	ldrb	r0, [r3, #1]
 800ddaa:	6a3b      	ldr	r3, [r7, #32]
 800ddac:	697a      	ldr	r2, [r7, #20]
 800ddae:	69f9      	ldr	r1, [r7, #28]
 800ddb0:	f7fd fdce 	bl	800b950 <disk_write>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d009      	beq.n	800ddce <f_write+0x214>
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	755a      	strb	r2, [r3, #21]
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	2101      	movs	r1, #1
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fd ff18 	bl	800bbfa <unlock_fs>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e095      	b.n	800defa <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	6a1a      	ldr	r2, [r3, #32]
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	1ad3      	subs	r3, r2, r3
 800ddd6:	6a3a      	ldr	r2, [r7, #32]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d915      	bls.n	800de08 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6a1a      	ldr	r2, [r3, #32]
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	1ad3      	subs	r3, r2, r3
 800ddea:	025b      	lsls	r3, r3, #9
 800ddec:	69fa      	ldr	r2, [r7, #28]
 800ddee:	4413      	add	r3, r2
 800ddf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	f7fd fe6c 	bl	800bad2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	7d1b      	ldrb	r3, [r3, #20]
 800ddfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de02:	b2da      	uxtb	r2, r3
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800de08:	6a3b      	ldr	r3, [r7, #32]
 800de0a:	025b      	lsls	r3, r3, #9
 800de0c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800de0e:	e044      	b.n	800de9a <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6a1b      	ldr	r3, [r3, #32]
 800de14:	697a      	ldr	r2, [r7, #20]
 800de16:	429a      	cmp	r2, r3
 800de18:	d01b      	beq.n	800de52 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	699a      	ldr	r2, [r3, #24]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de22:	429a      	cmp	r2, r3
 800de24:	d215      	bcs.n	800de52 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	7858      	ldrb	r0, [r3, #1]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800de30:	2301      	movs	r3, #1
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	f7fd fd6c 	bl	800b910 <disk_read>
 800de38:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d009      	beq.n	800de52 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2201      	movs	r2, #1
 800de42:	755a      	strb	r2, [r3, #21]
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	2101      	movs	r1, #1
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fd fed6 	bl	800bbfa <unlock_fs>
 800de4e:	2301      	movs	r3, #1
 800de50:	e053      	b.n	800defa <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	697a      	ldr	r2, [r7, #20]
 800de56:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	699b      	ldr	r3, [r3, #24]
 800de5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de60:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800de64:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800de66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d901      	bls.n	800de72 <f_write+0x2b8>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	699b      	ldr	r3, [r3, #24]
 800de7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de80:	4413      	add	r3, r2
 800de82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de84:	69f9      	ldr	r1, [r7, #28]
 800de86:	4618      	mov	r0, r3
 800de88:	f7fd fe23 	bl	800bad2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	7d1b      	ldrb	r3, [r3, #20]
 800de90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800de94:	b2da      	uxtb	r2, r3
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800de9a:	69fa      	ldr	r2, [r7, #28]
 800de9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9e:	4413      	add	r3, r2
 800dea0:	61fb      	str	r3, [r7, #28]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	699a      	ldr	r2, [r3, #24]
 800dea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea8:	441a      	add	r2, r3
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	619a      	str	r2, [r3, #24]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	68da      	ldr	r2, [r3, #12]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	699b      	ldr	r3, [r3, #24]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	bf38      	it	cc
 800deba:	461a      	movcc	r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	60da      	str	r2, [r3, #12]
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec6:	441a      	add	r2, r3
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ded0:	1ad3      	subs	r3, r2, r3
 800ded2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f47f aeb6 	bne.w	800dc48 <f_write+0x8e>
 800dedc:	e000      	b.n	800dee0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dede:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	7d1b      	ldrb	r3, [r3, #20]
 800dee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	2100      	movs	r1, #0
 800def2:	4618      	mov	r0, r3
 800def4:	f7fd fe81 	bl	800bbfa <unlock_fs>
 800def8:	2300      	movs	r3, #0
}
 800defa:	4618      	mov	r0, r3
 800defc:	3730      	adds	r7, #48	@ 0x30
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}

0800df02 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800df02:	b580      	push	{r7, lr}
 800df04:	b086      	sub	sp, #24
 800df06:	af00      	add	r7, sp, #0
 800df08:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f107 0208 	add.w	r2, r7, #8
 800df10:	4611      	mov	r1, r2
 800df12:	4618      	mov	r0, r3
 800df14:	f7ff fa76 	bl	800d404 <validate>
 800df18:	4603      	mov	r3, r0
 800df1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df1c:	7dfb      	ldrb	r3, [r7, #23]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d16d      	bne.n	800dffe <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	7d1b      	ldrb	r3, [r3, #20]
 800df26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d067      	beq.n	800dffe <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	7d1b      	ldrb	r3, [r3, #20]
 800df32:	b25b      	sxtb	r3, r3
 800df34:	2b00      	cmp	r3, #0
 800df36:	da1a      	bge.n	800df6e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	7858      	ldrb	r0, [r3, #1]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a1a      	ldr	r2, [r3, #32]
 800df46:	2301      	movs	r3, #1
 800df48:	f7fd fd02 	bl	800b950 <disk_write>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d006      	beq.n	800df60 <f_sync+0x5e>
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2101      	movs	r1, #1
 800df56:	4618      	mov	r0, r3
 800df58:	f7fd fe4f 	bl	800bbfa <unlock_fs>
 800df5c:	2301      	movs	r3, #1
 800df5e:	e055      	b.n	800e00c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	7d1b      	ldrb	r3, [r3, #20]
 800df64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800df6e:	f7fc ff51 	bl	800ae14 <get_fattime>
 800df72:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800df74:	68ba      	ldr	r2, [r7, #8]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df7a:	4619      	mov	r1, r3
 800df7c:	4610      	mov	r0, r2
 800df7e:	f7fe f807 	bl	800bf90 <move_window>
 800df82:	4603      	mov	r3, r0
 800df84:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d138      	bne.n	800dffe <f_sync+0xfc>
					dir = fp->dir_ptr;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df90:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	330b      	adds	r3, #11
 800df96:	781a      	ldrb	r2, [r3, #0]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	330b      	adds	r3, #11
 800df9c:	f042 0220 	orr.w	r2, r2, #32
 800dfa0:	b2d2      	uxtb	r2, r2
 800dfa2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6818      	ldr	r0, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	461a      	mov	r2, r3
 800dfae:	68f9      	ldr	r1, [r7, #12]
 800dfb0:	f7fe fd11 	bl	800c9d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f103 021c 	add.w	r2, r3, #28
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	f7fd fd5a 	bl	800ba7a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	3316      	adds	r3, #22
 800dfca:	6939      	ldr	r1, [r7, #16]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fd fd54 	bl	800ba7a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	3312      	adds	r3, #18
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fd fd33 	bl	800ba44 <st_word>
					fs->wflag = 1;
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fe f800 	bl	800bfec <sync_fs>
 800dfec:	4603      	mov	r3, r0
 800dfee:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	7d1b      	ldrb	r3, [r3, #20]
 800dff4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dff8:	b2da      	uxtb	r2, r3
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	7dfa      	ldrb	r2, [r7, #23]
 800e002:	4611      	mov	r1, r2
 800e004:	4618      	mov	r0, r3
 800e006:	f7fd fdf8 	bl	800bbfa <unlock_fs>
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3718      	adds	r7, #24
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7ff ff70 	bl	800df02 <f_sync>
 800e022:	4603      	mov	r3, r0
 800e024:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e026:	7bfb      	ldrb	r3, [r7, #15]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d11d      	bne.n	800e068 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f107 0208 	add.w	r2, r7, #8
 800e032:	4611      	mov	r1, r2
 800e034:	4618      	mov	r0, r3
 800e036:	f7ff f9e5 	bl	800d404 <validate>
 800e03a:	4603      	mov	r3, r0
 800e03c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d111      	bne.n	800e068 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	691b      	ldr	r3, [r3, #16]
 800e048:	4618      	mov	r0, r3
 800e04a:	f7fd fefd 	bl	800be48 <dec_lock>
 800e04e:	4603      	mov	r3, r0
 800e050:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e052:	7bfb      	ldrb	r3, [r7, #15]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d102      	bne.n	800e05e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2200      	movs	r2, #0
 800e05c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2100      	movs	r1, #0
 800e062:	4618      	mov	r0, r3
 800e064:	f7fd fdc9 	bl	800bbfa <unlock_fs>
#endif
		}
	}
	return res;
 800e068:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b09e      	sub	sp, #120	@ 0x78
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800e07a:	2300      	movs	r3, #0
 800e07c:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800e07e:	f107 010c 	add.w	r1, r7, #12
 800e082:	1d3b      	adds	r3, r7, #4
 800e084:	2202      	movs	r2, #2
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe ff68 	bl	800cf5c <find_volume>
 800e08c:	4603      	mov	r3, r0
 800e08e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800e096:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	f040 808e 	bne.w	800e1bc <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e0a6:	4611      	mov	r1, r2
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fe4b 	bl	800cd44 <follow_path>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800e0b4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d108      	bne.n	800e0ce <f_unlink+0x5c>
 800e0bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e0c0:	2102      	movs	r1, #2
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fd fdb4 	bl	800bc30 <chk_lock>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800e0ce:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d172      	bne.n	800e1bc <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800e0d6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800e0da:	b25b      	sxtb	r3, r3
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	da03      	bge.n	800e0e8 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800e0e0:	2306      	movs	r3, #6
 800e0e2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800e0e6:	e008      	b.n	800e0fa <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800e0e8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e0ec:	f003 0301 	and.w	r3, r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800e0f4:	2307      	movs	r3, #7
 800e0f6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800e0fa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d134      	bne.n	800e16c <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e106:	4611      	mov	r1, r2
 800e108:	4618      	mov	r0, r3
 800e10a:	f7fe fc45 	bl	800c998 <ld_clust>
 800e10e:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800e110:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800e114:	f003 0310 	and.w	r3, r3, #16
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d027      	beq.n	800e16c <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800e120:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e122:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800e124:	f107 0310 	add.w	r3, r7, #16
 800e128:	2100      	movs	r1, #0
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fe faad 	bl	800c68a <dir_sdi>
 800e130:	4603      	mov	r3, r0
 800e132:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800e136:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d116      	bne.n	800e16c <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800e13e:	f107 0310 	add.w	r3, r7, #16
 800e142:	2100      	movs	r1, #0
 800e144:	4618      	mov	r0, r3
 800e146:	f7fe fc66 	bl	800ca16 <dir_read>
 800e14a:	4603      	mov	r3, r0
 800e14c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800e150:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e154:	2b00      	cmp	r3, #0
 800e156:	d102      	bne.n	800e15e <f_unlink+0xec>
 800e158:	2307      	movs	r3, #7
 800e15a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800e15e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e162:	2b04      	cmp	r3, #4
 800e164:	d102      	bne.n	800e16c <f_unlink+0xfa>
 800e166:	2300      	movs	r3, #0
 800e168:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800e16c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e170:	2b00      	cmp	r3, #0
 800e172:	d123      	bne.n	800e1bc <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800e174:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fe fd30 	bl	800cbde <dir_remove>
 800e17e:	4603      	mov	r3, r0
 800e180:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800e184:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10c      	bne.n	800e1a6 <f_unlink+0x134>
 800e18c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d009      	beq.n	800e1a6 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800e192:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800e196:	2200      	movs	r2, #0
 800e198:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7fe f944 	bl	800c428 <remove_chain>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800e1a6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d106      	bne.n	800e1bc <f_unlink+0x14a>
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7fd ff1b 	bl	800bfec <sync_fs>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800e1c2:	4611      	mov	r1, r2
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fd fd18 	bl	800bbfa <unlock_fs>
 800e1ca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3778      	adds	r7, #120	@ 0x78
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
	...

0800e1d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b087      	sub	sp, #28
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	4613      	mov	r3, r2
 800e1e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e1ee:	4b1f      	ldr	r3, [pc, #124]	@ (800e26c <FATFS_LinkDriverEx+0x94>)
 800e1f0:	7a5b      	ldrb	r3, [r3, #9]
 800e1f2:	b2db      	uxtb	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d131      	bne.n	800e25c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e1f8:	4b1c      	ldr	r3, [pc, #112]	@ (800e26c <FATFS_LinkDriverEx+0x94>)
 800e1fa:	7a5b      	ldrb	r3, [r3, #9]
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	461a      	mov	r2, r3
 800e200:	4b1a      	ldr	r3, [pc, #104]	@ (800e26c <FATFS_LinkDriverEx+0x94>)
 800e202:	2100      	movs	r1, #0
 800e204:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e206:	4b19      	ldr	r3, [pc, #100]	@ (800e26c <FATFS_LinkDriverEx+0x94>)
 800e208:	7a5b      	ldrb	r3, [r3, #9]
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	4a17      	ldr	r2, [pc, #92]	@ (800e26c <FATFS_LinkDriverEx+0x94>)
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4413      	add	r3, r2
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e216:	4b15      	ldr	r3, [pc, #84]	@ (800e26c <FATFS_LinkDriverEx+0x94>)
 800e218:	7a5b      	ldrb	r3, [r3, #9]
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	461a      	mov	r2, r3
 800e21e:	4b13      	ldr	r3, [pc, #76]	@ (800e26c <FATFS_LinkDriverEx+0x94>)
 800e220:	4413      	add	r3, r2
 800e222:	79fa      	ldrb	r2, [r7, #7]
 800e224:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e226:	4b11      	ldr	r3, [pc, #68]	@ (800e26c <FATFS_LinkDriverEx+0x94>)
 800e228:	7a5b      	ldrb	r3, [r3, #9]
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	b2d1      	uxtb	r1, r2
 800e230:	4a0e      	ldr	r2, [pc, #56]	@ (800e26c <FATFS_LinkDriverEx+0x94>)
 800e232:	7251      	strb	r1, [r2, #9]
 800e234:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e236:	7dbb      	ldrb	r3, [r7, #22]
 800e238:	3330      	adds	r3, #48	@ 0x30
 800e23a:	b2da      	uxtb	r2, r3
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	3301      	adds	r3, #1
 800e244:	223a      	movs	r2, #58	@ 0x3a
 800e246:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	3302      	adds	r3, #2
 800e24c:	222f      	movs	r2, #47	@ 0x2f
 800e24e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	3303      	adds	r3, #3
 800e254:	2200      	movs	r2, #0
 800e256:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e258:	2300      	movs	r3, #0
 800e25a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	371c      	adds	r7, #28
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr
 800e26a:	bf00      	nop
 800e26c:	20000af0 	.word	0x20000af0

0800e270 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e27a:	2200      	movs	r2, #0
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f7ff ffaa 	bl	800e1d8 <FATFS_LinkDriverEx>
 800e284:	4603      	mov	r3, r0
}
 800e286:	4618      	mov	r0, r3
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b084      	sub	sp, #16
 800e292:	af00      	add	r7, sp, #0
 800e294:	4603      	mov	r3, r0
 800e296:	6039      	str	r1, [r7, #0]
 800e298:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800e29a:	2200      	movs	r2, #0
 800e29c:	2101      	movs	r1, #1
 800e29e:	2001      	movs	r0, #1
 800e2a0:	f000 fc51 	bl	800eb46 <osSemaphoreNew>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	bf14      	ite	ne
 800e2b2:	2301      	movne	r3, #1
 800e2b4:	2300      	moveq	r3, #0
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	60fb      	str	r3, [r7, #12]

    return ret;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 fd59 	bl	800ed84 <osSemaphoreDelete>
#endif
    return 1;
 800e2d2:	2301      	movs	r3, #1
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800e2e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 fcb3 	bl	800ec58 <osSemaphoreAcquire>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d101      	bne.n	800e2fc <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800e306:	b580      	push	{r7, lr}
 800e308:	b082      	sub	sp, #8
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fcf4 	bl	800ecfc <osSemaphoreRelease>
#endif
}
 800e314:	bf00      	nop
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <__NVIC_SetPriority>:
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	4603      	mov	r3, r0
 800e324:	6039      	str	r1, [r7, #0]
 800e326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	db0a      	blt.n	800e346 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	b2da      	uxtb	r2, r3
 800e334:	490c      	ldr	r1, [pc, #48]	@ (800e368 <__NVIC_SetPriority+0x4c>)
 800e336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e33a:	0112      	lsls	r2, r2, #4
 800e33c:	b2d2      	uxtb	r2, r2
 800e33e:	440b      	add	r3, r1
 800e340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e344:	e00a      	b.n	800e35c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	b2da      	uxtb	r2, r3
 800e34a:	4908      	ldr	r1, [pc, #32]	@ (800e36c <__NVIC_SetPriority+0x50>)
 800e34c:	79fb      	ldrb	r3, [r7, #7]
 800e34e:	f003 030f 	and.w	r3, r3, #15
 800e352:	3b04      	subs	r3, #4
 800e354:	0112      	lsls	r2, r2, #4
 800e356:	b2d2      	uxtb	r2, r2
 800e358:	440b      	add	r3, r1
 800e35a:	761a      	strb	r2, [r3, #24]
}
 800e35c:	bf00      	nop
 800e35e:	370c      	adds	r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e366:	4770      	bx	lr
 800e368:	e000e100 	.word	0xe000e100
 800e36c:	e000ed00 	.word	0xe000ed00

0800e370 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e370:	b580      	push	{r7, lr}
 800e372:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e374:	2100      	movs	r1, #0
 800e376:	f06f 0004 	mvn.w	r0, #4
 800e37a:	f7ff ffcf 	bl	800e31c <__NVIC_SetPriority>
#endif
}
 800e37e:	bf00      	nop
 800e380:	bd80      	pop	{r7, pc}
	...

0800e384 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e38a:	f3ef 8305 	mrs	r3, IPSR
 800e38e:	603b      	str	r3, [r7, #0]
  return(result);
 800e390:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e392:	2b00      	cmp	r3, #0
 800e394:	d003      	beq.n	800e39e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e396:	f06f 0305 	mvn.w	r3, #5
 800e39a:	607b      	str	r3, [r7, #4]
 800e39c:	e00c      	b.n	800e3b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e39e:	4b0a      	ldr	r3, [pc, #40]	@ (800e3c8 <osKernelInitialize+0x44>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d105      	bne.n	800e3b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e3a6:	4b08      	ldr	r3, [pc, #32]	@ (800e3c8 <osKernelInitialize+0x44>)
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	607b      	str	r3, [r7, #4]
 800e3b0:	e002      	b.n	800e3b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e3b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e3b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e3b8:	687b      	ldr	r3, [r7, #4]
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	370c      	adds	r7, #12
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	20000afc 	.word	0x20000afc

0800e3cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3d2:	f3ef 8305 	mrs	r3, IPSR
 800e3d6:	603b      	str	r3, [r7, #0]
  return(result);
 800e3d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d003      	beq.n	800e3e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e3de:	f06f 0305 	mvn.w	r3, #5
 800e3e2:	607b      	str	r3, [r7, #4]
 800e3e4:	e010      	b.n	800e408 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e414 <osKernelStart+0x48>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d109      	bne.n	800e402 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e3ee:	f7ff ffbf 	bl	800e370 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e3f2:	4b08      	ldr	r3, [pc, #32]	@ (800e414 <osKernelStart+0x48>)
 800e3f4:	2202      	movs	r2, #2
 800e3f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e3f8:	f002 fbb8 	bl	8010b6c <vTaskStartScheduler>
      stat = osOK;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	607b      	str	r3, [r7, #4]
 800e400:	e002      	b.n	800e408 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e402:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e406:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e408:	687b      	ldr	r3, [r7, #4]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20000afc 	.word	0x20000afc

0800e418 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e418:	b580      	push	{r7, lr}
 800e41a:	b08e      	sub	sp, #56	@ 0x38
 800e41c:	af04      	add	r7, sp, #16
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e424:	2300      	movs	r3, #0
 800e426:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e428:	f3ef 8305 	mrs	r3, IPSR
 800e42c:	617b      	str	r3, [r7, #20]
  return(result);
 800e42e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e430:	2b00      	cmp	r3, #0
 800e432:	d17e      	bne.n	800e532 <osThreadNew+0x11a>
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d07b      	beq.n	800e532 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e43a:	2380      	movs	r3, #128	@ 0x80
 800e43c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e43e:	2318      	movs	r3, #24
 800e440:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e446:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e44a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d045      	beq.n	800e4de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d002      	beq.n	800e460 <osThreadNew+0x48>
        name = attr->name;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	699b      	ldr	r3, [r3, #24]
 800e46c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d008      	beq.n	800e486 <osThreadNew+0x6e>
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	2b38      	cmp	r3, #56	@ 0x38
 800e478:	d805      	bhi.n	800e486 <osThreadNew+0x6e>
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	f003 0301 	and.w	r3, r3, #1
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <osThreadNew+0x72>
        return (NULL);
 800e486:	2300      	movs	r3, #0
 800e488:	e054      	b.n	800e534 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	695b      	ldr	r3, [r3, #20]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d003      	beq.n	800e49a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	695b      	ldr	r3, [r3, #20]
 800e496:	089b      	lsrs	r3, r3, #2
 800e498:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00e      	beq.n	800e4c0 <osThreadNew+0xa8>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	2b5b      	cmp	r3, #91	@ 0x5b
 800e4a8:	d90a      	bls.n	800e4c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d006      	beq.n	800e4c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	695b      	ldr	r3, [r3, #20]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d002      	beq.n	800e4c0 <osThreadNew+0xa8>
        mem = 1;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	61bb      	str	r3, [r7, #24]
 800e4be:	e010      	b.n	800e4e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	689b      	ldr	r3, [r3, #8]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d10c      	bne.n	800e4e2 <osThreadNew+0xca>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d108      	bne.n	800e4e2 <osThreadNew+0xca>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	691b      	ldr	r3, [r3, #16]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d104      	bne.n	800e4e2 <osThreadNew+0xca>
          mem = 0;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	61bb      	str	r3, [r7, #24]
 800e4dc:	e001      	b.n	800e4e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d110      	bne.n	800e50a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e4f0:	9202      	str	r2, [sp, #8]
 800e4f2:	9301      	str	r3, [sp, #4]
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	9300      	str	r3, [sp, #0]
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	6a3a      	ldr	r2, [r7, #32]
 800e4fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e4fe:	68f8      	ldr	r0, [r7, #12]
 800e500:	f002 f958 	bl	80107b4 <xTaskCreateStatic>
 800e504:	4603      	mov	r3, r0
 800e506:	613b      	str	r3, [r7, #16]
 800e508:	e013      	b.n	800e532 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e50a:	69bb      	ldr	r3, [r7, #24]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d110      	bne.n	800e532 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e510:	6a3b      	ldr	r3, [r7, #32]
 800e512:	b29a      	uxth	r2, r3
 800e514:	f107 0310 	add.w	r3, r7, #16
 800e518:	9301      	str	r3, [sp, #4]
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f002 f9a6 	bl	8010874 <xTaskCreate>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d001      	beq.n	800e532 <osThreadNew+0x11a>
            hTask = NULL;
 800e52e:	2300      	movs	r3, #0
 800e530:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e532:	693b      	ldr	r3, [r7, #16]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3728      	adds	r7, #40	@ 0x28
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e544:	f3ef 8305 	mrs	r3, IPSR
 800e548:	60bb      	str	r3, [r7, #8]
  return(result);
 800e54a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d003      	beq.n	800e558 <osDelay+0x1c>
    stat = osErrorISR;
 800e550:	f06f 0305 	mvn.w	r3, #5
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	e007      	b.n	800e568 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e558:	2300      	movs	r3, #0
 800e55a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f002 facc 	bl	8010b00 <vTaskDelay>
    }
  }

  return (stat);
 800e568:	68fb      	ldr	r3, [r7, #12]
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800e572:	b580      	push	{r7, lr}
 800e574:	b084      	sub	sp, #16
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f003 ff14 	bl	80123a8 <pvTimerGetTimerID>
 800e580:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d005      	beq.n	800e594 <TimerCallback+0x22>
    callb->func (callb->arg);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	68fa      	ldr	r2, [r7, #12]
 800e58e:	6852      	ldr	r2, [r2, #4]
 800e590:	4610      	mov	r0, r2
 800e592:	4798      	blx	r3
  }
}
 800e594:	bf00      	nop
 800e596:	3710      	adds	r7, #16
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b08c      	sub	sp, #48	@ 0x30
 800e5a0:	af02      	add	r7, sp, #8
 800e5a2:	60f8      	str	r0, [r7, #12]
 800e5a4:	607a      	str	r2, [r7, #4]
 800e5a6:	603b      	str	r3, [r7, #0]
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5b0:	f3ef 8305 	mrs	r3, IPSR
 800e5b4:	613b      	str	r3, [r7, #16]
  return(result);
 800e5b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d163      	bne.n	800e684 <osTimerNew+0xe8>
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d060      	beq.n	800e684 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e5c2:	2008      	movs	r0, #8
 800e5c4:	f004 f982 	bl	80128cc <pvPortMalloc>
 800e5c8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d059      	beq.n	800e684 <osTimerNew+0xe8>
      callb->func = func;
 800e5d0:	697b      	ldr	r3, [r7, #20]
 800e5d2:	68fa      	ldr	r2, [r7, #12]
 800e5d4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e5dc:	7afb      	ldrb	r3, [r7, #11]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d102      	bne.n	800e5e8 <osTimerNew+0x4c>
        reload = pdFALSE;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	61fb      	str	r3, [r7, #28]
 800e5e6:	e001      	b.n	800e5ec <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800e5ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e5f0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d01c      	beq.n	800e636 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <osTimerNew+0x6e>
          name = attr->name;
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d006      	beq.n	800e620 <osTimerNew+0x84>
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	68db      	ldr	r3, [r3, #12]
 800e616:	2b2b      	cmp	r3, #43	@ 0x2b
 800e618:	d902      	bls.n	800e620 <osTimerNew+0x84>
          mem = 1;
 800e61a:	2301      	movs	r3, #1
 800e61c:	61bb      	str	r3, [r7, #24]
 800e61e:	e00c      	b.n	800e63a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d108      	bne.n	800e63a <osTimerNew+0x9e>
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d104      	bne.n	800e63a <osTimerNew+0x9e>
            mem = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	61bb      	str	r3, [r7, #24]
 800e634:	e001      	b.n	800e63a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800e636:	2300      	movs	r3, #0
 800e638:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d10c      	bne.n	800e65a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	689b      	ldr	r3, [r3, #8]
 800e644:	9301      	str	r3, [sp, #4]
 800e646:	4b12      	ldr	r3, [pc, #72]	@ (800e690 <osTimerNew+0xf4>)
 800e648:	9300      	str	r3, [sp, #0]
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	69fa      	ldr	r2, [r7, #28]
 800e64e:	2101      	movs	r1, #1
 800e650:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e652:	f003 faf2 	bl	8011c3a <xTimerCreateStatic>
 800e656:	6238      	str	r0, [r7, #32]
 800e658:	e00b      	b.n	800e672 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d108      	bne.n	800e672 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e660:	4b0b      	ldr	r3, [pc, #44]	@ (800e690 <osTimerNew+0xf4>)
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	69fa      	ldr	r2, [r7, #28]
 800e668:	2101      	movs	r1, #1
 800e66a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e66c:	f003 fac4 	bl	8011bf8 <xTimerCreate>
 800e670:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800e672:	6a3b      	ldr	r3, [r7, #32]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d105      	bne.n	800e684 <osTimerNew+0xe8>
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d002      	beq.n	800e684 <osTimerNew+0xe8>
        vPortFree (callb);
 800e67e:	6978      	ldr	r0, [r7, #20]
 800e680:	f004 f9f2 	bl	8012a68 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e684:	6a3b      	ldr	r3, [r7, #32]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3728      	adds	r7, #40	@ 0x28
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	0800e573 	.word	0x0800e573

0800e694 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e694:	b580      	push	{r7, lr}
 800e696:	b088      	sub	sp, #32
 800e698:	af02      	add	r7, sp, #8
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6a2:	f3ef 8305 	mrs	r3, IPSR
 800e6a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <osTimerStart+0x22>
    stat = osErrorISR;
 800e6ae:	f06f 0305 	mvn.w	r3, #5
 800e6b2:	617b      	str	r3, [r7, #20]
 800e6b4:	e017      	b.n	800e6e6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d103      	bne.n	800e6c4 <osTimerStart+0x30>
    stat = osErrorParameter;
 800e6bc:	f06f 0303 	mvn.w	r3, #3
 800e6c0:	617b      	str	r3, [r7, #20]
 800e6c2:	e010      	b.n	800e6e6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	683a      	ldr	r2, [r7, #0]
 800e6cc:	2104      	movs	r1, #4
 800e6ce:	6938      	ldr	r0, [r7, #16]
 800e6d0:	f003 fb30 	bl	8011d34 <xTimerGenericCommand>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b01      	cmp	r3, #1
 800e6d8:	d102      	bne.n	800e6e0 <osTimerStart+0x4c>
      stat = osOK;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	617b      	str	r3, [r7, #20]
 800e6de:	e002      	b.n	800e6e6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800e6e0:	f06f 0302 	mvn.w	r3, #2
 800e6e4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e6e6:	697b      	ldr	r3, [r7, #20]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3718      	adds	r7, #24
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b088      	sub	sp, #32
 800e6f4:	af02      	add	r7, sp, #8
 800e6f6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6fc:	f3ef 8305 	mrs	r3, IPSR
 800e700:	60fb      	str	r3, [r7, #12]
  return(result);
 800e702:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e704:	2b00      	cmp	r3, #0
 800e706:	d003      	beq.n	800e710 <osTimerStop+0x20>
    stat = osErrorISR;
 800e708:	f06f 0305 	mvn.w	r3, #5
 800e70c:	617b      	str	r3, [r7, #20]
 800e70e:	e021      	b.n	800e754 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d103      	bne.n	800e71e <osTimerStop+0x2e>
    stat = osErrorParameter;
 800e716:	f06f 0303 	mvn.w	r3, #3
 800e71a:	617b      	str	r3, [r7, #20]
 800e71c:	e01a      	b.n	800e754 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800e71e:	6938      	ldr	r0, [r7, #16]
 800e720:	f003 fe18 	bl	8012354 <xTimerIsTimerActive>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d103      	bne.n	800e732 <osTimerStop+0x42>
      stat = osErrorResource;
 800e72a:	f06f 0302 	mvn.w	r3, #2
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	e010      	b.n	800e754 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800e732:	2300      	movs	r3, #0
 800e734:	9300      	str	r3, [sp, #0]
 800e736:	2300      	movs	r3, #0
 800e738:	2200      	movs	r2, #0
 800e73a:	2103      	movs	r1, #3
 800e73c:	6938      	ldr	r0, [r7, #16]
 800e73e:	f003 faf9 	bl	8011d34 <xTimerGenericCommand>
 800e742:	4603      	mov	r3, r0
 800e744:	2b01      	cmp	r3, #1
 800e746:	d102      	bne.n	800e74e <osTimerStop+0x5e>
        stat = osOK;
 800e748:	2300      	movs	r3, #0
 800e74a:	617b      	str	r3, [r7, #20]
 800e74c:	e002      	b.n	800e754 <osTimerStop+0x64>
      } else {
        stat = osError;
 800e74e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e752:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e754:	697b      	ldr	r3, [r7, #20]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800e75e:	b580      	push	{r7, lr}
 800e760:	b086      	sub	sp, #24
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800e766:	2300      	movs	r3, #0
 800e768:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e76a:	f3ef 8305 	mrs	r3, IPSR
 800e76e:	60fb      	str	r3, [r7, #12]
  return(result);
 800e770:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800e772:	2b00      	cmp	r3, #0
 800e774:	d12d      	bne.n	800e7d2 <osEventFlagsNew+0x74>
    mem = -1;
 800e776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e77a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d015      	beq.n	800e7ae <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d006      	beq.n	800e798 <osEventFlagsNew+0x3a>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	2b1f      	cmp	r3, #31
 800e790:	d902      	bls.n	800e798 <osEventFlagsNew+0x3a>
        mem = 1;
 800e792:	2301      	movs	r3, #1
 800e794:	613b      	str	r3, [r7, #16]
 800e796:	e00c      	b.n	800e7b2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d108      	bne.n	800e7b2 <osEventFlagsNew+0x54>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d104      	bne.n	800e7b2 <osEventFlagsNew+0x54>
          mem = 0;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	613b      	str	r3, [r7, #16]
 800e7ac:	e001      	b.n	800e7b2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d106      	bne.n	800e7c6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f000 fc6b 	bl	800f098 <xEventGroupCreateStatic>
 800e7c2:	6178      	str	r0, [r7, #20]
 800e7c4:	e005      	b.n	800e7d2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d102      	bne.n	800e7d2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800e7cc:	f000 fc9d 	bl	800f10a <xEventGroupCreate>
 800e7d0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800e7d2:	697b      	ldr	r3, [r7, #20]
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3718      	adds	r7, #24
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b086      	sub	sp, #24
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d003      	beq.n	800e7f8 <osEventFlagsSet+0x1c>
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e7f6:	d303      	bcc.n	800e800 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800e7f8:	f06f 0303 	mvn.w	r3, #3
 800e7fc:	617b      	str	r3, [r7, #20]
 800e7fe:	e028      	b.n	800e852 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e800:	f3ef 8305 	mrs	r3, IPSR
 800e804:	60fb      	str	r3, [r7, #12]
  return(result);
 800e806:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d01d      	beq.n	800e848 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800e80c:	2300      	movs	r3, #0
 800e80e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800e810:	f107 0308 	add.w	r3, r7, #8
 800e814:	461a      	mov	r2, r3
 800e816:	6839      	ldr	r1, [r7, #0]
 800e818:	6938      	ldr	r0, [r7, #16]
 800e81a:	f000 fe1f 	bl	800f45c <xEventGroupSetBitsFromISR>
 800e81e:	4603      	mov	r3, r0
 800e820:	2b00      	cmp	r3, #0
 800e822:	d103      	bne.n	800e82c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800e824:	f06f 0302 	mvn.w	r3, #2
 800e828:	617b      	str	r3, [r7, #20]
 800e82a:	e012      	b.n	800e852 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00d      	beq.n	800e852 <osEventFlagsSet+0x76>
 800e836:	4b09      	ldr	r3, [pc, #36]	@ (800e85c <osEventFlagsSet+0x80>)
 800e838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e83c:	601a      	str	r2, [r3, #0]
 800e83e:	f3bf 8f4f 	dsb	sy
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	e004      	b.n	800e852 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	6938      	ldr	r0, [r7, #16]
 800e84c:	f000 fd4a 	bl	800f2e4 <xEventGroupSetBits>
 800e850:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800e852:	697b      	ldr	r3, [r7, #20]
}
 800e854:	4618      	mov	r0, r3
 800e856:	3718      	adds	r7, #24
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}
 800e85c:	e000ed04 	.word	0xe000ed04

0800e860 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800e860:	b580      	push	{r7, lr}
 800e862:	b08c      	sub	sp, #48	@ 0x30
 800e864:	af02      	add	r7, sp, #8
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d003      	beq.n	800e880 <osEventFlagsWait+0x20>
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e87e:	d303      	bcc.n	800e888 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800e880:	f06f 0303 	mvn.w	r3, #3
 800e884:	61fb      	str	r3, [r7, #28]
 800e886:	e04b      	b.n	800e920 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e888:	f3ef 8305 	mrs	r3, IPSR
 800e88c:	617b      	str	r3, [r7, #20]
  return(result);
 800e88e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e890:	2b00      	cmp	r3, #0
 800e892:	d003      	beq.n	800e89c <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800e894:	f06f 0305 	mvn.w	r3, #5
 800e898:	61fb      	str	r3, [r7, #28]
 800e89a:	e041      	b.n	800e920 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d002      	beq.n	800e8ac <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8aa:	e001      	b.n	800e8b0 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f003 0302 	and.w	r3, r3, #2
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d002      	beq.n	800e8c0 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	623b      	str	r3, [r7, #32]
 800e8be:	e001      	b.n	800e8c4 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ca:	6a3a      	ldr	r2, [r7, #32]
 800e8cc:	68b9      	ldr	r1, [r7, #8]
 800e8ce:	69b8      	ldr	r0, [r7, #24]
 800e8d0:	f000 fc36 	bl	800f140 <xEventGroupWaitBits>
 800e8d4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f003 0301 	and.w	r3, r3, #1
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d010      	beq.n	800e902 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800e8e0:	68ba      	ldr	r2, [r7, #8]
 800e8e2:	69fb      	ldr	r3, [r7, #28]
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d019      	beq.n	800e920 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d003      	beq.n	800e8fa <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800e8f2:	f06f 0301 	mvn.w	r3, #1
 800e8f6:	61fb      	str	r3, [r7, #28]
 800e8f8:	e012      	b.n	800e920 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e8fa:	f06f 0302 	mvn.w	r3, #2
 800e8fe:	61fb      	str	r3, [r7, #28]
 800e900:	e00e      	b.n	800e920 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800e902:	68ba      	ldr	r2, [r7, #8]
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	4013      	ands	r3, r2
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d109      	bne.n	800e920 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d003      	beq.n	800e91a <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800e912:	f06f 0301 	mvn.w	r3, #1
 800e916:	61fb      	str	r3, [r7, #28]
 800e918:	e002      	b.n	800e920 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e91a:	f06f 0302 	mvn.w	r3, #2
 800e91e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800e920:	69fb      	ldr	r3, [r7, #28]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3728      	adds	r7, #40	@ 0x28
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b088      	sub	sp, #32
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e932:	2300      	movs	r3, #0
 800e934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e936:	f3ef 8305 	mrs	r3, IPSR
 800e93a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e93c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d174      	bne.n	800ea2c <osMutexNew+0x102>
    if (attr != NULL) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d003      	beq.n	800e950 <osMutexNew+0x26>
      type = attr->attr_bits;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	61bb      	str	r3, [r7, #24]
 800e94e:	e001      	b.n	800e954 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e950:	2300      	movs	r3, #0
 800e952:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	f003 0301 	and.w	r3, r3, #1
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d002      	beq.n	800e964 <osMutexNew+0x3a>
      rmtx = 1U;
 800e95e:	2301      	movs	r3, #1
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	e001      	b.n	800e968 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e964:	2300      	movs	r3, #0
 800e966:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	f003 0308 	and.w	r3, r3, #8
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d15c      	bne.n	800ea2c <osMutexNew+0x102>
      mem = -1;
 800e972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e976:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d015      	beq.n	800e9aa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d006      	beq.n	800e994 <osMutexNew+0x6a>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	2b4f      	cmp	r3, #79	@ 0x4f
 800e98c:	d902      	bls.n	800e994 <osMutexNew+0x6a>
          mem = 1;
 800e98e:	2301      	movs	r3, #1
 800e990:	613b      	str	r3, [r7, #16]
 800e992:	e00c      	b.n	800e9ae <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	689b      	ldr	r3, [r3, #8]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d108      	bne.n	800e9ae <osMutexNew+0x84>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	68db      	ldr	r3, [r3, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d104      	bne.n	800e9ae <osMutexNew+0x84>
            mem = 0;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	613b      	str	r3, [r7, #16]
 800e9a8:	e001      	b.n	800e9ae <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	2b01      	cmp	r3, #1
 800e9b2:	d112      	bne.n	800e9da <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d007      	beq.n	800e9ca <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	689b      	ldr	r3, [r3, #8]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	2004      	movs	r0, #4
 800e9c2:	f000 ff8a 	bl	800f8da <xQueueCreateMutexStatic>
 800e9c6:	61f8      	str	r0, [r7, #28]
 800e9c8:	e016      	b.n	800e9f8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	2001      	movs	r0, #1
 800e9d2:	f000 ff82 	bl	800f8da <xQueueCreateMutexStatic>
 800e9d6:	61f8      	str	r0, [r7, #28]
 800e9d8:	e00e      	b.n	800e9f8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e9da:	693b      	ldr	r3, [r7, #16]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10b      	bne.n	800e9f8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d004      	beq.n	800e9f0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e9e6:	2004      	movs	r0, #4
 800e9e8:	f000 ff5f 	bl	800f8aa <xQueueCreateMutex>
 800e9ec:	61f8      	str	r0, [r7, #28]
 800e9ee:	e003      	b.n	800e9f8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e9f0:	2001      	movs	r0, #1
 800e9f2:	f000 ff5a 	bl	800f8aa <xQueueCreateMutex>
 800e9f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00c      	beq.n	800ea18 <osMutexNew+0xee>
        if (attr != NULL) {
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d003      	beq.n	800ea0c <osMutexNew+0xe2>
          name = attr->name;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60fb      	str	r3, [r7, #12]
 800ea0a:	e001      	b.n	800ea10 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ea10:	68f9      	ldr	r1, [r7, #12]
 800ea12:	69f8      	ldr	r0, [r7, #28]
 800ea14:	f001 fe46 	bl	80106a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d006      	beq.n	800ea2c <osMutexNew+0x102>
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d003      	beq.n	800ea2c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	f043 0301 	orr.w	r3, r3, #1
 800ea2a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ea2c:	69fb      	ldr	r3, [r7, #28]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3720      	adds	r7, #32
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b086      	sub	sp, #24
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f023 0301 	bic.w	r3, r3, #1
 800ea46:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f003 0301 	and.w	r3, r3, #1
 800ea4e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ea50:	2300      	movs	r3, #0
 800ea52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea54:	f3ef 8305 	mrs	r3, IPSR
 800ea58:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea5a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d003      	beq.n	800ea68 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ea60:	f06f 0305 	mvn.w	r3, #5
 800ea64:	617b      	str	r3, [r7, #20]
 800ea66:	e02c      	b.n	800eac2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d103      	bne.n	800ea76 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ea6e:	f06f 0303 	mvn.w	r3, #3
 800ea72:	617b      	str	r3, [r7, #20]
 800ea74:	e025      	b.n	800eac2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d011      	beq.n	800eaa0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ea7c:	6839      	ldr	r1, [r7, #0]
 800ea7e:	6938      	ldr	r0, [r7, #16]
 800ea80:	f000 ff7b 	bl	800f97a <xQueueTakeMutexRecursive>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d01b      	beq.n	800eac2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d003      	beq.n	800ea98 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ea90:	f06f 0301 	mvn.w	r3, #1
 800ea94:	617b      	str	r3, [r7, #20]
 800ea96:	e014      	b.n	800eac2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ea98:	f06f 0302 	mvn.w	r3, #2
 800ea9c:	617b      	str	r3, [r7, #20]
 800ea9e:	e010      	b.n	800eac2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800eaa0:	6839      	ldr	r1, [r7, #0]
 800eaa2:	6938      	ldr	r0, [r7, #16]
 800eaa4:	f001 fb20 	bl	80100e8 <xQueueSemaphoreTake>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d009      	beq.n	800eac2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d003      	beq.n	800eabc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800eab4:	f06f 0301 	mvn.w	r3, #1
 800eab8:	617b      	str	r3, [r7, #20]
 800eaba:	e002      	b.n	800eac2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800eabc:	f06f 0302 	mvn.w	r3, #2
 800eac0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800eac2:	697b      	ldr	r3, [r7, #20]
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3718      	adds	r7, #24
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800eacc:	b580      	push	{r7, lr}
 800eace:	b086      	sub	sp, #24
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f023 0301 	bic.w	r3, r3, #1
 800eada:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f003 0301 	and.w	r3, r3, #1
 800eae2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eae8:	f3ef 8305 	mrs	r3, IPSR
 800eaec:	60bb      	str	r3, [r7, #8]
  return(result);
 800eaee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d003      	beq.n	800eafc <osMutexRelease+0x30>
    stat = osErrorISR;
 800eaf4:	f06f 0305 	mvn.w	r3, #5
 800eaf8:	617b      	str	r3, [r7, #20]
 800eafa:	e01f      	b.n	800eb3c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d103      	bne.n	800eb0a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800eb02:	f06f 0303 	mvn.w	r3, #3
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	e018      	b.n	800eb3c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d009      	beq.n	800eb24 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800eb10:	6938      	ldr	r0, [r7, #16]
 800eb12:	f000 fefd 	bl	800f910 <xQueueGiveMutexRecursive>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d00f      	beq.n	800eb3c <osMutexRelease+0x70>
        stat = osErrorResource;
 800eb1c:	f06f 0302 	mvn.w	r3, #2
 800eb20:	617b      	str	r3, [r7, #20]
 800eb22:	e00b      	b.n	800eb3c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800eb24:	2300      	movs	r3, #0
 800eb26:	2200      	movs	r2, #0
 800eb28:	2100      	movs	r1, #0
 800eb2a:	6938      	ldr	r0, [r7, #16]
 800eb2c:	f000 ffca 	bl	800fac4 <xQueueGenericSend>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d002      	beq.n	800eb3c <osMutexRelease+0x70>
        stat = osErrorResource;
 800eb36:	f06f 0302 	mvn.w	r3, #2
 800eb3a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800eb3c:	697b      	ldr	r3, [r7, #20]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3718      	adds	r7, #24
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b08a      	sub	sp, #40	@ 0x28
 800eb4a:	af02      	add	r7, sp, #8
 800eb4c:	60f8      	str	r0, [r7, #12]
 800eb4e:	60b9      	str	r1, [r7, #8]
 800eb50:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800eb52:	2300      	movs	r3, #0
 800eb54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb56:	f3ef 8305 	mrs	r3, IPSR
 800eb5a:	613b      	str	r3, [r7, #16]
  return(result);
 800eb5c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d175      	bne.n	800ec4e <osSemaphoreNew+0x108>
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d072      	beq.n	800ec4e <osSemaphoreNew+0x108>
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d86e      	bhi.n	800ec4e <osSemaphoreNew+0x108>
    mem = -1;
 800eb70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb74:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d015      	beq.n	800eba8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	689b      	ldr	r3, [r3, #8]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d006      	beq.n	800eb92 <osSemaphoreNew+0x4c>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	2b4f      	cmp	r3, #79	@ 0x4f
 800eb8a:	d902      	bls.n	800eb92 <osSemaphoreNew+0x4c>
        mem = 1;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	61bb      	str	r3, [r7, #24]
 800eb90:	e00c      	b.n	800ebac <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d108      	bne.n	800ebac <osSemaphoreNew+0x66>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d104      	bne.n	800ebac <osSemaphoreNew+0x66>
          mem = 0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	61bb      	str	r3, [r7, #24]
 800eba6:	e001      	b.n	800ebac <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ebac:	69bb      	ldr	r3, [r7, #24]
 800ebae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebb2:	d04c      	beq.n	800ec4e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d128      	bne.n	800ec0c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d10a      	bne.n	800ebd6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	2203      	movs	r2, #3
 800ebc6:	9200      	str	r2, [sp, #0]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	2100      	movs	r1, #0
 800ebcc:	2001      	movs	r0, #1
 800ebce:	f000 fd77 	bl	800f6c0 <xQueueGenericCreateStatic>
 800ebd2:	61f8      	str	r0, [r7, #28]
 800ebd4:	e005      	b.n	800ebe2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ebd6:	2203      	movs	r2, #3
 800ebd8:	2100      	movs	r1, #0
 800ebda:	2001      	movs	r0, #1
 800ebdc:	f000 fded 	bl	800f7ba <xQueueGenericCreate>
 800ebe0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d022      	beq.n	800ec2e <osSemaphoreNew+0xe8>
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d01f      	beq.n	800ec2e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ebee:	2300      	movs	r3, #0
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	69f8      	ldr	r0, [r7, #28]
 800ebf6:	f000 ff65 	bl	800fac4 <xQueueGenericSend>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d016      	beq.n	800ec2e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ec00:	69f8      	ldr	r0, [r7, #28]
 800ec02:	f001 fc03 	bl	801040c <vQueueDelete>
            hSemaphore = NULL;
 800ec06:	2300      	movs	r3, #0
 800ec08:	61fb      	str	r3, [r7, #28]
 800ec0a:	e010      	b.n	800ec2e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ec0c:	69bb      	ldr	r3, [r7, #24]
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d108      	bne.n	800ec24 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	461a      	mov	r2, r3
 800ec18:	68b9      	ldr	r1, [r7, #8]
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f000 fee4 	bl	800f9e8 <xQueueCreateCountingSemaphoreStatic>
 800ec20:	61f8      	str	r0, [r7, #28]
 800ec22:	e004      	b.n	800ec2e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ec24:	68b9      	ldr	r1, [r7, #8]
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f000 ff17 	bl	800fa5a <xQueueCreateCountingSemaphore>
 800ec2c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d00c      	beq.n	800ec4e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d003      	beq.n	800ec42 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	617b      	str	r3, [r7, #20]
 800ec40:	e001      	b.n	800ec46 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ec42:	2300      	movs	r3, #0
 800ec44:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ec46:	6979      	ldr	r1, [r7, #20]
 800ec48:	69f8      	ldr	r0, [r7, #28]
 800ec4a:	f001 fd2b 	bl	80106a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ec4e:	69fb      	ldr	r3, [r7, #28]
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3720      	adds	r7, #32
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ec66:	2300      	movs	r3, #0
 800ec68:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d103      	bne.n	800ec78 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ec70:	f06f 0303 	mvn.w	r3, #3
 800ec74:	617b      	str	r3, [r7, #20]
 800ec76:	e039      	b.n	800ecec <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec78:	f3ef 8305 	mrs	r3, IPSR
 800ec7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d022      	beq.n	800ecca <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d003      	beq.n	800ec92 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ec8a:	f06f 0303 	mvn.w	r3, #3
 800ec8e:	617b      	str	r3, [r7, #20]
 800ec90:	e02c      	b.n	800ecec <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ec92:	2300      	movs	r3, #0
 800ec94:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ec96:	f107 0308 	add.w	r3, r7, #8
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	6938      	ldr	r0, [r7, #16]
 800eca0:	f001 fb32 	bl	8010308 <xQueueReceiveFromISR>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b01      	cmp	r3, #1
 800eca8:	d003      	beq.n	800ecb2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ecaa:	f06f 0302 	mvn.w	r3, #2
 800ecae:	617b      	str	r3, [r7, #20]
 800ecb0:	e01c      	b.n	800ecec <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d019      	beq.n	800ecec <osSemaphoreAcquire+0x94>
 800ecb8:	4b0f      	ldr	r3, [pc, #60]	@ (800ecf8 <osSemaphoreAcquire+0xa0>)
 800ecba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecbe:	601a      	str	r2, [r3, #0]
 800ecc0:	f3bf 8f4f 	dsb	sy
 800ecc4:	f3bf 8f6f 	isb	sy
 800ecc8:	e010      	b.n	800ecec <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ecca:	6839      	ldr	r1, [r7, #0]
 800eccc:	6938      	ldr	r0, [r7, #16]
 800ecce:	f001 fa0b 	bl	80100e8 <xQueueSemaphoreTake>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d009      	beq.n	800ecec <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d003      	beq.n	800ece6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ecde:	f06f 0301 	mvn.w	r3, #1
 800ece2:	617b      	str	r3, [r7, #20]
 800ece4:	e002      	b.n	800ecec <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ece6:	f06f 0302 	mvn.w	r3, #2
 800ecea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ecec:	697b      	ldr	r3, [r7, #20]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3718      	adds	r7, #24
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	e000ed04 	.word	0xe000ed04

0800ecfc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b086      	sub	sp, #24
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d103      	bne.n	800ed1a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ed12:	f06f 0303 	mvn.w	r3, #3
 800ed16:	617b      	str	r3, [r7, #20]
 800ed18:	e02c      	b.n	800ed74 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed1a:	f3ef 8305 	mrs	r3, IPSR
 800ed1e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed20:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d01a      	beq.n	800ed5c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ed26:	2300      	movs	r3, #0
 800ed28:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ed2a:	f107 0308 	add.w	r3, r7, #8
 800ed2e:	4619      	mov	r1, r3
 800ed30:	6938      	ldr	r0, [r7, #16]
 800ed32:	f001 f867 	bl	800fe04 <xQueueGiveFromISR>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d003      	beq.n	800ed44 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ed3c:	f06f 0302 	mvn.w	r3, #2
 800ed40:	617b      	str	r3, [r7, #20]
 800ed42:	e017      	b.n	800ed74 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d014      	beq.n	800ed74 <osSemaphoreRelease+0x78>
 800ed4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed80 <osSemaphoreRelease+0x84>)
 800ed4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed50:	601a      	str	r2, [r3, #0]
 800ed52:	f3bf 8f4f 	dsb	sy
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	e00b      	b.n	800ed74 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	2200      	movs	r2, #0
 800ed60:	2100      	movs	r1, #0
 800ed62:	6938      	ldr	r0, [r7, #16]
 800ed64:	f000 feae 	bl	800fac4 <xQueueGenericSend>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d002      	beq.n	800ed74 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ed6e:	f06f 0302 	mvn.w	r3, #2
 800ed72:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ed74:	697b      	ldr	r3, [r7, #20]
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3718      	adds	r7, #24
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	e000ed04 	.word	0xe000ed04

0800ed84 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b086      	sub	sp, #24
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed90:	f3ef 8305 	mrs	r3, IPSR
 800ed94:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed96:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d003      	beq.n	800eda4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800ed9c:	f06f 0305 	mvn.w	r3, #5
 800eda0:	617b      	str	r3, [r7, #20]
 800eda2:	e00e      	b.n	800edc2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d103      	bne.n	800edb2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800edaa:	f06f 0303 	mvn.w	r3, #3
 800edae:	617b      	str	r3, [r7, #20]
 800edb0:	e007      	b.n	800edc2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800edb2:	6938      	ldr	r0, [r7, #16]
 800edb4:	f001 fca0 	bl	80106f8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800edb8:	2300      	movs	r3, #0
 800edba:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800edbc:	6938      	ldr	r0, [r7, #16]
 800edbe:	f001 fb25 	bl	801040c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800edc2:	697b      	ldr	r3, [r7, #20]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3718      	adds	r7, #24
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800edcc:	b580      	push	{r7, lr}
 800edce:	b08a      	sub	sp, #40	@ 0x28
 800edd0:	af02      	add	r7, sp, #8
 800edd2:	60f8      	str	r0, [r7, #12]
 800edd4:	60b9      	str	r1, [r7, #8]
 800edd6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800edd8:	2300      	movs	r3, #0
 800edda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eddc:	f3ef 8305 	mrs	r3, IPSR
 800ede0:	613b      	str	r3, [r7, #16]
  return(result);
 800ede2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d15f      	bne.n	800eea8 <osMessageQueueNew+0xdc>
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d05c      	beq.n	800eea8 <osMessageQueueNew+0xdc>
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d059      	beq.n	800eea8 <osMessageQueueNew+0xdc>
    mem = -1;
 800edf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800edf8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d029      	beq.n	800ee54 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d012      	beq.n	800ee2e <osMessageQueueNew+0x62>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	2b4f      	cmp	r3, #79	@ 0x4f
 800ee0e:	d90e      	bls.n	800ee2e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00a      	beq.n	800ee2e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	695a      	ldr	r2, [r3, #20]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	68b9      	ldr	r1, [r7, #8]
 800ee20:	fb01 f303 	mul.w	r3, r1, r3
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d302      	bcc.n	800ee2e <osMessageQueueNew+0x62>
        mem = 1;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	61bb      	str	r3, [r7, #24]
 800ee2c:	e014      	b.n	800ee58 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d110      	bne.n	800ee58 <osMessageQueueNew+0x8c>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d10c      	bne.n	800ee58 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d108      	bne.n	800ee58 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	695b      	ldr	r3, [r3, #20]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d104      	bne.n	800ee58 <osMessageQueueNew+0x8c>
          mem = 0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	61bb      	str	r3, [r7, #24]
 800ee52:	e001      	b.n	800ee58 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ee54:	2300      	movs	r3, #0
 800ee56:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d10b      	bne.n	800ee76 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	691a      	ldr	r2, [r3, #16]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	2100      	movs	r1, #0
 800ee68:	9100      	str	r1, [sp, #0]
 800ee6a:	68b9      	ldr	r1, [r7, #8]
 800ee6c:	68f8      	ldr	r0, [r7, #12]
 800ee6e:	f000 fc27 	bl	800f6c0 <xQueueGenericCreateStatic>
 800ee72:	61f8      	str	r0, [r7, #28]
 800ee74:	e008      	b.n	800ee88 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d105      	bne.n	800ee88 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	68b9      	ldr	r1, [r7, #8]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f000 fc9a 	bl	800f7ba <xQueueGenericCreate>
 800ee86:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00c      	beq.n	800eea8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d003      	beq.n	800ee9c <osMessageQueueNew+0xd0>
        name = attr->name;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	617b      	str	r3, [r7, #20]
 800ee9a:	e001      	b.n	800eea0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800eea0:	6979      	ldr	r1, [r7, #20]
 800eea2:	69f8      	ldr	r0, [r7, #28]
 800eea4:	f001 fbfe 	bl	80106a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800eea8:	69fb      	ldr	r3, [r7, #28]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3720      	adds	r7, #32
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
	...

0800eeb4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	603b      	str	r3, [r7, #0]
 800eec0:	4613      	mov	r3, r2
 800eec2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eec8:	2300      	movs	r3, #0
 800eeca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eecc:	f3ef 8305 	mrs	r3, IPSR
 800eed0:	617b      	str	r3, [r7, #20]
  return(result);
 800eed2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d028      	beq.n	800ef2a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d005      	beq.n	800eeea <osMessageQueuePut+0x36>
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d002      	beq.n	800eeea <osMessageQueuePut+0x36>
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d003      	beq.n	800eef2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800eeea:	f06f 0303 	mvn.w	r3, #3
 800eeee:	61fb      	str	r3, [r7, #28]
 800eef0:	e038      	b.n	800ef64 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800eef2:	2300      	movs	r3, #0
 800eef4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800eef6:	f107 0210 	add.w	r2, r7, #16
 800eefa:	2300      	movs	r3, #0
 800eefc:	68b9      	ldr	r1, [r7, #8]
 800eefe:	69b8      	ldr	r0, [r7, #24]
 800ef00:	f000 fee2 	bl	800fcc8 <xQueueGenericSendFromISR>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d003      	beq.n	800ef12 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ef0a:	f06f 0302 	mvn.w	r3, #2
 800ef0e:	61fb      	str	r3, [r7, #28]
 800ef10:	e028      	b.n	800ef64 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d025      	beq.n	800ef64 <osMessageQueuePut+0xb0>
 800ef18:	4b15      	ldr	r3, [pc, #84]	@ (800ef70 <osMessageQueuePut+0xbc>)
 800ef1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef1e:	601a      	str	r2, [r3, #0]
 800ef20:	f3bf 8f4f 	dsb	sy
 800ef24:	f3bf 8f6f 	isb	sy
 800ef28:	e01c      	b.n	800ef64 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d002      	beq.n	800ef36 <osMessageQueuePut+0x82>
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d103      	bne.n	800ef3e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ef36:	f06f 0303 	mvn.w	r3, #3
 800ef3a:	61fb      	str	r3, [r7, #28]
 800ef3c:	e012      	b.n	800ef64 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ef3e:	2300      	movs	r3, #0
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	68b9      	ldr	r1, [r7, #8]
 800ef44:	69b8      	ldr	r0, [r7, #24]
 800ef46:	f000 fdbd 	bl	800fac4 <xQueueGenericSend>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d009      	beq.n	800ef64 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d003      	beq.n	800ef5e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ef56:	f06f 0301 	mvn.w	r3, #1
 800ef5a:	61fb      	str	r3, [r7, #28]
 800ef5c:	e002      	b.n	800ef64 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ef5e:	f06f 0302 	mvn.w	r3, #2
 800ef62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ef64:	69fb      	ldr	r3, [r7, #28]
}
 800ef66:	4618      	mov	r0, r3
 800ef68:	3720      	adds	r7, #32
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	bf00      	nop
 800ef70:	e000ed04 	.word	0xe000ed04

0800ef74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b088      	sub	sp, #32
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
 800ef80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ef86:	2300      	movs	r3, #0
 800ef88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef8a:	f3ef 8305 	mrs	r3, IPSR
 800ef8e:	617b      	str	r3, [r7, #20]
  return(result);
 800ef90:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d028      	beq.n	800efe8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d005      	beq.n	800efa8 <osMessageQueueGet+0x34>
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d002      	beq.n	800efa8 <osMessageQueueGet+0x34>
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d003      	beq.n	800efb0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800efa8:	f06f 0303 	mvn.w	r3, #3
 800efac:	61fb      	str	r3, [r7, #28]
 800efae:	e037      	b.n	800f020 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800efb0:	2300      	movs	r3, #0
 800efb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800efb4:	f107 0310 	add.w	r3, r7, #16
 800efb8:	461a      	mov	r2, r3
 800efba:	68b9      	ldr	r1, [r7, #8]
 800efbc:	69b8      	ldr	r0, [r7, #24]
 800efbe:	f001 f9a3 	bl	8010308 <xQueueReceiveFromISR>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d003      	beq.n	800efd0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800efc8:	f06f 0302 	mvn.w	r3, #2
 800efcc:	61fb      	str	r3, [r7, #28]
 800efce:	e027      	b.n	800f020 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d024      	beq.n	800f020 <osMessageQueueGet+0xac>
 800efd6:	4b15      	ldr	r3, [pc, #84]	@ (800f02c <osMessageQueueGet+0xb8>)
 800efd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efdc:	601a      	str	r2, [r3, #0]
 800efde:	f3bf 8f4f 	dsb	sy
 800efe2:	f3bf 8f6f 	isb	sy
 800efe6:	e01b      	b.n	800f020 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d002      	beq.n	800eff4 <osMessageQueueGet+0x80>
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d103      	bne.n	800effc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800eff4:	f06f 0303 	mvn.w	r3, #3
 800eff8:	61fb      	str	r3, [r7, #28]
 800effa:	e011      	b.n	800f020 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800effc:	683a      	ldr	r2, [r7, #0]
 800effe:	68b9      	ldr	r1, [r7, #8]
 800f000:	69b8      	ldr	r0, [r7, #24]
 800f002:	f000 ff8f 	bl	800ff24 <xQueueReceive>
 800f006:	4603      	mov	r3, r0
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d009      	beq.n	800f020 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d003      	beq.n	800f01a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f012:	f06f 0301 	mvn.w	r3, #1
 800f016:	61fb      	str	r3, [r7, #28]
 800f018:	e002      	b.n	800f020 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f01a:	f06f 0302 	mvn.w	r3, #2
 800f01e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f020:	69fb      	ldr	r3, [r7, #28]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3720      	adds	r7, #32
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	e000ed04 	.word	0xe000ed04

0800f030 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f030:	b480      	push	{r7}
 800f032:	b085      	sub	sp, #20
 800f034:	af00      	add	r7, sp, #0
 800f036:	60f8      	str	r0, [r7, #12]
 800f038:	60b9      	str	r1, [r7, #8]
 800f03a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	4a07      	ldr	r2, [pc, #28]	@ (800f05c <vApplicationGetIdleTaskMemory+0x2c>)
 800f040:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	4a06      	ldr	r2, [pc, #24]	@ (800f060 <vApplicationGetIdleTaskMemory+0x30>)
 800f046:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2280      	movs	r2, #128	@ 0x80
 800f04c:	601a      	str	r2, [r3, #0]
}
 800f04e:	bf00      	nop
 800f050:	3714      	adds	r7, #20
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	20000b00 	.word	0x20000b00
 800f060:	20000b5c 	.word	0x20000b5c

0800f064 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f064:	b480      	push	{r7}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	4a07      	ldr	r2, [pc, #28]	@ (800f090 <vApplicationGetTimerTaskMemory+0x2c>)
 800f074:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	4a06      	ldr	r2, [pc, #24]	@ (800f094 <vApplicationGetTimerTaskMemory+0x30>)
 800f07a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f082:	601a      	str	r2, [r3, #0]
}
 800f084:	bf00      	nop
 800f086:	3714      	adds	r7, #20
 800f088:	46bd      	mov	sp, r7
 800f08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08e:	4770      	bx	lr
 800f090:	20000d5c 	.word	0x20000d5c
 800f094:	20000db8 	.word	0x20000db8

0800f098 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b086      	sub	sp, #24
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10b      	bne.n	800f0be <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0aa:	f383 8811 	msr	BASEPRI, r3
 800f0ae:	f3bf 8f6f 	isb	sy
 800f0b2:	f3bf 8f4f 	dsb	sy
 800f0b6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f0b8:	bf00      	nop
 800f0ba:	bf00      	nop
 800f0bc:	e7fd      	b.n	800f0ba <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800f0be:	2320      	movs	r3, #32
 800f0c0:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b20      	cmp	r3, #32
 800f0c6:	d00b      	beq.n	800f0e0 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800f0c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0cc:	f383 8811 	msr	BASEPRI, r3
 800f0d0:	f3bf 8f6f 	isb	sy
 800f0d4:	f3bf 8f4f 	dsb	sy
 800f0d8:	60fb      	str	r3, [r7, #12]
}
 800f0da:	bf00      	nop
 800f0dc:	bf00      	nop
 800f0de:	e7fd      	b.n	800f0dc <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00a      	beq.n	800f100 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f000 f9c5 	bl	800f484 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800f100:	697b      	ldr	r3, [r7, #20]
	}
 800f102:	4618      	mov	r0, r3
 800f104:	3718      	adds	r7, #24
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}

0800f10a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800f10a:	b580      	push	{r7, lr}
 800f10c:	b082      	sub	sp, #8
 800f10e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800f110:	2020      	movs	r0, #32
 800f112:	f003 fbdb 	bl	80128cc <pvPortMalloc>
 800f116:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00a      	beq.n	800f134 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	3304      	adds	r3, #4
 800f128:	4618      	mov	r0, r3
 800f12a:	f000 f9ab 	bl	800f484 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800f134:	687b      	ldr	r3, [r7, #4]
	}
 800f136:	4618      	mov	r0, r3
 800f138:	3708      	adds	r7, #8
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
	...

0800f140 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b090      	sub	sp, #64	@ 0x40
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800f156:	2300      	movs	r3, #0
 800f158:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10b      	bne.n	800f178 <xEventGroupWaitBits+0x38>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	623b      	str	r3, [r7, #32]
}
 800f172:	bf00      	nop
 800f174:	bf00      	nop
 800f176:	e7fd      	b.n	800f174 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f178:	68bb      	ldr	r3, [r7, #8]
 800f17a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f17e:	d30b      	bcc.n	800f198 <xEventGroupWaitBits+0x58>
	__asm volatile
 800f180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f184:	f383 8811 	msr	BASEPRI, r3
 800f188:	f3bf 8f6f 	isb	sy
 800f18c:	f3bf 8f4f 	dsb	sy
 800f190:	61fb      	str	r3, [r7, #28]
}
 800f192:	bf00      	nop
 800f194:	bf00      	nop
 800f196:	e7fd      	b.n	800f194 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10b      	bne.n	800f1b6 <xEventGroupWaitBits+0x76>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	61bb      	str	r3, [r7, #24]
}
 800f1b0:	bf00      	nop
 800f1b2:	bf00      	nop
 800f1b4:	e7fd      	b.n	800f1b2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1b6:	f002 f9d9 	bl	801156c <xTaskGetSchedulerState>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d102      	bne.n	800f1c6 <xEventGroupWaitBits+0x86>
 800f1c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d101      	bne.n	800f1ca <xEventGroupWaitBits+0x8a>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	e000      	b.n	800f1cc <xEventGroupWaitBits+0x8c>
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d10b      	bne.n	800f1e8 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800f1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d4:	f383 8811 	msr	BASEPRI, r3
 800f1d8:	f3bf 8f6f 	isb	sy
 800f1dc:	f3bf 8f4f 	dsb	sy
 800f1e0:	617b      	str	r3, [r7, #20]
}
 800f1e2:	bf00      	nop
 800f1e4:	bf00      	nop
 800f1e6:	e7fd      	b.n	800f1e4 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800f1e8:	f001 fd28 	bl	8010c3c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800f1ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800f1f2:	683a      	ldr	r2, [r7, #0]
 800f1f4:	68b9      	ldr	r1, [r7, #8]
 800f1f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1f8:	f000 f90d 	bl	800f416 <prvTestWaitCondition>
 800f1fc:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800f1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00e      	beq.n	800f222 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800f204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f206:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800f208:	2300      	movs	r3, #0
 800f20a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d028      	beq.n	800f264 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	43db      	mvns	r3, r3
 800f21a:	401a      	ands	r2, r3
 800f21c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f21e:	601a      	str	r2, [r3, #0]
 800f220:	e020      	b.n	800f264 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800f222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f224:	2b00      	cmp	r3, #0
 800f226:	d104      	bne.n	800f232 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800f228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800f22c:	2301      	movs	r3, #1
 800f22e:	633b      	str	r3, [r7, #48]	@ 0x30
 800f230:	e018      	b.n	800f264 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d003      	beq.n	800f240 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800f238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f23a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f23e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d003      	beq.n	800f24e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800f246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f248:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f24c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800f24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f250:	1d18      	adds	r0, r3, #4
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f256:	4313      	orrs	r3, r2
 800f258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f25a:	4619      	mov	r1, r3
 800f25c:	f001 fee8 	bl	8011030 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800f260:	2300      	movs	r3, #0
 800f262:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800f264:	f001 fcf8 	bl	8010c58 <xTaskResumeAll>
 800f268:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800f26a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d031      	beq.n	800f2d4 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800f270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f272:	2b00      	cmp	r3, #0
 800f274:	d107      	bne.n	800f286 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800f276:	4b1a      	ldr	r3, [pc, #104]	@ (800f2e0 <xEventGroupWaitBits+0x1a0>)
 800f278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f27c:	601a      	str	r2, [r3, #0]
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800f286:	f002 faeb 	bl	8011860 <uxTaskResetEventItemValue>
 800f28a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800f28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f28e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f292:	2b00      	cmp	r3, #0
 800f294:	d11a      	bne.n	800f2cc <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800f296:	f003 f9f7 	bl	8012688 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800f29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800f2a0:	683a      	ldr	r2, [r7, #0]
 800f2a2:	68b9      	ldr	r1, [r7, #8]
 800f2a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f2a6:	f000 f8b6 	bl	800f416 <prvTestWaitCondition>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d009      	beq.n	800f2c4 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d006      	beq.n	800f2c4 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	43db      	mvns	r3, r3
 800f2be:	401a      	ands	r2, r3
 800f2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2c2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800f2c4:	2301      	movs	r3, #1
 800f2c6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800f2c8:	f003 fa10 	bl	80126ec <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800f2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3740      	adds	r7, #64	@ 0x40
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	e000ed04 	.word	0xe000ed04

0800f2e4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b08e      	sub	sp, #56	@ 0x38
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d10b      	bne.n	800f318 <xEventGroupSetBits+0x34>
	__asm volatile
 800f300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f304:	f383 8811 	msr	BASEPRI, r3
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	f3bf 8f4f 	dsb	sy
 800f310:	613b      	str	r3, [r7, #16]
}
 800f312:	bf00      	nop
 800f314:	bf00      	nop
 800f316:	e7fd      	b.n	800f314 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f31e:	d30b      	bcc.n	800f338 <xEventGroupSetBits+0x54>
	__asm volatile
 800f320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f324:	f383 8811 	msr	BASEPRI, r3
 800f328:	f3bf 8f6f 	isb	sy
 800f32c:	f3bf 8f4f 	dsb	sy
 800f330:	60fb      	str	r3, [r7, #12]
}
 800f332:	bf00      	nop
 800f334:	bf00      	nop
 800f336:	e7fd      	b.n	800f334 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800f338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f33a:	3304      	adds	r3, #4
 800f33c:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f340:	3308      	adds	r3, #8
 800f342:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800f344:	f001 fc7a 	bl	8010c3c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800f348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800f34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	431a      	orrs	r2, r3
 800f356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f358:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800f35a:	e03c      	b.n	800f3d6 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800f35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800f362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800f368:	2300      	movs	r3, #0
 800f36a:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800f372:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f37a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f382:	2b00      	cmp	r3, #0
 800f384:	d108      	bne.n	800f398 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800f386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f388:	681a      	ldr	r2, [r3, #0]
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	4013      	ands	r3, r2
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d00b      	beq.n	800f3aa <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800f392:	2301      	movs	r3, #1
 800f394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f396:	e008      	b.n	800f3aa <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800f398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	4013      	ands	r3, r2
 800f3a0:	69ba      	ldr	r2, [r7, #24]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d101      	bne.n	800f3aa <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800f3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d010      	beq.n	800f3d2 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d003      	beq.n	800f3c2 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800f3ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	4313      	orrs	r3, r2
 800f3c0:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800f3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f3ca:	4619      	mov	r1, r3
 800f3cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f3ce:	f001 fefd 	bl	80111cc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800f3d2:	69fb      	ldr	r3, [r7, #28]
 800f3d4:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800f3d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f3d8:	6a3b      	ldr	r3, [r7, #32]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d1be      	bne.n	800f35c <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800f3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e4:	43db      	mvns	r3, r3
 800f3e6:	401a      	ands	r2, r3
 800f3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ea:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800f3ec:	f001 fc34 	bl	8010c58 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800f3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f2:	681b      	ldr	r3, [r3, #0]
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3738      	adds	r7, #56	@ 0x38
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800f406:	6839      	ldr	r1, [r7, #0]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7ff ff6b 	bl	800f2e4 <xEventGroupSetBits>
}
 800f40e:	bf00      	nop
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800f416:	b480      	push	{r7}
 800f418:	b087      	sub	sp, #28
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	60f8      	str	r0, [r7, #12]
 800f41e:	60b9      	str	r1, [r7, #8]
 800f420:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800f422:	2300      	movs	r3, #0
 800f424:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d107      	bne.n	800f43c <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	4013      	ands	r3, r2
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00a      	beq.n	800f44c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f436:	2301      	movs	r3, #1
 800f438:	617b      	str	r3, [r7, #20]
 800f43a:	e007      	b.n	800f44c <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	4013      	ands	r3, r2
 800f442:	68ba      	ldr	r2, [r7, #8]
 800f444:	429a      	cmp	r2, r3
 800f446:	d101      	bne.n	800f44c <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f448:	2301      	movs	r3, #1
 800f44a:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800f44c:	697b      	ldr	r3, [r7, #20]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	371c      	adds	r7, #28
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
	...

0800f45c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b086      	sub	sp, #24
 800f460:	af00      	add	r7, sp, #0
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	68ba      	ldr	r2, [r7, #8]
 800f46c:	68f9      	ldr	r1, [r7, #12]
 800f46e:	4804      	ldr	r0, [pc, #16]	@ (800f480 <xEventGroupSetBitsFromISR+0x24>)
 800f470:	f002 ffbc 	bl	80123ec <xTimerPendFunctionCallFromISR>
 800f474:	6178      	str	r0, [r7, #20]

		return xReturn;
 800f476:	697b      	ldr	r3, [r7, #20]
	}
 800f478:	4618      	mov	r0, r3
 800f47a:	3718      	adds	r7, #24
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	0800f3fd 	.word	0x0800f3fd

0800f484 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f103 0208 	add.w	r2, r3, #8
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f49c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	f103 0208 	add.w	r2, r3, #8
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f103 0208 	add.w	r2, r3, #8
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f4b8:	bf00      	nop
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f4d2:	bf00      	nop
 800f4d4:	370c      	adds	r7, #12
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr

0800f4de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f4de:	b480      	push	{r7}
 800f4e0:	b085      	sub	sp, #20
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
 800f4e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	68fa      	ldr	r2, [r7, #12]
 800f4f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	689a      	ldr	r2, [r3, #8]
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	1c5a      	adds	r2, r3, #1
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	601a      	str	r2, [r3, #0]
}
 800f51a:	bf00      	nop
 800f51c:	3714      	adds	r7, #20
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr

0800f526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f526:	b480      	push	{r7}
 800f528:	b085      	sub	sp, #20
 800f52a:	af00      	add	r7, sp, #0
 800f52c:	6078      	str	r0, [r7, #4]
 800f52e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f53c:	d103      	bne.n	800f546 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	691b      	ldr	r3, [r3, #16]
 800f542:	60fb      	str	r3, [r7, #12]
 800f544:	e00c      	b.n	800f560 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	3308      	adds	r3, #8
 800f54a:	60fb      	str	r3, [r7, #12]
 800f54c:	e002      	b.n	800f554 <vListInsert+0x2e>
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	60fb      	str	r3, [r7, #12]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	68ba      	ldr	r2, [r7, #8]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d2f6      	bcs.n	800f54e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	685a      	ldr	r2, [r3, #4]
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	683a      	ldr	r2, [r7, #0]
 800f57a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	687a      	ldr	r2, [r7, #4]
 800f580:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	1c5a      	adds	r2, r3, #1
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	601a      	str	r2, [r3, #0]
}
 800f58c:	bf00      	nop
 800f58e:	3714      	adds	r7, #20
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f598:	b480      	push	{r7}
 800f59a:	b085      	sub	sp, #20
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	691b      	ldr	r3, [r3, #16]
 800f5a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	6892      	ldr	r2, [r2, #8]
 800f5ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	687a      	ldr	r2, [r7, #4]
 800f5b6:	6852      	ldr	r2, [r2, #4]
 800f5b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d103      	bne.n	800f5cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	689a      	ldr	r2, [r3, #8]
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	1e5a      	subs	r2, r3, #1
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3714      	adds	r7, #20
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b084      	sub	sp, #16
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d10b      	bne.n	800f618 <xQueueGenericReset+0x2c>
	__asm volatile
 800f600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f604:	f383 8811 	msr	BASEPRI, r3
 800f608:	f3bf 8f6f 	isb	sy
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	60bb      	str	r3, [r7, #8]
}
 800f612:	bf00      	nop
 800f614:	bf00      	nop
 800f616:	e7fd      	b.n	800f614 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f618:	f003 f836 	bl	8012688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f624:	68f9      	ldr	r1, [r7, #12]
 800f626:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f628:	fb01 f303 	mul.w	r3, r1, r3
 800f62c:	441a      	add	r2, r3
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681a      	ldr	r2, [r3, #0]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f648:	3b01      	subs	r3, #1
 800f64a:	68f9      	ldr	r1, [r7, #12]
 800f64c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f64e:	fb01 f303 	mul.w	r3, r1, r3
 800f652:	441a      	add	r2, r3
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	22ff      	movs	r2, #255	@ 0xff
 800f65c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	22ff      	movs	r2, #255	@ 0xff
 800f664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d114      	bne.n	800f698 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	691b      	ldr	r3, [r3, #16]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d01a      	beq.n	800f6ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	3310      	adds	r3, #16
 800f67a:	4618      	mov	r0, r3
 800f67c:	f001 fd42 	bl	8011104 <xTaskRemoveFromEventList>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d012      	beq.n	800f6ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f686:	4b0d      	ldr	r3, [pc, #52]	@ (800f6bc <xQueueGenericReset+0xd0>)
 800f688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f68c:	601a      	str	r2, [r3, #0]
 800f68e:	f3bf 8f4f 	dsb	sy
 800f692:	f3bf 8f6f 	isb	sy
 800f696:	e009      	b.n	800f6ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	3310      	adds	r3, #16
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7ff fef1 	bl	800f484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	3324      	adds	r3, #36	@ 0x24
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7ff feec 	bl	800f484 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f6ac:	f003 f81e 	bl	80126ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f6b0:	2301      	movs	r3, #1
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	e000ed04 	.word	0xe000ed04

0800f6c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b08e      	sub	sp, #56	@ 0x38
 800f6c4:	af02      	add	r7, sp, #8
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
 800f6cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d10b      	bne.n	800f6ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d8:	f383 8811 	msr	BASEPRI, r3
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	f3bf 8f4f 	dsb	sy
 800f6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f6e6:	bf00      	nop
 800f6e8:	bf00      	nop
 800f6ea:	e7fd      	b.n	800f6e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d10b      	bne.n	800f70a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6f6:	f383 8811 	msr	BASEPRI, r3
 800f6fa:	f3bf 8f6f 	isb	sy
 800f6fe:	f3bf 8f4f 	dsb	sy
 800f702:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f704:	bf00      	nop
 800f706:	bf00      	nop
 800f708:	e7fd      	b.n	800f706 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d002      	beq.n	800f716 <xQueueGenericCreateStatic+0x56>
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d001      	beq.n	800f71a <xQueueGenericCreateStatic+0x5a>
 800f716:	2301      	movs	r3, #1
 800f718:	e000      	b.n	800f71c <xQueueGenericCreateStatic+0x5c>
 800f71a:	2300      	movs	r3, #0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d10b      	bne.n	800f738 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f724:	f383 8811 	msr	BASEPRI, r3
 800f728:	f3bf 8f6f 	isb	sy
 800f72c:	f3bf 8f4f 	dsb	sy
 800f730:	623b      	str	r3, [r7, #32]
}
 800f732:	bf00      	nop
 800f734:	bf00      	nop
 800f736:	e7fd      	b.n	800f734 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d102      	bne.n	800f744 <xQueueGenericCreateStatic+0x84>
 800f73e:	68bb      	ldr	r3, [r7, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d101      	bne.n	800f748 <xQueueGenericCreateStatic+0x88>
 800f744:	2301      	movs	r3, #1
 800f746:	e000      	b.n	800f74a <xQueueGenericCreateStatic+0x8a>
 800f748:	2300      	movs	r3, #0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10b      	bne.n	800f766 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	61fb      	str	r3, [r7, #28]
}
 800f760:	bf00      	nop
 800f762:	bf00      	nop
 800f764:	e7fd      	b.n	800f762 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f766:	2350      	movs	r3, #80	@ 0x50
 800f768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2b50      	cmp	r3, #80	@ 0x50
 800f76e:	d00b      	beq.n	800f788 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	61bb      	str	r3, [r7, #24]
}
 800f782:	bf00      	nop
 800f784:	bf00      	nop
 800f786:	e7fd      	b.n	800f784 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f788:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f790:	2b00      	cmp	r3, #0
 800f792:	d00d      	beq.n	800f7b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f796:	2201      	movs	r2, #1
 800f798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f79c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	4613      	mov	r3, r2
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	68b9      	ldr	r1, [r7, #8]
 800f7aa:	68f8      	ldr	r0, [r7, #12]
 800f7ac:	f000 f840 	bl	800f830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	3730      	adds	r7, #48	@ 0x30
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}

0800f7ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f7ba:	b580      	push	{r7, lr}
 800f7bc:	b08a      	sub	sp, #40	@ 0x28
 800f7be:	af02      	add	r7, sp, #8
 800f7c0:	60f8      	str	r0, [r7, #12]
 800f7c2:	60b9      	str	r1, [r7, #8]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d10b      	bne.n	800f7e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7d2:	f383 8811 	msr	BASEPRI, r3
 800f7d6:	f3bf 8f6f 	isb	sy
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	613b      	str	r3, [r7, #16]
}
 800f7e0:	bf00      	nop
 800f7e2:	bf00      	nop
 800f7e4:	e7fd      	b.n	800f7e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	fb02 f303 	mul.w	r3, r2, r3
 800f7ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	3350      	adds	r3, #80	@ 0x50
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f003 f869 	bl	80128cc <pvPortMalloc>
 800f7fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f7fc:	69bb      	ldr	r3, [r7, #24]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d011      	beq.n	800f826 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f802:	69bb      	ldr	r3, [r7, #24]
 800f804:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	3350      	adds	r3, #80	@ 0x50
 800f80a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	2200      	movs	r2, #0
 800f810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f814:	79fa      	ldrb	r2, [r7, #7]
 800f816:	69bb      	ldr	r3, [r7, #24]
 800f818:	9300      	str	r3, [sp, #0]
 800f81a:	4613      	mov	r3, r2
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	68b9      	ldr	r1, [r7, #8]
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f000 f805 	bl	800f830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f826:	69bb      	ldr	r3, [r7, #24]
	}
 800f828:	4618      	mov	r0, r3
 800f82a:	3720      	adds	r7, #32
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b084      	sub	sp, #16
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
 800f83c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d103      	bne.n	800f84c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	69ba      	ldr	r2, [r7, #24]
 800f848:	601a      	str	r2, [r3, #0]
 800f84a:	e002      	b.n	800f852 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f84c:	69bb      	ldr	r3, [r7, #24]
 800f84e:	687a      	ldr	r2, [r7, #4]
 800f850:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f852:	69bb      	ldr	r3, [r7, #24]
 800f854:	68fa      	ldr	r2, [r7, #12]
 800f856:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f858:	69bb      	ldr	r3, [r7, #24]
 800f85a:	68ba      	ldr	r2, [r7, #8]
 800f85c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f85e:	2101      	movs	r1, #1
 800f860:	69b8      	ldr	r0, [r7, #24]
 800f862:	f7ff fec3 	bl	800f5ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	78fa      	ldrb	r2, [r7, #3]
 800f86a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f86e:	bf00      	nop
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f876:	b580      	push	{r7, lr}
 800f878:	b082      	sub	sp, #8
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00e      	beq.n	800f8a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2200      	movs	r2, #0
 800f88e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f896:	2300      	movs	r3, #0
 800f898:	2200      	movs	r2, #0
 800f89a:	2100      	movs	r1, #0
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f000 f911 	bl	800fac4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f8a2:	bf00      	nop
 800f8a4:	3708      	adds	r7, #8
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b086      	sub	sp, #24
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	617b      	str	r3, [r7, #20]
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f8bc:	79fb      	ldrb	r3, [r7, #7]
 800f8be:	461a      	mov	r2, r3
 800f8c0:	6939      	ldr	r1, [r7, #16]
 800f8c2:	6978      	ldr	r0, [r7, #20]
 800f8c4:	f7ff ff79 	bl	800f7ba <xQueueGenericCreate>
 800f8c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f8ca:	68f8      	ldr	r0, [r7, #12]
 800f8cc:	f7ff ffd3 	bl	800f876 <prvInitialiseMutex>

		return xNewQueue;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
	}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3718      	adds	r7, #24
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}

0800f8da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b088      	sub	sp, #32
 800f8de:	af02      	add	r7, sp, #8
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	6039      	str	r1, [r7, #0]
 800f8e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	617b      	str	r3, [r7, #20]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f8ee:	79fb      	ldrb	r3, [r7, #7]
 800f8f0:	9300      	str	r3, [sp, #0]
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	6939      	ldr	r1, [r7, #16]
 800f8f8:	6978      	ldr	r0, [r7, #20]
 800f8fa:	f7ff fee1 	bl	800f6c0 <xQueueGenericCreateStatic>
 800f8fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f900:	68f8      	ldr	r0, [r7, #12]
 800f902:	f7ff ffb8 	bl	800f876 <prvInitialiseMutex>

		return xNewQueue;
 800f906:	68fb      	ldr	r3, [r7, #12]
	}
 800f908:	4618      	mov	r0, r3
 800f90a:	3718      	adds	r7, #24
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f910:	b590      	push	{r4, r7, lr}
 800f912:	b087      	sub	sp, #28
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d10b      	bne.n	800f93a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800f922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f926:	f383 8811 	msr	BASEPRI, r3
 800f92a:	f3bf 8f6f 	isb	sy
 800f92e:	f3bf 8f4f 	dsb	sy
 800f932:	60fb      	str	r3, [r7, #12]
}
 800f934:	bf00      	nop
 800f936:	bf00      	nop
 800f938:	e7fd      	b.n	800f936 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	689c      	ldr	r4, [r3, #8]
 800f93e:	f001 fe05 	bl	801154c <xTaskGetCurrentTaskHandle>
 800f942:	4603      	mov	r3, r0
 800f944:	429c      	cmp	r4, r3
 800f946:	d111      	bne.n	800f96c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	68db      	ldr	r3, [r3, #12]
 800f94c:	1e5a      	subs	r2, r3, #1
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d105      	bne.n	800f966 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f95a:	2300      	movs	r3, #0
 800f95c:	2200      	movs	r2, #0
 800f95e:	2100      	movs	r1, #0
 800f960:	6938      	ldr	r0, [r7, #16]
 800f962:	f000 f8af 	bl	800fac4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f966:	2301      	movs	r3, #1
 800f968:	617b      	str	r3, [r7, #20]
 800f96a:	e001      	b.n	800f970 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f970:	697b      	ldr	r3, [r7, #20]
	}
 800f972:	4618      	mov	r0, r3
 800f974:	371c      	adds	r7, #28
 800f976:	46bd      	mov	sp, r7
 800f978:	bd90      	pop	{r4, r7, pc}

0800f97a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f97a:	b590      	push	{r4, r7, lr}
 800f97c:	b087      	sub	sp, #28
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
 800f982:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d10b      	bne.n	800f9a6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800f98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f992:	f383 8811 	msr	BASEPRI, r3
 800f996:	f3bf 8f6f 	isb	sy
 800f99a:	f3bf 8f4f 	dsb	sy
 800f99e:	60fb      	str	r3, [r7, #12]
}
 800f9a0:	bf00      	nop
 800f9a2:	bf00      	nop
 800f9a4:	e7fd      	b.n	800f9a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	689c      	ldr	r4, [r3, #8]
 800f9aa:	f001 fdcf 	bl	801154c <xTaskGetCurrentTaskHandle>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	429c      	cmp	r4, r3
 800f9b2:	d107      	bne.n	800f9c4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	1c5a      	adds	r2, r3, #1
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f9be:	2301      	movs	r3, #1
 800f9c0:	617b      	str	r3, [r7, #20]
 800f9c2:	e00c      	b.n	800f9de <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f9c4:	6839      	ldr	r1, [r7, #0]
 800f9c6:	6938      	ldr	r0, [r7, #16]
 800f9c8:	f000 fb8e 	bl	80100e8 <xQueueSemaphoreTake>
 800f9cc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d004      	beq.n	800f9de <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f9d4:	693b      	ldr	r3, [r7, #16]
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	1c5a      	adds	r2, r3, #1
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f9de:	697b      	ldr	r3, [r7, #20]
	}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	371c      	adds	r7, #28
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd90      	pop	{r4, r7, pc}

0800f9e8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b08a      	sub	sp, #40	@ 0x28
 800f9ec:	af02      	add	r7, sp, #8
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d10b      	bne.n	800fa12 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	61bb      	str	r3, [r7, #24]
}
 800fa0c:	bf00      	nop
 800fa0e:	bf00      	nop
 800fa10:	e7fd      	b.n	800fa0e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fa12:	68ba      	ldr	r2, [r7, #8]
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d90b      	bls.n	800fa32 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800fa1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1e:	f383 8811 	msr	BASEPRI, r3
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	617b      	str	r3, [r7, #20]
}
 800fa2c:	bf00      	nop
 800fa2e:	bf00      	nop
 800fa30:	e7fd      	b.n	800fa2e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fa32:	2302      	movs	r3, #2
 800fa34:	9300      	str	r3, [sp, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f7ff fe3f 	bl	800f6c0 <xQueueGenericCreateStatic>
 800fa42:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d002      	beq.n	800fa50 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	68ba      	ldr	r2, [r7, #8]
 800fa4e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fa50:	69fb      	ldr	r3, [r7, #28]
	}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3720      	adds	r7, #32
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}

0800fa5a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fa5a:	b580      	push	{r7, lr}
 800fa5c:	b086      	sub	sp, #24
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
 800fa62:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d10b      	bne.n	800fa82 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800fa6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa6e:	f383 8811 	msr	BASEPRI, r3
 800fa72:	f3bf 8f6f 	isb	sy
 800fa76:	f3bf 8f4f 	dsb	sy
 800fa7a:	613b      	str	r3, [r7, #16]
}
 800fa7c:	bf00      	nop
 800fa7e:	bf00      	nop
 800fa80:	e7fd      	b.n	800fa7e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fa82:	683a      	ldr	r2, [r7, #0]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d90b      	bls.n	800faa2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800fa8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa8e:	f383 8811 	msr	BASEPRI, r3
 800fa92:	f3bf 8f6f 	isb	sy
 800fa96:	f3bf 8f4f 	dsb	sy
 800fa9a:	60fb      	str	r3, [r7, #12]
}
 800fa9c:	bf00      	nop
 800fa9e:	bf00      	nop
 800faa0:	e7fd      	b.n	800fa9e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800faa2:	2202      	movs	r2, #2
 800faa4:	2100      	movs	r1, #0
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f7ff fe87 	bl	800f7ba <xQueueGenericCreate>
 800faac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d002      	beq.n	800faba <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	683a      	ldr	r2, [r7, #0]
 800fab8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800faba:	697b      	ldr	r3, [r7, #20]
	}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3718      	adds	r7, #24
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b08e      	sub	sp, #56	@ 0x38
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
 800fad0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fad2:	2300      	movs	r3, #0
 800fad4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d10b      	bne.n	800faf8 <xQueueGenericSend+0x34>
	__asm volatile
 800fae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fae4:	f383 8811 	msr	BASEPRI, r3
 800fae8:	f3bf 8f6f 	isb	sy
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800faf2:	bf00      	nop
 800faf4:	bf00      	nop
 800faf6:	e7fd      	b.n	800faf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d103      	bne.n	800fb06 <xQueueGenericSend+0x42>
 800fafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d101      	bne.n	800fb0a <xQueueGenericSend+0x46>
 800fb06:	2301      	movs	r3, #1
 800fb08:	e000      	b.n	800fb0c <xQueueGenericSend+0x48>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d10b      	bne.n	800fb28 <xQueueGenericSend+0x64>
	__asm volatile
 800fb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fb22:	bf00      	nop
 800fb24:	bf00      	nop
 800fb26:	e7fd      	b.n	800fb24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d103      	bne.n	800fb36 <xQueueGenericSend+0x72>
 800fb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb32:	2b01      	cmp	r3, #1
 800fb34:	d101      	bne.n	800fb3a <xQueueGenericSend+0x76>
 800fb36:	2301      	movs	r3, #1
 800fb38:	e000      	b.n	800fb3c <xQueueGenericSend+0x78>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10b      	bne.n	800fb58 <xQueueGenericSend+0x94>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	623b      	str	r3, [r7, #32]
}
 800fb52:	bf00      	nop
 800fb54:	bf00      	nop
 800fb56:	e7fd      	b.n	800fb54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb58:	f001 fd08 	bl	801156c <xTaskGetSchedulerState>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d102      	bne.n	800fb68 <xQueueGenericSend+0xa4>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d101      	bne.n	800fb6c <xQueueGenericSend+0xa8>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e000      	b.n	800fb6e <xQueueGenericSend+0xaa>
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d10b      	bne.n	800fb8a <xQueueGenericSend+0xc6>
	__asm volatile
 800fb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb76:	f383 8811 	msr	BASEPRI, r3
 800fb7a:	f3bf 8f6f 	isb	sy
 800fb7e:	f3bf 8f4f 	dsb	sy
 800fb82:	61fb      	str	r3, [r7, #28]
}
 800fb84:	bf00      	nop
 800fb86:	bf00      	nop
 800fb88:	e7fd      	b.n	800fb86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb8a:	f002 fd7d 	bl	8012688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d302      	bcc.n	800fba0 <xQueueGenericSend+0xdc>
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	2b02      	cmp	r3, #2
 800fb9e:	d129      	bne.n	800fbf4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fba0:	683a      	ldr	r2, [r7, #0]
 800fba2:	68b9      	ldr	r1, [r7, #8]
 800fba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fba6:	f000 fc6d 	bl	8010484 <prvCopyDataToQueue>
 800fbaa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d010      	beq.n	800fbd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb6:	3324      	adds	r3, #36	@ 0x24
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f001 faa3 	bl	8011104 <xTaskRemoveFromEventList>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d013      	beq.n	800fbec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fbc4:	4b3f      	ldr	r3, [pc, #252]	@ (800fcc4 <xQueueGenericSend+0x200>)
 800fbc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbca:	601a      	str	r2, [r3, #0]
 800fbcc:	f3bf 8f4f 	dsb	sy
 800fbd0:	f3bf 8f6f 	isb	sy
 800fbd4:	e00a      	b.n	800fbec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d007      	beq.n	800fbec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fbdc:	4b39      	ldr	r3, [pc, #228]	@ (800fcc4 <xQueueGenericSend+0x200>)
 800fbde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbe2:	601a      	str	r2, [r3, #0]
 800fbe4:	f3bf 8f4f 	dsb	sy
 800fbe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fbec:	f002 fd7e 	bl	80126ec <vPortExitCritical>
				return pdPASS;
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e063      	b.n	800fcbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d103      	bne.n	800fc02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fbfa:	f002 fd77 	bl	80126ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	e05c      	b.n	800fcbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d106      	bne.n	800fc16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc08:	f107 0314 	add.w	r3, r7, #20
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f001 fb41 	bl	8011294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc12:	2301      	movs	r3, #1
 800fc14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc16:	f002 fd69 	bl	80126ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc1a:	f001 f80f 	bl	8010c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc1e:	f002 fd33 	bl	8012688 <vPortEnterCritical>
 800fc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fc28:	b25b      	sxtb	r3, r3
 800fc2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc2e:	d103      	bne.n	800fc38 <xQueueGenericSend+0x174>
 800fc30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc32:	2200      	movs	r2, #0
 800fc34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc3e:	b25b      	sxtb	r3, r3
 800fc40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc44:	d103      	bne.n	800fc4e <xQueueGenericSend+0x18a>
 800fc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc4e:	f002 fd4d 	bl	80126ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc52:	1d3a      	adds	r2, r7, #4
 800fc54:	f107 0314 	add.w	r3, r7, #20
 800fc58:	4611      	mov	r1, r2
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f001 fb30 	bl	80112c0 <xTaskCheckForTimeOut>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d124      	bne.n	800fcb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fc66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc68:	f000 fd04 	bl	8010674 <prvIsQueueFull>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d018      	beq.n	800fca4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fc72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc74:	3310      	adds	r3, #16
 800fc76:	687a      	ldr	r2, [r7, #4]
 800fc78:	4611      	mov	r1, r2
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f001 f9b2 	bl	8010fe4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fc80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc82:	f000 fc8f 	bl	80105a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fc86:	f000 ffe7 	bl	8010c58 <xTaskResumeAll>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	f47f af7c 	bne.w	800fb8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800fc92:	4b0c      	ldr	r3, [pc, #48]	@ (800fcc4 <xQueueGenericSend+0x200>)
 800fc94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc98:	601a      	str	r2, [r3, #0]
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	f3bf 8f6f 	isb	sy
 800fca2:	e772      	b.n	800fb8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fca6:	f000 fc7d 	bl	80105a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fcaa:	f000 ffd5 	bl	8010c58 <xTaskResumeAll>
 800fcae:	e76c      	b.n	800fb8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fcb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fcb2:	f000 fc77 	bl	80105a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fcb6:	f000 ffcf 	bl	8010c58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fcba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3738      	adds	r7, #56	@ 0x38
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	e000ed04 	.word	0xe000ed04

0800fcc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b090      	sub	sp, #64	@ 0x40
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	60f8      	str	r0, [r7, #12]
 800fcd0:	60b9      	str	r1, [r7, #8]
 800fcd2:	607a      	str	r2, [r7, #4]
 800fcd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800fcda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d10b      	bne.n	800fcf8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800fce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
 800fcf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fcf2:	bf00      	nop
 800fcf4:	bf00      	nop
 800fcf6:	e7fd      	b.n	800fcf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d103      	bne.n	800fd06 <xQueueGenericSendFromISR+0x3e>
 800fcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d101      	bne.n	800fd0a <xQueueGenericSendFromISR+0x42>
 800fd06:	2301      	movs	r3, #1
 800fd08:	e000      	b.n	800fd0c <xQueueGenericSendFromISR+0x44>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d10b      	bne.n	800fd28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800fd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd14:	f383 8811 	msr	BASEPRI, r3
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	f3bf 8f4f 	dsb	sy
 800fd20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fd22:	bf00      	nop
 800fd24:	bf00      	nop
 800fd26:	e7fd      	b.n	800fd24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	2b02      	cmp	r3, #2
 800fd2c:	d103      	bne.n	800fd36 <xQueueGenericSendFromISR+0x6e>
 800fd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d101      	bne.n	800fd3a <xQueueGenericSendFromISR+0x72>
 800fd36:	2301      	movs	r3, #1
 800fd38:	e000      	b.n	800fd3c <xQueueGenericSendFromISR+0x74>
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d10b      	bne.n	800fd58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800fd40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd44:	f383 8811 	msr	BASEPRI, r3
 800fd48:	f3bf 8f6f 	isb	sy
 800fd4c:	f3bf 8f4f 	dsb	sy
 800fd50:	623b      	str	r3, [r7, #32]
}
 800fd52:	bf00      	nop
 800fd54:	bf00      	nop
 800fd56:	e7fd      	b.n	800fd54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd58:	f002 fd76 	bl	8012848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fd5c:	f3ef 8211 	mrs	r2, BASEPRI
 800fd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd64:	f383 8811 	msr	BASEPRI, r3
 800fd68:	f3bf 8f6f 	isb	sy
 800fd6c:	f3bf 8f4f 	dsb	sy
 800fd70:	61fa      	str	r2, [r7, #28]
 800fd72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fd74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d302      	bcc.n	800fd8a <xQueueGenericSendFromISR+0xc2>
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	2b02      	cmp	r3, #2
 800fd88:	d12f      	bne.n	800fdea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd9a:	683a      	ldr	r2, [r7, #0]
 800fd9c:	68b9      	ldr	r1, [r7, #8]
 800fd9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fda0:	f000 fb70 	bl	8010484 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fda4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800fda8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fdac:	d112      	bne.n	800fdd4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d016      	beq.n	800fde4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb8:	3324      	adds	r3, #36	@ 0x24
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f001 f9a2 	bl	8011104 <xTaskRemoveFromEventList>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00e      	beq.n	800fde4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d00b      	beq.n	800fde4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2201      	movs	r2, #1
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	e007      	b.n	800fde4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fdd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fdd8:	3301      	adds	r3, #1
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	b25a      	sxtb	r2, r3
 800fdde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fde4:	2301      	movs	r3, #1
 800fde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800fde8:	e001      	b.n	800fdee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fdea:	2300      	movs	r3, #0
 800fdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdf0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fdf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fdfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3740      	adds	r7, #64	@ 0x40
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b08e      	sub	sp, #56	@ 0x38
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fe12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d10b      	bne.n	800fe30 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800fe18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe1c:	f383 8811 	msr	BASEPRI, r3
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	623b      	str	r3, [r7, #32]
}
 800fe2a:	bf00      	nop
 800fe2c:	bf00      	nop
 800fe2e:	e7fd      	b.n	800fe2c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d00b      	beq.n	800fe50 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800fe38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe3c:	f383 8811 	msr	BASEPRI, r3
 800fe40:	f3bf 8f6f 	isb	sy
 800fe44:	f3bf 8f4f 	dsb	sy
 800fe48:	61fb      	str	r3, [r7, #28]
}
 800fe4a:	bf00      	nop
 800fe4c:	bf00      	nop
 800fe4e:	e7fd      	b.n	800fe4c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fe50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d103      	bne.n	800fe60 <xQueueGiveFromISR+0x5c>
 800fe58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d101      	bne.n	800fe64 <xQueueGiveFromISR+0x60>
 800fe60:	2301      	movs	r3, #1
 800fe62:	e000      	b.n	800fe66 <xQueueGiveFromISR+0x62>
 800fe64:	2300      	movs	r3, #0
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10b      	bne.n	800fe82 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800fe6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe6e:	f383 8811 	msr	BASEPRI, r3
 800fe72:	f3bf 8f6f 	isb	sy
 800fe76:	f3bf 8f4f 	dsb	sy
 800fe7a:	61bb      	str	r3, [r7, #24]
}
 800fe7c:	bf00      	nop
 800fe7e:	bf00      	nop
 800fe80:	e7fd      	b.n	800fe7e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe82:	f002 fce1 	bl	8012848 <vPortValidateInterruptPriority>
	__asm volatile
 800fe86:	f3ef 8211 	mrs	r2, BASEPRI
 800fe8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	617a      	str	r2, [r7, #20]
 800fe9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fe9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fea6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800feac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800feae:	429a      	cmp	r2, r3
 800feb0:	d22b      	bcs.n	800ff0a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800feb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800feb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800febc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800febe:	1c5a      	adds	r2, r3, #1
 800fec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fec4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fecc:	d112      	bne.n	800fef4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d016      	beq.n	800ff04 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed8:	3324      	adds	r3, #36	@ 0x24
 800feda:	4618      	mov	r0, r3
 800fedc:	f001 f912 	bl	8011104 <xTaskRemoveFromEventList>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00e      	beq.n	800ff04 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d00b      	beq.n	800ff04 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2201      	movs	r2, #1
 800fef0:	601a      	str	r2, [r3, #0]
 800fef2:	e007      	b.n	800ff04 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fef4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fef8:	3301      	adds	r3, #1
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	b25a      	sxtb	r2, r3
 800fefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ff04:	2301      	movs	r3, #1
 800ff06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff08:	e001      	b.n	800ff0e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	f383 8811 	msr	BASEPRI, r3
}
 800ff18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3738      	adds	r7, #56	@ 0x38
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b08c      	sub	sp, #48	@ 0x30
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ff30:	2300      	movs	r3, #0
 800ff32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ff38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d10b      	bne.n	800ff56 <xQueueReceive+0x32>
	__asm volatile
 800ff3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff42:	f383 8811 	msr	BASEPRI, r3
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	623b      	str	r3, [r7, #32]
}
 800ff50:	bf00      	nop
 800ff52:	bf00      	nop
 800ff54:	e7fd      	b.n	800ff52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d103      	bne.n	800ff64 <xQueueReceive+0x40>
 800ff5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d101      	bne.n	800ff68 <xQueueReceive+0x44>
 800ff64:	2301      	movs	r3, #1
 800ff66:	e000      	b.n	800ff6a <xQueueReceive+0x46>
 800ff68:	2300      	movs	r3, #0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d10b      	bne.n	800ff86 <xQueueReceive+0x62>
	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	61fb      	str	r3, [r7, #28]
}
 800ff80:	bf00      	nop
 800ff82:	bf00      	nop
 800ff84:	e7fd      	b.n	800ff82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ff86:	f001 faf1 	bl	801156c <xTaskGetSchedulerState>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d102      	bne.n	800ff96 <xQueueReceive+0x72>
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d101      	bne.n	800ff9a <xQueueReceive+0x76>
 800ff96:	2301      	movs	r3, #1
 800ff98:	e000      	b.n	800ff9c <xQueueReceive+0x78>
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10b      	bne.n	800ffb8 <xQueueReceive+0x94>
	__asm volatile
 800ffa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffa4:	f383 8811 	msr	BASEPRI, r3
 800ffa8:	f3bf 8f6f 	isb	sy
 800ffac:	f3bf 8f4f 	dsb	sy
 800ffb0:	61bb      	str	r3, [r7, #24]
}
 800ffb2:	bf00      	nop
 800ffb4:	bf00      	nop
 800ffb6:	e7fd      	b.n	800ffb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffb8:	f002 fb66 	bl	8012688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d01f      	beq.n	8010008 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ffc8:	68b9      	ldr	r1, [r7, #8]
 800ffca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffcc:	f000 fac4 	bl	8010558 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ffd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd2:	1e5a      	subs	r2, r3, #1
 800ffd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffda:	691b      	ldr	r3, [r3, #16]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00f      	beq.n	8010000 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe2:	3310      	adds	r3, #16
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f001 f88d 	bl	8011104 <xTaskRemoveFromEventList>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d007      	beq.n	8010000 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fff0:	4b3c      	ldr	r3, [pc, #240]	@ (80100e4 <xQueueReceive+0x1c0>)
 800fff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fff6:	601a      	str	r2, [r3, #0]
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010000:	f002 fb74 	bl	80126ec <vPortExitCritical>
				return pdPASS;
 8010004:	2301      	movs	r3, #1
 8010006:	e069      	b.n	80100dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d103      	bne.n	8010016 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801000e:	f002 fb6d 	bl	80126ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010012:	2300      	movs	r3, #0
 8010014:	e062      	b.n	80100dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010018:	2b00      	cmp	r3, #0
 801001a:	d106      	bne.n	801002a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801001c:	f107 0310 	add.w	r3, r7, #16
 8010020:	4618      	mov	r0, r3
 8010022:	f001 f937 	bl	8011294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010026:	2301      	movs	r3, #1
 8010028:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801002a:	f002 fb5f 	bl	80126ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801002e:	f000 fe05 	bl	8010c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010032:	f002 fb29 	bl	8012688 <vPortEnterCritical>
 8010036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010038:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801003c:	b25b      	sxtb	r3, r3
 801003e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010042:	d103      	bne.n	801004c <xQueueReceive+0x128>
 8010044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010046:	2200      	movs	r2, #0
 8010048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801004c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801004e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010052:	b25b      	sxtb	r3, r3
 8010054:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010058:	d103      	bne.n	8010062 <xQueueReceive+0x13e>
 801005a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801005c:	2200      	movs	r2, #0
 801005e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010062:	f002 fb43 	bl	80126ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010066:	1d3a      	adds	r2, r7, #4
 8010068:	f107 0310 	add.w	r3, r7, #16
 801006c:	4611      	mov	r1, r2
 801006e:	4618      	mov	r0, r3
 8010070:	f001 f926 	bl	80112c0 <xTaskCheckForTimeOut>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d123      	bne.n	80100c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801007a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801007c:	f000 fae4 	bl	8010648 <prvIsQueueEmpty>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d017      	beq.n	80100b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010088:	3324      	adds	r3, #36	@ 0x24
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	4611      	mov	r1, r2
 801008e:	4618      	mov	r0, r3
 8010090:	f000 ffa8 	bl	8010fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010096:	f000 fa85 	bl	80105a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801009a:	f000 fddd 	bl	8010c58 <xTaskResumeAll>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d189      	bne.n	800ffb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80100a4:	4b0f      	ldr	r3, [pc, #60]	@ (80100e4 <xQueueReceive+0x1c0>)
 80100a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100aa:	601a      	str	r2, [r3, #0]
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	f3bf 8f6f 	isb	sy
 80100b4:	e780      	b.n	800ffb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80100b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100b8:	f000 fa74 	bl	80105a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100bc:	f000 fdcc 	bl	8010c58 <xTaskResumeAll>
 80100c0:	e77a      	b.n	800ffb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80100c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100c4:	f000 fa6e 	bl	80105a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100c8:	f000 fdc6 	bl	8010c58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100ce:	f000 fabb 	bl	8010648 <prvIsQueueEmpty>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	f43f af6f 	beq.w	800ffb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80100da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3730      	adds	r7, #48	@ 0x30
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	e000ed04 	.word	0xe000ed04

080100e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b08e      	sub	sp, #56	@ 0x38
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80100f2:	2300      	movs	r3, #0
 80100f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80100fa:	2300      	movs	r3, #0
 80100fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80100fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010100:	2b00      	cmp	r3, #0
 8010102:	d10b      	bne.n	801011c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010108:	f383 8811 	msr	BASEPRI, r3
 801010c:	f3bf 8f6f 	isb	sy
 8010110:	f3bf 8f4f 	dsb	sy
 8010114:	623b      	str	r3, [r7, #32]
}
 8010116:	bf00      	nop
 8010118:	bf00      	nop
 801011a:	e7fd      	b.n	8010118 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801011c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801011e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00b      	beq.n	801013c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010128:	f383 8811 	msr	BASEPRI, r3
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	61fb      	str	r3, [r7, #28]
}
 8010136:	bf00      	nop
 8010138:	bf00      	nop
 801013a:	e7fd      	b.n	8010138 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801013c:	f001 fa16 	bl	801156c <xTaskGetSchedulerState>
 8010140:	4603      	mov	r3, r0
 8010142:	2b00      	cmp	r3, #0
 8010144:	d102      	bne.n	801014c <xQueueSemaphoreTake+0x64>
 8010146:	683b      	ldr	r3, [r7, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d101      	bne.n	8010150 <xQueueSemaphoreTake+0x68>
 801014c:	2301      	movs	r3, #1
 801014e:	e000      	b.n	8010152 <xQueueSemaphoreTake+0x6a>
 8010150:	2300      	movs	r3, #0
 8010152:	2b00      	cmp	r3, #0
 8010154:	d10b      	bne.n	801016e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801015a:	f383 8811 	msr	BASEPRI, r3
 801015e:	f3bf 8f6f 	isb	sy
 8010162:	f3bf 8f4f 	dsb	sy
 8010166:	61bb      	str	r3, [r7, #24]
}
 8010168:	bf00      	nop
 801016a:	bf00      	nop
 801016c:	e7fd      	b.n	801016a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801016e:	f002 fa8b 	bl	8012688 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010176:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801017a:	2b00      	cmp	r3, #0
 801017c:	d024      	beq.n	80101c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801017e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010180:	1e5a      	subs	r2, r3, #1
 8010182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010184:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d104      	bne.n	8010198 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801018e:	f001 fb7f 	bl	8011890 <pvTaskIncrementMutexHeldCount>
 8010192:	4602      	mov	r2, r0
 8010194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010196:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801019a:	691b      	ldr	r3, [r3, #16]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00f      	beq.n	80101c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101a2:	3310      	adds	r3, #16
 80101a4:	4618      	mov	r0, r3
 80101a6:	f000 ffad 	bl	8011104 <xTaskRemoveFromEventList>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d007      	beq.n	80101c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80101b0:	4b54      	ldr	r3, [pc, #336]	@ (8010304 <xQueueSemaphoreTake+0x21c>)
 80101b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101b6:	601a      	str	r2, [r3, #0]
 80101b8:	f3bf 8f4f 	dsb	sy
 80101bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80101c0:	f002 fa94 	bl	80126ec <vPortExitCritical>
				return pdPASS;
 80101c4:	2301      	movs	r3, #1
 80101c6:	e098      	b.n	80102fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d112      	bne.n	80101f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80101ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d00b      	beq.n	80101ec <xQueueSemaphoreTake+0x104>
	__asm volatile
 80101d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d8:	f383 8811 	msr	BASEPRI, r3
 80101dc:	f3bf 8f6f 	isb	sy
 80101e0:	f3bf 8f4f 	dsb	sy
 80101e4:	617b      	str	r3, [r7, #20]
}
 80101e6:	bf00      	nop
 80101e8:	bf00      	nop
 80101ea:	e7fd      	b.n	80101e8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80101ec:	f002 fa7e 	bl	80126ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80101f0:	2300      	movs	r3, #0
 80101f2:	e082      	b.n	80102fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80101f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d106      	bne.n	8010208 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80101fa:	f107 030c 	add.w	r3, r7, #12
 80101fe:	4618      	mov	r0, r3
 8010200:	f001 f848 	bl	8011294 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010204:	2301      	movs	r3, #1
 8010206:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010208:	f002 fa70 	bl	80126ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801020c:	f000 fd16 	bl	8010c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010210:	f002 fa3a 	bl	8012688 <vPortEnterCritical>
 8010214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010216:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801021a:	b25b      	sxtb	r3, r3
 801021c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010220:	d103      	bne.n	801022a <xQueueSemaphoreTake+0x142>
 8010222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010224:	2200      	movs	r2, #0
 8010226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801022a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801022c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010230:	b25b      	sxtb	r3, r3
 8010232:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010236:	d103      	bne.n	8010240 <xQueueSemaphoreTake+0x158>
 8010238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801023a:	2200      	movs	r2, #0
 801023c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010240:	f002 fa54 	bl	80126ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010244:	463a      	mov	r2, r7
 8010246:	f107 030c 	add.w	r3, r7, #12
 801024a:	4611      	mov	r1, r2
 801024c:	4618      	mov	r0, r3
 801024e:	f001 f837 	bl	80112c0 <xTaskCheckForTimeOut>
 8010252:	4603      	mov	r3, r0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d132      	bne.n	80102be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010258:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801025a:	f000 f9f5 	bl	8010648 <prvIsQueueEmpty>
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d026      	beq.n	80102b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d109      	bne.n	8010280 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801026c:	f002 fa0c 	bl	8012688 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010272:	689b      	ldr	r3, [r3, #8]
 8010274:	4618      	mov	r0, r3
 8010276:	f001 f997 	bl	80115a8 <xTaskPriorityInherit>
 801027a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801027c:	f002 fa36 	bl	80126ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010282:	3324      	adds	r3, #36	@ 0x24
 8010284:	683a      	ldr	r2, [r7, #0]
 8010286:	4611      	mov	r1, r2
 8010288:	4618      	mov	r0, r3
 801028a:	f000 feab 	bl	8010fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801028e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010290:	f000 f988 	bl	80105a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010294:	f000 fce0 	bl	8010c58 <xTaskResumeAll>
 8010298:	4603      	mov	r3, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	f47f af67 	bne.w	801016e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80102a0:	4b18      	ldr	r3, [pc, #96]	@ (8010304 <xQueueSemaphoreTake+0x21c>)
 80102a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102a6:	601a      	str	r2, [r3, #0]
 80102a8:	f3bf 8f4f 	dsb	sy
 80102ac:	f3bf 8f6f 	isb	sy
 80102b0:	e75d      	b.n	801016e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80102b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102b4:	f000 f976 	bl	80105a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102b8:	f000 fcce 	bl	8010c58 <xTaskResumeAll>
 80102bc:	e757      	b.n	801016e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80102be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102c0:	f000 f970 	bl	80105a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102c4:	f000 fcc8 	bl	8010c58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80102c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102ca:	f000 f9bd 	bl	8010648 <prvIsQueueEmpty>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	f43f af4c 	beq.w	801016e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80102d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d00d      	beq.n	80102f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80102dc:	f002 f9d4 	bl	8012688 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80102e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102e2:	f000 f8b7 	bl	8010454 <prvGetDisinheritPriorityAfterTimeout>
 80102e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80102e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ea:	689b      	ldr	r3, [r3, #8]
 80102ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80102ee:	4618      	mov	r0, r3
 80102f0:	f001 fa32 	bl	8011758 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80102f4:	f002 f9fa 	bl	80126ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80102f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3738      	adds	r7, #56	@ 0x38
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	e000ed04 	.word	0xe000ed04

08010308 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b08e      	sub	sp, #56	@ 0x38
 801030c:	af00      	add	r7, sp, #0
 801030e:	60f8      	str	r0, [r7, #12]
 8010310:	60b9      	str	r1, [r7, #8]
 8010312:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801031a:	2b00      	cmp	r3, #0
 801031c:	d10b      	bne.n	8010336 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801031e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010322:	f383 8811 	msr	BASEPRI, r3
 8010326:	f3bf 8f6f 	isb	sy
 801032a:	f3bf 8f4f 	dsb	sy
 801032e:	623b      	str	r3, [r7, #32]
}
 8010330:	bf00      	nop
 8010332:	bf00      	nop
 8010334:	e7fd      	b.n	8010332 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d103      	bne.n	8010344 <xQueueReceiveFromISR+0x3c>
 801033c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801033e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010340:	2b00      	cmp	r3, #0
 8010342:	d101      	bne.n	8010348 <xQueueReceiveFromISR+0x40>
 8010344:	2301      	movs	r3, #1
 8010346:	e000      	b.n	801034a <xQueueReceiveFromISR+0x42>
 8010348:	2300      	movs	r3, #0
 801034a:	2b00      	cmp	r3, #0
 801034c:	d10b      	bne.n	8010366 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801034e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010352:	f383 8811 	msr	BASEPRI, r3
 8010356:	f3bf 8f6f 	isb	sy
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	61fb      	str	r3, [r7, #28]
}
 8010360:	bf00      	nop
 8010362:	bf00      	nop
 8010364:	e7fd      	b.n	8010362 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010366:	f002 fa6f 	bl	8012848 <vPortValidateInterruptPriority>
	__asm volatile
 801036a:	f3ef 8211 	mrs	r2, BASEPRI
 801036e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010372:	f383 8811 	msr	BASEPRI, r3
 8010376:	f3bf 8f6f 	isb	sy
 801037a:	f3bf 8f4f 	dsb	sy
 801037e:	61ba      	str	r2, [r7, #24]
 8010380:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010382:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010384:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801038a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801038c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801038e:	2b00      	cmp	r3, #0
 8010390:	d02f      	beq.n	80103f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010394:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801039c:	68b9      	ldr	r1, [r7, #8]
 801039e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80103a0:	f000 f8da 	bl	8010558 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103a6:	1e5a      	subs	r2, r3, #1
 80103a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80103ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80103b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80103b4:	d112      	bne.n	80103dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103b8:	691b      	ldr	r3, [r3, #16]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d016      	beq.n	80103ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c0:	3310      	adds	r3, #16
 80103c2:	4618      	mov	r0, r3
 80103c4:	f000 fe9e 	bl	8011104 <xTaskRemoveFromEventList>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00e      	beq.n	80103ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00b      	beq.n	80103ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2201      	movs	r2, #1
 80103d8:	601a      	str	r2, [r3, #0]
 80103da:	e007      	b.n	80103ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80103dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80103e0:	3301      	adds	r3, #1
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	b25a      	sxtb	r2, r3
 80103e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80103ec:	2301      	movs	r3, #1
 80103ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80103f0:	e001      	b.n	80103f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80103f2:	2300      	movs	r3, #0
 80103f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80103f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	f383 8811 	msr	BASEPRI, r3
}
 8010400:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010404:	4618      	mov	r0, r3
 8010406:	3738      	adds	r7, #56	@ 0x38
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d10b      	bne.n	8010436 <vQueueDelete+0x2a>
	__asm volatile
 801041e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010422:	f383 8811 	msr	BASEPRI, r3
 8010426:	f3bf 8f6f 	isb	sy
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	60bb      	str	r3, [r7, #8]
}
 8010430:	bf00      	nop
 8010432:	bf00      	nop
 8010434:	e7fd      	b.n	8010432 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010436:	68f8      	ldr	r0, [r7, #12]
 8010438:	f000 f95e 	bl	80106f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010442:	2b00      	cmp	r3, #0
 8010444:	d102      	bne.n	801044c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010446:	68f8      	ldr	r0, [r7, #12]
 8010448:	f002 fb0e 	bl	8012a68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801044c:	bf00      	nop
 801044e:	3710      	adds	r7, #16
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}

08010454 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010460:	2b00      	cmp	r3, #0
 8010462:	d006      	beq.n	8010472 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801046e:	60fb      	str	r3, [r7, #12]
 8010470:	e001      	b.n	8010476 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010472:	2300      	movs	r3, #0
 8010474:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010476:	68fb      	ldr	r3, [r7, #12]
	}
 8010478:	4618      	mov	r0, r3
 801047a:	3714      	adds	r7, #20
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr

08010484 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b086      	sub	sp, #24
 8010488:	af00      	add	r7, sp, #0
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010490:	2300      	movs	r3, #0
 8010492:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010498:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d10d      	bne.n	80104be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d14d      	bne.n	8010546 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	689b      	ldr	r3, [r3, #8]
 80104ae:	4618      	mov	r0, r3
 80104b0:	f001 f8e2 	bl	8011678 <xTaskPriorityDisinherit>
 80104b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2200      	movs	r2, #0
 80104ba:	609a      	str	r2, [r3, #8]
 80104bc:	e043      	b.n	8010546 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d119      	bne.n	80104f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	6858      	ldr	r0, [r3, #4]
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104cc:	461a      	mov	r2, r3
 80104ce:	68b9      	ldr	r1, [r7, #8]
 80104d0:	f004 fc02 	bl	8014cd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	685a      	ldr	r2, [r3, #4]
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104dc:	441a      	add	r2, r3
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	685a      	ldr	r2, [r3, #4]
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	689b      	ldr	r3, [r3, #8]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d32b      	bcc.n	8010546 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	605a      	str	r2, [r3, #4]
 80104f6:	e026      	b.n	8010546 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	68d8      	ldr	r0, [r3, #12]
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010500:	461a      	mov	r2, r3
 8010502:	68b9      	ldr	r1, [r7, #8]
 8010504:	f004 fbe8 	bl	8014cd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	68da      	ldr	r2, [r3, #12]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010510:	425b      	negs	r3, r3
 8010512:	441a      	add	r2, r3
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	68da      	ldr	r2, [r3, #12]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	429a      	cmp	r2, r3
 8010522:	d207      	bcs.n	8010534 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	689a      	ldr	r2, [r3, #8]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801052c:	425b      	negs	r3, r3
 801052e:	441a      	add	r2, r3
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b02      	cmp	r3, #2
 8010538:	d105      	bne.n	8010546 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d002      	beq.n	8010546 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010540:	693b      	ldr	r3, [r7, #16]
 8010542:	3b01      	subs	r3, #1
 8010544:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	1c5a      	adds	r2, r3, #1
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801054e:	697b      	ldr	r3, [r7, #20]
}
 8010550:	4618      	mov	r0, r3
 8010552:	3718      	adds	r7, #24
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010566:	2b00      	cmp	r3, #0
 8010568:	d018      	beq.n	801059c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	68da      	ldr	r2, [r3, #12]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010572:	441a      	add	r2, r3
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	68da      	ldr	r2, [r3, #12]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	689b      	ldr	r3, [r3, #8]
 8010580:	429a      	cmp	r2, r3
 8010582:	d303      	bcc.n	801058c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	68d9      	ldr	r1, [r3, #12]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010594:	461a      	mov	r2, r3
 8010596:	6838      	ldr	r0, [r7, #0]
 8010598:	f004 fb9e 	bl	8014cd8 <memcpy>
	}
}
 801059c:	bf00      	nop
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b084      	sub	sp, #16
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80105ac:	f002 f86c 	bl	8012688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80105b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105b8:	e011      	b.n	80105de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d012      	beq.n	80105e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	3324      	adds	r3, #36	@ 0x24
 80105c6:	4618      	mov	r0, r3
 80105c8:	f000 fd9c 	bl	8011104 <xTaskRemoveFromEventList>
 80105cc:	4603      	mov	r3, r0
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d001      	beq.n	80105d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80105d2:	f000 fed9 	bl	8011388 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80105d6:	7bfb      	ldrb	r3, [r7, #15]
 80105d8:	3b01      	subs	r3, #1
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	dce9      	bgt.n	80105ba <prvUnlockQueue+0x16>
 80105e6:	e000      	b.n	80105ea <prvUnlockQueue+0x46>
					break;
 80105e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	22ff      	movs	r2, #255	@ 0xff
 80105ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80105f2:	f002 f87b 	bl	80126ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80105f6:	f002 f847 	bl	8012688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010600:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010602:	e011      	b.n	8010628 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	691b      	ldr	r3, [r3, #16]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d012      	beq.n	8010632 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	3310      	adds	r3, #16
 8010610:	4618      	mov	r0, r3
 8010612:	f000 fd77 	bl	8011104 <xTaskRemoveFromEventList>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d001      	beq.n	8010620 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801061c:	f000 feb4 	bl	8011388 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010620:	7bbb      	ldrb	r3, [r7, #14]
 8010622:	3b01      	subs	r3, #1
 8010624:	b2db      	uxtb	r3, r3
 8010626:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801062c:	2b00      	cmp	r3, #0
 801062e:	dce9      	bgt.n	8010604 <prvUnlockQueue+0x60>
 8010630:	e000      	b.n	8010634 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010632:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	22ff      	movs	r2, #255	@ 0xff
 8010638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801063c:	f002 f856 	bl	80126ec <vPortExitCritical>
}
 8010640:	bf00      	nop
 8010642:	3710      	adds	r7, #16
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010650:	f002 f81a 	bl	8012688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010658:	2b00      	cmp	r3, #0
 801065a:	d102      	bne.n	8010662 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801065c:	2301      	movs	r3, #1
 801065e:	60fb      	str	r3, [r7, #12]
 8010660:	e001      	b.n	8010666 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010662:	2300      	movs	r3, #0
 8010664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010666:	f002 f841 	bl	80126ec <vPortExitCritical>

	return xReturn;
 801066a:	68fb      	ldr	r3, [r7, #12]
}
 801066c:	4618      	mov	r0, r3
 801066e:	3710      	adds	r7, #16
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}

08010674 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010674:	b580      	push	{r7, lr}
 8010676:	b084      	sub	sp, #16
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801067c:	f002 f804 	bl	8012688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010688:	429a      	cmp	r2, r3
 801068a:	d102      	bne.n	8010692 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801068c:	2301      	movs	r3, #1
 801068e:	60fb      	str	r3, [r7, #12]
 8010690:	e001      	b.n	8010696 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010692:	2300      	movs	r3, #0
 8010694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010696:	f002 f829 	bl	80126ec <vPortExitCritical>

	return xReturn;
 801069a:	68fb      	ldr	r3, [r7, #12]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3710      	adds	r7, #16
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80106a4:	b480      	push	{r7}
 80106a6:	b085      	sub	sp, #20
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106ae:	2300      	movs	r3, #0
 80106b0:	60fb      	str	r3, [r7, #12]
 80106b2:	e014      	b.n	80106de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80106b4:	4a0f      	ldr	r2, [pc, #60]	@ (80106f4 <vQueueAddToRegistry+0x50>)
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d10b      	bne.n	80106d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80106c0:	490c      	ldr	r1, [pc, #48]	@ (80106f4 <vQueueAddToRegistry+0x50>)
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	683a      	ldr	r2, [r7, #0]
 80106c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80106ca:	4a0a      	ldr	r2, [pc, #40]	@ (80106f4 <vQueueAddToRegistry+0x50>)
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	00db      	lsls	r3, r3, #3
 80106d0:	4413      	add	r3, r2
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80106d6:	e006      	b.n	80106e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	3301      	adds	r3, #1
 80106dc:	60fb      	str	r3, [r7, #12]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	2b07      	cmp	r3, #7
 80106e2:	d9e7      	bls.n	80106b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80106e4:	bf00      	nop
 80106e6:	bf00      	nop
 80106e8:	3714      	adds	r7, #20
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr
 80106f2:	bf00      	nop
 80106f4:	200011b8 	.word	0x200011b8

080106f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010700:	2300      	movs	r3, #0
 8010702:	60fb      	str	r3, [r7, #12]
 8010704:	e016      	b.n	8010734 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010706:	4a10      	ldr	r2, [pc, #64]	@ (8010748 <vQueueUnregisterQueue+0x50>)
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	00db      	lsls	r3, r3, #3
 801070c:	4413      	add	r3, r2
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	429a      	cmp	r2, r3
 8010714:	d10b      	bne.n	801072e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010716:	4a0c      	ldr	r2, [pc, #48]	@ (8010748 <vQueueUnregisterQueue+0x50>)
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	2100      	movs	r1, #0
 801071c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010720:	4a09      	ldr	r2, [pc, #36]	@ (8010748 <vQueueUnregisterQueue+0x50>)
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	00db      	lsls	r3, r3, #3
 8010726:	4413      	add	r3, r2
 8010728:	2200      	movs	r2, #0
 801072a:	605a      	str	r2, [r3, #4]
				break;
 801072c:	e006      	b.n	801073c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	3301      	adds	r3, #1
 8010732:	60fb      	str	r3, [r7, #12]
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2b07      	cmp	r3, #7
 8010738:	d9e5      	bls.n	8010706 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801073a:	bf00      	nop
 801073c:	bf00      	nop
 801073e:	3714      	adds	r7, #20
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr
 8010748:	200011b8 	.word	0x200011b8

0801074c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801074c:	b580      	push	{r7, lr}
 801074e:	b086      	sub	sp, #24
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801075c:	f001 ff94 	bl	8012688 <vPortEnterCritical>
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010766:	b25b      	sxtb	r3, r3
 8010768:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801076c:	d103      	bne.n	8010776 <vQueueWaitForMessageRestricted+0x2a>
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	2200      	movs	r2, #0
 8010772:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801077c:	b25b      	sxtb	r3, r3
 801077e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010782:	d103      	bne.n	801078c <vQueueWaitForMessageRestricted+0x40>
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	2200      	movs	r2, #0
 8010788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801078c:	f001 ffae 	bl	80126ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010794:	2b00      	cmp	r3, #0
 8010796:	d106      	bne.n	80107a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	3324      	adds	r3, #36	@ 0x24
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	68b9      	ldr	r1, [r7, #8]
 80107a0:	4618      	mov	r0, r3
 80107a2:	f000 fc83 	bl	80110ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80107a6:	6978      	ldr	r0, [r7, #20]
 80107a8:	f7ff fefc 	bl	80105a4 <prvUnlockQueue>
	}
 80107ac:	bf00      	nop
 80107ae:	3718      	adds	r7, #24
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b08e      	sub	sp, #56	@ 0x38
 80107b8:	af04      	add	r7, sp, #16
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
 80107c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80107c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d10b      	bne.n	80107e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80107c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107cc:	f383 8811 	msr	BASEPRI, r3
 80107d0:	f3bf 8f6f 	isb	sy
 80107d4:	f3bf 8f4f 	dsb	sy
 80107d8:	623b      	str	r3, [r7, #32]
}
 80107da:	bf00      	nop
 80107dc:	bf00      	nop
 80107de:	e7fd      	b.n	80107dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80107e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d10b      	bne.n	80107fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80107e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ea:	f383 8811 	msr	BASEPRI, r3
 80107ee:	f3bf 8f6f 	isb	sy
 80107f2:	f3bf 8f4f 	dsb	sy
 80107f6:	61fb      	str	r3, [r7, #28]
}
 80107f8:	bf00      	nop
 80107fa:	bf00      	nop
 80107fc:	e7fd      	b.n	80107fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80107fe:	235c      	movs	r3, #92	@ 0x5c
 8010800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	2b5c      	cmp	r3, #92	@ 0x5c
 8010806:	d00b      	beq.n	8010820 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801080c:	f383 8811 	msr	BASEPRI, r3
 8010810:	f3bf 8f6f 	isb	sy
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	61bb      	str	r3, [r7, #24]
}
 801081a:	bf00      	nop
 801081c:	bf00      	nop
 801081e:	e7fd      	b.n	801081c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010820:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010824:	2b00      	cmp	r3, #0
 8010826:	d01e      	beq.n	8010866 <xTaskCreateStatic+0xb2>
 8010828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801082a:	2b00      	cmp	r3, #0
 801082c:	d01b      	beq.n	8010866 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801082e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010830:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010834:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010836:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801083a:	2202      	movs	r2, #2
 801083c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010840:	2300      	movs	r3, #0
 8010842:	9303      	str	r3, [sp, #12]
 8010844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010846:	9302      	str	r3, [sp, #8]
 8010848:	f107 0314 	add.w	r3, r7, #20
 801084c:	9301      	str	r3, [sp, #4]
 801084e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010850:	9300      	str	r3, [sp, #0]
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	68b9      	ldr	r1, [r7, #8]
 8010858:	68f8      	ldr	r0, [r7, #12]
 801085a:	f000 f850 	bl	80108fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801085e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010860:	f000 f8de 	bl	8010a20 <prvAddNewTaskToReadyList>
 8010864:	e001      	b.n	801086a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010866:	2300      	movs	r3, #0
 8010868:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801086a:	697b      	ldr	r3, [r7, #20]
	}
 801086c:	4618      	mov	r0, r3
 801086e:	3728      	adds	r7, #40	@ 0x28
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010874:	b580      	push	{r7, lr}
 8010876:	b08c      	sub	sp, #48	@ 0x30
 8010878:	af04      	add	r7, sp, #16
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	603b      	str	r3, [r7, #0]
 8010880:	4613      	mov	r3, r2
 8010882:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010884:	88fb      	ldrh	r3, [r7, #6]
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	4618      	mov	r0, r3
 801088a:	f002 f81f 	bl	80128cc <pvPortMalloc>
 801088e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00e      	beq.n	80108b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010896:	205c      	movs	r0, #92	@ 0x5c
 8010898:	f002 f818 	bl	80128cc <pvPortMalloc>
 801089c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801089e:	69fb      	ldr	r3, [r7, #28]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d003      	beq.n	80108ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	697a      	ldr	r2, [r7, #20]
 80108a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80108aa:	e005      	b.n	80108b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80108ac:	6978      	ldr	r0, [r7, #20]
 80108ae:	f002 f8db 	bl	8012a68 <vPortFree>
 80108b2:	e001      	b.n	80108b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80108b4:	2300      	movs	r3, #0
 80108b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d017      	beq.n	80108ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80108be:	69fb      	ldr	r3, [r7, #28]
 80108c0:	2200      	movs	r2, #0
 80108c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80108c6:	88fa      	ldrh	r2, [r7, #6]
 80108c8:	2300      	movs	r3, #0
 80108ca:	9303      	str	r3, [sp, #12]
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	9302      	str	r3, [sp, #8]
 80108d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d2:	9301      	str	r3, [sp, #4]
 80108d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d6:	9300      	str	r3, [sp, #0]
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	68b9      	ldr	r1, [r7, #8]
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f000 f80e 	bl	80108fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80108e2:	69f8      	ldr	r0, [r7, #28]
 80108e4:	f000 f89c 	bl	8010a20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80108e8:	2301      	movs	r3, #1
 80108ea:	61bb      	str	r3, [r7, #24]
 80108ec:	e002      	b.n	80108f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80108ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80108f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80108f4:	69bb      	ldr	r3, [r7, #24]
	}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3720      	adds	r7, #32
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80108fe:	b580      	push	{r7, lr}
 8010900:	b088      	sub	sp, #32
 8010902:	af00      	add	r7, sp, #0
 8010904:	60f8      	str	r0, [r7, #12]
 8010906:	60b9      	str	r1, [r7, #8]
 8010908:	607a      	str	r2, [r7, #4]
 801090a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801090c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801090e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	009b      	lsls	r3, r3, #2
 8010914:	461a      	mov	r2, r3
 8010916:	21a5      	movs	r1, #165	@ 0xa5
 8010918:	f004 f8c8 	bl	8014aac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801091c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801091e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010926:	3b01      	subs	r3, #1
 8010928:	009b      	lsls	r3, r3, #2
 801092a:	4413      	add	r3, r2
 801092c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	f023 0307 	bic.w	r3, r3, #7
 8010934:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	f003 0307 	and.w	r3, r3, #7
 801093c:	2b00      	cmp	r3, #0
 801093e:	d00b      	beq.n	8010958 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010944:	f383 8811 	msr	BASEPRI, r3
 8010948:	f3bf 8f6f 	isb	sy
 801094c:	f3bf 8f4f 	dsb	sy
 8010950:	617b      	str	r3, [r7, #20]
}
 8010952:	bf00      	nop
 8010954:	bf00      	nop
 8010956:	e7fd      	b.n	8010954 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d01f      	beq.n	801099e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801095e:	2300      	movs	r3, #0
 8010960:	61fb      	str	r3, [r7, #28]
 8010962:	e012      	b.n	801098a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010964:	68ba      	ldr	r2, [r7, #8]
 8010966:	69fb      	ldr	r3, [r7, #28]
 8010968:	4413      	add	r3, r2
 801096a:	7819      	ldrb	r1, [r3, #0]
 801096c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	4413      	add	r3, r2
 8010972:	3334      	adds	r3, #52	@ 0x34
 8010974:	460a      	mov	r2, r1
 8010976:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010978:	68ba      	ldr	r2, [r7, #8]
 801097a:	69fb      	ldr	r3, [r7, #28]
 801097c:	4413      	add	r3, r2
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d006      	beq.n	8010992 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010984:	69fb      	ldr	r3, [r7, #28]
 8010986:	3301      	adds	r3, #1
 8010988:	61fb      	str	r3, [r7, #28]
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	2b0f      	cmp	r3, #15
 801098e:	d9e9      	bls.n	8010964 <prvInitialiseNewTask+0x66>
 8010990:	e000      	b.n	8010994 <prvInitialiseNewTask+0x96>
			{
				break;
 8010992:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010996:	2200      	movs	r2, #0
 8010998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801099c:	e003      	b.n	80109a6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801099e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109a0:	2200      	movs	r2, #0
 80109a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80109a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109a8:	2b37      	cmp	r3, #55	@ 0x37
 80109aa:	d901      	bls.n	80109b0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80109ac:	2337      	movs	r3, #55	@ 0x37
 80109ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80109b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80109b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109ba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80109bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109be:	2200      	movs	r2, #0
 80109c0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80109c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109c4:	3304      	adds	r3, #4
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7fe fd7c 	bl	800f4c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80109cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ce:	3318      	adds	r3, #24
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7fe fd77 	bl	800f4c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80109d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80109e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80109e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109ea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80109ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109ee:	2200      	movs	r2, #0
 80109f0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80109f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f4:	2200      	movs	r2, #0
 80109f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	68f9      	ldr	r1, [r7, #12]
 80109fe:	69b8      	ldr	r0, [r7, #24]
 8010a00:	f001 fd14 	bl	801242c <pxPortInitialiseStack>
 8010a04:	4602      	mov	r2, r0
 8010a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d002      	beq.n	8010a16 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a16:	bf00      	nop
 8010a18:	3720      	adds	r7, #32
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}
	...

08010a20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010a28:	f001 fe2e 	bl	8012688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8010ae4 <prvAddNewTaskToReadyList+0xc4>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	3301      	adds	r3, #1
 8010a32:	4a2c      	ldr	r2, [pc, #176]	@ (8010ae4 <prvAddNewTaskToReadyList+0xc4>)
 8010a34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010a36:	4b2c      	ldr	r3, [pc, #176]	@ (8010ae8 <prvAddNewTaskToReadyList+0xc8>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d109      	bne.n	8010a52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010a3e:	4a2a      	ldr	r2, [pc, #168]	@ (8010ae8 <prvAddNewTaskToReadyList+0xc8>)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010a44:	4b27      	ldr	r3, [pc, #156]	@ (8010ae4 <prvAddNewTaskToReadyList+0xc4>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	2b01      	cmp	r3, #1
 8010a4a:	d110      	bne.n	8010a6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010a4c:	f000 fcc0 	bl	80113d0 <prvInitialiseTaskLists>
 8010a50:	e00d      	b.n	8010a6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010a52:	4b26      	ldr	r3, [pc, #152]	@ (8010aec <prvAddNewTaskToReadyList+0xcc>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d109      	bne.n	8010a6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010a5a:	4b23      	ldr	r3, [pc, #140]	@ (8010ae8 <prvAddNewTaskToReadyList+0xc8>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d802      	bhi.n	8010a6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010a68:	4a1f      	ldr	r2, [pc, #124]	@ (8010ae8 <prvAddNewTaskToReadyList+0xc8>)
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010a6e:	4b20      	ldr	r3, [pc, #128]	@ (8010af0 <prvAddNewTaskToReadyList+0xd0>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	3301      	adds	r3, #1
 8010a74:	4a1e      	ldr	r2, [pc, #120]	@ (8010af0 <prvAddNewTaskToReadyList+0xd0>)
 8010a76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010a78:	4b1d      	ldr	r3, [pc, #116]	@ (8010af0 <prvAddNewTaskToReadyList+0xd0>)
 8010a7a:	681a      	ldr	r2, [r3, #0]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a84:	4b1b      	ldr	r3, [pc, #108]	@ (8010af4 <prvAddNewTaskToReadyList+0xd4>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d903      	bls.n	8010a94 <prvAddNewTaskToReadyList+0x74>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a90:	4a18      	ldr	r2, [pc, #96]	@ (8010af4 <prvAddNewTaskToReadyList+0xd4>)
 8010a92:	6013      	str	r3, [r2, #0]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a98:	4613      	mov	r3, r2
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	4413      	add	r3, r2
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	4a15      	ldr	r2, [pc, #84]	@ (8010af8 <prvAddNewTaskToReadyList+0xd8>)
 8010aa2:	441a      	add	r2, r3
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	3304      	adds	r3, #4
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	4610      	mov	r0, r2
 8010aac:	f7fe fd17 	bl	800f4de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010ab0:	f001 fe1c 	bl	80126ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8010aec <prvAddNewTaskToReadyList+0xcc>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00e      	beq.n	8010ada <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010abc:	4b0a      	ldr	r3, [pc, #40]	@ (8010ae8 <prvAddNewTaskToReadyList+0xc8>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d207      	bcs.n	8010ada <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010aca:	4b0c      	ldr	r3, [pc, #48]	@ (8010afc <prvAddNewTaskToReadyList+0xdc>)
 8010acc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ad0:	601a      	str	r2, [r3, #0]
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ada:	bf00      	nop
 8010adc:	3708      	adds	r7, #8
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	200016cc 	.word	0x200016cc
 8010ae8:	200011f8 	.word	0x200011f8
 8010aec:	200016d8 	.word	0x200016d8
 8010af0:	200016e8 	.word	0x200016e8
 8010af4:	200016d4 	.word	0x200016d4
 8010af8:	200011fc 	.word	0x200011fc
 8010afc:	e000ed04 	.word	0xe000ed04

08010b00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b084      	sub	sp, #16
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d018      	beq.n	8010b44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010b12:	4b14      	ldr	r3, [pc, #80]	@ (8010b64 <vTaskDelay+0x64>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d00b      	beq.n	8010b32 <vTaskDelay+0x32>
	__asm volatile
 8010b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b1e:	f383 8811 	msr	BASEPRI, r3
 8010b22:	f3bf 8f6f 	isb	sy
 8010b26:	f3bf 8f4f 	dsb	sy
 8010b2a:	60bb      	str	r3, [r7, #8]
}
 8010b2c:	bf00      	nop
 8010b2e:	bf00      	nop
 8010b30:	e7fd      	b.n	8010b2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010b32:	f000 f883 	bl	8010c3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010b36:	2100      	movs	r1, #0
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f000 ffbf 	bl	8011abc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010b3e:	f000 f88b 	bl	8010c58 <xTaskResumeAll>
 8010b42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d107      	bne.n	8010b5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010b4a:	4b07      	ldr	r3, [pc, #28]	@ (8010b68 <vTaskDelay+0x68>)
 8010b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b50:	601a      	str	r2, [r3, #0]
 8010b52:	f3bf 8f4f 	dsb	sy
 8010b56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b5a:	bf00      	nop
 8010b5c:	3710      	adds	r7, #16
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	200016f4 	.word	0x200016f4
 8010b68:	e000ed04 	.word	0xe000ed04

08010b6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b08a      	sub	sp, #40	@ 0x28
 8010b70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010b72:	2300      	movs	r3, #0
 8010b74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010b76:	2300      	movs	r3, #0
 8010b78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010b7a:	463a      	mov	r2, r7
 8010b7c:	1d39      	adds	r1, r7, #4
 8010b7e:	f107 0308 	add.w	r3, r7, #8
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fe fa54 	bl	800f030 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010b88:	6839      	ldr	r1, [r7, #0]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	68ba      	ldr	r2, [r7, #8]
 8010b8e:	9202      	str	r2, [sp, #8]
 8010b90:	9301      	str	r3, [sp, #4]
 8010b92:	2300      	movs	r3, #0
 8010b94:	9300      	str	r3, [sp, #0]
 8010b96:	2300      	movs	r3, #0
 8010b98:	460a      	mov	r2, r1
 8010b9a:	4922      	ldr	r1, [pc, #136]	@ (8010c24 <vTaskStartScheduler+0xb8>)
 8010b9c:	4822      	ldr	r0, [pc, #136]	@ (8010c28 <vTaskStartScheduler+0xbc>)
 8010b9e:	f7ff fe09 	bl	80107b4 <xTaskCreateStatic>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	4a21      	ldr	r2, [pc, #132]	@ (8010c2c <vTaskStartScheduler+0xc0>)
 8010ba6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ba8:	4b20      	ldr	r3, [pc, #128]	@ (8010c2c <vTaskStartScheduler+0xc0>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d002      	beq.n	8010bb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	617b      	str	r3, [r7, #20]
 8010bb4:	e001      	b.n	8010bba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d102      	bne.n	8010bc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010bc0:	f000 ffd0 	bl	8011b64 <xTimerCreateTimerTask>
 8010bc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d116      	bne.n	8010bfa <vTaskStartScheduler+0x8e>
	__asm volatile
 8010bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bd0:	f383 8811 	msr	BASEPRI, r3
 8010bd4:	f3bf 8f6f 	isb	sy
 8010bd8:	f3bf 8f4f 	dsb	sy
 8010bdc:	613b      	str	r3, [r7, #16]
}
 8010bde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010be0:	4b13      	ldr	r3, [pc, #76]	@ (8010c30 <vTaskStartScheduler+0xc4>)
 8010be2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010be6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010be8:	4b12      	ldr	r3, [pc, #72]	@ (8010c34 <vTaskStartScheduler+0xc8>)
 8010bea:	2201      	movs	r2, #1
 8010bec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010bee:	4b12      	ldr	r3, [pc, #72]	@ (8010c38 <vTaskStartScheduler+0xcc>)
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010bf4:	f001 fca4 	bl	8012540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010bf8:	e00f      	b.n	8010c1a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010c00:	d10b      	bne.n	8010c1a <vTaskStartScheduler+0xae>
	__asm volatile
 8010c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c06:	f383 8811 	msr	BASEPRI, r3
 8010c0a:	f3bf 8f6f 	isb	sy
 8010c0e:	f3bf 8f4f 	dsb	sy
 8010c12:	60fb      	str	r3, [r7, #12]
}
 8010c14:	bf00      	nop
 8010c16:	bf00      	nop
 8010c18:	e7fd      	b.n	8010c16 <vTaskStartScheduler+0xaa>
}
 8010c1a:	bf00      	nop
 8010c1c:	3718      	adds	r7, #24
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	08018544 	.word	0x08018544
 8010c28:	080113a1 	.word	0x080113a1
 8010c2c:	200016f0 	.word	0x200016f0
 8010c30:	200016ec 	.word	0x200016ec
 8010c34:	200016d8 	.word	0x200016d8
 8010c38:	200016d0 	.word	0x200016d0

08010c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010c40:	4b04      	ldr	r3, [pc, #16]	@ (8010c54 <vTaskSuspendAll+0x18>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	3301      	adds	r3, #1
 8010c46:	4a03      	ldr	r2, [pc, #12]	@ (8010c54 <vTaskSuspendAll+0x18>)
 8010c48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010c4a:	bf00      	nop
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr
 8010c54:	200016f4 	.word	0x200016f4

08010c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b084      	sub	sp, #16
 8010c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010c62:	2300      	movs	r3, #0
 8010c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010c66:	4b42      	ldr	r3, [pc, #264]	@ (8010d70 <xTaskResumeAll+0x118>)
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d10b      	bne.n	8010c86 <xTaskResumeAll+0x2e>
	__asm volatile
 8010c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c72:	f383 8811 	msr	BASEPRI, r3
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	f3bf 8f4f 	dsb	sy
 8010c7e:	603b      	str	r3, [r7, #0]
}
 8010c80:	bf00      	nop
 8010c82:	bf00      	nop
 8010c84:	e7fd      	b.n	8010c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010c86:	f001 fcff 	bl	8012688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010c8a:	4b39      	ldr	r3, [pc, #228]	@ (8010d70 <xTaskResumeAll+0x118>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	4a37      	ldr	r2, [pc, #220]	@ (8010d70 <xTaskResumeAll+0x118>)
 8010c92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c94:	4b36      	ldr	r3, [pc, #216]	@ (8010d70 <xTaskResumeAll+0x118>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d162      	bne.n	8010d62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010c9c:	4b35      	ldr	r3, [pc, #212]	@ (8010d74 <xTaskResumeAll+0x11c>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d05e      	beq.n	8010d62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010ca4:	e02f      	b.n	8010d06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ca6:	4b34      	ldr	r3, [pc, #208]	@ (8010d78 <xTaskResumeAll+0x120>)
 8010ca8:	68db      	ldr	r3, [r3, #12]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	3318      	adds	r3, #24
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7fe fc70 	bl	800f598 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	3304      	adds	r3, #4
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fe fc6b 	bl	800f598 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8010d7c <xTaskResumeAll+0x124>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d903      	bls.n	8010cd6 <xTaskResumeAll+0x7e>
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cd2:	4a2a      	ldr	r2, [pc, #168]	@ (8010d7c <xTaskResumeAll+0x124>)
 8010cd4:	6013      	str	r3, [r2, #0]
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cda:	4613      	mov	r3, r2
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4413      	add	r3, r2
 8010ce0:	009b      	lsls	r3, r3, #2
 8010ce2:	4a27      	ldr	r2, [pc, #156]	@ (8010d80 <xTaskResumeAll+0x128>)
 8010ce4:	441a      	add	r2, r3
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	3304      	adds	r3, #4
 8010cea:	4619      	mov	r1, r3
 8010cec:	4610      	mov	r0, r2
 8010cee:	f7fe fbf6 	bl	800f4de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cf6:	4b23      	ldr	r3, [pc, #140]	@ (8010d84 <xTaskResumeAll+0x12c>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d302      	bcc.n	8010d06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010d00:	4b21      	ldr	r3, [pc, #132]	@ (8010d88 <xTaskResumeAll+0x130>)
 8010d02:	2201      	movs	r2, #1
 8010d04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d06:	4b1c      	ldr	r3, [pc, #112]	@ (8010d78 <xTaskResumeAll+0x120>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d1cb      	bne.n	8010ca6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d001      	beq.n	8010d18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d14:	f000 fbfa 	bl	801150c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010d18:	4b1c      	ldr	r3, [pc, #112]	@ (8010d8c <xTaskResumeAll+0x134>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d010      	beq.n	8010d46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010d24:	f000 f846 	bl	8010db4 <xTaskIncrementTick>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d002      	beq.n	8010d34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010d2e:	4b16      	ldr	r3, [pc, #88]	@ (8010d88 <xTaskResumeAll+0x130>)
 8010d30:	2201      	movs	r2, #1
 8010d32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	3b01      	subs	r3, #1
 8010d38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d1f1      	bne.n	8010d24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010d40:	4b12      	ldr	r3, [pc, #72]	@ (8010d8c <xTaskResumeAll+0x134>)
 8010d42:	2200      	movs	r2, #0
 8010d44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010d46:	4b10      	ldr	r3, [pc, #64]	@ (8010d88 <xTaskResumeAll+0x130>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d009      	beq.n	8010d62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010d4e:	2301      	movs	r3, #1
 8010d50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010d52:	4b0f      	ldr	r3, [pc, #60]	@ (8010d90 <xTaskResumeAll+0x138>)
 8010d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d58:	601a      	str	r2, [r3, #0]
 8010d5a:	f3bf 8f4f 	dsb	sy
 8010d5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d62:	f001 fcc3 	bl	80126ec <vPortExitCritical>

	return xAlreadyYielded;
 8010d66:	68bb      	ldr	r3, [r7, #8]
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	200016f4 	.word	0x200016f4
 8010d74:	200016cc 	.word	0x200016cc
 8010d78:	2000168c 	.word	0x2000168c
 8010d7c:	200016d4 	.word	0x200016d4
 8010d80:	200011fc 	.word	0x200011fc
 8010d84:	200011f8 	.word	0x200011f8
 8010d88:	200016e0 	.word	0x200016e0
 8010d8c:	200016dc 	.word	0x200016dc
 8010d90:	e000ed04 	.word	0xe000ed04

08010d94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010d94:	b480      	push	{r7}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010d9a:	4b05      	ldr	r3, [pc, #20]	@ (8010db0 <xTaskGetTickCount+0x1c>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010da0:	687b      	ldr	r3, [r7, #4]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	370c      	adds	r7, #12
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	200016d0 	.word	0x200016d0

08010db4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b086      	sub	sp, #24
 8010db8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8010efc <xTaskIncrementTick+0x148>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	f040 8090 	bne.w	8010ee8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8010f00 <xTaskIncrementTick+0x14c>)
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3301      	adds	r3, #1
 8010dce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010dd0:	4a4b      	ldr	r2, [pc, #300]	@ (8010f00 <xTaskIncrementTick+0x14c>)
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d121      	bne.n	8010e20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010ddc:	4b49      	ldr	r3, [pc, #292]	@ (8010f04 <xTaskIncrementTick+0x150>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d00b      	beq.n	8010dfe <xTaskIncrementTick+0x4a>
	__asm volatile
 8010de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dea:	f383 8811 	msr	BASEPRI, r3
 8010dee:	f3bf 8f6f 	isb	sy
 8010df2:	f3bf 8f4f 	dsb	sy
 8010df6:	603b      	str	r3, [r7, #0]
}
 8010df8:	bf00      	nop
 8010dfa:	bf00      	nop
 8010dfc:	e7fd      	b.n	8010dfa <xTaskIncrementTick+0x46>
 8010dfe:	4b41      	ldr	r3, [pc, #260]	@ (8010f04 <xTaskIncrementTick+0x150>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	60fb      	str	r3, [r7, #12]
 8010e04:	4b40      	ldr	r3, [pc, #256]	@ (8010f08 <xTaskIncrementTick+0x154>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	4a3e      	ldr	r2, [pc, #248]	@ (8010f04 <xTaskIncrementTick+0x150>)
 8010e0a:	6013      	str	r3, [r2, #0]
 8010e0c:	4a3e      	ldr	r2, [pc, #248]	@ (8010f08 <xTaskIncrementTick+0x154>)
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6013      	str	r3, [r2, #0]
 8010e12:	4b3e      	ldr	r3, [pc, #248]	@ (8010f0c <xTaskIncrementTick+0x158>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	3301      	adds	r3, #1
 8010e18:	4a3c      	ldr	r2, [pc, #240]	@ (8010f0c <xTaskIncrementTick+0x158>)
 8010e1a:	6013      	str	r3, [r2, #0]
 8010e1c:	f000 fb76 	bl	801150c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e20:	4b3b      	ldr	r3, [pc, #236]	@ (8010f10 <xTaskIncrementTick+0x15c>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	693a      	ldr	r2, [r7, #16]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d349      	bcc.n	8010ebe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e2a:	4b36      	ldr	r3, [pc, #216]	@ (8010f04 <xTaskIncrementTick+0x150>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d104      	bne.n	8010e3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e34:	4b36      	ldr	r3, [pc, #216]	@ (8010f10 <xTaskIncrementTick+0x15c>)
 8010e36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010e3a:	601a      	str	r2, [r3, #0]
					break;
 8010e3c:	e03f      	b.n	8010ebe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e3e:	4b31      	ldr	r3, [pc, #196]	@ (8010f04 <xTaskIncrementTick+0x150>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e4e:	693a      	ldr	r2, [r7, #16]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d203      	bcs.n	8010e5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e56:	4a2e      	ldr	r2, [pc, #184]	@ (8010f10 <xTaskIncrementTick+0x15c>)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e5c:	e02f      	b.n	8010ebe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	3304      	adds	r3, #4
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fe fb98 	bl	800f598 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d004      	beq.n	8010e7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	3318      	adds	r3, #24
 8010e74:	4618      	mov	r0, r3
 8010e76:	f7fe fb8f 	bl	800f598 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e7e:	4b25      	ldr	r3, [pc, #148]	@ (8010f14 <xTaskIncrementTick+0x160>)
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d903      	bls.n	8010e8e <xTaskIncrementTick+0xda>
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e8a:	4a22      	ldr	r2, [pc, #136]	@ (8010f14 <xTaskIncrementTick+0x160>)
 8010e8c:	6013      	str	r3, [r2, #0]
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e92:	4613      	mov	r3, r2
 8010e94:	009b      	lsls	r3, r3, #2
 8010e96:	4413      	add	r3, r2
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8010f18 <xTaskIncrementTick+0x164>)
 8010e9c:	441a      	add	r2, r3
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	3304      	adds	r3, #4
 8010ea2:	4619      	mov	r1, r3
 8010ea4:	4610      	mov	r0, r2
 8010ea6:	f7fe fb1a 	bl	800f4de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eae:	4b1b      	ldr	r3, [pc, #108]	@ (8010f1c <xTaskIncrementTick+0x168>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d3b8      	bcc.n	8010e2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010eb8:	2301      	movs	r3, #1
 8010eba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ebc:	e7b5      	b.n	8010e2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010ebe:	4b17      	ldr	r3, [pc, #92]	@ (8010f1c <xTaskIncrementTick+0x168>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ec4:	4914      	ldr	r1, [pc, #80]	@ (8010f18 <xTaskIncrementTick+0x164>)
 8010ec6:	4613      	mov	r3, r2
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	4413      	add	r3, r2
 8010ecc:	009b      	lsls	r3, r3, #2
 8010ece:	440b      	add	r3, r1
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	2b01      	cmp	r3, #1
 8010ed4:	d901      	bls.n	8010eda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010eda:	4b11      	ldr	r3, [pc, #68]	@ (8010f20 <xTaskIncrementTick+0x16c>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d007      	beq.n	8010ef2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	617b      	str	r3, [r7, #20]
 8010ee6:	e004      	b.n	8010ef2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8010f24 <xTaskIncrementTick+0x170>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	3301      	adds	r3, #1
 8010eee:	4a0d      	ldr	r2, [pc, #52]	@ (8010f24 <xTaskIncrementTick+0x170>)
 8010ef0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010ef2:	697b      	ldr	r3, [r7, #20]
}
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3718      	adds	r7, #24
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}
 8010efc:	200016f4 	.word	0x200016f4
 8010f00:	200016d0 	.word	0x200016d0
 8010f04:	20001684 	.word	0x20001684
 8010f08:	20001688 	.word	0x20001688
 8010f0c:	200016e4 	.word	0x200016e4
 8010f10:	200016ec 	.word	0x200016ec
 8010f14:	200016d4 	.word	0x200016d4
 8010f18:	200011fc 	.word	0x200011fc
 8010f1c:	200011f8 	.word	0x200011f8
 8010f20:	200016e0 	.word	0x200016e0
 8010f24:	200016dc 	.word	0x200016dc

08010f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b085      	sub	sp, #20
 8010f2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f2e:	4b28      	ldr	r3, [pc, #160]	@ (8010fd0 <vTaskSwitchContext+0xa8>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d003      	beq.n	8010f3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010f36:	4b27      	ldr	r3, [pc, #156]	@ (8010fd4 <vTaskSwitchContext+0xac>)
 8010f38:	2201      	movs	r2, #1
 8010f3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010f3c:	e042      	b.n	8010fc4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8010f3e:	4b25      	ldr	r3, [pc, #148]	@ (8010fd4 <vTaskSwitchContext+0xac>)
 8010f40:	2200      	movs	r2, #0
 8010f42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f44:	4b24      	ldr	r3, [pc, #144]	@ (8010fd8 <vTaskSwitchContext+0xb0>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	60fb      	str	r3, [r7, #12]
 8010f4a:	e011      	b.n	8010f70 <vTaskSwitchContext+0x48>
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d10b      	bne.n	8010f6a <vTaskSwitchContext+0x42>
	__asm volatile
 8010f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f56:	f383 8811 	msr	BASEPRI, r3
 8010f5a:	f3bf 8f6f 	isb	sy
 8010f5e:	f3bf 8f4f 	dsb	sy
 8010f62:	607b      	str	r3, [r7, #4]
}
 8010f64:	bf00      	nop
 8010f66:	bf00      	nop
 8010f68:	e7fd      	b.n	8010f66 <vTaskSwitchContext+0x3e>
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	3b01      	subs	r3, #1
 8010f6e:	60fb      	str	r3, [r7, #12]
 8010f70:	491a      	ldr	r1, [pc, #104]	@ (8010fdc <vTaskSwitchContext+0xb4>)
 8010f72:	68fa      	ldr	r2, [r7, #12]
 8010f74:	4613      	mov	r3, r2
 8010f76:	009b      	lsls	r3, r3, #2
 8010f78:	4413      	add	r3, r2
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	440b      	add	r3, r1
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d0e3      	beq.n	8010f4c <vTaskSwitchContext+0x24>
 8010f84:	68fa      	ldr	r2, [r7, #12]
 8010f86:	4613      	mov	r3, r2
 8010f88:	009b      	lsls	r3, r3, #2
 8010f8a:	4413      	add	r3, r2
 8010f8c:	009b      	lsls	r3, r3, #2
 8010f8e:	4a13      	ldr	r2, [pc, #76]	@ (8010fdc <vTaskSwitchContext+0xb4>)
 8010f90:	4413      	add	r3, r2
 8010f92:	60bb      	str	r3, [r7, #8]
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	685a      	ldr	r2, [r3, #4]
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	605a      	str	r2, [r3, #4]
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	685a      	ldr	r2, [r3, #4]
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	3308      	adds	r3, #8
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d104      	bne.n	8010fb4 <vTaskSwitchContext+0x8c>
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	685a      	ldr	r2, [r3, #4]
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	605a      	str	r2, [r3, #4]
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	68db      	ldr	r3, [r3, #12]
 8010fba:	4a09      	ldr	r2, [pc, #36]	@ (8010fe0 <vTaskSwitchContext+0xb8>)
 8010fbc:	6013      	str	r3, [r2, #0]
 8010fbe:	4a06      	ldr	r2, [pc, #24]	@ (8010fd8 <vTaskSwitchContext+0xb0>)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	6013      	str	r3, [r2, #0]
}
 8010fc4:	bf00      	nop
 8010fc6:	3714      	adds	r7, #20
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr
 8010fd0:	200016f4 	.word	0x200016f4
 8010fd4:	200016e0 	.word	0x200016e0
 8010fd8:	200016d4 	.word	0x200016d4
 8010fdc:	200011fc 	.word	0x200011fc
 8010fe0:	200011f8 	.word	0x200011f8

08010fe4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d10b      	bne.n	801100c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ff8:	f383 8811 	msr	BASEPRI, r3
 8010ffc:	f3bf 8f6f 	isb	sy
 8011000:	f3bf 8f4f 	dsb	sy
 8011004:	60fb      	str	r3, [r7, #12]
}
 8011006:	bf00      	nop
 8011008:	bf00      	nop
 801100a:	e7fd      	b.n	8011008 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801100c:	4b07      	ldr	r3, [pc, #28]	@ (801102c <vTaskPlaceOnEventList+0x48>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	3318      	adds	r3, #24
 8011012:	4619      	mov	r1, r3
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7fe fa86 	bl	800f526 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801101a:	2101      	movs	r1, #1
 801101c:	6838      	ldr	r0, [r7, #0]
 801101e:	f000 fd4d 	bl	8011abc <prvAddCurrentTaskToDelayedList>
}
 8011022:	bf00      	nop
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	200011f8 	.word	0x200011f8

08011030 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b086      	sub	sp, #24
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d10b      	bne.n	801105a <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8011042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	617b      	str	r3, [r7, #20]
}
 8011054:	bf00      	nop
 8011056:	bf00      	nop
 8011058:	e7fd      	b.n	8011056 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801105a:	4b12      	ldr	r3, [pc, #72]	@ (80110a4 <vTaskPlaceOnUnorderedEventList+0x74>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d10b      	bne.n	801107a <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8011062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011066:	f383 8811 	msr	BASEPRI, r3
 801106a:	f3bf 8f6f 	isb	sy
 801106e:	f3bf 8f4f 	dsb	sy
 8011072:	613b      	str	r3, [r7, #16]
}
 8011074:	bf00      	nop
 8011076:	bf00      	nop
 8011078:	e7fd      	b.n	8011076 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801107a:	4b0b      	ldr	r3, [pc, #44]	@ (80110a8 <vTaskPlaceOnUnorderedEventList+0x78>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	68ba      	ldr	r2, [r7, #8]
 8011080:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011084:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011086:	4b08      	ldr	r3, [pc, #32]	@ (80110a8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	3318      	adds	r3, #24
 801108c:	4619      	mov	r1, r3
 801108e:	68f8      	ldr	r0, [r7, #12]
 8011090:	f7fe fa25 	bl	800f4de <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011094:	2101      	movs	r1, #1
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 fd10 	bl	8011abc <prvAddCurrentTaskToDelayedList>
}
 801109c:	bf00      	nop
 801109e:	3718      	adds	r7, #24
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	200016f4 	.word	0x200016f4
 80110a8:	200011f8 	.word	0x200011f8

080110ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b086      	sub	sp, #24
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	60f8      	str	r0, [r7, #12]
 80110b4:	60b9      	str	r1, [r7, #8]
 80110b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d10b      	bne.n	80110d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80110be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110c2:	f383 8811 	msr	BASEPRI, r3
 80110c6:	f3bf 8f6f 	isb	sy
 80110ca:	f3bf 8f4f 	dsb	sy
 80110ce:	617b      	str	r3, [r7, #20]
}
 80110d0:	bf00      	nop
 80110d2:	bf00      	nop
 80110d4:	e7fd      	b.n	80110d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110d6:	4b0a      	ldr	r3, [pc, #40]	@ (8011100 <vTaskPlaceOnEventListRestricted+0x54>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	3318      	adds	r3, #24
 80110dc:	4619      	mov	r1, r3
 80110de:	68f8      	ldr	r0, [r7, #12]
 80110e0:	f7fe f9fd 	bl	800f4de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d002      	beq.n	80110f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80110ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80110ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80110f0:	6879      	ldr	r1, [r7, #4]
 80110f2:	68b8      	ldr	r0, [r7, #8]
 80110f4:	f000 fce2 	bl	8011abc <prvAddCurrentTaskToDelayedList>
	}
 80110f8:	bf00      	nop
 80110fa:	3718      	adds	r7, #24
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}
 8011100:	200011f8 	.word	0x200011f8

08011104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b086      	sub	sp, #24
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	68db      	ldr	r3, [r3, #12]
 8011112:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d10b      	bne.n	8011132 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801111a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801111e:	f383 8811 	msr	BASEPRI, r3
 8011122:	f3bf 8f6f 	isb	sy
 8011126:	f3bf 8f4f 	dsb	sy
 801112a:	60fb      	str	r3, [r7, #12]
}
 801112c:	bf00      	nop
 801112e:	bf00      	nop
 8011130:	e7fd      	b.n	801112e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011132:	693b      	ldr	r3, [r7, #16]
 8011134:	3318      	adds	r3, #24
 8011136:	4618      	mov	r0, r3
 8011138:	f7fe fa2e 	bl	800f598 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801113c:	4b1d      	ldr	r3, [pc, #116]	@ (80111b4 <xTaskRemoveFromEventList+0xb0>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d11d      	bne.n	8011180 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011144:	693b      	ldr	r3, [r7, #16]
 8011146:	3304      	adds	r3, #4
 8011148:	4618      	mov	r0, r3
 801114a:	f7fe fa25 	bl	800f598 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011152:	4b19      	ldr	r3, [pc, #100]	@ (80111b8 <xTaskRemoveFromEventList+0xb4>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	429a      	cmp	r2, r3
 8011158:	d903      	bls.n	8011162 <xTaskRemoveFromEventList+0x5e>
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801115e:	4a16      	ldr	r2, [pc, #88]	@ (80111b8 <xTaskRemoveFromEventList+0xb4>)
 8011160:	6013      	str	r3, [r2, #0]
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011166:	4613      	mov	r3, r2
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	4413      	add	r3, r2
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	4a13      	ldr	r2, [pc, #76]	@ (80111bc <xTaskRemoveFromEventList+0xb8>)
 8011170:	441a      	add	r2, r3
 8011172:	693b      	ldr	r3, [r7, #16]
 8011174:	3304      	adds	r3, #4
 8011176:	4619      	mov	r1, r3
 8011178:	4610      	mov	r0, r2
 801117a:	f7fe f9b0 	bl	800f4de <vListInsertEnd>
 801117e:	e005      	b.n	801118c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	3318      	adds	r3, #24
 8011184:	4619      	mov	r1, r3
 8011186:	480e      	ldr	r0, [pc, #56]	@ (80111c0 <xTaskRemoveFromEventList+0xbc>)
 8011188:	f7fe f9a9 	bl	800f4de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801118c:	693b      	ldr	r3, [r7, #16]
 801118e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011190:	4b0c      	ldr	r3, [pc, #48]	@ (80111c4 <xTaskRemoveFromEventList+0xc0>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011196:	429a      	cmp	r2, r3
 8011198:	d905      	bls.n	80111a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801119a:	2301      	movs	r3, #1
 801119c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801119e:	4b0a      	ldr	r3, [pc, #40]	@ (80111c8 <xTaskRemoveFromEventList+0xc4>)
 80111a0:	2201      	movs	r2, #1
 80111a2:	601a      	str	r2, [r3, #0]
 80111a4:	e001      	b.n	80111aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80111a6:	2300      	movs	r3, #0
 80111a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80111aa:	697b      	ldr	r3, [r7, #20]
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3718      	adds	r7, #24
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	200016f4 	.word	0x200016f4
 80111b8:	200016d4 	.word	0x200016d4
 80111bc:	200011fc 	.word	0x200011fc
 80111c0:	2000168c 	.word	0x2000168c
 80111c4:	200011f8 	.word	0x200011f8
 80111c8:	200016e0 	.word	0x200016e0

080111cc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b086      	sub	sp, #24
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80111d6:	4b2a      	ldr	r3, [pc, #168]	@ (8011280 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d10b      	bne.n	80111f6 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80111de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111e2:	f383 8811 	msr	BASEPRI, r3
 80111e6:	f3bf 8f6f 	isb	sy
 80111ea:	f3bf 8f4f 	dsb	sy
 80111ee:	613b      	str	r3, [r7, #16]
}
 80111f0:	bf00      	nop
 80111f2:	bf00      	nop
 80111f4:	e7fd      	b.n	80111f2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d10b      	bne.n	8011224 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 801120c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011210:	f383 8811 	msr	BASEPRI, r3
 8011214:	f3bf 8f6f 	isb	sy
 8011218:	f3bf 8f4f 	dsb	sy
 801121c:	60fb      	str	r3, [r7, #12]
}
 801121e:	bf00      	nop
 8011220:	bf00      	nop
 8011222:	e7fd      	b.n	8011220 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7fe f9b7 	bl	800f598 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	3304      	adds	r3, #4
 801122e:	4618      	mov	r0, r3
 8011230:	f7fe f9b2 	bl	800f598 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011238:	4b12      	ldr	r3, [pc, #72]	@ (8011284 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	429a      	cmp	r2, r3
 801123e:	d903      	bls.n	8011248 <vTaskRemoveFromUnorderedEventList+0x7c>
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011244:	4a0f      	ldr	r2, [pc, #60]	@ (8011284 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8011246:	6013      	str	r3, [r2, #0]
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801124c:	4613      	mov	r3, r2
 801124e:	009b      	lsls	r3, r3, #2
 8011250:	4413      	add	r3, r2
 8011252:	009b      	lsls	r3, r3, #2
 8011254:	4a0c      	ldr	r2, [pc, #48]	@ (8011288 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011256:	441a      	add	r2, r3
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	3304      	adds	r3, #4
 801125c:	4619      	mov	r1, r3
 801125e:	4610      	mov	r0, r2
 8011260:	f7fe f93d 	bl	800f4de <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011268:	4b08      	ldr	r3, [pc, #32]	@ (801128c <vTaskRemoveFromUnorderedEventList+0xc0>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801126e:	429a      	cmp	r2, r3
 8011270:	d902      	bls.n	8011278 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011272:	4b07      	ldr	r3, [pc, #28]	@ (8011290 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8011274:	2201      	movs	r2, #1
 8011276:	601a      	str	r2, [r3, #0]
	}
}
 8011278:	bf00      	nop
 801127a:	3718      	adds	r7, #24
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	200016f4 	.word	0x200016f4
 8011284:	200016d4 	.word	0x200016d4
 8011288:	200011fc 	.word	0x200011fc
 801128c:	200011f8 	.word	0x200011f8
 8011290:	200016e0 	.word	0x200016e0

08011294 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801129c:	4b06      	ldr	r3, [pc, #24]	@ (80112b8 <vTaskInternalSetTimeOutState+0x24>)
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80112a4:	4b05      	ldr	r3, [pc, #20]	@ (80112bc <vTaskInternalSetTimeOutState+0x28>)
 80112a6:	681a      	ldr	r2, [r3, #0]
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	605a      	str	r2, [r3, #4]
}
 80112ac:	bf00      	nop
 80112ae:	370c      	adds	r7, #12
 80112b0:	46bd      	mov	sp, r7
 80112b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b6:	4770      	bx	lr
 80112b8:	200016e4 	.word	0x200016e4
 80112bc:	200016d0 	.word	0x200016d0

080112c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b088      	sub	sp, #32
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d10b      	bne.n	80112e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80112d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112d4:	f383 8811 	msr	BASEPRI, r3
 80112d8:	f3bf 8f6f 	isb	sy
 80112dc:	f3bf 8f4f 	dsb	sy
 80112e0:	613b      	str	r3, [r7, #16]
}
 80112e2:	bf00      	nop
 80112e4:	bf00      	nop
 80112e6:	e7fd      	b.n	80112e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d10b      	bne.n	8011306 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80112ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112f2:	f383 8811 	msr	BASEPRI, r3
 80112f6:	f3bf 8f6f 	isb	sy
 80112fa:	f3bf 8f4f 	dsb	sy
 80112fe:	60fb      	str	r3, [r7, #12]
}
 8011300:	bf00      	nop
 8011302:	bf00      	nop
 8011304:	e7fd      	b.n	8011302 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011306:	f001 f9bf 	bl	8012688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801130a:	4b1d      	ldr	r3, [pc, #116]	@ (8011380 <xTaskCheckForTimeOut+0xc0>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	69ba      	ldr	r2, [r7, #24]
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011322:	d102      	bne.n	801132a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011324:	2300      	movs	r3, #0
 8011326:	61fb      	str	r3, [r7, #28]
 8011328:	e023      	b.n	8011372 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	4b15      	ldr	r3, [pc, #84]	@ (8011384 <xTaskCheckForTimeOut+0xc4>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	429a      	cmp	r2, r3
 8011334:	d007      	beq.n	8011346 <xTaskCheckForTimeOut+0x86>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	69ba      	ldr	r2, [r7, #24]
 801133c:	429a      	cmp	r2, r3
 801133e:	d302      	bcc.n	8011346 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011340:	2301      	movs	r3, #1
 8011342:	61fb      	str	r3, [r7, #28]
 8011344:	e015      	b.n	8011372 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	697a      	ldr	r2, [r7, #20]
 801134c:	429a      	cmp	r2, r3
 801134e:	d20b      	bcs.n	8011368 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	1ad2      	subs	r2, r2, r3
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7ff ff99 	bl	8011294 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011362:	2300      	movs	r3, #0
 8011364:	61fb      	str	r3, [r7, #28]
 8011366:	e004      	b.n	8011372 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	2200      	movs	r2, #0
 801136c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801136e:	2301      	movs	r3, #1
 8011370:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011372:	f001 f9bb 	bl	80126ec <vPortExitCritical>

	return xReturn;
 8011376:	69fb      	ldr	r3, [r7, #28]
}
 8011378:	4618      	mov	r0, r3
 801137a:	3720      	adds	r7, #32
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}
 8011380:	200016d0 	.word	0x200016d0
 8011384:	200016e4 	.word	0x200016e4

08011388 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011388:	b480      	push	{r7}
 801138a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801138c:	4b03      	ldr	r3, [pc, #12]	@ (801139c <vTaskMissedYield+0x14>)
 801138e:	2201      	movs	r2, #1
 8011390:	601a      	str	r2, [r3, #0]
}
 8011392:	bf00      	nop
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr
 801139c:	200016e0 	.word	0x200016e0

080113a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80113a8:	f000 f852 	bl	8011450 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80113ac:	4b06      	ldr	r3, [pc, #24]	@ (80113c8 <prvIdleTask+0x28>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d9f9      	bls.n	80113a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80113b4:	4b05      	ldr	r3, [pc, #20]	@ (80113cc <prvIdleTask+0x2c>)
 80113b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	f3bf 8f4f 	dsb	sy
 80113c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80113c4:	e7f0      	b.n	80113a8 <prvIdleTask+0x8>
 80113c6:	bf00      	nop
 80113c8:	200011fc 	.word	0x200011fc
 80113cc:	e000ed04 	.word	0xe000ed04

080113d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80113d6:	2300      	movs	r3, #0
 80113d8:	607b      	str	r3, [r7, #4]
 80113da:	e00c      	b.n	80113f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	4613      	mov	r3, r2
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	4413      	add	r3, r2
 80113e4:	009b      	lsls	r3, r3, #2
 80113e6:	4a12      	ldr	r2, [pc, #72]	@ (8011430 <prvInitialiseTaskLists+0x60>)
 80113e8:	4413      	add	r3, r2
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fe f84a 	bl	800f484 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	3301      	adds	r3, #1
 80113f4:	607b      	str	r3, [r7, #4]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2b37      	cmp	r3, #55	@ 0x37
 80113fa:	d9ef      	bls.n	80113dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80113fc:	480d      	ldr	r0, [pc, #52]	@ (8011434 <prvInitialiseTaskLists+0x64>)
 80113fe:	f7fe f841 	bl	800f484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011402:	480d      	ldr	r0, [pc, #52]	@ (8011438 <prvInitialiseTaskLists+0x68>)
 8011404:	f7fe f83e 	bl	800f484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011408:	480c      	ldr	r0, [pc, #48]	@ (801143c <prvInitialiseTaskLists+0x6c>)
 801140a:	f7fe f83b 	bl	800f484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801140e:	480c      	ldr	r0, [pc, #48]	@ (8011440 <prvInitialiseTaskLists+0x70>)
 8011410:	f7fe f838 	bl	800f484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011414:	480b      	ldr	r0, [pc, #44]	@ (8011444 <prvInitialiseTaskLists+0x74>)
 8011416:	f7fe f835 	bl	800f484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801141a:	4b0b      	ldr	r3, [pc, #44]	@ (8011448 <prvInitialiseTaskLists+0x78>)
 801141c:	4a05      	ldr	r2, [pc, #20]	@ (8011434 <prvInitialiseTaskLists+0x64>)
 801141e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011420:	4b0a      	ldr	r3, [pc, #40]	@ (801144c <prvInitialiseTaskLists+0x7c>)
 8011422:	4a05      	ldr	r2, [pc, #20]	@ (8011438 <prvInitialiseTaskLists+0x68>)
 8011424:	601a      	str	r2, [r3, #0]
}
 8011426:	bf00      	nop
 8011428:	3708      	adds	r7, #8
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	200011fc 	.word	0x200011fc
 8011434:	2000165c 	.word	0x2000165c
 8011438:	20001670 	.word	0x20001670
 801143c:	2000168c 	.word	0x2000168c
 8011440:	200016a0 	.word	0x200016a0
 8011444:	200016b8 	.word	0x200016b8
 8011448:	20001684 	.word	0x20001684
 801144c:	20001688 	.word	0x20001688

08011450 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011456:	e019      	b.n	801148c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011458:	f001 f916 	bl	8012688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801145c:	4b10      	ldr	r3, [pc, #64]	@ (80114a0 <prvCheckTasksWaitingTermination+0x50>)
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	3304      	adds	r3, #4
 8011468:	4618      	mov	r0, r3
 801146a:	f7fe f895 	bl	800f598 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801146e:	4b0d      	ldr	r3, [pc, #52]	@ (80114a4 <prvCheckTasksWaitingTermination+0x54>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	3b01      	subs	r3, #1
 8011474:	4a0b      	ldr	r2, [pc, #44]	@ (80114a4 <prvCheckTasksWaitingTermination+0x54>)
 8011476:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011478:	4b0b      	ldr	r3, [pc, #44]	@ (80114a8 <prvCheckTasksWaitingTermination+0x58>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	3b01      	subs	r3, #1
 801147e:	4a0a      	ldr	r2, [pc, #40]	@ (80114a8 <prvCheckTasksWaitingTermination+0x58>)
 8011480:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011482:	f001 f933 	bl	80126ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f000 f810 	bl	80114ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801148c:	4b06      	ldr	r3, [pc, #24]	@ (80114a8 <prvCheckTasksWaitingTermination+0x58>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1e1      	bne.n	8011458 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011494:	bf00      	nop
 8011496:	bf00      	nop
 8011498:	3708      	adds	r7, #8
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	200016a0 	.word	0x200016a0
 80114a4:	200016cc 	.word	0x200016cc
 80114a8:	200016b4 	.word	0x200016b4

080114ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d108      	bne.n	80114d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114c2:	4618      	mov	r0, r3
 80114c4:	f001 fad0 	bl	8012a68 <vPortFree>
				vPortFree( pxTCB );
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f001 facd 	bl	8012a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80114ce:	e019      	b.n	8011504 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80114d6:	2b01      	cmp	r3, #1
 80114d8:	d103      	bne.n	80114e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f001 fac4 	bl	8012a68 <vPortFree>
	}
 80114e0:	e010      	b.n	8011504 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	d00b      	beq.n	8011504 <prvDeleteTCB+0x58>
	__asm volatile
 80114ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114f0:	f383 8811 	msr	BASEPRI, r3
 80114f4:	f3bf 8f6f 	isb	sy
 80114f8:	f3bf 8f4f 	dsb	sy
 80114fc:	60fb      	str	r3, [r7, #12]
}
 80114fe:	bf00      	nop
 8011500:	bf00      	nop
 8011502:	e7fd      	b.n	8011500 <prvDeleteTCB+0x54>
	}
 8011504:	bf00      	nop
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801150c:	b480      	push	{r7}
 801150e:	b083      	sub	sp, #12
 8011510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011512:	4b0c      	ldr	r3, [pc, #48]	@ (8011544 <prvResetNextTaskUnblockTime+0x38>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d104      	bne.n	8011526 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801151c:	4b0a      	ldr	r3, [pc, #40]	@ (8011548 <prvResetNextTaskUnblockTime+0x3c>)
 801151e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011522:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011524:	e008      	b.n	8011538 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011526:	4b07      	ldr	r3, [pc, #28]	@ (8011544 <prvResetNextTaskUnblockTime+0x38>)
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	68db      	ldr	r3, [r3, #12]
 801152e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	4a04      	ldr	r2, [pc, #16]	@ (8011548 <prvResetNextTaskUnblockTime+0x3c>)
 8011536:	6013      	str	r3, [r2, #0]
}
 8011538:	bf00      	nop
 801153a:	370c      	adds	r7, #12
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr
 8011544:	20001684 	.word	0x20001684
 8011548:	200016ec 	.word	0x200016ec

0801154c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011552:	4b05      	ldr	r3, [pc, #20]	@ (8011568 <xTaskGetCurrentTaskHandle+0x1c>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011558:	687b      	ldr	r3, [r7, #4]
	}
 801155a:	4618      	mov	r0, r3
 801155c:	370c      	adds	r7, #12
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop
 8011568:	200011f8 	.word	0x200011f8

0801156c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801156c:	b480      	push	{r7}
 801156e:	b083      	sub	sp, #12
 8011570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011572:	4b0b      	ldr	r3, [pc, #44]	@ (80115a0 <xTaskGetSchedulerState+0x34>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d102      	bne.n	8011580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801157a:	2301      	movs	r3, #1
 801157c:	607b      	str	r3, [r7, #4]
 801157e:	e008      	b.n	8011592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011580:	4b08      	ldr	r3, [pc, #32]	@ (80115a4 <xTaskGetSchedulerState+0x38>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d102      	bne.n	801158e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011588:	2302      	movs	r3, #2
 801158a:	607b      	str	r3, [r7, #4]
 801158c:	e001      	b.n	8011592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801158e:	2300      	movs	r3, #0
 8011590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011592:	687b      	ldr	r3, [r7, #4]
	}
 8011594:	4618      	mov	r0, r3
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr
 80115a0:	200016d8 	.word	0x200016d8
 80115a4:	200016f4 	.word	0x200016f4

080115a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b084      	sub	sp, #16
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80115b4:	2300      	movs	r3, #0
 80115b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d051      	beq.n	8011662 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115c2:	4b2a      	ldr	r3, [pc, #168]	@ (801166c <xTaskPriorityInherit+0xc4>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d241      	bcs.n	8011650 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	699b      	ldr	r3, [r3, #24]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	db06      	blt.n	80115e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115d4:	4b25      	ldr	r3, [pc, #148]	@ (801166c <xTaskPriorityInherit+0xc4>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	6959      	ldr	r1, [r3, #20]
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115ea:	4613      	mov	r3, r2
 80115ec:	009b      	lsls	r3, r3, #2
 80115ee:	4413      	add	r3, r2
 80115f0:	009b      	lsls	r3, r3, #2
 80115f2:	4a1f      	ldr	r2, [pc, #124]	@ (8011670 <xTaskPriorityInherit+0xc8>)
 80115f4:	4413      	add	r3, r2
 80115f6:	4299      	cmp	r1, r3
 80115f8:	d122      	bne.n	8011640 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	3304      	adds	r3, #4
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fd ffca 	bl	800f598 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011604:	4b19      	ldr	r3, [pc, #100]	@ (801166c <xTaskPriorityInherit+0xc4>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011612:	4b18      	ldr	r3, [pc, #96]	@ (8011674 <xTaskPriorityInherit+0xcc>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	429a      	cmp	r2, r3
 8011618:	d903      	bls.n	8011622 <xTaskPriorityInherit+0x7a>
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801161e:	4a15      	ldr	r2, [pc, #84]	@ (8011674 <xTaskPriorityInherit+0xcc>)
 8011620:	6013      	str	r3, [r2, #0]
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011626:	4613      	mov	r3, r2
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
 801162c:	009b      	lsls	r3, r3, #2
 801162e:	4a10      	ldr	r2, [pc, #64]	@ (8011670 <xTaskPriorityInherit+0xc8>)
 8011630:	441a      	add	r2, r3
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	3304      	adds	r3, #4
 8011636:	4619      	mov	r1, r3
 8011638:	4610      	mov	r0, r2
 801163a:	f7fd ff50 	bl	800f4de <vListInsertEnd>
 801163e:	e004      	b.n	801164a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011640:	4b0a      	ldr	r3, [pc, #40]	@ (801166c <xTaskPriorityInherit+0xc4>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801164a:	2301      	movs	r3, #1
 801164c:	60fb      	str	r3, [r7, #12]
 801164e:	e008      	b.n	8011662 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011654:	4b05      	ldr	r3, [pc, #20]	@ (801166c <xTaskPriorityInherit+0xc4>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801165a:	429a      	cmp	r2, r3
 801165c:	d201      	bcs.n	8011662 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801165e:	2301      	movs	r3, #1
 8011660:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011662:	68fb      	ldr	r3, [r7, #12]
	}
 8011664:	4618      	mov	r0, r3
 8011666:	3710      	adds	r7, #16
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	200011f8 	.word	0x200011f8
 8011670:	200011fc 	.word	0x200011fc
 8011674:	200016d4 	.word	0x200016d4

08011678 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011678:	b580      	push	{r7, lr}
 801167a:	b086      	sub	sp, #24
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011684:	2300      	movs	r3, #0
 8011686:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d058      	beq.n	8011740 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801168e:	4b2f      	ldr	r3, [pc, #188]	@ (801174c <xTaskPriorityDisinherit+0xd4>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	693a      	ldr	r2, [r7, #16]
 8011694:	429a      	cmp	r2, r3
 8011696:	d00b      	beq.n	80116b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8011698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801169c:	f383 8811 	msr	BASEPRI, r3
 80116a0:	f3bf 8f6f 	isb	sy
 80116a4:	f3bf 8f4f 	dsb	sy
 80116a8:	60fb      	str	r3, [r7, #12]
}
 80116aa:	bf00      	nop
 80116ac:	bf00      	nop
 80116ae:	e7fd      	b.n	80116ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d10b      	bne.n	80116d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80116b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116bc:	f383 8811 	msr	BASEPRI, r3
 80116c0:	f3bf 8f6f 	isb	sy
 80116c4:	f3bf 8f4f 	dsb	sy
 80116c8:	60bb      	str	r3, [r7, #8]
}
 80116ca:	bf00      	nop
 80116cc:	bf00      	nop
 80116ce:	e7fd      	b.n	80116cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116d4:	1e5a      	subs	r2, r3, #1
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d02c      	beq.n	8011740 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d128      	bne.n	8011740 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	3304      	adds	r3, #4
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fd ff50 	bl	800f598 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80116f8:	693b      	ldr	r3, [r7, #16]
 80116fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011704:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011710:	4b0f      	ldr	r3, [pc, #60]	@ (8011750 <xTaskPriorityDisinherit+0xd8>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	429a      	cmp	r2, r3
 8011716:	d903      	bls.n	8011720 <xTaskPriorityDisinherit+0xa8>
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801171c:	4a0c      	ldr	r2, [pc, #48]	@ (8011750 <xTaskPriorityDisinherit+0xd8>)
 801171e:	6013      	str	r3, [r2, #0]
 8011720:	693b      	ldr	r3, [r7, #16]
 8011722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011724:	4613      	mov	r3, r2
 8011726:	009b      	lsls	r3, r3, #2
 8011728:	4413      	add	r3, r2
 801172a:	009b      	lsls	r3, r3, #2
 801172c:	4a09      	ldr	r2, [pc, #36]	@ (8011754 <xTaskPriorityDisinherit+0xdc>)
 801172e:	441a      	add	r2, r3
 8011730:	693b      	ldr	r3, [r7, #16]
 8011732:	3304      	adds	r3, #4
 8011734:	4619      	mov	r1, r3
 8011736:	4610      	mov	r0, r2
 8011738:	f7fd fed1 	bl	800f4de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801173c:	2301      	movs	r3, #1
 801173e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011740:	697b      	ldr	r3, [r7, #20]
	}
 8011742:	4618      	mov	r0, r3
 8011744:	3718      	adds	r7, #24
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	200011f8 	.word	0x200011f8
 8011750:	200016d4 	.word	0x200016d4
 8011754:	200011fc 	.word	0x200011fc

08011758 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011758:	b580      	push	{r7, lr}
 801175a:	b088      	sub	sp, #32
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011766:	2301      	movs	r3, #1
 8011768:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d06c      	beq.n	801184a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011770:	69bb      	ldr	r3, [r7, #24]
 8011772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011774:	2b00      	cmp	r3, #0
 8011776:	d10b      	bne.n	8011790 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801177c:	f383 8811 	msr	BASEPRI, r3
 8011780:	f3bf 8f6f 	isb	sy
 8011784:	f3bf 8f4f 	dsb	sy
 8011788:	60fb      	str	r3, [r7, #12]
}
 801178a:	bf00      	nop
 801178c:	bf00      	nop
 801178e:	e7fd      	b.n	801178c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011794:	683a      	ldr	r2, [r7, #0]
 8011796:	429a      	cmp	r2, r3
 8011798:	d902      	bls.n	80117a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	61fb      	str	r3, [r7, #28]
 801179e:	e002      	b.n	80117a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80117a0:	69bb      	ldr	r3, [r7, #24]
 80117a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80117a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80117a6:	69bb      	ldr	r3, [r7, #24]
 80117a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117aa:	69fa      	ldr	r2, [r7, #28]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d04c      	beq.n	801184a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117b4:	697a      	ldr	r2, [r7, #20]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d147      	bne.n	801184a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80117ba:	4b26      	ldr	r3, [pc, #152]	@ (8011854 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	69ba      	ldr	r2, [r7, #24]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d10b      	bne.n	80117dc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80117c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117c8:	f383 8811 	msr	BASEPRI, r3
 80117cc:	f3bf 8f6f 	isb	sy
 80117d0:	f3bf 8f4f 	dsb	sy
 80117d4:	60bb      	str	r3, [r7, #8]
}
 80117d6:	bf00      	nop
 80117d8:	bf00      	nop
 80117da:	e7fd      	b.n	80117d8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80117e2:	69bb      	ldr	r3, [r7, #24]
 80117e4:	69fa      	ldr	r2, [r7, #28]
 80117e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	699b      	ldr	r3, [r3, #24]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	db04      	blt.n	80117fa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	6959      	ldr	r1, [r3, #20]
 80117fe:	693a      	ldr	r2, [r7, #16]
 8011800:	4613      	mov	r3, r2
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	4413      	add	r3, r2
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	4a13      	ldr	r2, [pc, #76]	@ (8011858 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801180a:	4413      	add	r3, r2
 801180c:	4299      	cmp	r1, r3
 801180e:	d11c      	bne.n	801184a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011810:	69bb      	ldr	r3, [r7, #24]
 8011812:	3304      	adds	r3, #4
 8011814:	4618      	mov	r0, r3
 8011816:	f7fd febf 	bl	800f598 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801181a:	69bb      	ldr	r3, [r7, #24]
 801181c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801181e:	4b0f      	ldr	r3, [pc, #60]	@ (801185c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	429a      	cmp	r2, r3
 8011824:	d903      	bls.n	801182e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8011826:	69bb      	ldr	r3, [r7, #24]
 8011828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801182a:	4a0c      	ldr	r2, [pc, #48]	@ (801185c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801182c:	6013      	str	r3, [r2, #0]
 801182e:	69bb      	ldr	r3, [r7, #24]
 8011830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011832:	4613      	mov	r3, r2
 8011834:	009b      	lsls	r3, r3, #2
 8011836:	4413      	add	r3, r2
 8011838:	009b      	lsls	r3, r3, #2
 801183a:	4a07      	ldr	r2, [pc, #28]	@ (8011858 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801183c:	441a      	add	r2, r3
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	3304      	adds	r3, #4
 8011842:	4619      	mov	r1, r3
 8011844:	4610      	mov	r0, r2
 8011846:	f7fd fe4a 	bl	800f4de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801184a:	bf00      	nop
 801184c:	3720      	adds	r7, #32
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
 8011852:	bf00      	nop
 8011854:	200011f8 	.word	0x200011f8
 8011858:	200011fc 	.word	0x200011fc
 801185c:	200016d4 	.word	0x200016d4

08011860 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8011860:	b480      	push	{r7}
 8011862:	b083      	sub	sp, #12
 8011864:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8011866:	4b09      	ldr	r3, [pc, #36]	@ (801188c <uxTaskResetEventItemValue+0x2c>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	699b      	ldr	r3, [r3, #24]
 801186c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801186e:	4b07      	ldr	r3, [pc, #28]	@ (801188c <uxTaskResetEventItemValue+0x2c>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011874:	4b05      	ldr	r3, [pc, #20]	@ (801188c <uxTaskResetEventItemValue+0x2c>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 801187c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801187e:	687b      	ldr	r3, [r7, #4]
}
 8011880:	4618      	mov	r0, r3
 8011882:	370c      	adds	r7, #12
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr
 801188c:	200011f8 	.word	0x200011f8

08011890 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011890:	b480      	push	{r7}
 8011892:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011894:	4b07      	ldr	r3, [pc, #28]	@ (80118b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d004      	beq.n	80118a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801189c:	4b05      	ldr	r3, [pc, #20]	@ (80118b4 <pvTaskIncrementMutexHeldCount+0x24>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80118a2:	3201      	adds	r2, #1
 80118a4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80118a6:	4b03      	ldr	r3, [pc, #12]	@ (80118b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80118a8:	681b      	ldr	r3, [r3, #0]
	}
 80118aa:	4618      	mov	r0, r3
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr
 80118b4:	200011f8 	.word	0x200011f8

080118b8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80118c2:	f000 fee1 	bl	8012688 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80118c6:	4b1e      	ldr	r3, [pc, #120]	@ (8011940 <ulTaskNotifyTake+0x88>)
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d113      	bne.n	80118f8 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80118d0:	4b1b      	ldr	r3, [pc, #108]	@ (8011940 <ulTaskNotifyTake+0x88>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2201      	movs	r2, #1
 80118d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00b      	beq.n	80118f8 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80118e0:	2101      	movs	r1, #1
 80118e2:	6838      	ldr	r0, [r7, #0]
 80118e4:	f000 f8ea 	bl	8011abc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80118e8:	4b16      	ldr	r3, [pc, #88]	@ (8011944 <ulTaskNotifyTake+0x8c>)
 80118ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118ee:	601a      	str	r2, [r3, #0]
 80118f0:	f3bf 8f4f 	dsb	sy
 80118f4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80118f8:	f000 fef8 	bl	80126ec <vPortExitCritical>

		taskENTER_CRITICAL();
 80118fc:	f000 fec4 	bl	8012688 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8011900:	4b0f      	ldr	r3, [pc, #60]	@ (8011940 <ulTaskNotifyTake+0x88>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011906:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d00c      	beq.n	8011928 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d004      	beq.n	801191e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011914:	4b0a      	ldr	r3, [pc, #40]	@ (8011940 <ulTaskNotifyTake+0x88>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	2200      	movs	r2, #0
 801191a:	655a      	str	r2, [r3, #84]	@ 0x54
 801191c:	e004      	b.n	8011928 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801191e:	4b08      	ldr	r3, [pc, #32]	@ (8011940 <ulTaskNotifyTake+0x88>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	68fa      	ldr	r2, [r7, #12]
 8011924:	3a01      	subs	r2, #1
 8011926:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011928:	4b05      	ldr	r3, [pc, #20]	@ (8011940 <ulTaskNotifyTake+0x88>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2200      	movs	r2, #0
 801192e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8011932:	f000 fedb 	bl	80126ec <vPortExitCritical>

		return ulReturn;
 8011936:	68fb      	ldr	r3, [r7, #12]
	}
 8011938:	4618      	mov	r0, r3
 801193a:	3710      	adds	r7, #16
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}
 8011940:	200011f8 	.word	0x200011f8
 8011944:	e000ed04 	.word	0xe000ed04

08011948 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011948:	b580      	push	{r7, lr}
 801194a:	b08a      	sub	sp, #40	@ 0x28
 801194c:	af00      	add	r7, sp, #0
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	60b9      	str	r1, [r7, #8]
 8011952:	603b      	str	r3, [r7, #0]
 8011954:	4613      	mov	r3, r2
 8011956:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011958:	2301      	movs	r3, #1
 801195a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d10b      	bne.n	801197a <xTaskGenericNotify+0x32>
	__asm volatile
 8011962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011966:	f383 8811 	msr	BASEPRI, r3
 801196a:	f3bf 8f6f 	isb	sy
 801196e:	f3bf 8f4f 	dsb	sy
 8011972:	61bb      	str	r3, [r7, #24]
}
 8011974:	bf00      	nop
 8011976:	bf00      	nop
 8011978:	e7fd      	b.n	8011976 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801197e:	f000 fe83 	bl	8012688 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d003      	beq.n	8011990 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011988:	6a3b      	ldr	r3, [r7, #32]
 801198a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011990:	6a3b      	ldr	r3, [r7, #32]
 8011992:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8011996:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011998:	6a3b      	ldr	r3, [r7, #32]
 801199a:	2202      	movs	r2, #2
 801199c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80119a0:	79fb      	ldrb	r3, [r7, #7]
 80119a2:	2b04      	cmp	r3, #4
 80119a4:	d827      	bhi.n	80119f6 <xTaskGenericNotify+0xae>
 80119a6:	a201      	add	r2, pc, #4	@ (adr r2, 80119ac <xTaskGenericNotify+0x64>)
 80119a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ac:	08011a19 	.word	0x08011a19
 80119b0:	080119c1 	.word	0x080119c1
 80119b4:	080119cf 	.word	0x080119cf
 80119b8:	080119db 	.word	0x080119db
 80119bc:	080119e3 	.word	0x080119e3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80119c0:	6a3b      	ldr	r3, [r7, #32]
 80119c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	431a      	orrs	r2, r3
 80119c8:	6a3b      	ldr	r3, [r7, #32]
 80119ca:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80119cc:	e027      	b.n	8011a1e <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80119ce:	6a3b      	ldr	r3, [r7, #32]
 80119d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119d2:	1c5a      	adds	r2, r3, #1
 80119d4:	6a3b      	ldr	r3, [r7, #32]
 80119d6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80119d8:	e021      	b.n	8011a1e <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80119da:	6a3b      	ldr	r3, [r7, #32]
 80119dc:	68ba      	ldr	r2, [r7, #8]
 80119de:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80119e0:	e01d      	b.n	8011a1e <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80119e2:	7ffb      	ldrb	r3, [r7, #31]
 80119e4:	2b02      	cmp	r3, #2
 80119e6:	d003      	beq.n	80119f0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80119e8:	6a3b      	ldr	r3, [r7, #32]
 80119ea:	68ba      	ldr	r2, [r7, #8]
 80119ec:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80119ee:	e016      	b.n	8011a1e <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80119f0:	2300      	movs	r3, #0
 80119f2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80119f4:	e013      	b.n	8011a1e <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80119f6:	6a3b      	ldr	r3, [r7, #32]
 80119f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80119fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80119fe:	d00d      	beq.n	8011a1c <xTaskGenericNotify+0xd4>
	__asm volatile
 8011a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a04:	f383 8811 	msr	BASEPRI, r3
 8011a08:	f3bf 8f6f 	isb	sy
 8011a0c:	f3bf 8f4f 	dsb	sy
 8011a10:	617b      	str	r3, [r7, #20]
}
 8011a12:	bf00      	nop
 8011a14:	bf00      	nop
 8011a16:	e7fd      	b.n	8011a14 <xTaskGenericNotify+0xcc>
					break;
 8011a18:	bf00      	nop
 8011a1a:	e000      	b.n	8011a1e <xTaskGenericNotify+0xd6>

					break;
 8011a1c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011a1e:	7ffb      	ldrb	r3, [r7, #31]
 8011a20:	2b01      	cmp	r3, #1
 8011a22:	d13b      	bne.n	8011a9c <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a24:	6a3b      	ldr	r3, [r7, #32]
 8011a26:	3304      	adds	r3, #4
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7fd fdb5 	bl	800f598 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011a2e:	6a3b      	ldr	r3, [r7, #32]
 8011a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a32:	4b1e      	ldr	r3, [pc, #120]	@ (8011aac <xTaskGenericNotify+0x164>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d903      	bls.n	8011a42 <xTaskGenericNotify+0xfa>
 8011a3a:	6a3b      	ldr	r3, [r7, #32]
 8011a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8011aac <xTaskGenericNotify+0x164>)
 8011a40:	6013      	str	r3, [r2, #0]
 8011a42:	6a3b      	ldr	r3, [r7, #32]
 8011a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a46:	4613      	mov	r3, r2
 8011a48:	009b      	lsls	r3, r3, #2
 8011a4a:	4413      	add	r3, r2
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	4a18      	ldr	r2, [pc, #96]	@ (8011ab0 <xTaskGenericNotify+0x168>)
 8011a50:	441a      	add	r2, r3
 8011a52:	6a3b      	ldr	r3, [r7, #32]
 8011a54:	3304      	adds	r3, #4
 8011a56:	4619      	mov	r1, r3
 8011a58:	4610      	mov	r0, r2
 8011a5a:	f7fd fd40 	bl	800f4de <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011a5e:	6a3b      	ldr	r3, [r7, #32]
 8011a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d00b      	beq.n	8011a7e <xTaskGenericNotify+0x136>
	__asm volatile
 8011a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a6a:	f383 8811 	msr	BASEPRI, r3
 8011a6e:	f3bf 8f6f 	isb	sy
 8011a72:	f3bf 8f4f 	dsb	sy
 8011a76:	613b      	str	r3, [r7, #16]
}
 8011a78:	bf00      	nop
 8011a7a:	bf00      	nop
 8011a7c:	e7fd      	b.n	8011a7a <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a7e:	6a3b      	ldr	r3, [r7, #32]
 8011a80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a82:	4b0c      	ldr	r3, [pc, #48]	@ (8011ab4 <xTaskGenericNotify+0x16c>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d907      	bls.n	8011a9c <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8011ab8 <xTaskGenericNotify+0x170>)
 8011a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a92:	601a      	str	r2, [r3, #0]
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011a9c:	f000 fe26 	bl	80126ec <vPortExitCritical>

		return xReturn;
 8011aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3728      	adds	r7, #40	@ 0x28
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	200016d4 	.word	0x200016d4
 8011ab0:	200011fc 	.word	0x200011fc
 8011ab4:	200011f8 	.word	0x200011f8
 8011ab8:	e000ed04 	.word	0xe000ed04

08011abc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b084      	sub	sp, #16
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	6078      	str	r0, [r7, #4]
 8011ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011ac6:	4b21      	ldr	r3, [pc, #132]	@ (8011b4c <prvAddCurrentTaskToDelayedList+0x90>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011acc:	4b20      	ldr	r3, [pc, #128]	@ (8011b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	3304      	adds	r3, #4
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7fd fd60 	bl	800f598 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011ade:	d10a      	bne.n	8011af6 <prvAddCurrentTaskToDelayedList+0x3a>
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d007      	beq.n	8011af6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8011b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	3304      	adds	r3, #4
 8011aec:	4619      	mov	r1, r3
 8011aee:	4819      	ldr	r0, [pc, #100]	@ (8011b54 <prvAddCurrentTaskToDelayedList+0x98>)
 8011af0:	f7fd fcf5 	bl	800f4de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011af4:	e026      	b.n	8011b44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011af6:	68fa      	ldr	r2, [r7, #12]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	4413      	add	r3, r2
 8011afc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011afe:	4b14      	ldr	r3, [pc, #80]	@ (8011b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	68ba      	ldr	r2, [r7, #8]
 8011b04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011b06:	68ba      	ldr	r2, [r7, #8]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d209      	bcs.n	8011b22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b0e:	4b12      	ldr	r3, [pc, #72]	@ (8011b58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011b10:	681a      	ldr	r2, [r3, #0]
 8011b12:	4b0f      	ldr	r3, [pc, #60]	@ (8011b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	3304      	adds	r3, #4
 8011b18:	4619      	mov	r1, r3
 8011b1a:	4610      	mov	r0, r2
 8011b1c:	f7fd fd03 	bl	800f526 <vListInsert>
}
 8011b20:	e010      	b.n	8011b44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011b22:	4b0e      	ldr	r3, [pc, #56]	@ (8011b5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	4b0a      	ldr	r3, [pc, #40]	@ (8011b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	3304      	adds	r3, #4
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	4610      	mov	r0, r2
 8011b30:	f7fd fcf9 	bl	800f526 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011b34:	4b0a      	ldr	r3, [pc, #40]	@ (8011b60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	68ba      	ldr	r2, [r7, #8]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d202      	bcs.n	8011b44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011b3e:	4a08      	ldr	r2, [pc, #32]	@ (8011b60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	6013      	str	r3, [r2, #0]
}
 8011b44:	bf00      	nop
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	200016d0 	.word	0x200016d0
 8011b50:	200011f8 	.word	0x200011f8
 8011b54:	200016b8 	.word	0x200016b8
 8011b58:	20001688 	.word	0x20001688
 8011b5c:	20001684 	.word	0x20001684
 8011b60:	200016ec 	.word	0x200016ec

08011b64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b08a      	sub	sp, #40	@ 0x28
 8011b68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011b6e:	f000 fbb1 	bl	80122d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011b72:	4b1d      	ldr	r3, [pc, #116]	@ (8011be8 <xTimerCreateTimerTask+0x84>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d021      	beq.n	8011bbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011b82:	1d3a      	adds	r2, r7, #4
 8011b84:	f107 0108 	add.w	r1, r7, #8
 8011b88:	f107 030c 	add.w	r3, r7, #12
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7fd fa69 	bl	800f064 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011b92:	6879      	ldr	r1, [r7, #4]
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	9202      	str	r2, [sp, #8]
 8011b9a:	9301      	str	r3, [sp, #4]
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	460a      	mov	r2, r1
 8011ba4:	4911      	ldr	r1, [pc, #68]	@ (8011bec <xTimerCreateTimerTask+0x88>)
 8011ba6:	4812      	ldr	r0, [pc, #72]	@ (8011bf0 <xTimerCreateTimerTask+0x8c>)
 8011ba8:	f7fe fe04 	bl	80107b4 <xTaskCreateStatic>
 8011bac:	4603      	mov	r3, r0
 8011bae:	4a11      	ldr	r2, [pc, #68]	@ (8011bf4 <xTimerCreateTimerTask+0x90>)
 8011bb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011bb2:	4b10      	ldr	r3, [pc, #64]	@ (8011bf4 <xTimerCreateTimerTask+0x90>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d001      	beq.n	8011bbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011bba:	2301      	movs	r3, #1
 8011bbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d10b      	bne.n	8011bdc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bc8:	f383 8811 	msr	BASEPRI, r3
 8011bcc:	f3bf 8f6f 	isb	sy
 8011bd0:	f3bf 8f4f 	dsb	sy
 8011bd4:	613b      	str	r3, [r7, #16]
}
 8011bd6:	bf00      	nop
 8011bd8:	bf00      	nop
 8011bda:	e7fd      	b.n	8011bd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011bdc:	697b      	ldr	r3, [r7, #20]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3718      	adds	r7, #24
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	20001728 	.word	0x20001728
 8011bec:	0801854c 	.word	0x0801854c
 8011bf0:	08011e6d 	.word	0x08011e6d
 8011bf4:	2000172c 	.word	0x2000172c

08011bf8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b088      	sub	sp, #32
 8011bfc:	af02      	add	r7, sp, #8
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	607a      	str	r2, [r7, #4]
 8011c04:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011c06:	202c      	movs	r0, #44	@ 0x2c
 8011c08:	f000 fe60 	bl	80128cc <pvPortMalloc>
 8011c0c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00d      	beq.n	8011c30 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	2200      	movs	r2, #0
 8011c18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	9301      	str	r3, [sp, #4]
 8011c20:	6a3b      	ldr	r3, [r7, #32]
 8011c22:	9300      	str	r3, [sp, #0]
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	68b9      	ldr	r1, [r7, #8]
 8011c2a:	68f8      	ldr	r0, [r7, #12]
 8011c2c:	f000 f845 	bl	8011cba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011c30:	697b      	ldr	r3, [r7, #20]
	}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3718      	adds	r7, #24
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011c3a:	b580      	push	{r7, lr}
 8011c3c:	b08a      	sub	sp, #40	@ 0x28
 8011c3e:	af02      	add	r7, sp, #8
 8011c40:	60f8      	str	r0, [r7, #12]
 8011c42:	60b9      	str	r1, [r7, #8]
 8011c44:	607a      	str	r2, [r7, #4]
 8011c46:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011c48:	232c      	movs	r3, #44	@ 0x2c
 8011c4a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	2b2c      	cmp	r3, #44	@ 0x2c
 8011c50:	d00b      	beq.n	8011c6a <xTimerCreateStatic+0x30>
	__asm volatile
 8011c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c56:	f383 8811 	msr	BASEPRI, r3
 8011c5a:	f3bf 8f6f 	isb	sy
 8011c5e:	f3bf 8f4f 	dsb	sy
 8011c62:	61bb      	str	r3, [r7, #24]
}
 8011c64:	bf00      	nop
 8011c66:	bf00      	nop
 8011c68:	e7fd      	b.n	8011c66 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011c6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8011c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d10b      	bne.n	8011c8a <xTimerCreateStatic+0x50>
	__asm volatile
 8011c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c76:	f383 8811 	msr	BASEPRI, r3
 8011c7a:	f3bf 8f6f 	isb	sy
 8011c7e:	f3bf 8f4f 	dsb	sy
 8011c82:	617b      	str	r3, [r7, #20]
}
 8011c84:	bf00      	nop
 8011c86:	bf00      	nop
 8011c88:	e7fd      	b.n	8011c86 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c8c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d00d      	beq.n	8011cb0 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	2202      	movs	r2, #2
 8011c98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	9301      	str	r3, [sp, #4]
 8011ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca2:	9300      	str	r3, [sp, #0]
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	68b9      	ldr	r1, [r7, #8]
 8011caa:	68f8      	ldr	r0, [r7, #12]
 8011cac:	f000 f805 	bl	8011cba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011cb0:	69fb      	ldr	r3, [r7, #28]
	}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3720      	adds	r7, #32
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}

08011cba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b086      	sub	sp, #24
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	60f8      	str	r0, [r7, #12]
 8011cc2:	60b9      	str	r1, [r7, #8]
 8011cc4:	607a      	str	r2, [r7, #4]
 8011cc6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d10b      	bne.n	8011ce6 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8011cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cd2:	f383 8811 	msr	BASEPRI, r3
 8011cd6:	f3bf 8f6f 	isb	sy
 8011cda:	f3bf 8f4f 	dsb	sy
 8011cde:	617b      	str	r3, [r7, #20]
}
 8011ce0:	bf00      	nop
 8011ce2:	bf00      	nop
 8011ce4:	e7fd      	b.n	8011ce2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8011ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d01e      	beq.n	8011d2a <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011cec:	f000 faf2 	bl	80122d4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf2:	68fa      	ldr	r2, [r7, #12]
 8011cf4:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf8:	68ba      	ldr	r2, [r7, #8]
 8011cfa:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cfe:	683a      	ldr	r2, [r7, #0]
 8011d00:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d04:	6a3a      	ldr	r2, [r7, #32]
 8011d06:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d0a:	3304      	adds	r3, #4
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7fd fbd9 	bl	800f4c4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d008      	beq.n	8011d2a <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011d1e:	f043 0304 	orr.w	r3, r3, #4
 8011d22:	b2da      	uxtb	r2, r3
 8011d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011d2a:	bf00      	nop
 8011d2c:	3718      	adds	r7, #24
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
	...

08011d34 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b08a      	sub	sp, #40	@ 0x28
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	60b9      	str	r1, [r7, #8]
 8011d3e:	607a      	str	r2, [r7, #4]
 8011d40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011d42:	2300      	movs	r3, #0
 8011d44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d10b      	bne.n	8011d64 <xTimerGenericCommand+0x30>
	__asm volatile
 8011d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d50:	f383 8811 	msr	BASEPRI, r3
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	f3bf 8f4f 	dsb	sy
 8011d5c:	623b      	str	r3, [r7, #32]
}
 8011d5e:	bf00      	nop
 8011d60:	bf00      	nop
 8011d62:	e7fd      	b.n	8011d60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011d64:	4b19      	ldr	r3, [pc, #100]	@ (8011dcc <xTimerGenericCommand+0x98>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d02a      	beq.n	8011dc2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	2b05      	cmp	r3, #5
 8011d7c:	dc18      	bgt.n	8011db0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011d7e:	f7ff fbf5 	bl	801156c <xTaskGetSchedulerState>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b02      	cmp	r3, #2
 8011d86:	d109      	bne.n	8011d9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011d88:	4b10      	ldr	r3, [pc, #64]	@ (8011dcc <xTimerGenericCommand+0x98>)
 8011d8a:	6818      	ldr	r0, [r3, #0]
 8011d8c:	f107 0110 	add.w	r1, r7, #16
 8011d90:	2300      	movs	r3, #0
 8011d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d94:	f7fd fe96 	bl	800fac4 <xQueueGenericSend>
 8011d98:	6278      	str	r0, [r7, #36]	@ 0x24
 8011d9a:	e012      	b.n	8011dc2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8011dcc <xTimerGenericCommand+0x98>)
 8011d9e:	6818      	ldr	r0, [r3, #0]
 8011da0:	f107 0110 	add.w	r1, r7, #16
 8011da4:	2300      	movs	r3, #0
 8011da6:	2200      	movs	r2, #0
 8011da8:	f7fd fe8c 	bl	800fac4 <xQueueGenericSend>
 8011dac:	6278      	str	r0, [r7, #36]	@ 0x24
 8011dae:	e008      	b.n	8011dc2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011db0:	4b06      	ldr	r3, [pc, #24]	@ (8011dcc <xTimerGenericCommand+0x98>)
 8011db2:	6818      	ldr	r0, [r3, #0]
 8011db4:	f107 0110 	add.w	r1, r7, #16
 8011db8:	2300      	movs	r3, #0
 8011dba:	683a      	ldr	r2, [r7, #0]
 8011dbc:	f7fd ff84 	bl	800fcc8 <xQueueGenericSendFromISR>
 8011dc0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	3728      	adds	r7, #40	@ 0x28
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}
 8011dcc:	20001728 	.word	0x20001728

08011dd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b088      	sub	sp, #32
 8011dd4:	af02      	add	r7, sp, #8
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dda:	4b23      	ldr	r3, [pc, #140]	@ (8011e68 <prvProcessExpiredTimer+0x98>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	3304      	adds	r3, #4
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fd fbd5 	bl	800f598 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011df4:	f003 0304 	and.w	r3, r3, #4
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d023      	beq.n	8011e44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	699a      	ldr	r2, [r3, #24]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	18d1      	adds	r1, r2, r3
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	683a      	ldr	r2, [r7, #0]
 8011e08:	6978      	ldr	r0, [r7, #20]
 8011e0a:	f000 f8d5 	bl	8011fb8 <prvInsertTimerInActiveList>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d020      	beq.n	8011e56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e14:	2300      	movs	r3, #0
 8011e16:	9300      	str	r3, [sp, #0]
 8011e18:	2300      	movs	r3, #0
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	2100      	movs	r1, #0
 8011e1e:	6978      	ldr	r0, [r7, #20]
 8011e20:	f7ff ff88 	bl	8011d34 <xTimerGenericCommand>
 8011e24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d114      	bne.n	8011e56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e30:	f383 8811 	msr	BASEPRI, r3
 8011e34:	f3bf 8f6f 	isb	sy
 8011e38:	f3bf 8f4f 	dsb	sy
 8011e3c:	60fb      	str	r3, [r7, #12]
}
 8011e3e:	bf00      	nop
 8011e40:	bf00      	nop
 8011e42:	e7fd      	b.n	8011e40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e4a:	f023 0301 	bic.w	r3, r3, #1
 8011e4e:	b2da      	uxtb	r2, r3
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	6a1b      	ldr	r3, [r3, #32]
 8011e5a:	6978      	ldr	r0, [r7, #20]
 8011e5c:	4798      	blx	r3
}
 8011e5e:	bf00      	nop
 8011e60:	3718      	adds	r7, #24
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	bf00      	nop
 8011e68:	20001720 	.word	0x20001720

08011e6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b084      	sub	sp, #16
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e74:	f107 0308 	add.w	r3, r7, #8
 8011e78:	4618      	mov	r0, r3
 8011e7a:	f000 f859 	bl	8011f30 <prvGetNextExpireTime>
 8011e7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	4619      	mov	r1, r3
 8011e84:	68f8      	ldr	r0, [r7, #12]
 8011e86:	f000 f805 	bl	8011e94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011e8a:	f000 f8d7 	bl	801203c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e8e:	bf00      	nop
 8011e90:	e7f0      	b.n	8011e74 <prvTimerTask+0x8>
	...

08011e94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b084      	sub	sp, #16
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
 8011e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011e9e:	f7fe fecd 	bl	8010c3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ea2:	f107 0308 	add.w	r3, r7, #8
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f000 f866 	bl	8011f78 <prvSampleTimeNow>
 8011eac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d130      	bne.n	8011f16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d10a      	bne.n	8011ed0 <prvProcessTimerOrBlockTask+0x3c>
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d806      	bhi.n	8011ed0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011ec2:	f7fe fec9 	bl	8010c58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011ec6:	68f9      	ldr	r1, [r7, #12]
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f7ff ff81 	bl	8011dd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011ece:	e024      	b.n	8011f1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d008      	beq.n	8011ee8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011ed6:	4b13      	ldr	r3, [pc, #76]	@ (8011f24 <prvProcessTimerOrBlockTask+0x90>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d101      	bne.n	8011ee4 <prvProcessTimerOrBlockTask+0x50>
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e000      	b.n	8011ee6 <prvProcessTimerOrBlockTask+0x52>
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8011f28 <prvProcessTimerOrBlockTask+0x94>)
 8011eea:	6818      	ldr	r0, [r3, #0]
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	1ad3      	subs	r3, r2, r3
 8011ef2:	683a      	ldr	r2, [r7, #0]
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	f7fe fc29 	bl	801074c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011efa:	f7fe fead 	bl	8010c58 <xTaskResumeAll>
 8011efe:	4603      	mov	r3, r0
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d10a      	bne.n	8011f1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011f04:	4b09      	ldr	r3, [pc, #36]	@ (8011f2c <prvProcessTimerOrBlockTask+0x98>)
 8011f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f0a:	601a      	str	r2, [r3, #0]
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	f3bf 8f6f 	isb	sy
}
 8011f14:	e001      	b.n	8011f1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011f16:	f7fe fe9f 	bl	8010c58 <xTaskResumeAll>
}
 8011f1a:	bf00      	nop
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	20001724 	.word	0x20001724
 8011f28:	20001728 	.word	0x20001728
 8011f2c:	e000ed04 	.word	0xe000ed04

08011f30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011f30:	b480      	push	{r7}
 8011f32:	b085      	sub	sp, #20
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011f38:	4b0e      	ldr	r3, [pc, #56]	@ (8011f74 <prvGetNextExpireTime+0x44>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d101      	bne.n	8011f46 <prvGetNextExpireTime+0x16>
 8011f42:	2201      	movs	r2, #1
 8011f44:	e000      	b.n	8011f48 <prvGetNextExpireTime+0x18>
 8011f46:	2200      	movs	r2, #0
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d105      	bne.n	8011f60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f54:	4b07      	ldr	r3, [pc, #28]	@ (8011f74 <prvGetNextExpireTime+0x44>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	68db      	ldr	r3, [r3, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	60fb      	str	r3, [r7, #12]
 8011f5e:	e001      	b.n	8011f64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011f60:	2300      	movs	r3, #0
 8011f62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011f64:	68fb      	ldr	r3, [r7, #12]
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3714      	adds	r7, #20
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr
 8011f72:	bf00      	nop
 8011f74:	20001720 	.word	0x20001720

08011f78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011f80:	f7fe ff08 	bl	8010d94 <xTaskGetTickCount>
 8011f84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011f86:	4b0b      	ldr	r3, [pc, #44]	@ (8011fb4 <prvSampleTimeNow+0x3c>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	68fa      	ldr	r2, [r7, #12]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d205      	bcs.n	8011f9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011f90:	f000 f93a 	bl	8012208 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2201      	movs	r2, #1
 8011f98:	601a      	str	r2, [r3, #0]
 8011f9a:	e002      	b.n	8011fa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011fa2:	4a04      	ldr	r2, [pc, #16]	@ (8011fb4 <prvSampleTimeNow+0x3c>)
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3710      	adds	r7, #16
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	20001730 	.word	0x20001730

08011fb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b086      	sub	sp, #24
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	60f8      	str	r0, [r7, #12]
 8011fc0:	60b9      	str	r1, [r7, #8]
 8011fc2:	607a      	str	r2, [r7, #4]
 8011fc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	68ba      	ldr	r2, [r7, #8]
 8011fce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	68fa      	ldr	r2, [r7, #12]
 8011fd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011fd6:	68ba      	ldr	r2, [r7, #8]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d812      	bhi.n	8012004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fde:	687a      	ldr	r2, [r7, #4]
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	1ad2      	subs	r2, r2, r3
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	699b      	ldr	r3, [r3, #24]
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d302      	bcc.n	8011ff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011fec:	2301      	movs	r3, #1
 8011fee:	617b      	str	r3, [r7, #20]
 8011ff0:	e01b      	b.n	801202a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011ff2:	4b10      	ldr	r3, [pc, #64]	@ (8012034 <prvInsertTimerInActiveList+0x7c>)
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	3304      	adds	r3, #4
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	4610      	mov	r0, r2
 8011ffe:	f7fd fa92 	bl	800f526 <vListInsert>
 8012002:	e012      	b.n	801202a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	429a      	cmp	r2, r3
 801200a:	d206      	bcs.n	801201a <prvInsertTimerInActiveList+0x62>
 801200c:	68ba      	ldr	r2, [r7, #8]
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	429a      	cmp	r2, r3
 8012012:	d302      	bcc.n	801201a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012014:	2301      	movs	r3, #1
 8012016:	617b      	str	r3, [r7, #20]
 8012018:	e007      	b.n	801202a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801201a:	4b07      	ldr	r3, [pc, #28]	@ (8012038 <prvInsertTimerInActiveList+0x80>)
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	3304      	adds	r3, #4
 8012022:	4619      	mov	r1, r3
 8012024:	4610      	mov	r0, r2
 8012026:	f7fd fa7e 	bl	800f526 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801202a:	697b      	ldr	r3, [r7, #20]
}
 801202c:	4618      	mov	r0, r3
 801202e:	3718      	adds	r7, #24
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}
 8012034:	20001724 	.word	0x20001724
 8012038:	20001720 	.word	0x20001720

0801203c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b08e      	sub	sp, #56	@ 0x38
 8012040:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012042:	e0ce      	b.n	80121e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2b00      	cmp	r3, #0
 8012048:	da19      	bge.n	801207e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801204a:	1d3b      	adds	r3, r7, #4
 801204c:	3304      	adds	r3, #4
 801204e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012052:	2b00      	cmp	r3, #0
 8012054:	d10b      	bne.n	801206e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8012056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801205a:	f383 8811 	msr	BASEPRI, r3
 801205e:	f3bf 8f6f 	isb	sy
 8012062:	f3bf 8f4f 	dsb	sy
 8012066:	61fb      	str	r3, [r7, #28]
}
 8012068:	bf00      	nop
 801206a:	bf00      	nop
 801206c:	e7fd      	b.n	801206a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801206e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012074:	6850      	ldr	r0, [r2, #4]
 8012076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012078:	6892      	ldr	r2, [r2, #8]
 801207a:	4611      	mov	r1, r2
 801207c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2b00      	cmp	r3, #0
 8012082:	f2c0 80ae 	blt.w	80121e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801208a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801208c:	695b      	ldr	r3, [r3, #20]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d004      	beq.n	801209c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012094:	3304      	adds	r3, #4
 8012096:	4618      	mov	r0, r3
 8012098:	f7fd fa7e 	bl	800f598 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801209c:	463b      	mov	r3, r7
 801209e:	4618      	mov	r0, r3
 80120a0:	f7ff ff6a 	bl	8011f78 <prvSampleTimeNow>
 80120a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	2b09      	cmp	r3, #9
 80120aa:	f200 8097 	bhi.w	80121dc <prvProcessReceivedCommands+0x1a0>
 80120ae:	a201      	add	r2, pc, #4	@ (adr r2, 80120b4 <prvProcessReceivedCommands+0x78>)
 80120b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120b4:	080120dd 	.word	0x080120dd
 80120b8:	080120dd 	.word	0x080120dd
 80120bc:	080120dd 	.word	0x080120dd
 80120c0:	08012153 	.word	0x08012153
 80120c4:	08012167 	.word	0x08012167
 80120c8:	080121b3 	.word	0x080121b3
 80120cc:	080120dd 	.word	0x080120dd
 80120d0:	080120dd 	.word	0x080120dd
 80120d4:	08012153 	.word	0x08012153
 80120d8:	08012167 	.word	0x08012167
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80120e2:	f043 0301 	orr.w	r3, r3, #1
 80120e6:	b2da      	uxtb	r2, r3
 80120e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80120ee:	68ba      	ldr	r2, [r7, #8]
 80120f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f2:	699b      	ldr	r3, [r3, #24]
 80120f4:	18d1      	adds	r1, r2, r3
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120fc:	f7ff ff5c 	bl	8011fb8 <prvInsertTimerInActiveList>
 8012100:	4603      	mov	r3, r0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d06c      	beq.n	80121e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012108:	6a1b      	ldr	r3, [r3, #32]
 801210a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801210c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801210e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012114:	f003 0304 	and.w	r3, r3, #4
 8012118:	2b00      	cmp	r3, #0
 801211a:	d061      	beq.n	80121e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801211c:	68ba      	ldr	r2, [r7, #8]
 801211e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012120:	699b      	ldr	r3, [r3, #24]
 8012122:	441a      	add	r2, r3
 8012124:	2300      	movs	r3, #0
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	2300      	movs	r3, #0
 801212a:	2100      	movs	r1, #0
 801212c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801212e:	f7ff fe01 	bl	8011d34 <xTimerGenericCommand>
 8012132:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012134:	6a3b      	ldr	r3, [r7, #32]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d152      	bne.n	80121e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801213a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801213e:	f383 8811 	msr	BASEPRI, r3
 8012142:	f3bf 8f6f 	isb	sy
 8012146:	f3bf 8f4f 	dsb	sy
 801214a:	61bb      	str	r3, [r7, #24]
}
 801214c:	bf00      	nop
 801214e:	bf00      	nop
 8012150:	e7fd      	b.n	801214e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012158:	f023 0301 	bic.w	r3, r3, #1
 801215c:	b2da      	uxtb	r2, r3
 801215e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012160:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012164:	e03d      	b.n	80121e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801216c:	f043 0301 	orr.w	r3, r3, #1
 8012170:	b2da      	uxtb	r2, r3
 8012172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012174:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012178:	68ba      	ldr	r2, [r7, #8]
 801217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801217c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012180:	699b      	ldr	r3, [r3, #24]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d10b      	bne.n	801219e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8012186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801218a:	f383 8811 	msr	BASEPRI, r3
 801218e:	f3bf 8f6f 	isb	sy
 8012192:	f3bf 8f4f 	dsb	sy
 8012196:	617b      	str	r3, [r7, #20]
}
 8012198:	bf00      	nop
 801219a:	bf00      	nop
 801219c:	e7fd      	b.n	801219a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801219e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121a0:	699a      	ldr	r2, [r3, #24]
 80121a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a4:	18d1      	adds	r1, r2, r3
 80121a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80121aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80121ac:	f7ff ff04 	bl	8011fb8 <prvInsertTimerInActiveList>
					break;
 80121b0:	e017      	b.n	80121e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80121b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80121b8:	f003 0302 	and.w	r3, r3, #2
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d103      	bne.n	80121c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80121c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80121c2:	f000 fc51 	bl	8012a68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80121c6:	e00c      	b.n	80121e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80121ce:	f023 0301 	bic.w	r3, r3, #1
 80121d2:	b2da      	uxtb	r2, r3
 80121d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80121da:	e002      	b.n	80121e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80121dc:	bf00      	nop
 80121de:	e000      	b.n	80121e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80121e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121e2:	4b08      	ldr	r3, [pc, #32]	@ (8012204 <prvProcessReceivedCommands+0x1c8>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	1d39      	adds	r1, r7, #4
 80121e8:	2200      	movs	r2, #0
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fd fe9a 	bl	800ff24 <xQueueReceive>
 80121f0:	4603      	mov	r3, r0
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	f47f af26 	bne.w	8012044 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80121f8:	bf00      	nop
 80121fa:	bf00      	nop
 80121fc:	3730      	adds	r7, #48	@ 0x30
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	20001728 	.word	0x20001728

08012208 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b088      	sub	sp, #32
 801220c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801220e:	e049      	b.n	80122a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012210:	4b2e      	ldr	r3, [pc, #184]	@ (80122cc <prvSwitchTimerLists+0xc4>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801221a:	4b2c      	ldr	r3, [pc, #176]	@ (80122cc <prvSwitchTimerLists+0xc4>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	68db      	ldr	r3, [r3, #12]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	3304      	adds	r3, #4
 8012228:	4618      	mov	r0, r3
 801222a:	f7fd f9b5 	bl	800f598 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6a1b      	ldr	r3, [r3, #32]
 8012232:	68f8      	ldr	r0, [r7, #12]
 8012234:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801223c:	f003 0304 	and.w	r3, r3, #4
 8012240:	2b00      	cmp	r3, #0
 8012242:	d02f      	beq.n	80122a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	699b      	ldr	r3, [r3, #24]
 8012248:	693a      	ldr	r2, [r7, #16]
 801224a:	4413      	add	r3, r2
 801224c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801224e:	68ba      	ldr	r2, [r7, #8]
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	429a      	cmp	r2, r3
 8012254:	d90e      	bls.n	8012274 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	68ba      	ldr	r2, [r7, #8]
 801225a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	68fa      	ldr	r2, [r7, #12]
 8012260:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012262:	4b1a      	ldr	r3, [pc, #104]	@ (80122cc <prvSwitchTimerLists+0xc4>)
 8012264:	681a      	ldr	r2, [r3, #0]
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	3304      	adds	r3, #4
 801226a:	4619      	mov	r1, r3
 801226c:	4610      	mov	r0, r2
 801226e:	f7fd f95a 	bl	800f526 <vListInsert>
 8012272:	e017      	b.n	80122a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012274:	2300      	movs	r3, #0
 8012276:	9300      	str	r3, [sp, #0]
 8012278:	2300      	movs	r3, #0
 801227a:	693a      	ldr	r2, [r7, #16]
 801227c:	2100      	movs	r1, #0
 801227e:	68f8      	ldr	r0, [r7, #12]
 8012280:	f7ff fd58 	bl	8011d34 <xTimerGenericCommand>
 8012284:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d10b      	bne.n	80122a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801228c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012290:	f383 8811 	msr	BASEPRI, r3
 8012294:	f3bf 8f6f 	isb	sy
 8012298:	f3bf 8f4f 	dsb	sy
 801229c:	603b      	str	r3, [r7, #0]
}
 801229e:	bf00      	nop
 80122a0:	bf00      	nop
 80122a2:	e7fd      	b.n	80122a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80122a4:	4b09      	ldr	r3, [pc, #36]	@ (80122cc <prvSwitchTimerLists+0xc4>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d1b0      	bne.n	8012210 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80122ae:	4b07      	ldr	r3, [pc, #28]	@ (80122cc <prvSwitchTimerLists+0xc4>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80122b4:	4b06      	ldr	r3, [pc, #24]	@ (80122d0 <prvSwitchTimerLists+0xc8>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	4a04      	ldr	r2, [pc, #16]	@ (80122cc <prvSwitchTimerLists+0xc4>)
 80122ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80122bc:	4a04      	ldr	r2, [pc, #16]	@ (80122d0 <prvSwitchTimerLists+0xc8>)
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	6013      	str	r3, [r2, #0]
}
 80122c2:	bf00      	nop
 80122c4:	3718      	adds	r7, #24
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}
 80122ca:	bf00      	nop
 80122cc:	20001720 	.word	0x20001720
 80122d0:	20001724 	.word	0x20001724

080122d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80122da:	f000 f9d5 	bl	8012688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80122de:	4b15      	ldr	r3, [pc, #84]	@ (8012334 <prvCheckForValidListAndQueue+0x60>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d120      	bne.n	8012328 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80122e6:	4814      	ldr	r0, [pc, #80]	@ (8012338 <prvCheckForValidListAndQueue+0x64>)
 80122e8:	f7fd f8cc 	bl	800f484 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80122ec:	4813      	ldr	r0, [pc, #76]	@ (801233c <prvCheckForValidListAndQueue+0x68>)
 80122ee:	f7fd f8c9 	bl	800f484 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80122f2:	4b13      	ldr	r3, [pc, #76]	@ (8012340 <prvCheckForValidListAndQueue+0x6c>)
 80122f4:	4a10      	ldr	r2, [pc, #64]	@ (8012338 <prvCheckForValidListAndQueue+0x64>)
 80122f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80122f8:	4b12      	ldr	r3, [pc, #72]	@ (8012344 <prvCheckForValidListAndQueue+0x70>)
 80122fa:	4a10      	ldr	r2, [pc, #64]	@ (801233c <prvCheckForValidListAndQueue+0x68>)
 80122fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80122fe:	2300      	movs	r3, #0
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	4b11      	ldr	r3, [pc, #68]	@ (8012348 <prvCheckForValidListAndQueue+0x74>)
 8012304:	4a11      	ldr	r2, [pc, #68]	@ (801234c <prvCheckForValidListAndQueue+0x78>)
 8012306:	2110      	movs	r1, #16
 8012308:	200a      	movs	r0, #10
 801230a:	f7fd f9d9 	bl	800f6c0 <xQueueGenericCreateStatic>
 801230e:	4603      	mov	r3, r0
 8012310:	4a08      	ldr	r2, [pc, #32]	@ (8012334 <prvCheckForValidListAndQueue+0x60>)
 8012312:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012314:	4b07      	ldr	r3, [pc, #28]	@ (8012334 <prvCheckForValidListAndQueue+0x60>)
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d005      	beq.n	8012328 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801231c:	4b05      	ldr	r3, [pc, #20]	@ (8012334 <prvCheckForValidListAndQueue+0x60>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	490b      	ldr	r1, [pc, #44]	@ (8012350 <prvCheckForValidListAndQueue+0x7c>)
 8012322:	4618      	mov	r0, r3
 8012324:	f7fe f9be 	bl	80106a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012328:	f000 f9e0 	bl	80126ec <vPortExitCritical>
}
 801232c:	bf00      	nop
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}
 8012332:	bf00      	nop
 8012334:	20001728 	.word	0x20001728
 8012338:	200016f8 	.word	0x200016f8
 801233c:	2000170c 	.word	0x2000170c
 8012340:	20001720 	.word	0x20001720
 8012344:	20001724 	.word	0x20001724
 8012348:	200017d4 	.word	0x200017d4
 801234c:	20001734 	.word	0x20001734
 8012350:	08018554 	.word	0x08018554

08012354 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b086      	sub	sp, #24
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10b      	bne.n	801237e <xTimerIsTimerActive+0x2a>
	__asm volatile
 8012366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801236a:	f383 8811 	msr	BASEPRI, r3
 801236e:	f3bf 8f6f 	isb	sy
 8012372:	f3bf 8f4f 	dsb	sy
 8012376:	60fb      	str	r3, [r7, #12]
}
 8012378:	bf00      	nop
 801237a:	bf00      	nop
 801237c:	e7fd      	b.n	801237a <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 801237e:	f000 f983 	bl	8012688 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012388:	f003 0301 	and.w	r3, r3, #1
 801238c:	2b00      	cmp	r3, #0
 801238e:	d102      	bne.n	8012396 <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 8012390:	2300      	movs	r3, #0
 8012392:	617b      	str	r3, [r7, #20]
 8012394:	e001      	b.n	801239a <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 8012396:	2301      	movs	r3, #1
 8012398:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 801239a:	f000 f9a7 	bl	80126ec <vPortExitCritical>

	return xReturn;
 801239e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80123a0:	4618      	mov	r0, r3
 80123a2:	3718      	adds	r7, #24
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b086      	sub	sp, #24
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d10b      	bne.n	80123d2 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80123ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123be:	f383 8811 	msr	BASEPRI, r3
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	f3bf 8f4f 	dsb	sy
 80123ca:	60fb      	str	r3, [r7, #12]
}
 80123cc:	bf00      	nop
 80123ce:	bf00      	nop
 80123d0:	e7fd      	b.n	80123ce <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80123d2:	f000 f959 	bl	8012688 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	69db      	ldr	r3, [r3, #28]
 80123da:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80123dc:	f000 f986 	bl	80126ec <vPortExitCritical>

	return pvReturn;
 80123e0:	693b      	ldr	r3, [r7, #16]
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3718      	adds	r7, #24
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
	...

080123ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b08a      	sub	sp, #40	@ 0x28
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
 80123f8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80123fa:	f06f 0301 	mvn.w	r3, #1
 80123fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801240c:	4b06      	ldr	r3, [pc, #24]	@ (8012428 <xTimerPendFunctionCallFromISR+0x3c>)
 801240e:	6818      	ldr	r0, [r3, #0]
 8012410:	f107 0114 	add.w	r1, r7, #20
 8012414:	2300      	movs	r3, #0
 8012416:	683a      	ldr	r2, [r7, #0]
 8012418:	f7fd fc56 	bl	800fcc8 <xQueueGenericSendFromISR>
 801241c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8012420:	4618      	mov	r0, r3
 8012422:	3728      	adds	r7, #40	@ 0x28
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	20001728 	.word	0x20001728

0801242c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801242c:	b480      	push	{r7}
 801242e:	b085      	sub	sp, #20
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	3b04      	subs	r3, #4
 801243c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	3b04      	subs	r3, #4
 801244a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	f023 0201 	bic.w	r2, r3, #1
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	3b04      	subs	r3, #4
 801245a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801245c:	4a0c      	ldr	r2, [pc, #48]	@ (8012490 <pxPortInitialiseStack+0x64>)
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	3b14      	subs	r3, #20
 8012466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012468:	687a      	ldr	r2, [r7, #4]
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	3b04      	subs	r3, #4
 8012472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	f06f 0202 	mvn.w	r2, #2
 801247a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	3b20      	subs	r3, #32
 8012480:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012482:	68fb      	ldr	r3, [r7, #12]
}
 8012484:	4618      	mov	r0, r3
 8012486:	3714      	adds	r7, #20
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr
 8012490:	08012495 	.word	0x08012495

08012494 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012494:	b480      	push	{r7}
 8012496:	b085      	sub	sp, #20
 8012498:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801249a:	2300      	movs	r3, #0
 801249c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801249e:	4b13      	ldr	r3, [pc, #76]	@ (80124ec <prvTaskExitError+0x58>)
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80124a6:	d00b      	beq.n	80124c0 <prvTaskExitError+0x2c>
	__asm volatile
 80124a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124ac:	f383 8811 	msr	BASEPRI, r3
 80124b0:	f3bf 8f6f 	isb	sy
 80124b4:	f3bf 8f4f 	dsb	sy
 80124b8:	60fb      	str	r3, [r7, #12]
}
 80124ba:	bf00      	nop
 80124bc:	bf00      	nop
 80124be:	e7fd      	b.n	80124bc <prvTaskExitError+0x28>
	__asm volatile
 80124c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	60bb      	str	r3, [r7, #8]
}
 80124d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80124d4:	bf00      	nop
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d0fc      	beq.n	80124d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80124dc:	bf00      	nop
 80124de:	bf00      	nop
 80124e0:	3714      	adds	r7, #20
 80124e2:	46bd      	mov	sp, r7
 80124e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e8:	4770      	bx	lr
 80124ea:	bf00      	nop
 80124ec:	20000058 	.word	0x20000058

080124f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80124f0:	4b07      	ldr	r3, [pc, #28]	@ (8012510 <pxCurrentTCBConst2>)
 80124f2:	6819      	ldr	r1, [r3, #0]
 80124f4:	6808      	ldr	r0, [r1, #0]
 80124f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124fa:	f380 8809 	msr	PSP, r0
 80124fe:	f3bf 8f6f 	isb	sy
 8012502:	f04f 0000 	mov.w	r0, #0
 8012506:	f380 8811 	msr	BASEPRI, r0
 801250a:	4770      	bx	lr
 801250c:	f3af 8000 	nop.w

08012510 <pxCurrentTCBConst2>:
 8012510:	200011f8 	.word	0x200011f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012514:	bf00      	nop
 8012516:	bf00      	nop

08012518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012518:	4808      	ldr	r0, [pc, #32]	@ (801253c <prvPortStartFirstTask+0x24>)
 801251a:	6800      	ldr	r0, [r0, #0]
 801251c:	6800      	ldr	r0, [r0, #0]
 801251e:	f380 8808 	msr	MSP, r0
 8012522:	f04f 0000 	mov.w	r0, #0
 8012526:	f380 8814 	msr	CONTROL, r0
 801252a:	b662      	cpsie	i
 801252c:	b661      	cpsie	f
 801252e:	f3bf 8f4f 	dsb	sy
 8012532:	f3bf 8f6f 	isb	sy
 8012536:	df00      	svc	0
 8012538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801253a:	bf00      	nop
 801253c:	e000ed08 	.word	0xe000ed08

08012540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b086      	sub	sp, #24
 8012544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012546:	4b47      	ldr	r3, [pc, #284]	@ (8012664 <xPortStartScheduler+0x124>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	4a47      	ldr	r2, [pc, #284]	@ (8012668 <xPortStartScheduler+0x128>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d10b      	bne.n	8012568 <xPortStartScheduler+0x28>
	__asm volatile
 8012550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012554:	f383 8811 	msr	BASEPRI, r3
 8012558:	f3bf 8f6f 	isb	sy
 801255c:	f3bf 8f4f 	dsb	sy
 8012560:	60fb      	str	r3, [r7, #12]
}
 8012562:	bf00      	nop
 8012564:	bf00      	nop
 8012566:	e7fd      	b.n	8012564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012568:	4b3e      	ldr	r3, [pc, #248]	@ (8012664 <xPortStartScheduler+0x124>)
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	4a3f      	ldr	r2, [pc, #252]	@ (801266c <xPortStartScheduler+0x12c>)
 801256e:	4293      	cmp	r3, r2
 8012570:	d10b      	bne.n	801258a <xPortStartScheduler+0x4a>
	__asm volatile
 8012572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	613b      	str	r3, [r7, #16]
}
 8012584:	bf00      	nop
 8012586:	bf00      	nop
 8012588:	e7fd      	b.n	8012586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801258a:	4b39      	ldr	r3, [pc, #228]	@ (8012670 <xPortStartScheduler+0x130>)
 801258c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	b2db      	uxtb	r3, r3
 8012594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	22ff      	movs	r2, #255	@ 0xff
 801259a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	781b      	ldrb	r3, [r3, #0]
 80125a0:	b2db      	uxtb	r3, r3
 80125a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80125a4:	78fb      	ldrb	r3, [r7, #3]
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	4b31      	ldr	r3, [pc, #196]	@ (8012674 <xPortStartScheduler+0x134>)
 80125b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80125b2:	4b31      	ldr	r3, [pc, #196]	@ (8012678 <xPortStartScheduler+0x138>)
 80125b4:	2207      	movs	r2, #7
 80125b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80125b8:	e009      	b.n	80125ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80125ba:	4b2f      	ldr	r3, [pc, #188]	@ (8012678 <xPortStartScheduler+0x138>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	3b01      	subs	r3, #1
 80125c0:	4a2d      	ldr	r2, [pc, #180]	@ (8012678 <xPortStartScheduler+0x138>)
 80125c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80125c4:	78fb      	ldrb	r3, [r7, #3]
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	005b      	lsls	r3, r3, #1
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80125ce:	78fb      	ldrb	r3, [r7, #3]
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80125d6:	2b80      	cmp	r3, #128	@ 0x80
 80125d8:	d0ef      	beq.n	80125ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80125da:	4b27      	ldr	r3, [pc, #156]	@ (8012678 <xPortStartScheduler+0x138>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	f1c3 0307 	rsb	r3, r3, #7
 80125e2:	2b04      	cmp	r3, #4
 80125e4:	d00b      	beq.n	80125fe <xPortStartScheduler+0xbe>
	__asm volatile
 80125e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125ea:	f383 8811 	msr	BASEPRI, r3
 80125ee:	f3bf 8f6f 	isb	sy
 80125f2:	f3bf 8f4f 	dsb	sy
 80125f6:	60bb      	str	r3, [r7, #8]
}
 80125f8:	bf00      	nop
 80125fa:	bf00      	nop
 80125fc:	e7fd      	b.n	80125fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80125fe:	4b1e      	ldr	r3, [pc, #120]	@ (8012678 <xPortStartScheduler+0x138>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	021b      	lsls	r3, r3, #8
 8012604:	4a1c      	ldr	r2, [pc, #112]	@ (8012678 <xPortStartScheduler+0x138>)
 8012606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012608:	4b1b      	ldr	r3, [pc, #108]	@ (8012678 <xPortStartScheduler+0x138>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012610:	4a19      	ldr	r2, [pc, #100]	@ (8012678 <xPortStartScheduler+0x138>)
 8012612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	b2da      	uxtb	r2, r3
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801261c:	4b17      	ldr	r3, [pc, #92]	@ (801267c <xPortStartScheduler+0x13c>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a16      	ldr	r2, [pc, #88]	@ (801267c <xPortStartScheduler+0x13c>)
 8012622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012628:	4b14      	ldr	r3, [pc, #80]	@ (801267c <xPortStartScheduler+0x13c>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	4a13      	ldr	r2, [pc, #76]	@ (801267c <xPortStartScheduler+0x13c>)
 801262e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012634:	f000 f8da 	bl	80127ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012638:	4b11      	ldr	r3, [pc, #68]	@ (8012680 <xPortStartScheduler+0x140>)
 801263a:	2200      	movs	r2, #0
 801263c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801263e:	f000 f8f9 	bl	8012834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012642:	4b10      	ldr	r3, [pc, #64]	@ (8012684 <xPortStartScheduler+0x144>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	4a0f      	ldr	r2, [pc, #60]	@ (8012684 <xPortStartScheduler+0x144>)
 8012648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801264c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801264e:	f7ff ff63 	bl	8012518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012652:	f7fe fc69 	bl	8010f28 <vTaskSwitchContext>
	prvTaskExitError();
 8012656:	f7ff ff1d 	bl	8012494 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801265a:	2300      	movs	r3, #0
}
 801265c:	4618      	mov	r0, r3
 801265e:	3718      	adds	r7, #24
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	e000ed00 	.word	0xe000ed00
 8012668:	410fc271 	.word	0x410fc271
 801266c:	410fc270 	.word	0x410fc270
 8012670:	e000e400 	.word	0xe000e400
 8012674:	20001824 	.word	0x20001824
 8012678:	20001828 	.word	0x20001828
 801267c:	e000ed20 	.word	0xe000ed20
 8012680:	20000058 	.word	0x20000058
 8012684:	e000ef34 	.word	0xe000ef34

08012688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012688:	b480      	push	{r7}
 801268a:	b083      	sub	sp, #12
 801268c:	af00      	add	r7, sp, #0
	__asm volatile
 801268e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012692:	f383 8811 	msr	BASEPRI, r3
 8012696:	f3bf 8f6f 	isb	sy
 801269a:	f3bf 8f4f 	dsb	sy
 801269e:	607b      	str	r3, [r7, #4]
}
 80126a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80126a2:	4b10      	ldr	r3, [pc, #64]	@ (80126e4 <vPortEnterCritical+0x5c>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	3301      	adds	r3, #1
 80126a8:	4a0e      	ldr	r2, [pc, #56]	@ (80126e4 <vPortEnterCritical+0x5c>)
 80126aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80126ac:	4b0d      	ldr	r3, [pc, #52]	@ (80126e4 <vPortEnterCritical+0x5c>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d110      	bne.n	80126d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80126b4:	4b0c      	ldr	r3, [pc, #48]	@ (80126e8 <vPortEnterCritical+0x60>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d00b      	beq.n	80126d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80126be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126c2:	f383 8811 	msr	BASEPRI, r3
 80126c6:	f3bf 8f6f 	isb	sy
 80126ca:	f3bf 8f4f 	dsb	sy
 80126ce:	603b      	str	r3, [r7, #0]
}
 80126d0:	bf00      	nop
 80126d2:	bf00      	nop
 80126d4:	e7fd      	b.n	80126d2 <vPortEnterCritical+0x4a>
	}
}
 80126d6:	bf00      	nop
 80126d8:	370c      	adds	r7, #12
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr
 80126e2:	bf00      	nop
 80126e4:	20000058 	.word	0x20000058
 80126e8:	e000ed04 	.word	0xe000ed04

080126ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80126ec:	b480      	push	{r7}
 80126ee:	b083      	sub	sp, #12
 80126f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80126f2:	4b12      	ldr	r3, [pc, #72]	@ (801273c <vPortExitCritical+0x50>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10b      	bne.n	8012712 <vPortExitCritical+0x26>
	__asm volatile
 80126fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	607b      	str	r3, [r7, #4]
}
 801270c:	bf00      	nop
 801270e:	bf00      	nop
 8012710:	e7fd      	b.n	801270e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012712:	4b0a      	ldr	r3, [pc, #40]	@ (801273c <vPortExitCritical+0x50>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	3b01      	subs	r3, #1
 8012718:	4a08      	ldr	r2, [pc, #32]	@ (801273c <vPortExitCritical+0x50>)
 801271a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801271c:	4b07      	ldr	r3, [pc, #28]	@ (801273c <vPortExitCritical+0x50>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d105      	bne.n	8012730 <vPortExitCritical+0x44>
 8012724:	2300      	movs	r3, #0
 8012726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	f383 8811 	msr	BASEPRI, r3
}
 801272e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012730:	bf00      	nop
 8012732:	370c      	adds	r7, #12
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr
 801273c:	20000058 	.word	0x20000058

08012740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012740:	f3ef 8009 	mrs	r0, PSP
 8012744:	f3bf 8f6f 	isb	sy
 8012748:	4b15      	ldr	r3, [pc, #84]	@ (80127a0 <pxCurrentTCBConst>)
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	f01e 0f10 	tst.w	lr, #16
 8012750:	bf08      	it	eq
 8012752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801275a:	6010      	str	r0, [r2, #0]
 801275c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012764:	f380 8811 	msr	BASEPRI, r0
 8012768:	f3bf 8f4f 	dsb	sy
 801276c:	f3bf 8f6f 	isb	sy
 8012770:	f7fe fbda 	bl	8010f28 <vTaskSwitchContext>
 8012774:	f04f 0000 	mov.w	r0, #0
 8012778:	f380 8811 	msr	BASEPRI, r0
 801277c:	bc09      	pop	{r0, r3}
 801277e:	6819      	ldr	r1, [r3, #0]
 8012780:	6808      	ldr	r0, [r1, #0]
 8012782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012786:	f01e 0f10 	tst.w	lr, #16
 801278a:	bf08      	it	eq
 801278c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012790:	f380 8809 	msr	PSP, r0
 8012794:	f3bf 8f6f 	isb	sy
 8012798:	4770      	bx	lr
 801279a:	bf00      	nop
 801279c:	f3af 8000 	nop.w

080127a0 <pxCurrentTCBConst>:
 80127a0:	200011f8 	.word	0x200011f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80127a4:	bf00      	nop
 80127a6:	bf00      	nop

080127a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
	__asm volatile
 80127ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127b2:	f383 8811 	msr	BASEPRI, r3
 80127b6:	f3bf 8f6f 	isb	sy
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	607b      	str	r3, [r7, #4]
}
 80127c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80127c2:	f7fe faf7 	bl	8010db4 <xTaskIncrementTick>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d003      	beq.n	80127d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80127cc:	4b06      	ldr	r3, [pc, #24]	@ (80127e8 <xPortSysTickHandler+0x40>)
 80127ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80127d2:	601a      	str	r2, [r3, #0]
 80127d4:	2300      	movs	r3, #0
 80127d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	f383 8811 	msr	BASEPRI, r3
}
 80127de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80127e0:	bf00      	nop
 80127e2:	3708      	adds	r7, #8
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	e000ed04 	.word	0xe000ed04

080127ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80127ec:	b480      	push	{r7}
 80127ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80127f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012820 <vPortSetupTimerInterrupt+0x34>)
 80127f2:	2200      	movs	r2, #0
 80127f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80127f6:	4b0b      	ldr	r3, [pc, #44]	@ (8012824 <vPortSetupTimerInterrupt+0x38>)
 80127f8:	2200      	movs	r2, #0
 80127fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80127fc:	4b0a      	ldr	r3, [pc, #40]	@ (8012828 <vPortSetupTimerInterrupt+0x3c>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4a0a      	ldr	r2, [pc, #40]	@ (801282c <vPortSetupTimerInterrupt+0x40>)
 8012802:	fba2 2303 	umull	r2, r3, r2, r3
 8012806:	099b      	lsrs	r3, r3, #6
 8012808:	4a09      	ldr	r2, [pc, #36]	@ (8012830 <vPortSetupTimerInterrupt+0x44>)
 801280a:	3b01      	subs	r3, #1
 801280c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801280e:	4b04      	ldr	r3, [pc, #16]	@ (8012820 <vPortSetupTimerInterrupt+0x34>)
 8012810:	2207      	movs	r2, #7
 8012812:	601a      	str	r2, [r3, #0]
}
 8012814:	bf00      	nop
 8012816:	46bd      	mov	sp, r7
 8012818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801281c:	4770      	bx	lr
 801281e:	bf00      	nop
 8012820:	e000e010 	.word	0xe000e010
 8012824:	e000e018 	.word	0xe000e018
 8012828:	20000014 	.word	0x20000014
 801282c:	10624dd3 	.word	0x10624dd3
 8012830:	e000e014 	.word	0xe000e014

08012834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012844 <vPortEnableVFP+0x10>
 8012838:	6801      	ldr	r1, [r0, #0]
 801283a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801283e:	6001      	str	r1, [r0, #0]
 8012840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012842:	bf00      	nop
 8012844:	e000ed88 	.word	0xe000ed88

08012848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012848:	b480      	push	{r7}
 801284a:	b085      	sub	sp, #20
 801284c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801284e:	f3ef 8305 	mrs	r3, IPSR
 8012852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2b0f      	cmp	r3, #15
 8012858:	d915      	bls.n	8012886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801285a:	4a18      	ldr	r2, [pc, #96]	@ (80128bc <vPortValidateInterruptPriority+0x74>)
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	4413      	add	r3, r2
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012864:	4b16      	ldr	r3, [pc, #88]	@ (80128c0 <vPortValidateInterruptPriority+0x78>)
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	7afa      	ldrb	r2, [r7, #11]
 801286a:	429a      	cmp	r2, r3
 801286c:	d20b      	bcs.n	8012886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801286e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012872:	f383 8811 	msr	BASEPRI, r3
 8012876:	f3bf 8f6f 	isb	sy
 801287a:	f3bf 8f4f 	dsb	sy
 801287e:	607b      	str	r3, [r7, #4]
}
 8012880:	bf00      	nop
 8012882:	bf00      	nop
 8012884:	e7fd      	b.n	8012882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012886:	4b0f      	ldr	r3, [pc, #60]	@ (80128c4 <vPortValidateInterruptPriority+0x7c>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801288e:	4b0e      	ldr	r3, [pc, #56]	@ (80128c8 <vPortValidateInterruptPriority+0x80>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	429a      	cmp	r2, r3
 8012894:	d90b      	bls.n	80128ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8012896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801289a:	f383 8811 	msr	BASEPRI, r3
 801289e:	f3bf 8f6f 	isb	sy
 80128a2:	f3bf 8f4f 	dsb	sy
 80128a6:	603b      	str	r3, [r7, #0]
}
 80128a8:	bf00      	nop
 80128aa:	bf00      	nop
 80128ac:	e7fd      	b.n	80128aa <vPortValidateInterruptPriority+0x62>
	}
 80128ae:	bf00      	nop
 80128b0:	3714      	adds	r7, #20
 80128b2:	46bd      	mov	sp, r7
 80128b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b8:	4770      	bx	lr
 80128ba:	bf00      	nop
 80128bc:	e000e3f0 	.word	0xe000e3f0
 80128c0:	20001824 	.word	0x20001824
 80128c4:	e000ed0c 	.word	0xe000ed0c
 80128c8:	20001828 	.word	0x20001828

080128cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b08a      	sub	sp, #40	@ 0x28
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80128d4:	2300      	movs	r3, #0
 80128d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80128d8:	f7fe f9b0 	bl	8010c3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80128dc:	4b5c      	ldr	r3, [pc, #368]	@ (8012a50 <pvPortMalloc+0x184>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d101      	bne.n	80128e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80128e4:	f000 f924 	bl	8012b30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80128e8:	4b5a      	ldr	r3, [pc, #360]	@ (8012a54 <pvPortMalloc+0x188>)
 80128ea:	681a      	ldr	r2, [r3, #0]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	4013      	ands	r3, r2
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f040 8095 	bne.w	8012a20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d01e      	beq.n	801293a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80128fc:	2208      	movs	r2, #8
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	4413      	add	r3, r2
 8012902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f003 0307 	and.w	r3, r3, #7
 801290a:	2b00      	cmp	r3, #0
 801290c:	d015      	beq.n	801293a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	f023 0307 	bic.w	r3, r3, #7
 8012914:	3308      	adds	r3, #8
 8012916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f003 0307 	and.w	r3, r3, #7
 801291e:	2b00      	cmp	r3, #0
 8012920:	d00b      	beq.n	801293a <pvPortMalloc+0x6e>
	__asm volatile
 8012922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012926:	f383 8811 	msr	BASEPRI, r3
 801292a:	f3bf 8f6f 	isb	sy
 801292e:	f3bf 8f4f 	dsb	sy
 8012932:	617b      	str	r3, [r7, #20]
}
 8012934:	bf00      	nop
 8012936:	bf00      	nop
 8012938:	e7fd      	b.n	8012936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d06f      	beq.n	8012a20 <pvPortMalloc+0x154>
 8012940:	4b45      	ldr	r3, [pc, #276]	@ (8012a58 <pvPortMalloc+0x18c>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	687a      	ldr	r2, [r7, #4]
 8012946:	429a      	cmp	r2, r3
 8012948:	d86a      	bhi.n	8012a20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801294a:	4b44      	ldr	r3, [pc, #272]	@ (8012a5c <pvPortMalloc+0x190>)
 801294c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801294e:	4b43      	ldr	r3, [pc, #268]	@ (8012a5c <pvPortMalloc+0x190>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012954:	e004      	b.n	8012960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	687a      	ldr	r2, [r7, #4]
 8012966:	429a      	cmp	r2, r3
 8012968:	d903      	bls.n	8012972 <pvPortMalloc+0xa6>
 801296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d1f1      	bne.n	8012956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012972:	4b37      	ldr	r3, [pc, #220]	@ (8012a50 <pvPortMalloc+0x184>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012978:	429a      	cmp	r2, r3
 801297a:	d051      	beq.n	8012a20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801297c:	6a3b      	ldr	r3, [r7, #32]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2208      	movs	r2, #8
 8012982:	4413      	add	r3, r2
 8012984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	6a3b      	ldr	r3, [r7, #32]
 801298c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012990:	685a      	ldr	r2, [r3, #4]
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	1ad2      	subs	r2, r2, r3
 8012996:	2308      	movs	r3, #8
 8012998:	005b      	lsls	r3, r3, #1
 801299a:	429a      	cmp	r2, r3
 801299c:	d920      	bls.n	80129e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801299e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	4413      	add	r3, r2
 80129a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	f003 0307 	and.w	r3, r3, #7
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d00b      	beq.n	80129c8 <pvPortMalloc+0xfc>
	__asm volatile
 80129b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b4:	f383 8811 	msr	BASEPRI, r3
 80129b8:	f3bf 8f6f 	isb	sy
 80129bc:	f3bf 8f4f 	dsb	sy
 80129c0:	613b      	str	r3, [r7, #16]
}
 80129c2:	bf00      	nop
 80129c4:	bf00      	nop
 80129c6:	e7fd      	b.n	80129c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80129c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ca:	685a      	ldr	r2, [r3, #4]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	1ad2      	subs	r2, r2, r3
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80129d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d6:	687a      	ldr	r2, [r7, #4]
 80129d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80129da:	69b8      	ldr	r0, [r7, #24]
 80129dc:	f000 f90a 	bl	8012bf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80129e0:	4b1d      	ldr	r3, [pc, #116]	@ (8012a58 <pvPortMalloc+0x18c>)
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	1ad3      	subs	r3, r2, r3
 80129ea:	4a1b      	ldr	r2, [pc, #108]	@ (8012a58 <pvPortMalloc+0x18c>)
 80129ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80129ee:	4b1a      	ldr	r3, [pc, #104]	@ (8012a58 <pvPortMalloc+0x18c>)
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	4b1b      	ldr	r3, [pc, #108]	@ (8012a60 <pvPortMalloc+0x194>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d203      	bcs.n	8012a02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80129fa:	4b17      	ldr	r3, [pc, #92]	@ (8012a58 <pvPortMalloc+0x18c>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	4a18      	ldr	r2, [pc, #96]	@ (8012a60 <pvPortMalloc+0x194>)
 8012a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a04:	685a      	ldr	r2, [r3, #4]
 8012a06:	4b13      	ldr	r3, [pc, #76]	@ (8012a54 <pvPortMalloc+0x188>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	431a      	orrs	r2, r3
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a12:	2200      	movs	r2, #0
 8012a14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012a16:	4b13      	ldr	r3, [pc, #76]	@ (8012a64 <pvPortMalloc+0x198>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	4a11      	ldr	r2, [pc, #68]	@ (8012a64 <pvPortMalloc+0x198>)
 8012a1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012a20:	f7fe f91a 	bl	8010c58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	f003 0307 	and.w	r3, r3, #7
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00b      	beq.n	8012a46 <pvPortMalloc+0x17a>
	__asm volatile
 8012a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a32:	f383 8811 	msr	BASEPRI, r3
 8012a36:	f3bf 8f6f 	isb	sy
 8012a3a:	f3bf 8f4f 	dsb	sy
 8012a3e:	60fb      	str	r3, [r7, #12]
}
 8012a40:	bf00      	nop
 8012a42:	bf00      	nop
 8012a44:	e7fd      	b.n	8012a42 <pvPortMalloc+0x176>
	return pvReturn;
 8012a46:	69fb      	ldr	r3, [r7, #28]
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3728      	adds	r7, #40	@ 0x28
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bd80      	pop	{r7, pc}
 8012a50:	20006654 	.word	0x20006654
 8012a54:	20006668 	.word	0x20006668
 8012a58:	20006658 	.word	0x20006658
 8012a5c:	2000664c 	.word	0x2000664c
 8012a60:	2000665c 	.word	0x2000665c
 8012a64:	20006660 	.word	0x20006660

08012a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b086      	sub	sp, #24
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d04f      	beq.n	8012b1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012a7a:	2308      	movs	r3, #8
 8012a7c:	425b      	negs	r3, r3
 8012a7e:	697a      	ldr	r2, [r7, #20]
 8012a80:	4413      	add	r3, r2
 8012a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	685a      	ldr	r2, [r3, #4]
 8012a8c:	4b25      	ldr	r3, [pc, #148]	@ (8012b24 <vPortFree+0xbc>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	4013      	ands	r3, r2
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d10b      	bne.n	8012aae <vPortFree+0x46>
	__asm volatile
 8012a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a9a:	f383 8811 	msr	BASEPRI, r3
 8012a9e:	f3bf 8f6f 	isb	sy
 8012aa2:	f3bf 8f4f 	dsb	sy
 8012aa6:	60fb      	str	r3, [r7, #12]
}
 8012aa8:	bf00      	nop
 8012aaa:	bf00      	nop
 8012aac:	e7fd      	b.n	8012aaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d00b      	beq.n	8012ace <vPortFree+0x66>
	__asm volatile
 8012ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012aba:	f383 8811 	msr	BASEPRI, r3
 8012abe:	f3bf 8f6f 	isb	sy
 8012ac2:	f3bf 8f4f 	dsb	sy
 8012ac6:	60bb      	str	r3, [r7, #8]
}
 8012ac8:	bf00      	nop
 8012aca:	bf00      	nop
 8012acc:	e7fd      	b.n	8012aca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012ace:	693b      	ldr	r3, [r7, #16]
 8012ad0:	685a      	ldr	r2, [r3, #4]
 8012ad2:	4b14      	ldr	r3, [pc, #80]	@ (8012b24 <vPortFree+0xbc>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	4013      	ands	r3, r2
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d01e      	beq.n	8012b1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012adc:	693b      	ldr	r3, [r7, #16]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d11a      	bne.n	8012b1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	685a      	ldr	r2, [r3, #4]
 8012ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8012b24 <vPortFree+0xbc>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	43db      	mvns	r3, r3
 8012aee:	401a      	ands	r2, r3
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012af4:	f7fe f8a2 	bl	8010c3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	685a      	ldr	r2, [r3, #4]
 8012afc:	4b0a      	ldr	r3, [pc, #40]	@ (8012b28 <vPortFree+0xc0>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4413      	add	r3, r2
 8012b02:	4a09      	ldr	r2, [pc, #36]	@ (8012b28 <vPortFree+0xc0>)
 8012b04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012b06:	6938      	ldr	r0, [r7, #16]
 8012b08:	f000 f874 	bl	8012bf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012b0c:	4b07      	ldr	r3, [pc, #28]	@ (8012b2c <vPortFree+0xc4>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	3301      	adds	r3, #1
 8012b12:	4a06      	ldr	r2, [pc, #24]	@ (8012b2c <vPortFree+0xc4>)
 8012b14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012b16:	f7fe f89f 	bl	8010c58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012b1a:	bf00      	nop
 8012b1c:	3718      	adds	r7, #24
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	20006668 	.word	0x20006668
 8012b28:	20006658 	.word	0x20006658
 8012b2c:	20006664 	.word	0x20006664

08012b30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012b36:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8012b3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012b3c:	4b27      	ldr	r3, [pc, #156]	@ (8012bdc <prvHeapInit+0xac>)
 8012b3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f003 0307 	and.w	r3, r3, #7
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d00c      	beq.n	8012b64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	3307      	adds	r3, #7
 8012b4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	f023 0307 	bic.w	r3, r3, #7
 8012b56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012b58:	68ba      	ldr	r2, [r7, #8]
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	1ad3      	subs	r3, r2, r3
 8012b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8012bdc <prvHeapInit+0xac>)
 8012b60:	4413      	add	r3, r2
 8012b62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012b68:	4a1d      	ldr	r2, [pc, #116]	@ (8012be0 <prvHeapInit+0xb0>)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8012be0 <prvHeapInit+0xb0>)
 8012b70:	2200      	movs	r2, #0
 8012b72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	68ba      	ldr	r2, [r7, #8]
 8012b78:	4413      	add	r3, r2
 8012b7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012b7c:	2208      	movs	r2, #8
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	1a9b      	subs	r3, r3, r2
 8012b82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	f023 0307 	bic.w	r3, r3, #7
 8012b8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	4a15      	ldr	r2, [pc, #84]	@ (8012be4 <prvHeapInit+0xb4>)
 8012b90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012b92:	4b14      	ldr	r3, [pc, #80]	@ (8012be4 <prvHeapInit+0xb4>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	2200      	movs	r2, #0
 8012b98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012b9a:	4b12      	ldr	r3, [pc, #72]	@ (8012be4 <prvHeapInit+0xb4>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	68fa      	ldr	r2, [r7, #12]
 8012baa:	1ad2      	subs	r2, r2, r3
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8012be4 <prvHeapInit+0xb4>)
 8012bb2:	681a      	ldr	r2, [r3, #0]
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	685b      	ldr	r3, [r3, #4]
 8012bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8012be8 <prvHeapInit+0xb8>)
 8012bbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	4a09      	ldr	r2, [pc, #36]	@ (8012bec <prvHeapInit+0xbc>)
 8012bc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012bc8:	4b09      	ldr	r3, [pc, #36]	@ (8012bf0 <prvHeapInit+0xc0>)
 8012bca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012bce:	601a      	str	r2, [r3, #0]
}
 8012bd0:	bf00      	nop
 8012bd2:	3714      	adds	r7, #20
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr
 8012bdc:	2000182c 	.word	0x2000182c
 8012be0:	2000664c 	.word	0x2000664c
 8012be4:	20006654 	.word	0x20006654
 8012be8:	2000665c 	.word	0x2000665c
 8012bec:	20006658 	.word	0x20006658
 8012bf0:	20006668 	.word	0x20006668

08012bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b085      	sub	sp, #20
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012bfc:	4b28      	ldr	r3, [pc, #160]	@ (8012ca0 <prvInsertBlockIntoFreeList+0xac>)
 8012bfe:	60fb      	str	r3, [r7, #12]
 8012c00:	e002      	b.n	8012c08 <prvInsertBlockIntoFreeList+0x14>
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	60fb      	str	r3, [r7, #12]
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	d8f7      	bhi.n	8012c02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	68ba      	ldr	r2, [r7, #8]
 8012c1c:	4413      	add	r3, r2
 8012c1e:	687a      	ldr	r2, [r7, #4]
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d108      	bne.n	8012c36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	685a      	ldr	r2, [r3, #4]
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	441a      	add	r2, r3
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	685b      	ldr	r3, [r3, #4]
 8012c3e:	68ba      	ldr	r2, [r7, #8]
 8012c40:	441a      	add	r2, r3
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d118      	bne.n	8012c7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	681a      	ldr	r2, [r3, #0]
 8012c4e:	4b15      	ldr	r3, [pc, #84]	@ (8012ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d00d      	beq.n	8012c72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	685a      	ldr	r2, [r3, #4]
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	685b      	ldr	r3, [r3, #4]
 8012c60:	441a      	add	r2, r3
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	601a      	str	r2, [r3, #0]
 8012c70:	e008      	b.n	8012c84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012c72:	4b0c      	ldr	r3, [pc, #48]	@ (8012ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	601a      	str	r2, [r3, #0]
 8012c7a:	e003      	b.n	8012c84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012c84:	68fa      	ldr	r2, [r7, #12]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d002      	beq.n	8012c92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c92:	bf00      	nop
 8012c94:	3714      	adds	r7, #20
 8012c96:	46bd      	mov	sp, r7
 8012c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9c:	4770      	bx	lr
 8012c9e:	bf00      	nop
 8012ca0:	2000664c 	.word	0x2000664c
 8012ca4:	20006654 	.word	0x20006654

08012ca8 <atof>:
 8012ca8:	2100      	movs	r1, #0
 8012caa:	f001 bddf 	b.w	801486c <strtod>

08012cae <atoi>:
 8012cae:	220a      	movs	r2, #10
 8012cb0:	2100      	movs	r1, #0
 8012cb2:	f001 be63 	b.w	801497c <strtol>

08012cb6 <__cvt>:
 8012cb6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cba:	ec57 6b10 	vmov	r6, r7, d0
 8012cbe:	2f00      	cmp	r7, #0
 8012cc0:	460c      	mov	r4, r1
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	463b      	mov	r3, r7
 8012cc6:	bfbb      	ittet	lt
 8012cc8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012ccc:	461f      	movlt	r7, r3
 8012cce:	2300      	movge	r3, #0
 8012cd0:	232d      	movlt	r3, #45	@ 0x2d
 8012cd2:	700b      	strb	r3, [r1, #0]
 8012cd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012cd6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012cda:	4691      	mov	r9, r2
 8012cdc:	f023 0820 	bic.w	r8, r3, #32
 8012ce0:	bfbc      	itt	lt
 8012ce2:	4632      	movlt	r2, r6
 8012ce4:	4616      	movlt	r6, r2
 8012ce6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012cea:	d005      	beq.n	8012cf8 <__cvt+0x42>
 8012cec:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012cf0:	d100      	bne.n	8012cf4 <__cvt+0x3e>
 8012cf2:	3401      	adds	r4, #1
 8012cf4:	2102      	movs	r1, #2
 8012cf6:	e000      	b.n	8012cfa <__cvt+0x44>
 8012cf8:	2103      	movs	r1, #3
 8012cfa:	ab03      	add	r3, sp, #12
 8012cfc:	9301      	str	r3, [sp, #4]
 8012cfe:	ab02      	add	r3, sp, #8
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	ec47 6b10 	vmov	d0, r6, r7
 8012d06:	4653      	mov	r3, sl
 8012d08:	4622      	mov	r2, r4
 8012d0a:	f002 f8a9 	bl	8014e60 <_dtoa_r>
 8012d0e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012d12:	4605      	mov	r5, r0
 8012d14:	d119      	bne.n	8012d4a <__cvt+0x94>
 8012d16:	f019 0f01 	tst.w	r9, #1
 8012d1a:	d00e      	beq.n	8012d3a <__cvt+0x84>
 8012d1c:	eb00 0904 	add.w	r9, r0, r4
 8012d20:	2200      	movs	r2, #0
 8012d22:	2300      	movs	r3, #0
 8012d24:	4630      	mov	r0, r6
 8012d26:	4639      	mov	r1, r7
 8012d28:	f7ed fede 	bl	8000ae8 <__aeabi_dcmpeq>
 8012d2c:	b108      	cbz	r0, 8012d32 <__cvt+0x7c>
 8012d2e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012d32:	2230      	movs	r2, #48	@ 0x30
 8012d34:	9b03      	ldr	r3, [sp, #12]
 8012d36:	454b      	cmp	r3, r9
 8012d38:	d31e      	bcc.n	8012d78 <__cvt+0xc2>
 8012d3a:	9b03      	ldr	r3, [sp, #12]
 8012d3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012d3e:	1b5b      	subs	r3, r3, r5
 8012d40:	4628      	mov	r0, r5
 8012d42:	6013      	str	r3, [r2, #0]
 8012d44:	b004      	add	sp, #16
 8012d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d4a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012d4e:	eb00 0904 	add.w	r9, r0, r4
 8012d52:	d1e5      	bne.n	8012d20 <__cvt+0x6a>
 8012d54:	7803      	ldrb	r3, [r0, #0]
 8012d56:	2b30      	cmp	r3, #48	@ 0x30
 8012d58:	d10a      	bne.n	8012d70 <__cvt+0xba>
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	4630      	mov	r0, r6
 8012d60:	4639      	mov	r1, r7
 8012d62:	f7ed fec1 	bl	8000ae8 <__aeabi_dcmpeq>
 8012d66:	b918      	cbnz	r0, 8012d70 <__cvt+0xba>
 8012d68:	f1c4 0401 	rsb	r4, r4, #1
 8012d6c:	f8ca 4000 	str.w	r4, [sl]
 8012d70:	f8da 3000 	ldr.w	r3, [sl]
 8012d74:	4499      	add	r9, r3
 8012d76:	e7d3      	b.n	8012d20 <__cvt+0x6a>
 8012d78:	1c59      	adds	r1, r3, #1
 8012d7a:	9103      	str	r1, [sp, #12]
 8012d7c:	701a      	strb	r2, [r3, #0]
 8012d7e:	e7d9      	b.n	8012d34 <__cvt+0x7e>

08012d80 <__exponent>:
 8012d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d82:	2900      	cmp	r1, #0
 8012d84:	bfba      	itte	lt
 8012d86:	4249      	neglt	r1, r1
 8012d88:	232d      	movlt	r3, #45	@ 0x2d
 8012d8a:	232b      	movge	r3, #43	@ 0x2b
 8012d8c:	2909      	cmp	r1, #9
 8012d8e:	7002      	strb	r2, [r0, #0]
 8012d90:	7043      	strb	r3, [r0, #1]
 8012d92:	dd29      	ble.n	8012de8 <__exponent+0x68>
 8012d94:	f10d 0307 	add.w	r3, sp, #7
 8012d98:	461d      	mov	r5, r3
 8012d9a:	270a      	movs	r7, #10
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	fbb1 f6f7 	udiv	r6, r1, r7
 8012da2:	fb07 1416 	mls	r4, r7, r6, r1
 8012da6:	3430      	adds	r4, #48	@ 0x30
 8012da8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012dac:	460c      	mov	r4, r1
 8012dae:	2c63      	cmp	r4, #99	@ 0x63
 8012db0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8012db4:	4631      	mov	r1, r6
 8012db6:	dcf1      	bgt.n	8012d9c <__exponent+0x1c>
 8012db8:	3130      	adds	r1, #48	@ 0x30
 8012dba:	1e94      	subs	r4, r2, #2
 8012dbc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012dc0:	1c41      	adds	r1, r0, #1
 8012dc2:	4623      	mov	r3, r4
 8012dc4:	42ab      	cmp	r3, r5
 8012dc6:	d30a      	bcc.n	8012dde <__exponent+0x5e>
 8012dc8:	f10d 0309 	add.w	r3, sp, #9
 8012dcc:	1a9b      	subs	r3, r3, r2
 8012dce:	42ac      	cmp	r4, r5
 8012dd0:	bf88      	it	hi
 8012dd2:	2300      	movhi	r3, #0
 8012dd4:	3302      	adds	r3, #2
 8012dd6:	4403      	add	r3, r0
 8012dd8:	1a18      	subs	r0, r3, r0
 8012dda:	b003      	add	sp, #12
 8012ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dde:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012de2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012de6:	e7ed      	b.n	8012dc4 <__exponent+0x44>
 8012de8:	2330      	movs	r3, #48	@ 0x30
 8012dea:	3130      	adds	r1, #48	@ 0x30
 8012dec:	7083      	strb	r3, [r0, #2]
 8012dee:	70c1      	strb	r1, [r0, #3]
 8012df0:	1d03      	adds	r3, r0, #4
 8012df2:	e7f1      	b.n	8012dd8 <__exponent+0x58>

08012df4 <_printf_float>:
 8012df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012df8:	b08d      	sub	sp, #52	@ 0x34
 8012dfa:	460c      	mov	r4, r1
 8012dfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012e00:	4616      	mov	r6, r2
 8012e02:	461f      	mov	r7, r3
 8012e04:	4605      	mov	r5, r0
 8012e06:	f001 ff4b 	bl	8014ca0 <_localeconv_r>
 8012e0a:	6803      	ldr	r3, [r0, #0]
 8012e0c:	9304      	str	r3, [sp, #16]
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7ed fa3e 	bl	8000290 <strlen>
 8012e14:	2300      	movs	r3, #0
 8012e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e18:	f8d8 3000 	ldr.w	r3, [r8]
 8012e1c:	9005      	str	r0, [sp, #20]
 8012e1e:	3307      	adds	r3, #7
 8012e20:	f023 0307 	bic.w	r3, r3, #7
 8012e24:	f103 0208 	add.w	r2, r3, #8
 8012e28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012e2c:	f8d4 b000 	ldr.w	fp, [r4]
 8012e30:	f8c8 2000 	str.w	r2, [r8]
 8012e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012e3c:	9307      	str	r3, [sp, #28]
 8012e3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8012e42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012e46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e4a:	4b9c      	ldr	r3, [pc, #624]	@ (80130bc <_printf_float+0x2c8>)
 8012e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012e50:	f7ed fe7c 	bl	8000b4c <__aeabi_dcmpun>
 8012e54:	bb70      	cbnz	r0, 8012eb4 <_printf_float+0xc0>
 8012e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e5a:	4b98      	ldr	r3, [pc, #608]	@ (80130bc <_printf_float+0x2c8>)
 8012e5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012e60:	f7ed fe56 	bl	8000b10 <__aeabi_dcmple>
 8012e64:	bb30      	cbnz	r0, 8012eb4 <_printf_float+0xc0>
 8012e66:	2200      	movs	r2, #0
 8012e68:	2300      	movs	r3, #0
 8012e6a:	4640      	mov	r0, r8
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	f7ed fe45 	bl	8000afc <__aeabi_dcmplt>
 8012e72:	b110      	cbz	r0, 8012e7a <_printf_float+0x86>
 8012e74:	232d      	movs	r3, #45	@ 0x2d
 8012e76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012e7a:	4a91      	ldr	r2, [pc, #580]	@ (80130c0 <_printf_float+0x2cc>)
 8012e7c:	4b91      	ldr	r3, [pc, #580]	@ (80130c4 <_printf_float+0x2d0>)
 8012e7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012e82:	bf8c      	ite	hi
 8012e84:	4690      	movhi	r8, r2
 8012e86:	4698      	movls	r8, r3
 8012e88:	2303      	movs	r3, #3
 8012e8a:	6123      	str	r3, [r4, #16]
 8012e8c:	f02b 0304 	bic.w	r3, fp, #4
 8012e90:	6023      	str	r3, [r4, #0]
 8012e92:	f04f 0900 	mov.w	r9, #0
 8012e96:	9700      	str	r7, [sp, #0]
 8012e98:	4633      	mov	r3, r6
 8012e9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012e9c:	4621      	mov	r1, r4
 8012e9e:	4628      	mov	r0, r5
 8012ea0:	f000 f9d2 	bl	8013248 <_printf_common>
 8012ea4:	3001      	adds	r0, #1
 8012ea6:	f040 808d 	bne.w	8012fc4 <_printf_float+0x1d0>
 8012eaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012eae:	b00d      	add	sp, #52	@ 0x34
 8012eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eb4:	4642      	mov	r2, r8
 8012eb6:	464b      	mov	r3, r9
 8012eb8:	4640      	mov	r0, r8
 8012eba:	4649      	mov	r1, r9
 8012ebc:	f7ed fe46 	bl	8000b4c <__aeabi_dcmpun>
 8012ec0:	b140      	cbz	r0, 8012ed4 <_printf_float+0xe0>
 8012ec2:	464b      	mov	r3, r9
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	bfbc      	itt	lt
 8012ec8:	232d      	movlt	r3, #45	@ 0x2d
 8012eca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012ece:	4a7e      	ldr	r2, [pc, #504]	@ (80130c8 <_printf_float+0x2d4>)
 8012ed0:	4b7e      	ldr	r3, [pc, #504]	@ (80130cc <_printf_float+0x2d8>)
 8012ed2:	e7d4      	b.n	8012e7e <_printf_float+0x8a>
 8012ed4:	6863      	ldr	r3, [r4, #4]
 8012ed6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012eda:	9206      	str	r2, [sp, #24]
 8012edc:	1c5a      	adds	r2, r3, #1
 8012ede:	d13b      	bne.n	8012f58 <_printf_float+0x164>
 8012ee0:	2306      	movs	r3, #6
 8012ee2:	6063      	str	r3, [r4, #4]
 8012ee4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012ee8:	2300      	movs	r3, #0
 8012eea:	6022      	str	r2, [r4, #0]
 8012eec:	9303      	str	r3, [sp, #12]
 8012eee:	ab0a      	add	r3, sp, #40	@ 0x28
 8012ef0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012ef4:	ab09      	add	r3, sp, #36	@ 0x24
 8012ef6:	9300      	str	r3, [sp, #0]
 8012ef8:	6861      	ldr	r1, [r4, #4]
 8012efa:	ec49 8b10 	vmov	d0, r8, r9
 8012efe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012f02:	4628      	mov	r0, r5
 8012f04:	f7ff fed7 	bl	8012cb6 <__cvt>
 8012f08:	9b06      	ldr	r3, [sp, #24]
 8012f0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012f0c:	2b47      	cmp	r3, #71	@ 0x47
 8012f0e:	4680      	mov	r8, r0
 8012f10:	d129      	bne.n	8012f66 <_printf_float+0x172>
 8012f12:	1cc8      	adds	r0, r1, #3
 8012f14:	db02      	blt.n	8012f1c <_printf_float+0x128>
 8012f16:	6863      	ldr	r3, [r4, #4]
 8012f18:	4299      	cmp	r1, r3
 8012f1a:	dd41      	ble.n	8012fa0 <_printf_float+0x1ac>
 8012f1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8012f20:	fa5f fa8a 	uxtb.w	sl, sl
 8012f24:	3901      	subs	r1, #1
 8012f26:	4652      	mov	r2, sl
 8012f28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012f2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8012f2e:	f7ff ff27 	bl	8012d80 <__exponent>
 8012f32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012f34:	1813      	adds	r3, r2, r0
 8012f36:	2a01      	cmp	r2, #1
 8012f38:	4681      	mov	r9, r0
 8012f3a:	6123      	str	r3, [r4, #16]
 8012f3c:	dc02      	bgt.n	8012f44 <_printf_float+0x150>
 8012f3e:	6822      	ldr	r2, [r4, #0]
 8012f40:	07d2      	lsls	r2, r2, #31
 8012f42:	d501      	bpl.n	8012f48 <_printf_float+0x154>
 8012f44:	3301      	adds	r3, #1
 8012f46:	6123      	str	r3, [r4, #16]
 8012f48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d0a2      	beq.n	8012e96 <_printf_float+0xa2>
 8012f50:	232d      	movs	r3, #45	@ 0x2d
 8012f52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f56:	e79e      	b.n	8012e96 <_printf_float+0xa2>
 8012f58:	9a06      	ldr	r2, [sp, #24]
 8012f5a:	2a47      	cmp	r2, #71	@ 0x47
 8012f5c:	d1c2      	bne.n	8012ee4 <_printf_float+0xf0>
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d1c0      	bne.n	8012ee4 <_printf_float+0xf0>
 8012f62:	2301      	movs	r3, #1
 8012f64:	e7bd      	b.n	8012ee2 <_printf_float+0xee>
 8012f66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012f6a:	d9db      	bls.n	8012f24 <_printf_float+0x130>
 8012f6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012f70:	d118      	bne.n	8012fa4 <_printf_float+0x1b0>
 8012f72:	2900      	cmp	r1, #0
 8012f74:	6863      	ldr	r3, [r4, #4]
 8012f76:	dd0b      	ble.n	8012f90 <_printf_float+0x19c>
 8012f78:	6121      	str	r1, [r4, #16]
 8012f7a:	b913      	cbnz	r3, 8012f82 <_printf_float+0x18e>
 8012f7c:	6822      	ldr	r2, [r4, #0]
 8012f7e:	07d0      	lsls	r0, r2, #31
 8012f80:	d502      	bpl.n	8012f88 <_printf_float+0x194>
 8012f82:	3301      	adds	r3, #1
 8012f84:	440b      	add	r3, r1
 8012f86:	6123      	str	r3, [r4, #16]
 8012f88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012f8a:	f04f 0900 	mov.w	r9, #0
 8012f8e:	e7db      	b.n	8012f48 <_printf_float+0x154>
 8012f90:	b913      	cbnz	r3, 8012f98 <_printf_float+0x1a4>
 8012f92:	6822      	ldr	r2, [r4, #0]
 8012f94:	07d2      	lsls	r2, r2, #31
 8012f96:	d501      	bpl.n	8012f9c <_printf_float+0x1a8>
 8012f98:	3302      	adds	r3, #2
 8012f9a:	e7f4      	b.n	8012f86 <_printf_float+0x192>
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	e7f2      	b.n	8012f86 <_printf_float+0x192>
 8012fa0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012fa6:	4299      	cmp	r1, r3
 8012fa8:	db05      	blt.n	8012fb6 <_printf_float+0x1c2>
 8012faa:	6823      	ldr	r3, [r4, #0]
 8012fac:	6121      	str	r1, [r4, #16]
 8012fae:	07d8      	lsls	r0, r3, #31
 8012fb0:	d5ea      	bpl.n	8012f88 <_printf_float+0x194>
 8012fb2:	1c4b      	adds	r3, r1, #1
 8012fb4:	e7e7      	b.n	8012f86 <_printf_float+0x192>
 8012fb6:	2900      	cmp	r1, #0
 8012fb8:	bfd4      	ite	le
 8012fba:	f1c1 0202 	rsble	r2, r1, #2
 8012fbe:	2201      	movgt	r2, #1
 8012fc0:	4413      	add	r3, r2
 8012fc2:	e7e0      	b.n	8012f86 <_printf_float+0x192>
 8012fc4:	6823      	ldr	r3, [r4, #0]
 8012fc6:	055a      	lsls	r2, r3, #21
 8012fc8:	d407      	bmi.n	8012fda <_printf_float+0x1e6>
 8012fca:	6923      	ldr	r3, [r4, #16]
 8012fcc:	4642      	mov	r2, r8
 8012fce:	4631      	mov	r1, r6
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	47b8      	blx	r7
 8012fd4:	3001      	adds	r0, #1
 8012fd6:	d12b      	bne.n	8013030 <_printf_float+0x23c>
 8012fd8:	e767      	b.n	8012eaa <_printf_float+0xb6>
 8012fda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012fde:	f240 80dd 	bls.w	801319c <_printf_float+0x3a8>
 8012fe2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	2300      	movs	r3, #0
 8012fea:	f7ed fd7d 	bl	8000ae8 <__aeabi_dcmpeq>
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d033      	beq.n	801305a <_printf_float+0x266>
 8012ff2:	4a37      	ldr	r2, [pc, #220]	@ (80130d0 <_printf_float+0x2dc>)
 8012ff4:	2301      	movs	r3, #1
 8012ff6:	4631      	mov	r1, r6
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	47b8      	blx	r7
 8012ffc:	3001      	adds	r0, #1
 8012ffe:	f43f af54 	beq.w	8012eaa <_printf_float+0xb6>
 8013002:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013006:	4543      	cmp	r3, r8
 8013008:	db02      	blt.n	8013010 <_printf_float+0x21c>
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	07d8      	lsls	r0, r3, #31
 801300e:	d50f      	bpl.n	8013030 <_printf_float+0x23c>
 8013010:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013014:	4631      	mov	r1, r6
 8013016:	4628      	mov	r0, r5
 8013018:	47b8      	blx	r7
 801301a:	3001      	adds	r0, #1
 801301c:	f43f af45 	beq.w	8012eaa <_printf_float+0xb6>
 8013020:	f04f 0900 	mov.w	r9, #0
 8013024:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013028:	f104 0a1a 	add.w	sl, r4, #26
 801302c:	45c8      	cmp	r8, r9
 801302e:	dc09      	bgt.n	8013044 <_printf_float+0x250>
 8013030:	6823      	ldr	r3, [r4, #0]
 8013032:	079b      	lsls	r3, r3, #30
 8013034:	f100 8103 	bmi.w	801323e <_printf_float+0x44a>
 8013038:	68e0      	ldr	r0, [r4, #12]
 801303a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801303c:	4298      	cmp	r0, r3
 801303e:	bfb8      	it	lt
 8013040:	4618      	movlt	r0, r3
 8013042:	e734      	b.n	8012eae <_printf_float+0xba>
 8013044:	2301      	movs	r3, #1
 8013046:	4652      	mov	r2, sl
 8013048:	4631      	mov	r1, r6
 801304a:	4628      	mov	r0, r5
 801304c:	47b8      	blx	r7
 801304e:	3001      	adds	r0, #1
 8013050:	f43f af2b 	beq.w	8012eaa <_printf_float+0xb6>
 8013054:	f109 0901 	add.w	r9, r9, #1
 8013058:	e7e8      	b.n	801302c <_printf_float+0x238>
 801305a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801305c:	2b00      	cmp	r3, #0
 801305e:	dc39      	bgt.n	80130d4 <_printf_float+0x2e0>
 8013060:	4a1b      	ldr	r2, [pc, #108]	@ (80130d0 <_printf_float+0x2dc>)
 8013062:	2301      	movs	r3, #1
 8013064:	4631      	mov	r1, r6
 8013066:	4628      	mov	r0, r5
 8013068:	47b8      	blx	r7
 801306a:	3001      	adds	r0, #1
 801306c:	f43f af1d 	beq.w	8012eaa <_printf_float+0xb6>
 8013070:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013074:	ea59 0303 	orrs.w	r3, r9, r3
 8013078:	d102      	bne.n	8013080 <_printf_float+0x28c>
 801307a:	6823      	ldr	r3, [r4, #0]
 801307c:	07d9      	lsls	r1, r3, #31
 801307e:	d5d7      	bpl.n	8013030 <_printf_float+0x23c>
 8013080:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013084:	4631      	mov	r1, r6
 8013086:	4628      	mov	r0, r5
 8013088:	47b8      	blx	r7
 801308a:	3001      	adds	r0, #1
 801308c:	f43f af0d 	beq.w	8012eaa <_printf_float+0xb6>
 8013090:	f04f 0a00 	mov.w	sl, #0
 8013094:	f104 0b1a 	add.w	fp, r4, #26
 8013098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801309a:	425b      	negs	r3, r3
 801309c:	4553      	cmp	r3, sl
 801309e:	dc01      	bgt.n	80130a4 <_printf_float+0x2b0>
 80130a0:	464b      	mov	r3, r9
 80130a2:	e793      	b.n	8012fcc <_printf_float+0x1d8>
 80130a4:	2301      	movs	r3, #1
 80130a6:	465a      	mov	r2, fp
 80130a8:	4631      	mov	r1, r6
 80130aa:	4628      	mov	r0, r5
 80130ac:	47b8      	blx	r7
 80130ae:	3001      	adds	r0, #1
 80130b0:	f43f aefb 	beq.w	8012eaa <_printf_float+0xb6>
 80130b4:	f10a 0a01 	add.w	sl, sl, #1
 80130b8:	e7ee      	b.n	8013098 <_printf_float+0x2a4>
 80130ba:	bf00      	nop
 80130bc:	7fefffff 	.word	0x7fefffff
 80130c0:	0801874c 	.word	0x0801874c
 80130c4:	08018748 	.word	0x08018748
 80130c8:	08018754 	.word	0x08018754
 80130cc:	08018750 	.word	0x08018750
 80130d0:	08018933 	.word	0x08018933
 80130d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80130d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80130da:	4553      	cmp	r3, sl
 80130dc:	bfa8      	it	ge
 80130de:	4653      	movge	r3, sl
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	4699      	mov	r9, r3
 80130e4:	dc36      	bgt.n	8013154 <_printf_float+0x360>
 80130e6:	f04f 0b00 	mov.w	fp, #0
 80130ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80130ee:	f104 021a 	add.w	r2, r4, #26
 80130f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80130f4:	9306      	str	r3, [sp, #24]
 80130f6:	eba3 0309 	sub.w	r3, r3, r9
 80130fa:	455b      	cmp	r3, fp
 80130fc:	dc31      	bgt.n	8013162 <_printf_float+0x36e>
 80130fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013100:	459a      	cmp	sl, r3
 8013102:	dc3a      	bgt.n	801317a <_printf_float+0x386>
 8013104:	6823      	ldr	r3, [r4, #0]
 8013106:	07da      	lsls	r2, r3, #31
 8013108:	d437      	bmi.n	801317a <_printf_float+0x386>
 801310a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801310c:	ebaa 0903 	sub.w	r9, sl, r3
 8013110:	9b06      	ldr	r3, [sp, #24]
 8013112:	ebaa 0303 	sub.w	r3, sl, r3
 8013116:	4599      	cmp	r9, r3
 8013118:	bfa8      	it	ge
 801311a:	4699      	movge	r9, r3
 801311c:	f1b9 0f00 	cmp.w	r9, #0
 8013120:	dc33      	bgt.n	801318a <_printf_float+0x396>
 8013122:	f04f 0800 	mov.w	r8, #0
 8013126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801312a:	f104 0b1a 	add.w	fp, r4, #26
 801312e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013130:	ebaa 0303 	sub.w	r3, sl, r3
 8013134:	eba3 0309 	sub.w	r3, r3, r9
 8013138:	4543      	cmp	r3, r8
 801313a:	f77f af79 	ble.w	8013030 <_printf_float+0x23c>
 801313e:	2301      	movs	r3, #1
 8013140:	465a      	mov	r2, fp
 8013142:	4631      	mov	r1, r6
 8013144:	4628      	mov	r0, r5
 8013146:	47b8      	blx	r7
 8013148:	3001      	adds	r0, #1
 801314a:	f43f aeae 	beq.w	8012eaa <_printf_float+0xb6>
 801314e:	f108 0801 	add.w	r8, r8, #1
 8013152:	e7ec      	b.n	801312e <_printf_float+0x33a>
 8013154:	4642      	mov	r2, r8
 8013156:	4631      	mov	r1, r6
 8013158:	4628      	mov	r0, r5
 801315a:	47b8      	blx	r7
 801315c:	3001      	adds	r0, #1
 801315e:	d1c2      	bne.n	80130e6 <_printf_float+0x2f2>
 8013160:	e6a3      	b.n	8012eaa <_printf_float+0xb6>
 8013162:	2301      	movs	r3, #1
 8013164:	4631      	mov	r1, r6
 8013166:	4628      	mov	r0, r5
 8013168:	9206      	str	r2, [sp, #24]
 801316a:	47b8      	blx	r7
 801316c:	3001      	adds	r0, #1
 801316e:	f43f ae9c 	beq.w	8012eaa <_printf_float+0xb6>
 8013172:	9a06      	ldr	r2, [sp, #24]
 8013174:	f10b 0b01 	add.w	fp, fp, #1
 8013178:	e7bb      	b.n	80130f2 <_printf_float+0x2fe>
 801317a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801317e:	4631      	mov	r1, r6
 8013180:	4628      	mov	r0, r5
 8013182:	47b8      	blx	r7
 8013184:	3001      	adds	r0, #1
 8013186:	d1c0      	bne.n	801310a <_printf_float+0x316>
 8013188:	e68f      	b.n	8012eaa <_printf_float+0xb6>
 801318a:	9a06      	ldr	r2, [sp, #24]
 801318c:	464b      	mov	r3, r9
 801318e:	4442      	add	r2, r8
 8013190:	4631      	mov	r1, r6
 8013192:	4628      	mov	r0, r5
 8013194:	47b8      	blx	r7
 8013196:	3001      	adds	r0, #1
 8013198:	d1c3      	bne.n	8013122 <_printf_float+0x32e>
 801319a:	e686      	b.n	8012eaa <_printf_float+0xb6>
 801319c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80131a0:	f1ba 0f01 	cmp.w	sl, #1
 80131a4:	dc01      	bgt.n	80131aa <_printf_float+0x3b6>
 80131a6:	07db      	lsls	r3, r3, #31
 80131a8:	d536      	bpl.n	8013218 <_printf_float+0x424>
 80131aa:	2301      	movs	r3, #1
 80131ac:	4642      	mov	r2, r8
 80131ae:	4631      	mov	r1, r6
 80131b0:	4628      	mov	r0, r5
 80131b2:	47b8      	blx	r7
 80131b4:	3001      	adds	r0, #1
 80131b6:	f43f ae78 	beq.w	8012eaa <_printf_float+0xb6>
 80131ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131be:	4631      	mov	r1, r6
 80131c0:	4628      	mov	r0, r5
 80131c2:	47b8      	blx	r7
 80131c4:	3001      	adds	r0, #1
 80131c6:	f43f ae70 	beq.w	8012eaa <_printf_float+0xb6>
 80131ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80131ce:	2200      	movs	r2, #0
 80131d0:	2300      	movs	r3, #0
 80131d2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80131d6:	f7ed fc87 	bl	8000ae8 <__aeabi_dcmpeq>
 80131da:	b9c0      	cbnz	r0, 801320e <_printf_float+0x41a>
 80131dc:	4653      	mov	r3, sl
 80131de:	f108 0201 	add.w	r2, r8, #1
 80131e2:	4631      	mov	r1, r6
 80131e4:	4628      	mov	r0, r5
 80131e6:	47b8      	blx	r7
 80131e8:	3001      	adds	r0, #1
 80131ea:	d10c      	bne.n	8013206 <_printf_float+0x412>
 80131ec:	e65d      	b.n	8012eaa <_printf_float+0xb6>
 80131ee:	2301      	movs	r3, #1
 80131f0:	465a      	mov	r2, fp
 80131f2:	4631      	mov	r1, r6
 80131f4:	4628      	mov	r0, r5
 80131f6:	47b8      	blx	r7
 80131f8:	3001      	adds	r0, #1
 80131fa:	f43f ae56 	beq.w	8012eaa <_printf_float+0xb6>
 80131fe:	f108 0801 	add.w	r8, r8, #1
 8013202:	45d0      	cmp	r8, sl
 8013204:	dbf3      	blt.n	80131ee <_printf_float+0x3fa>
 8013206:	464b      	mov	r3, r9
 8013208:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801320c:	e6df      	b.n	8012fce <_printf_float+0x1da>
 801320e:	f04f 0800 	mov.w	r8, #0
 8013212:	f104 0b1a 	add.w	fp, r4, #26
 8013216:	e7f4      	b.n	8013202 <_printf_float+0x40e>
 8013218:	2301      	movs	r3, #1
 801321a:	4642      	mov	r2, r8
 801321c:	e7e1      	b.n	80131e2 <_printf_float+0x3ee>
 801321e:	2301      	movs	r3, #1
 8013220:	464a      	mov	r2, r9
 8013222:	4631      	mov	r1, r6
 8013224:	4628      	mov	r0, r5
 8013226:	47b8      	blx	r7
 8013228:	3001      	adds	r0, #1
 801322a:	f43f ae3e 	beq.w	8012eaa <_printf_float+0xb6>
 801322e:	f108 0801 	add.w	r8, r8, #1
 8013232:	68e3      	ldr	r3, [r4, #12]
 8013234:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013236:	1a5b      	subs	r3, r3, r1
 8013238:	4543      	cmp	r3, r8
 801323a:	dcf0      	bgt.n	801321e <_printf_float+0x42a>
 801323c:	e6fc      	b.n	8013038 <_printf_float+0x244>
 801323e:	f04f 0800 	mov.w	r8, #0
 8013242:	f104 0919 	add.w	r9, r4, #25
 8013246:	e7f4      	b.n	8013232 <_printf_float+0x43e>

08013248 <_printf_common>:
 8013248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801324c:	4616      	mov	r6, r2
 801324e:	4698      	mov	r8, r3
 8013250:	688a      	ldr	r2, [r1, #8]
 8013252:	690b      	ldr	r3, [r1, #16]
 8013254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013258:	4293      	cmp	r3, r2
 801325a:	bfb8      	it	lt
 801325c:	4613      	movlt	r3, r2
 801325e:	6033      	str	r3, [r6, #0]
 8013260:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013264:	4607      	mov	r7, r0
 8013266:	460c      	mov	r4, r1
 8013268:	b10a      	cbz	r2, 801326e <_printf_common+0x26>
 801326a:	3301      	adds	r3, #1
 801326c:	6033      	str	r3, [r6, #0]
 801326e:	6823      	ldr	r3, [r4, #0]
 8013270:	0699      	lsls	r1, r3, #26
 8013272:	bf42      	ittt	mi
 8013274:	6833      	ldrmi	r3, [r6, #0]
 8013276:	3302      	addmi	r3, #2
 8013278:	6033      	strmi	r3, [r6, #0]
 801327a:	6825      	ldr	r5, [r4, #0]
 801327c:	f015 0506 	ands.w	r5, r5, #6
 8013280:	d106      	bne.n	8013290 <_printf_common+0x48>
 8013282:	f104 0a19 	add.w	sl, r4, #25
 8013286:	68e3      	ldr	r3, [r4, #12]
 8013288:	6832      	ldr	r2, [r6, #0]
 801328a:	1a9b      	subs	r3, r3, r2
 801328c:	42ab      	cmp	r3, r5
 801328e:	dc26      	bgt.n	80132de <_printf_common+0x96>
 8013290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013294:	6822      	ldr	r2, [r4, #0]
 8013296:	3b00      	subs	r3, #0
 8013298:	bf18      	it	ne
 801329a:	2301      	movne	r3, #1
 801329c:	0692      	lsls	r2, r2, #26
 801329e:	d42b      	bmi.n	80132f8 <_printf_common+0xb0>
 80132a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80132a4:	4641      	mov	r1, r8
 80132a6:	4638      	mov	r0, r7
 80132a8:	47c8      	blx	r9
 80132aa:	3001      	adds	r0, #1
 80132ac:	d01e      	beq.n	80132ec <_printf_common+0xa4>
 80132ae:	6823      	ldr	r3, [r4, #0]
 80132b0:	6922      	ldr	r2, [r4, #16]
 80132b2:	f003 0306 	and.w	r3, r3, #6
 80132b6:	2b04      	cmp	r3, #4
 80132b8:	bf02      	ittt	eq
 80132ba:	68e5      	ldreq	r5, [r4, #12]
 80132bc:	6833      	ldreq	r3, [r6, #0]
 80132be:	1aed      	subeq	r5, r5, r3
 80132c0:	68a3      	ldr	r3, [r4, #8]
 80132c2:	bf0c      	ite	eq
 80132c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80132c8:	2500      	movne	r5, #0
 80132ca:	4293      	cmp	r3, r2
 80132cc:	bfc4      	itt	gt
 80132ce:	1a9b      	subgt	r3, r3, r2
 80132d0:	18ed      	addgt	r5, r5, r3
 80132d2:	2600      	movs	r6, #0
 80132d4:	341a      	adds	r4, #26
 80132d6:	42b5      	cmp	r5, r6
 80132d8:	d11a      	bne.n	8013310 <_printf_common+0xc8>
 80132da:	2000      	movs	r0, #0
 80132dc:	e008      	b.n	80132f0 <_printf_common+0xa8>
 80132de:	2301      	movs	r3, #1
 80132e0:	4652      	mov	r2, sl
 80132e2:	4641      	mov	r1, r8
 80132e4:	4638      	mov	r0, r7
 80132e6:	47c8      	blx	r9
 80132e8:	3001      	adds	r0, #1
 80132ea:	d103      	bne.n	80132f4 <_printf_common+0xac>
 80132ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80132f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132f4:	3501      	adds	r5, #1
 80132f6:	e7c6      	b.n	8013286 <_printf_common+0x3e>
 80132f8:	18e1      	adds	r1, r4, r3
 80132fa:	1c5a      	adds	r2, r3, #1
 80132fc:	2030      	movs	r0, #48	@ 0x30
 80132fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013302:	4422      	add	r2, r4
 8013304:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013308:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801330c:	3302      	adds	r3, #2
 801330e:	e7c7      	b.n	80132a0 <_printf_common+0x58>
 8013310:	2301      	movs	r3, #1
 8013312:	4622      	mov	r2, r4
 8013314:	4641      	mov	r1, r8
 8013316:	4638      	mov	r0, r7
 8013318:	47c8      	blx	r9
 801331a:	3001      	adds	r0, #1
 801331c:	d0e6      	beq.n	80132ec <_printf_common+0xa4>
 801331e:	3601      	adds	r6, #1
 8013320:	e7d9      	b.n	80132d6 <_printf_common+0x8e>
	...

08013324 <_printf_i>:
 8013324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013328:	7e0f      	ldrb	r7, [r1, #24]
 801332a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801332c:	2f78      	cmp	r7, #120	@ 0x78
 801332e:	4691      	mov	r9, r2
 8013330:	4680      	mov	r8, r0
 8013332:	460c      	mov	r4, r1
 8013334:	469a      	mov	sl, r3
 8013336:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801333a:	d807      	bhi.n	801334c <_printf_i+0x28>
 801333c:	2f62      	cmp	r7, #98	@ 0x62
 801333e:	d80a      	bhi.n	8013356 <_printf_i+0x32>
 8013340:	2f00      	cmp	r7, #0
 8013342:	f000 80d1 	beq.w	80134e8 <_printf_i+0x1c4>
 8013346:	2f58      	cmp	r7, #88	@ 0x58
 8013348:	f000 80b8 	beq.w	80134bc <_printf_i+0x198>
 801334c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013350:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013354:	e03a      	b.n	80133cc <_printf_i+0xa8>
 8013356:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801335a:	2b15      	cmp	r3, #21
 801335c:	d8f6      	bhi.n	801334c <_printf_i+0x28>
 801335e:	a101      	add	r1, pc, #4	@ (adr r1, 8013364 <_printf_i+0x40>)
 8013360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013364:	080133bd 	.word	0x080133bd
 8013368:	080133d1 	.word	0x080133d1
 801336c:	0801334d 	.word	0x0801334d
 8013370:	0801334d 	.word	0x0801334d
 8013374:	0801334d 	.word	0x0801334d
 8013378:	0801334d 	.word	0x0801334d
 801337c:	080133d1 	.word	0x080133d1
 8013380:	0801334d 	.word	0x0801334d
 8013384:	0801334d 	.word	0x0801334d
 8013388:	0801334d 	.word	0x0801334d
 801338c:	0801334d 	.word	0x0801334d
 8013390:	080134cf 	.word	0x080134cf
 8013394:	080133fb 	.word	0x080133fb
 8013398:	08013489 	.word	0x08013489
 801339c:	0801334d 	.word	0x0801334d
 80133a0:	0801334d 	.word	0x0801334d
 80133a4:	080134f1 	.word	0x080134f1
 80133a8:	0801334d 	.word	0x0801334d
 80133ac:	080133fb 	.word	0x080133fb
 80133b0:	0801334d 	.word	0x0801334d
 80133b4:	0801334d 	.word	0x0801334d
 80133b8:	08013491 	.word	0x08013491
 80133bc:	6833      	ldr	r3, [r6, #0]
 80133be:	1d1a      	adds	r2, r3, #4
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	6032      	str	r2, [r6, #0]
 80133c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80133c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80133cc:	2301      	movs	r3, #1
 80133ce:	e09c      	b.n	801350a <_printf_i+0x1e6>
 80133d0:	6833      	ldr	r3, [r6, #0]
 80133d2:	6820      	ldr	r0, [r4, #0]
 80133d4:	1d19      	adds	r1, r3, #4
 80133d6:	6031      	str	r1, [r6, #0]
 80133d8:	0606      	lsls	r6, r0, #24
 80133da:	d501      	bpl.n	80133e0 <_printf_i+0xbc>
 80133dc:	681d      	ldr	r5, [r3, #0]
 80133de:	e003      	b.n	80133e8 <_printf_i+0xc4>
 80133e0:	0645      	lsls	r5, r0, #25
 80133e2:	d5fb      	bpl.n	80133dc <_printf_i+0xb8>
 80133e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80133e8:	2d00      	cmp	r5, #0
 80133ea:	da03      	bge.n	80133f4 <_printf_i+0xd0>
 80133ec:	232d      	movs	r3, #45	@ 0x2d
 80133ee:	426d      	negs	r5, r5
 80133f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80133f4:	4858      	ldr	r0, [pc, #352]	@ (8013558 <_printf_i+0x234>)
 80133f6:	230a      	movs	r3, #10
 80133f8:	e011      	b.n	801341e <_printf_i+0xfa>
 80133fa:	6821      	ldr	r1, [r4, #0]
 80133fc:	6833      	ldr	r3, [r6, #0]
 80133fe:	0608      	lsls	r0, r1, #24
 8013400:	f853 5b04 	ldr.w	r5, [r3], #4
 8013404:	d402      	bmi.n	801340c <_printf_i+0xe8>
 8013406:	0649      	lsls	r1, r1, #25
 8013408:	bf48      	it	mi
 801340a:	b2ad      	uxthmi	r5, r5
 801340c:	2f6f      	cmp	r7, #111	@ 0x6f
 801340e:	4852      	ldr	r0, [pc, #328]	@ (8013558 <_printf_i+0x234>)
 8013410:	6033      	str	r3, [r6, #0]
 8013412:	bf14      	ite	ne
 8013414:	230a      	movne	r3, #10
 8013416:	2308      	moveq	r3, #8
 8013418:	2100      	movs	r1, #0
 801341a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801341e:	6866      	ldr	r6, [r4, #4]
 8013420:	60a6      	str	r6, [r4, #8]
 8013422:	2e00      	cmp	r6, #0
 8013424:	db05      	blt.n	8013432 <_printf_i+0x10e>
 8013426:	6821      	ldr	r1, [r4, #0]
 8013428:	432e      	orrs	r6, r5
 801342a:	f021 0104 	bic.w	r1, r1, #4
 801342e:	6021      	str	r1, [r4, #0]
 8013430:	d04b      	beq.n	80134ca <_printf_i+0x1a6>
 8013432:	4616      	mov	r6, r2
 8013434:	fbb5 f1f3 	udiv	r1, r5, r3
 8013438:	fb03 5711 	mls	r7, r3, r1, r5
 801343c:	5dc7      	ldrb	r7, [r0, r7]
 801343e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013442:	462f      	mov	r7, r5
 8013444:	42bb      	cmp	r3, r7
 8013446:	460d      	mov	r5, r1
 8013448:	d9f4      	bls.n	8013434 <_printf_i+0x110>
 801344a:	2b08      	cmp	r3, #8
 801344c:	d10b      	bne.n	8013466 <_printf_i+0x142>
 801344e:	6823      	ldr	r3, [r4, #0]
 8013450:	07df      	lsls	r7, r3, #31
 8013452:	d508      	bpl.n	8013466 <_printf_i+0x142>
 8013454:	6923      	ldr	r3, [r4, #16]
 8013456:	6861      	ldr	r1, [r4, #4]
 8013458:	4299      	cmp	r1, r3
 801345a:	bfde      	ittt	le
 801345c:	2330      	movle	r3, #48	@ 0x30
 801345e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013462:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013466:	1b92      	subs	r2, r2, r6
 8013468:	6122      	str	r2, [r4, #16]
 801346a:	f8cd a000 	str.w	sl, [sp]
 801346e:	464b      	mov	r3, r9
 8013470:	aa03      	add	r2, sp, #12
 8013472:	4621      	mov	r1, r4
 8013474:	4640      	mov	r0, r8
 8013476:	f7ff fee7 	bl	8013248 <_printf_common>
 801347a:	3001      	adds	r0, #1
 801347c:	d14a      	bne.n	8013514 <_printf_i+0x1f0>
 801347e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013482:	b004      	add	sp, #16
 8013484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013488:	6823      	ldr	r3, [r4, #0]
 801348a:	f043 0320 	orr.w	r3, r3, #32
 801348e:	6023      	str	r3, [r4, #0]
 8013490:	4832      	ldr	r0, [pc, #200]	@ (801355c <_printf_i+0x238>)
 8013492:	2778      	movs	r7, #120	@ 0x78
 8013494:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013498:	6823      	ldr	r3, [r4, #0]
 801349a:	6831      	ldr	r1, [r6, #0]
 801349c:	061f      	lsls	r7, r3, #24
 801349e:	f851 5b04 	ldr.w	r5, [r1], #4
 80134a2:	d402      	bmi.n	80134aa <_printf_i+0x186>
 80134a4:	065f      	lsls	r7, r3, #25
 80134a6:	bf48      	it	mi
 80134a8:	b2ad      	uxthmi	r5, r5
 80134aa:	6031      	str	r1, [r6, #0]
 80134ac:	07d9      	lsls	r1, r3, #31
 80134ae:	bf44      	itt	mi
 80134b0:	f043 0320 	orrmi.w	r3, r3, #32
 80134b4:	6023      	strmi	r3, [r4, #0]
 80134b6:	b11d      	cbz	r5, 80134c0 <_printf_i+0x19c>
 80134b8:	2310      	movs	r3, #16
 80134ba:	e7ad      	b.n	8013418 <_printf_i+0xf4>
 80134bc:	4826      	ldr	r0, [pc, #152]	@ (8013558 <_printf_i+0x234>)
 80134be:	e7e9      	b.n	8013494 <_printf_i+0x170>
 80134c0:	6823      	ldr	r3, [r4, #0]
 80134c2:	f023 0320 	bic.w	r3, r3, #32
 80134c6:	6023      	str	r3, [r4, #0]
 80134c8:	e7f6      	b.n	80134b8 <_printf_i+0x194>
 80134ca:	4616      	mov	r6, r2
 80134cc:	e7bd      	b.n	801344a <_printf_i+0x126>
 80134ce:	6833      	ldr	r3, [r6, #0]
 80134d0:	6825      	ldr	r5, [r4, #0]
 80134d2:	6961      	ldr	r1, [r4, #20]
 80134d4:	1d18      	adds	r0, r3, #4
 80134d6:	6030      	str	r0, [r6, #0]
 80134d8:	062e      	lsls	r6, r5, #24
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	d501      	bpl.n	80134e2 <_printf_i+0x1be>
 80134de:	6019      	str	r1, [r3, #0]
 80134e0:	e002      	b.n	80134e8 <_printf_i+0x1c4>
 80134e2:	0668      	lsls	r0, r5, #25
 80134e4:	d5fb      	bpl.n	80134de <_printf_i+0x1ba>
 80134e6:	8019      	strh	r1, [r3, #0]
 80134e8:	2300      	movs	r3, #0
 80134ea:	6123      	str	r3, [r4, #16]
 80134ec:	4616      	mov	r6, r2
 80134ee:	e7bc      	b.n	801346a <_printf_i+0x146>
 80134f0:	6833      	ldr	r3, [r6, #0]
 80134f2:	1d1a      	adds	r2, r3, #4
 80134f4:	6032      	str	r2, [r6, #0]
 80134f6:	681e      	ldr	r6, [r3, #0]
 80134f8:	6862      	ldr	r2, [r4, #4]
 80134fa:	2100      	movs	r1, #0
 80134fc:	4630      	mov	r0, r6
 80134fe:	f7ec fe77 	bl	80001f0 <memchr>
 8013502:	b108      	cbz	r0, 8013508 <_printf_i+0x1e4>
 8013504:	1b80      	subs	r0, r0, r6
 8013506:	6060      	str	r0, [r4, #4]
 8013508:	6863      	ldr	r3, [r4, #4]
 801350a:	6123      	str	r3, [r4, #16]
 801350c:	2300      	movs	r3, #0
 801350e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013512:	e7aa      	b.n	801346a <_printf_i+0x146>
 8013514:	6923      	ldr	r3, [r4, #16]
 8013516:	4632      	mov	r2, r6
 8013518:	4649      	mov	r1, r9
 801351a:	4640      	mov	r0, r8
 801351c:	47d0      	blx	sl
 801351e:	3001      	adds	r0, #1
 8013520:	d0ad      	beq.n	801347e <_printf_i+0x15a>
 8013522:	6823      	ldr	r3, [r4, #0]
 8013524:	079b      	lsls	r3, r3, #30
 8013526:	d413      	bmi.n	8013550 <_printf_i+0x22c>
 8013528:	68e0      	ldr	r0, [r4, #12]
 801352a:	9b03      	ldr	r3, [sp, #12]
 801352c:	4298      	cmp	r0, r3
 801352e:	bfb8      	it	lt
 8013530:	4618      	movlt	r0, r3
 8013532:	e7a6      	b.n	8013482 <_printf_i+0x15e>
 8013534:	2301      	movs	r3, #1
 8013536:	4632      	mov	r2, r6
 8013538:	4649      	mov	r1, r9
 801353a:	4640      	mov	r0, r8
 801353c:	47d0      	blx	sl
 801353e:	3001      	adds	r0, #1
 8013540:	d09d      	beq.n	801347e <_printf_i+0x15a>
 8013542:	3501      	adds	r5, #1
 8013544:	68e3      	ldr	r3, [r4, #12]
 8013546:	9903      	ldr	r1, [sp, #12]
 8013548:	1a5b      	subs	r3, r3, r1
 801354a:	42ab      	cmp	r3, r5
 801354c:	dcf2      	bgt.n	8013534 <_printf_i+0x210>
 801354e:	e7eb      	b.n	8013528 <_printf_i+0x204>
 8013550:	2500      	movs	r5, #0
 8013552:	f104 0619 	add.w	r6, r4, #25
 8013556:	e7f5      	b.n	8013544 <_printf_i+0x220>
 8013558:	08018758 	.word	0x08018758
 801355c:	08018769 	.word	0x08018769

08013560 <_scanf_float>:
 8013560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013564:	b087      	sub	sp, #28
 8013566:	4691      	mov	r9, r2
 8013568:	9303      	str	r3, [sp, #12]
 801356a:	688b      	ldr	r3, [r1, #8]
 801356c:	1e5a      	subs	r2, r3, #1
 801356e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8013572:	bf81      	itttt	hi
 8013574:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8013578:	eb03 0b05 	addhi.w	fp, r3, r5
 801357c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8013580:	608b      	strhi	r3, [r1, #8]
 8013582:	680b      	ldr	r3, [r1, #0]
 8013584:	460a      	mov	r2, r1
 8013586:	f04f 0500 	mov.w	r5, #0
 801358a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801358e:	f842 3b1c 	str.w	r3, [r2], #28
 8013592:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013596:	4680      	mov	r8, r0
 8013598:	460c      	mov	r4, r1
 801359a:	bf98      	it	ls
 801359c:	f04f 0b00 	movls.w	fp, #0
 80135a0:	9201      	str	r2, [sp, #4]
 80135a2:	4616      	mov	r6, r2
 80135a4:	46aa      	mov	sl, r5
 80135a6:	462f      	mov	r7, r5
 80135a8:	9502      	str	r5, [sp, #8]
 80135aa:	68a2      	ldr	r2, [r4, #8]
 80135ac:	b15a      	cbz	r2, 80135c6 <_scanf_float+0x66>
 80135ae:	f8d9 3000 	ldr.w	r3, [r9]
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	2b4e      	cmp	r3, #78	@ 0x4e
 80135b6:	d863      	bhi.n	8013680 <_scanf_float+0x120>
 80135b8:	2b40      	cmp	r3, #64	@ 0x40
 80135ba:	d83b      	bhi.n	8013634 <_scanf_float+0xd4>
 80135bc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80135c0:	b2c8      	uxtb	r0, r1
 80135c2:	280e      	cmp	r0, #14
 80135c4:	d939      	bls.n	801363a <_scanf_float+0xda>
 80135c6:	b11f      	cbz	r7, 80135d0 <_scanf_float+0x70>
 80135c8:	6823      	ldr	r3, [r4, #0]
 80135ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80135ce:	6023      	str	r3, [r4, #0]
 80135d0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80135d4:	f1ba 0f01 	cmp.w	sl, #1
 80135d8:	f200 8114 	bhi.w	8013804 <_scanf_float+0x2a4>
 80135dc:	9b01      	ldr	r3, [sp, #4]
 80135de:	429e      	cmp	r6, r3
 80135e0:	f200 8105 	bhi.w	80137ee <_scanf_float+0x28e>
 80135e4:	2001      	movs	r0, #1
 80135e6:	b007      	add	sp, #28
 80135e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ec:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80135f0:	2a0d      	cmp	r2, #13
 80135f2:	d8e8      	bhi.n	80135c6 <_scanf_float+0x66>
 80135f4:	a101      	add	r1, pc, #4	@ (adr r1, 80135fc <_scanf_float+0x9c>)
 80135f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80135fa:	bf00      	nop
 80135fc:	08013745 	.word	0x08013745
 8013600:	080135c7 	.word	0x080135c7
 8013604:	080135c7 	.word	0x080135c7
 8013608:	080135c7 	.word	0x080135c7
 801360c:	080137a1 	.word	0x080137a1
 8013610:	0801377b 	.word	0x0801377b
 8013614:	080135c7 	.word	0x080135c7
 8013618:	080135c7 	.word	0x080135c7
 801361c:	08013753 	.word	0x08013753
 8013620:	080135c7 	.word	0x080135c7
 8013624:	080135c7 	.word	0x080135c7
 8013628:	080135c7 	.word	0x080135c7
 801362c:	080135c7 	.word	0x080135c7
 8013630:	0801370f 	.word	0x0801370f
 8013634:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013638:	e7da      	b.n	80135f0 <_scanf_float+0x90>
 801363a:	290e      	cmp	r1, #14
 801363c:	d8c3      	bhi.n	80135c6 <_scanf_float+0x66>
 801363e:	a001      	add	r0, pc, #4	@ (adr r0, 8013644 <_scanf_float+0xe4>)
 8013640:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013644:	080136ff 	.word	0x080136ff
 8013648:	080135c7 	.word	0x080135c7
 801364c:	080136ff 	.word	0x080136ff
 8013650:	0801378f 	.word	0x0801378f
 8013654:	080135c7 	.word	0x080135c7
 8013658:	080136a1 	.word	0x080136a1
 801365c:	080136e5 	.word	0x080136e5
 8013660:	080136e5 	.word	0x080136e5
 8013664:	080136e5 	.word	0x080136e5
 8013668:	080136e5 	.word	0x080136e5
 801366c:	080136e5 	.word	0x080136e5
 8013670:	080136e5 	.word	0x080136e5
 8013674:	080136e5 	.word	0x080136e5
 8013678:	080136e5 	.word	0x080136e5
 801367c:	080136e5 	.word	0x080136e5
 8013680:	2b6e      	cmp	r3, #110	@ 0x6e
 8013682:	d809      	bhi.n	8013698 <_scanf_float+0x138>
 8013684:	2b60      	cmp	r3, #96	@ 0x60
 8013686:	d8b1      	bhi.n	80135ec <_scanf_float+0x8c>
 8013688:	2b54      	cmp	r3, #84	@ 0x54
 801368a:	d07b      	beq.n	8013784 <_scanf_float+0x224>
 801368c:	2b59      	cmp	r3, #89	@ 0x59
 801368e:	d19a      	bne.n	80135c6 <_scanf_float+0x66>
 8013690:	2d07      	cmp	r5, #7
 8013692:	d198      	bne.n	80135c6 <_scanf_float+0x66>
 8013694:	2508      	movs	r5, #8
 8013696:	e02f      	b.n	80136f8 <_scanf_float+0x198>
 8013698:	2b74      	cmp	r3, #116	@ 0x74
 801369a:	d073      	beq.n	8013784 <_scanf_float+0x224>
 801369c:	2b79      	cmp	r3, #121	@ 0x79
 801369e:	e7f6      	b.n	801368e <_scanf_float+0x12e>
 80136a0:	6821      	ldr	r1, [r4, #0]
 80136a2:	05c8      	lsls	r0, r1, #23
 80136a4:	d51e      	bpl.n	80136e4 <_scanf_float+0x184>
 80136a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80136aa:	6021      	str	r1, [r4, #0]
 80136ac:	3701      	adds	r7, #1
 80136ae:	f1bb 0f00 	cmp.w	fp, #0
 80136b2:	d003      	beq.n	80136bc <_scanf_float+0x15c>
 80136b4:	3201      	adds	r2, #1
 80136b6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80136ba:	60a2      	str	r2, [r4, #8]
 80136bc:	68a3      	ldr	r3, [r4, #8]
 80136be:	3b01      	subs	r3, #1
 80136c0:	60a3      	str	r3, [r4, #8]
 80136c2:	6923      	ldr	r3, [r4, #16]
 80136c4:	3301      	adds	r3, #1
 80136c6:	6123      	str	r3, [r4, #16]
 80136c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80136cc:	3b01      	subs	r3, #1
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	f8c9 3004 	str.w	r3, [r9, #4]
 80136d4:	f340 8082 	ble.w	80137dc <_scanf_float+0x27c>
 80136d8:	f8d9 3000 	ldr.w	r3, [r9]
 80136dc:	3301      	adds	r3, #1
 80136de:	f8c9 3000 	str.w	r3, [r9]
 80136e2:	e762      	b.n	80135aa <_scanf_float+0x4a>
 80136e4:	eb1a 0105 	adds.w	r1, sl, r5
 80136e8:	f47f af6d 	bne.w	80135c6 <_scanf_float+0x66>
 80136ec:	6822      	ldr	r2, [r4, #0]
 80136ee:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80136f2:	6022      	str	r2, [r4, #0]
 80136f4:	460d      	mov	r5, r1
 80136f6:	468a      	mov	sl, r1
 80136f8:	f806 3b01 	strb.w	r3, [r6], #1
 80136fc:	e7de      	b.n	80136bc <_scanf_float+0x15c>
 80136fe:	6822      	ldr	r2, [r4, #0]
 8013700:	0610      	lsls	r0, r2, #24
 8013702:	f57f af60 	bpl.w	80135c6 <_scanf_float+0x66>
 8013706:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801370a:	6022      	str	r2, [r4, #0]
 801370c:	e7f4      	b.n	80136f8 <_scanf_float+0x198>
 801370e:	f1ba 0f00 	cmp.w	sl, #0
 8013712:	d10c      	bne.n	801372e <_scanf_float+0x1ce>
 8013714:	b977      	cbnz	r7, 8013734 <_scanf_float+0x1d4>
 8013716:	6822      	ldr	r2, [r4, #0]
 8013718:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801371c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013720:	d108      	bne.n	8013734 <_scanf_float+0x1d4>
 8013722:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013726:	6022      	str	r2, [r4, #0]
 8013728:	f04f 0a01 	mov.w	sl, #1
 801372c:	e7e4      	b.n	80136f8 <_scanf_float+0x198>
 801372e:	f1ba 0f02 	cmp.w	sl, #2
 8013732:	d050      	beq.n	80137d6 <_scanf_float+0x276>
 8013734:	2d01      	cmp	r5, #1
 8013736:	d002      	beq.n	801373e <_scanf_float+0x1de>
 8013738:	2d04      	cmp	r5, #4
 801373a:	f47f af44 	bne.w	80135c6 <_scanf_float+0x66>
 801373e:	3501      	adds	r5, #1
 8013740:	b2ed      	uxtb	r5, r5
 8013742:	e7d9      	b.n	80136f8 <_scanf_float+0x198>
 8013744:	f1ba 0f01 	cmp.w	sl, #1
 8013748:	f47f af3d 	bne.w	80135c6 <_scanf_float+0x66>
 801374c:	f04f 0a02 	mov.w	sl, #2
 8013750:	e7d2      	b.n	80136f8 <_scanf_float+0x198>
 8013752:	b975      	cbnz	r5, 8013772 <_scanf_float+0x212>
 8013754:	2f00      	cmp	r7, #0
 8013756:	f47f af37 	bne.w	80135c8 <_scanf_float+0x68>
 801375a:	6822      	ldr	r2, [r4, #0]
 801375c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013760:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013764:	f040 8103 	bne.w	801396e <_scanf_float+0x40e>
 8013768:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801376c:	6022      	str	r2, [r4, #0]
 801376e:	2501      	movs	r5, #1
 8013770:	e7c2      	b.n	80136f8 <_scanf_float+0x198>
 8013772:	2d03      	cmp	r5, #3
 8013774:	d0e3      	beq.n	801373e <_scanf_float+0x1de>
 8013776:	2d05      	cmp	r5, #5
 8013778:	e7df      	b.n	801373a <_scanf_float+0x1da>
 801377a:	2d02      	cmp	r5, #2
 801377c:	f47f af23 	bne.w	80135c6 <_scanf_float+0x66>
 8013780:	2503      	movs	r5, #3
 8013782:	e7b9      	b.n	80136f8 <_scanf_float+0x198>
 8013784:	2d06      	cmp	r5, #6
 8013786:	f47f af1e 	bne.w	80135c6 <_scanf_float+0x66>
 801378a:	2507      	movs	r5, #7
 801378c:	e7b4      	b.n	80136f8 <_scanf_float+0x198>
 801378e:	6822      	ldr	r2, [r4, #0]
 8013790:	0591      	lsls	r1, r2, #22
 8013792:	f57f af18 	bpl.w	80135c6 <_scanf_float+0x66>
 8013796:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801379a:	6022      	str	r2, [r4, #0]
 801379c:	9702      	str	r7, [sp, #8]
 801379e:	e7ab      	b.n	80136f8 <_scanf_float+0x198>
 80137a0:	6822      	ldr	r2, [r4, #0]
 80137a2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80137a6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80137aa:	d005      	beq.n	80137b8 <_scanf_float+0x258>
 80137ac:	0550      	lsls	r0, r2, #21
 80137ae:	f57f af0a 	bpl.w	80135c6 <_scanf_float+0x66>
 80137b2:	2f00      	cmp	r7, #0
 80137b4:	f000 80db 	beq.w	801396e <_scanf_float+0x40e>
 80137b8:	0591      	lsls	r1, r2, #22
 80137ba:	bf58      	it	pl
 80137bc:	9902      	ldrpl	r1, [sp, #8]
 80137be:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80137c2:	bf58      	it	pl
 80137c4:	1a79      	subpl	r1, r7, r1
 80137c6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80137ca:	bf58      	it	pl
 80137cc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80137d0:	6022      	str	r2, [r4, #0]
 80137d2:	2700      	movs	r7, #0
 80137d4:	e790      	b.n	80136f8 <_scanf_float+0x198>
 80137d6:	f04f 0a03 	mov.w	sl, #3
 80137da:	e78d      	b.n	80136f8 <_scanf_float+0x198>
 80137dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80137e0:	4649      	mov	r1, r9
 80137e2:	4640      	mov	r0, r8
 80137e4:	4798      	blx	r3
 80137e6:	2800      	cmp	r0, #0
 80137e8:	f43f aedf 	beq.w	80135aa <_scanf_float+0x4a>
 80137ec:	e6eb      	b.n	80135c6 <_scanf_float+0x66>
 80137ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80137f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80137f6:	464a      	mov	r2, r9
 80137f8:	4640      	mov	r0, r8
 80137fa:	4798      	blx	r3
 80137fc:	6923      	ldr	r3, [r4, #16]
 80137fe:	3b01      	subs	r3, #1
 8013800:	6123      	str	r3, [r4, #16]
 8013802:	e6eb      	b.n	80135dc <_scanf_float+0x7c>
 8013804:	1e6b      	subs	r3, r5, #1
 8013806:	2b06      	cmp	r3, #6
 8013808:	d824      	bhi.n	8013854 <_scanf_float+0x2f4>
 801380a:	2d02      	cmp	r5, #2
 801380c:	d836      	bhi.n	801387c <_scanf_float+0x31c>
 801380e:	9b01      	ldr	r3, [sp, #4]
 8013810:	429e      	cmp	r6, r3
 8013812:	f67f aee7 	bls.w	80135e4 <_scanf_float+0x84>
 8013816:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801381a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801381e:	464a      	mov	r2, r9
 8013820:	4640      	mov	r0, r8
 8013822:	4798      	blx	r3
 8013824:	6923      	ldr	r3, [r4, #16]
 8013826:	3b01      	subs	r3, #1
 8013828:	6123      	str	r3, [r4, #16]
 801382a:	e7f0      	b.n	801380e <_scanf_float+0x2ae>
 801382c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013830:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013834:	464a      	mov	r2, r9
 8013836:	4640      	mov	r0, r8
 8013838:	4798      	blx	r3
 801383a:	6923      	ldr	r3, [r4, #16]
 801383c:	3b01      	subs	r3, #1
 801383e:	6123      	str	r3, [r4, #16]
 8013840:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8013844:	fa5f fa8a 	uxtb.w	sl, sl
 8013848:	f1ba 0f02 	cmp.w	sl, #2
 801384c:	d1ee      	bne.n	801382c <_scanf_float+0x2cc>
 801384e:	3d03      	subs	r5, #3
 8013850:	b2ed      	uxtb	r5, r5
 8013852:	1b76      	subs	r6, r6, r5
 8013854:	6823      	ldr	r3, [r4, #0]
 8013856:	05da      	lsls	r2, r3, #23
 8013858:	d530      	bpl.n	80138bc <_scanf_float+0x35c>
 801385a:	055b      	lsls	r3, r3, #21
 801385c:	d511      	bpl.n	8013882 <_scanf_float+0x322>
 801385e:	9b01      	ldr	r3, [sp, #4]
 8013860:	429e      	cmp	r6, r3
 8013862:	f67f aebf 	bls.w	80135e4 <_scanf_float+0x84>
 8013866:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801386a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801386e:	464a      	mov	r2, r9
 8013870:	4640      	mov	r0, r8
 8013872:	4798      	blx	r3
 8013874:	6923      	ldr	r3, [r4, #16]
 8013876:	3b01      	subs	r3, #1
 8013878:	6123      	str	r3, [r4, #16]
 801387a:	e7f0      	b.n	801385e <_scanf_float+0x2fe>
 801387c:	46aa      	mov	sl, r5
 801387e:	46b3      	mov	fp, r6
 8013880:	e7de      	b.n	8013840 <_scanf_float+0x2e0>
 8013882:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013886:	6923      	ldr	r3, [r4, #16]
 8013888:	2965      	cmp	r1, #101	@ 0x65
 801388a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801388e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8013892:	6123      	str	r3, [r4, #16]
 8013894:	d00c      	beq.n	80138b0 <_scanf_float+0x350>
 8013896:	2945      	cmp	r1, #69	@ 0x45
 8013898:	d00a      	beq.n	80138b0 <_scanf_float+0x350>
 801389a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801389e:	464a      	mov	r2, r9
 80138a0:	4640      	mov	r0, r8
 80138a2:	4798      	blx	r3
 80138a4:	6923      	ldr	r3, [r4, #16]
 80138a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80138aa:	3b01      	subs	r3, #1
 80138ac:	1eb5      	subs	r5, r6, #2
 80138ae:	6123      	str	r3, [r4, #16]
 80138b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80138b4:	464a      	mov	r2, r9
 80138b6:	4640      	mov	r0, r8
 80138b8:	4798      	blx	r3
 80138ba:	462e      	mov	r6, r5
 80138bc:	6822      	ldr	r2, [r4, #0]
 80138be:	f012 0210 	ands.w	r2, r2, #16
 80138c2:	d001      	beq.n	80138c8 <_scanf_float+0x368>
 80138c4:	2000      	movs	r0, #0
 80138c6:	e68e      	b.n	80135e6 <_scanf_float+0x86>
 80138c8:	7032      	strb	r2, [r6, #0]
 80138ca:	6823      	ldr	r3, [r4, #0]
 80138cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80138d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80138d4:	d125      	bne.n	8013922 <_scanf_float+0x3c2>
 80138d6:	9b02      	ldr	r3, [sp, #8]
 80138d8:	429f      	cmp	r7, r3
 80138da:	d00a      	beq.n	80138f2 <_scanf_float+0x392>
 80138dc:	1bda      	subs	r2, r3, r7
 80138de:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80138e2:	429e      	cmp	r6, r3
 80138e4:	bf28      	it	cs
 80138e6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80138ea:	4922      	ldr	r1, [pc, #136]	@ (8013974 <_scanf_float+0x414>)
 80138ec:	4630      	mov	r0, r6
 80138ee:	f000 f87b 	bl	80139e8 <siprintf>
 80138f2:	9901      	ldr	r1, [sp, #4]
 80138f4:	2200      	movs	r2, #0
 80138f6:	4640      	mov	r0, r8
 80138f8:	f000 ffb2 	bl	8014860 <_strtod_r>
 80138fc:	9b03      	ldr	r3, [sp, #12]
 80138fe:	6821      	ldr	r1, [r4, #0]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	f011 0f02 	tst.w	r1, #2
 8013906:	ec57 6b10 	vmov	r6, r7, d0
 801390a:	f103 0204 	add.w	r2, r3, #4
 801390e:	d015      	beq.n	801393c <_scanf_float+0x3dc>
 8013910:	9903      	ldr	r1, [sp, #12]
 8013912:	600a      	str	r2, [r1, #0]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	e9c3 6700 	strd	r6, r7, [r3]
 801391a:	68e3      	ldr	r3, [r4, #12]
 801391c:	3301      	adds	r3, #1
 801391e:	60e3      	str	r3, [r4, #12]
 8013920:	e7d0      	b.n	80138c4 <_scanf_float+0x364>
 8013922:	9b04      	ldr	r3, [sp, #16]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d0e4      	beq.n	80138f2 <_scanf_float+0x392>
 8013928:	9905      	ldr	r1, [sp, #20]
 801392a:	230a      	movs	r3, #10
 801392c:	3101      	adds	r1, #1
 801392e:	4640      	mov	r0, r8
 8013930:	f001 f822 	bl	8014978 <_strtol_r>
 8013934:	9b04      	ldr	r3, [sp, #16]
 8013936:	9e05      	ldr	r6, [sp, #20]
 8013938:	1ac2      	subs	r2, r0, r3
 801393a:	e7d0      	b.n	80138de <_scanf_float+0x37e>
 801393c:	f011 0f04 	tst.w	r1, #4
 8013940:	9903      	ldr	r1, [sp, #12]
 8013942:	600a      	str	r2, [r1, #0]
 8013944:	d1e6      	bne.n	8013914 <_scanf_float+0x3b4>
 8013946:	681d      	ldr	r5, [r3, #0]
 8013948:	4632      	mov	r2, r6
 801394a:	463b      	mov	r3, r7
 801394c:	4630      	mov	r0, r6
 801394e:	4639      	mov	r1, r7
 8013950:	f7ed f8fc 	bl	8000b4c <__aeabi_dcmpun>
 8013954:	b128      	cbz	r0, 8013962 <_scanf_float+0x402>
 8013956:	4808      	ldr	r0, [pc, #32]	@ (8013978 <_scanf_float+0x418>)
 8013958:	f001 f9d6 	bl	8014d08 <nanf>
 801395c:	ed85 0a00 	vstr	s0, [r5]
 8013960:	e7db      	b.n	801391a <_scanf_float+0x3ba>
 8013962:	4630      	mov	r0, r6
 8013964:	4639      	mov	r1, r7
 8013966:	f7ed f94f 	bl	8000c08 <__aeabi_d2f>
 801396a:	6028      	str	r0, [r5, #0]
 801396c:	e7d5      	b.n	801391a <_scanf_float+0x3ba>
 801396e:	2700      	movs	r7, #0
 8013970:	e62e      	b.n	80135d0 <_scanf_float+0x70>
 8013972:	bf00      	nop
 8013974:	0801877a 	.word	0x0801877a
 8013978:	08018835 	.word	0x08018835

0801397c <sniprintf>:
 801397c:	b40c      	push	{r2, r3}
 801397e:	b530      	push	{r4, r5, lr}
 8013980:	4b18      	ldr	r3, [pc, #96]	@ (80139e4 <sniprintf+0x68>)
 8013982:	1e0c      	subs	r4, r1, #0
 8013984:	681d      	ldr	r5, [r3, #0]
 8013986:	b09d      	sub	sp, #116	@ 0x74
 8013988:	da08      	bge.n	801399c <sniprintf+0x20>
 801398a:	238b      	movs	r3, #139	@ 0x8b
 801398c:	602b      	str	r3, [r5, #0]
 801398e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013992:	b01d      	add	sp, #116	@ 0x74
 8013994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013998:	b002      	add	sp, #8
 801399a:	4770      	bx	lr
 801399c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80139a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80139a4:	f04f 0300 	mov.w	r3, #0
 80139a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80139aa:	bf14      	ite	ne
 80139ac:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80139b0:	4623      	moveq	r3, r4
 80139b2:	9304      	str	r3, [sp, #16]
 80139b4:	9307      	str	r3, [sp, #28]
 80139b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80139ba:	9002      	str	r0, [sp, #8]
 80139bc:	9006      	str	r0, [sp, #24]
 80139be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80139c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80139c4:	ab21      	add	r3, sp, #132	@ 0x84
 80139c6:	a902      	add	r1, sp, #8
 80139c8:	4628      	mov	r0, r5
 80139ca:	9301      	str	r3, [sp, #4]
 80139cc:	f002 fbf6 	bl	80161bc <_svfiprintf_r>
 80139d0:	1c43      	adds	r3, r0, #1
 80139d2:	bfbc      	itt	lt
 80139d4:	238b      	movlt	r3, #139	@ 0x8b
 80139d6:	602b      	strlt	r3, [r5, #0]
 80139d8:	2c00      	cmp	r4, #0
 80139da:	d0da      	beq.n	8013992 <sniprintf+0x16>
 80139dc:	9b02      	ldr	r3, [sp, #8]
 80139de:	2200      	movs	r2, #0
 80139e0:	701a      	strb	r2, [r3, #0]
 80139e2:	e7d6      	b.n	8013992 <sniprintf+0x16>
 80139e4:	200001d4 	.word	0x200001d4

080139e8 <siprintf>:
 80139e8:	b40e      	push	{r1, r2, r3}
 80139ea:	b510      	push	{r4, lr}
 80139ec:	b09d      	sub	sp, #116	@ 0x74
 80139ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80139f0:	9002      	str	r0, [sp, #8]
 80139f2:	9006      	str	r0, [sp, #24]
 80139f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80139f8:	480a      	ldr	r0, [pc, #40]	@ (8013a24 <siprintf+0x3c>)
 80139fa:	9107      	str	r1, [sp, #28]
 80139fc:	9104      	str	r1, [sp, #16]
 80139fe:	490a      	ldr	r1, [pc, #40]	@ (8013a28 <siprintf+0x40>)
 8013a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a04:	9105      	str	r1, [sp, #20]
 8013a06:	2400      	movs	r4, #0
 8013a08:	a902      	add	r1, sp, #8
 8013a0a:	6800      	ldr	r0, [r0, #0]
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013a10:	f002 fbd4 	bl	80161bc <_svfiprintf_r>
 8013a14:	9b02      	ldr	r3, [sp, #8]
 8013a16:	701c      	strb	r4, [r3, #0]
 8013a18:	b01d      	add	sp, #116	@ 0x74
 8013a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a1e:	b003      	add	sp, #12
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	200001d4 	.word	0x200001d4
 8013a28:	ffff0208 	.word	0xffff0208

08013a2c <siscanf>:
 8013a2c:	b40e      	push	{r1, r2, r3}
 8013a2e:	b570      	push	{r4, r5, r6, lr}
 8013a30:	b09d      	sub	sp, #116	@ 0x74
 8013a32:	ac21      	add	r4, sp, #132	@ 0x84
 8013a34:	2500      	movs	r5, #0
 8013a36:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8013a3a:	f854 6b04 	ldr.w	r6, [r4], #4
 8013a3e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013a42:	951b      	str	r5, [sp, #108]	@ 0x6c
 8013a44:	9002      	str	r0, [sp, #8]
 8013a46:	9006      	str	r0, [sp, #24]
 8013a48:	f7ec fc22 	bl	8000290 <strlen>
 8013a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8013a7c <siscanf+0x50>)
 8013a4e:	9003      	str	r0, [sp, #12]
 8013a50:	9007      	str	r0, [sp, #28]
 8013a52:	480b      	ldr	r0, [pc, #44]	@ (8013a80 <siscanf+0x54>)
 8013a54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013a5a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a5e:	4632      	mov	r2, r6
 8013a60:	4623      	mov	r3, r4
 8013a62:	a902      	add	r1, sp, #8
 8013a64:	6800      	ldr	r0, [r0, #0]
 8013a66:	950f      	str	r5, [sp, #60]	@ 0x3c
 8013a68:	9514      	str	r5, [sp, #80]	@ 0x50
 8013a6a:	9401      	str	r4, [sp, #4]
 8013a6c:	f002 fcfc 	bl	8016468 <__ssvfiscanf_r>
 8013a70:	b01d      	add	sp, #116	@ 0x74
 8013a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a76:	b003      	add	sp, #12
 8013a78:	4770      	bx	lr
 8013a7a:	bf00      	nop
 8013a7c:	08013aa7 	.word	0x08013aa7
 8013a80:	200001d4 	.word	0x200001d4

08013a84 <__sread>:
 8013a84:	b510      	push	{r4, lr}
 8013a86:	460c      	mov	r4, r1
 8013a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a8c:	f001 f8b6 	bl	8014bfc <_read_r>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	bfab      	itete	ge
 8013a94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013a96:	89a3      	ldrhlt	r3, [r4, #12]
 8013a98:	181b      	addge	r3, r3, r0
 8013a9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013a9e:	bfac      	ite	ge
 8013aa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013aa2:	81a3      	strhlt	r3, [r4, #12]
 8013aa4:	bd10      	pop	{r4, pc}

08013aa6 <__seofread>:
 8013aa6:	2000      	movs	r0, #0
 8013aa8:	4770      	bx	lr

08013aaa <__swrite>:
 8013aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aae:	461f      	mov	r7, r3
 8013ab0:	898b      	ldrh	r3, [r1, #12]
 8013ab2:	05db      	lsls	r3, r3, #23
 8013ab4:	4605      	mov	r5, r0
 8013ab6:	460c      	mov	r4, r1
 8013ab8:	4616      	mov	r6, r2
 8013aba:	d505      	bpl.n	8013ac8 <__swrite+0x1e>
 8013abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ac0:	2302      	movs	r3, #2
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	f001 f888 	bl	8014bd8 <_lseek_r>
 8013ac8:	89a3      	ldrh	r3, [r4, #12]
 8013aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ace:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013ad2:	81a3      	strh	r3, [r4, #12]
 8013ad4:	4632      	mov	r2, r6
 8013ad6:	463b      	mov	r3, r7
 8013ad8:	4628      	mov	r0, r5
 8013ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ade:	f001 b89f 	b.w	8014c20 <_write_r>

08013ae2 <__sseek>:
 8013ae2:	b510      	push	{r4, lr}
 8013ae4:	460c      	mov	r4, r1
 8013ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013aea:	f001 f875 	bl	8014bd8 <_lseek_r>
 8013aee:	1c43      	adds	r3, r0, #1
 8013af0:	89a3      	ldrh	r3, [r4, #12]
 8013af2:	bf15      	itete	ne
 8013af4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013af6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013afa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013afe:	81a3      	strheq	r3, [r4, #12]
 8013b00:	bf18      	it	ne
 8013b02:	81a3      	strhne	r3, [r4, #12]
 8013b04:	bd10      	pop	{r4, pc}

08013b06 <__sclose>:
 8013b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b0a:	f001 b8cd 	b.w	8014ca8 <_close_r>
	...

08013b10 <std>:
 8013b10:	2300      	movs	r3, #0
 8013b12:	b510      	push	{r4, lr}
 8013b14:	4604      	mov	r4, r0
 8013b16:	e9c0 3300 	strd	r3, r3, [r0]
 8013b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013b1e:	6083      	str	r3, [r0, #8]
 8013b20:	8181      	strh	r1, [r0, #12]
 8013b22:	6643      	str	r3, [r0, #100]	@ 0x64
 8013b24:	81c2      	strh	r2, [r0, #14]
 8013b26:	6183      	str	r3, [r0, #24]
 8013b28:	4619      	mov	r1, r3
 8013b2a:	2208      	movs	r2, #8
 8013b2c:	305c      	adds	r0, #92	@ 0x5c
 8013b2e:	f000 ffbd 	bl	8014aac <memset>
 8013b32:	4b0d      	ldr	r3, [pc, #52]	@ (8013b68 <std+0x58>)
 8013b34:	6263      	str	r3, [r4, #36]	@ 0x24
 8013b36:	4b0d      	ldr	r3, [pc, #52]	@ (8013b6c <std+0x5c>)
 8013b38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8013b70 <std+0x60>)
 8013b3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8013b74 <std+0x64>)
 8013b40:	6323      	str	r3, [r4, #48]	@ 0x30
 8013b42:	4b0d      	ldr	r3, [pc, #52]	@ (8013b78 <std+0x68>)
 8013b44:	6224      	str	r4, [r4, #32]
 8013b46:	429c      	cmp	r4, r3
 8013b48:	d006      	beq.n	8013b58 <std+0x48>
 8013b4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013b4e:	4294      	cmp	r4, r2
 8013b50:	d002      	beq.n	8013b58 <std+0x48>
 8013b52:	33d0      	adds	r3, #208	@ 0xd0
 8013b54:	429c      	cmp	r4, r3
 8013b56:	d105      	bne.n	8013b64 <std+0x54>
 8013b58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b60:	f001 b89a 	b.w	8014c98 <__retarget_lock_init_recursive>
 8013b64:	bd10      	pop	{r4, pc}
 8013b66:	bf00      	nop
 8013b68:	08013a85 	.word	0x08013a85
 8013b6c:	08013aab 	.word	0x08013aab
 8013b70:	08013ae3 	.word	0x08013ae3
 8013b74:	08013b07 	.word	0x08013b07
 8013b78:	2000666c 	.word	0x2000666c

08013b7c <stdio_exit_handler>:
 8013b7c:	4a02      	ldr	r2, [pc, #8]	@ (8013b88 <stdio_exit_handler+0xc>)
 8013b7e:	4903      	ldr	r1, [pc, #12]	@ (8013b8c <stdio_exit_handler+0x10>)
 8013b80:	4803      	ldr	r0, [pc, #12]	@ (8013b90 <stdio_exit_handler+0x14>)
 8013b82:	f000 bf05 	b.w	8014990 <_fwalk_sglue>
 8013b86:	bf00      	nop
 8013b88:	2000005c 	.word	0x2000005c
 8013b8c:	08016f69 	.word	0x08016f69
 8013b90:	200001d8 	.word	0x200001d8

08013b94 <cleanup_stdio>:
 8013b94:	6841      	ldr	r1, [r0, #4]
 8013b96:	4b0c      	ldr	r3, [pc, #48]	@ (8013bc8 <cleanup_stdio+0x34>)
 8013b98:	4299      	cmp	r1, r3
 8013b9a:	b510      	push	{r4, lr}
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	d001      	beq.n	8013ba4 <cleanup_stdio+0x10>
 8013ba0:	f003 f9e2 	bl	8016f68 <_fflush_r>
 8013ba4:	68a1      	ldr	r1, [r4, #8]
 8013ba6:	4b09      	ldr	r3, [pc, #36]	@ (8013bcc <cleanup_stdio+0x38>)
 8013ba8:	4299      	cmp	r1, r3
 8013baa:	d002      	beq.n	8013bb2 <cleanup_stdio+0x1e>
 8013bac:	4620      	mov	r0, r4
 8013bae:	f003 f9db 	bl	8016f68 <_fflush_r>
 8013bb2:	68e1      	ldr	r1, [r4, #12]
 8013bb4:	4b06      	ldr	r3, [pc, #24]	@ (8013bd0 <cleanup_stdio+0x3c>)
 8013bb6:	4299      	cmp	r1, r3
 8013bb8:	d004      	beq.n	8013bc4 <cleanup_stdio+0x30>
 8013bba:	4620      	mov	r0, r4
 8013bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bc0:	f003 b9d2 	b.w	8016f68 <_fflush_r>
 8013bc4:	bd10      	pop	{r4, pc}
 8013bc6:	bf00      	nop
 8013bc8:	2000666c 	.word	0x2000666c
 8013bcc:	200066d4 	.word	0x200066d4
 8013bd0:	2000673c 	.word	0x2000673c

08013bd4 <global_stdio_init.part.0>:
 8013bd4:	b510      	push	{r4, lr}
 8013bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8013c04 <global_stdio_init.part.0+0x30>)
 8013bd8:	4c0b      	ldr	r4, [pc, #44]	@ (8013c08 <global_stdio_init.part.0+0x34>)
 8013bda:	4a0c      	ldr	r2, [pc, #48]	@ (8013c0c <global_stdio_init.part.0+0x38>)
 8013bdc:	601a      	str	r2, [r3, #0]
 8013bde:	4620      	mov	r0, r4
 8013be0:	2200      	movs	r2, #0
 8013be2:	2104      	movs	r1, #4
 8013be4:	f7ff ff94 	bl	8013b10 <std>
 8013be8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013bec:	2201      	movs	r2, #1
 8013bee:	2109      	movs	r1, #9
 8013bf0:	f7ff ff8e 	bl	8013b10 <std>
 8013bf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013bf8:	2202      	movs	r2, #2
 8013bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013bfe:	2112      	movs	r1, #18
 8013c00:	f7ff bf86 	b.w	8013b10 <std>
 8013c04:	200067a4 	.word	0x200067a4
 8013c08:	2000666c 	.word	0x2000666c
 8013c0c:	08013b7d 	.word	0x08013b7d

08013c10 <__sfp_lock_acquire>:
 8013c10:	4801      	ldr	r0, [pc, #4]	@ (8013c18 <__sfp_lock_acquire+0x8>)
 8013c12:	f001 b842 	b.w	8014c9a <__retarget_lock_acquire_recursive>
 8013c16:	bf00      	nop
 8013c18:	200067a9 	.word	0x200067a9

08013c1c <__sfp_lock_release>:
 8013c1c:	4801      	ldr	r0, [pc, #4]	@ (8013c24 <__sfp_lock_release+0x8>)
 8013c1e:	f001 b83d 	b.w	8014c9c <__retarget_lock_release_recursive>
 8013c22:	bf00      	nop
 8013c24:	200067a9 	.word	0x200067a9

08013c28 <__sinit>:
 8013c28:	b510      	push	{r4, lr}
 8013c2a:	4604      	mov	r4, r0
 8013c2c:	f7ff fff0 	bl	8013c10 <__sfp_lock_acquire>
 8013c30:	6a23      	ldr	r3, [r4, #32]
 8013c32:	b11b      	cbz	r3, 8013c3c <__sinit+0x14>
 8013c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c38:	f7ff bff0 	b.w	8013c1c <__sfp_lock_release>
 8013c3c:	4b04      	ldr	r3, [pc, #16]	@ (8013c50 <__sinit+0x28>)
 8013c3e:	6223      	str	r3, [r4, #32]
 8013c40:	4b04      	ldr	r3, [pc, #16]	@ (8013c54 <__sinit+0x2c>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d1f5      	bne.n	8013c34 <__sinit+0xc>
 8013c48:	f7ff ffc4 	bl	8013bd4 <global_stdio_init.part.0>
 8013c4c:	e7f2      	b.n	8013c34 <__sinit+0xc>
 8013c4e:	bf00      	nop
 8013c50:	08013b95 	.word	0x08013b95
 8013c54:	200067a4 	.word	0x200067a4

08013c58 <sulp>:
 8013c58:	b570      	push	{r4, r5, r6, lr}
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	460d      	mov	r5, r1
 8013c5e:	ec45 4b10 	vmov	d0, r4, r5
 8013c62:	4616      	mov	r6, r2
 8013c64:	f003 fd20 	bl	80176a8 <__ulp>
 8013c68:	ec51 0b10 	vmov	r0, r1, d0
 8013c6c:	b17e      	cbz	r6, 8013c8e <sulp+0x36>
 8013c6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013c72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	dd09      	ble.n	8013c8e <sulp+0x36>
 8013c7a:	051b      	lsls	r3, r3, #20
 8013c7c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013c80:	2400      	movs	r4, #0
 8013c82:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013c86:	4622      	mov	r2, r4
 8013c88:	462b      	mov	r3, r5
 8013c8a:	f7ec fcc5 	bl	8000618 <__aeabi_dmul>
 8013c8e:	ec41 0b10 	vmov	d0, r0, r1
 8013c92:	bd70      	pop	{r4, r5, r6, pc}
 8013c94:	0000      	movs	r0, r0
	...

08013c98 <_strtod_l>:
 8013c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c9c:	b09f      	sub	sp, #124	@ 0x7c
 8013c9e:	460c      	mov	r4, r1
 8013ca0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	921a      	str	r2, [sp, #104]	@ 0x68
 8013ca6:	9005      	str	r0, [sp, #20]
 8013ca8:	f04f 0a00 	mov.w	sl, #0
 8013cac:	f04f 0b00 	mov.w	fp, #0
 8013cb0:	460a      	mov	r2, r1
 8013cb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8013cb4:	7811      	ldrb	r1, [r2, #0]
 8013cb6:	292b      	cmp	r1, #43	@ 0x2b
 8013cb8:	d04a      	beq.n	8013d50 <_strtod_l+0xb8>
 8013cba:	d838      	bhi.n	8013d2e <_strtod_l+0x96>
 8013cbc:	290d      	cmp	r1, #13
 8013cbe:	d832      	bhi.n	8013d26 <_strtod_l+0x8e>
 8013cc0:	2908      	cmp	r1, #8
 8013cc2:	d832      	bhi.n	8013d2a <_strtod_l+0x92>
 8013cc4:	2900      	cmp	r1, #0
 8013cc6:	d03b      	beq.n	8013d40 <_strtod_l+0xa8>
 8013cc8:	2200      	movs	r2, #0
 8013cca:	920e      	str	r2, [sp, #56]	@ 0x38
 8013ccc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013cce:	782a      	ldrb	r2, [r5, #0]
 8013cd0:	2a30      	cmp	r2, #48	@ 0x30
 8013cd2:	f040 80b2 	bne.w	8013e3a <_strtod_l+0x1a2>
 8013cd6:	786a      	ldrb	r2, [r5, #1]
 8013cd8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013cdc:	2a58      	cmp	r2, #88	@ 0x58
 8013cde:	d16e      	bne.n	8013dbe <_strtod_l+0x126>
 8013ce0:	9302      	str	r3, [sp, #8]
 8013ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ce4:	9301      	str	r3, [sp, #4]
 8013ce6:	ab1a      	add	r3, sp, #104	@ 0x68
 8013ce8:	9300      	str	r3, [sp, #0]
 8013cea:	4a8f      	ldr	r2, [pc, #572]	@ (8013f28 <_strtod_l+0x290>)
 8013cec:	9805      	ldr	r0, [sp, #20]
 8013cee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013cf0:	a919      	add	r1, sp, #100	@ 0x64
 8013cf2:	f001 ff37 	bl	8015b64 <__gethex>
 8013cf6:	f010 060f 	ands.w	r6, r0, #15
 8013cfa:	4604      	mov	r4, r0
 8013cfc:	d005      	beq.n	8013d0a <_strtod_l+0x72>
 8013cfe:	2e06      	cmp	r6, #6
 8013d00:	d128      	bne.n	8013d54 <_strtod_l+0xbc>
 8013d02:	3501      	adds	r5, #1
 8013d04:	2300      	movs	r3, #0
 8013d06:	9519      	str	r5, [sp, #100]	@ 0x64
 8013d08:	930e      	str	r3, [sp, #56]	@ 0x38
 8013d0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	f040 858e 	bne.w	801482e <_strtod_l+0xb96>
 8013d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d14:	b1cb      	cbz	r3, 8013d4a <_strtod_l+0xb2>
 8013d16:	4652      	mov	r2, sl
 8013d18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013d1c:	ec43 2b10 	vmov	d0, r2, r3
 8013d20:	b01f      	add	sp, #124	@ 0x7c
 8013d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d26:	2920      	cmp	r1, #32
 8013d28:	d1ce      	bne.n	8013cc8 <_strtod_l+0x30>
 8013d2a:	3201      	adds	r2, #1
 8013d2c:	e7c1      	b.n	8013cb2 <_strtod_l+0x1a>
 8013d2e:	292d      	cmp	r1, #45	@ 0x2d
 8013d30:	d1ca      	bne.n	8013cc8 <_strtod_l+0x30>
 8013d32:	2101      	movs	r1, #1
 8013d34:	910e      	str	r1, [sp, #56]	@ 0x38
 8013d36:	1c51      	adds	r1, r2, #1
 8013d38:	9119      	str	r1, [sp, #100]	@ 0x64
 8013d3a:	7852      	ldrb	r2, [r2, #1]
 8013d3c:	2a00      	cmp	r2, #0
 8013d3e:	d1c5      	bne.n	8013ccc <_strtod_l+0x34>
 8013d40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013d42:	9419      	str	r4, [sp, #100]	@ 0x64
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f040 8570 	bne.w	801482a <_strtod_l+0xb92>
 8013d4a:	4652      	mov	r2, sl
 8013d4c:	465b      	mov	r3, fp
 8013d4e:	e7e5      	b.n	8013d1c <_strtod_l+0x84>
 8013d50:	2100      	movs	r1, #0
 8013d52:	e7ef      	b.n	8013d34 <_strtod_l+0x9c>
 8013d54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013d56:	b13a      	cbz	r2, 8013d68 <_strtod_l+0xd0>
 8013d58:	2135      	movs	r1, #53	@ 0x35
 8013d5a:	a81c      	add	r0, sp, #112	@ 0x70
 8013d5c:	f003 fd9e 	bl	801789c <__copybits>
 8013d60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013d62:	9805      	ldr	r0, [sp, #20]
 8013d64:	f003 f974 	bl	8017050 <_Bfree>
 8013d68:	3e01      	subs	r6, #1
 8013d6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013d6c:	2e04      	cmp	r6, #4
 8013d6e:	d806      	bhi.n	8013d7e <_strtod_l+0xe6>
 8013d70:	e8df f006 	tbb	[pc, r6]
 8013d74:	201d0314 	.word	0x201d0314
 8013d78:	14          	.byte	0x14
 8013d79:	00          	.byte	0x00
 8013d7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013d7e:	05e1      	lsls	r1, r4, #23
 8013d80:	bf48      	it	mi
 8013d82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013d86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013d8a:	0d1b      	lsrs	r3, r3, #20
 8013d8c:	051b      	lsls	r3, r3, #20
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d1bb      	bne.n	8013d0a <_strtod_l+0x72>
 8013d92:	f000 ff57 	bl	8014c44 <__errno>
 8013d96:	2322      	movs	r3, #34	@ 0x22
 8013d98:	6003      	str	r3, [r0, #0]
 8013d9a:	e7b6      	b.n	8013d0a <_strtod_l+0x72>
 8013d9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013da0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013da4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013da8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013dac:	e7e7      	b.n	8013d7e <_strtod_l+0xe6>
 8013dae:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013f30 <_strtod_l+0x298>
 8013db2:	e7e4      	b.n	8013d7e <_strtod_l+0xe6>
 8013db4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013db8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013dbc:	e7df      	b.n	8013d7e <_strtod_l+0xe6>
 8013dbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013dc0:	1c5a      	adds	r2, r3, #1
 8013dc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8013dc4:	785b      	ldrb	r3, [r3, #1]
 8013dc6:	2b30      	cmp	r3, #48	@ 0x30
 8013dc8:	d0f9      	beq.n	8013dbe <_strtod_l+0x126>
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d09d      	beq.n	8013d0a <_strtod_l+0x72>
 8013dce:	2301      	movs	r3, #1
 8013dd0:	2700      	movs	r7, #0
 8013dd2:	9308      	str	r3, [sp, #32]
 8013dd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013dd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8013dd8:	970b      	str	r7, [sp, #44]	@ 0x2c
 8013dda:	46b9      	mov	r9, r7
 8013ddc:	220a      	movs	r2, #10
 8013dde:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013de0:	7805      	ldrb	r5, [r0, #0]
 8013de2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013de6:	b2d9      	uxtb	r1, r3
 8013de8:	2909      	cmp	r1, #9
 8013dea:	d928      	bls.n	8013e3e <_strtod_l+0x1a6>
 8013dec:	494f      	ldr	r1, [pc, #316]	@ (8013f2c <_strtod_l+0x294>)
 8013dee:	2201      	movs	r2, #1
 8013df0:	f000 fe71 	bl	8014ad6 <strncmp>
 8013df4:	2800      	cmp	r0, #0
 8013df6:	d032      	beq.n	8013e5e <_strtod_l+0x1c6>
 8013df8:	2000      	movs	r0, #0
 8013dfa:	462a      	mov	r2, r5
 8013dfc:	900a      	str	r0, [sp, #40]	@ 0x28
 8013dfe:	464d      	mov	r5, r9
 8013e00:	4603      	mov	r3, r0
 8013e02:	2a65      	cmp	r2, #101	@ 0x65
 8013e04:	d001      	beq.n	8013e0a <_strtod_l+0x172>
 8013e06:	2a45      	cmp	r2, #69	@ 0x45
 8013e08:	d114      	bne.n	8013e34 <_strtod_l+0x19c>
 8013e0a:	b91d      	cbnz	r5, 8013e14 <_strtod_l+0x17c>
 8013e0c:	9a08      	ldr	r2, [sp, #32]
 8013e0e:	4302      	orrs	r2, r0
 8013e10:	d096      	beq.n	8013d40 <_strtod_l+0xa8>
 8013e12:	2500      	movs	r5, #0
 8013e14:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013e16:	1c62      	adds	r2, r4, #1
 8013e18:	9219      	str	r2, [sp, #100]	@ 0x64
 8013e1a:	7862      	ldrb	r2, [r4, #1]
 8013e1c:	2a2b      	cmp	r2, #43	@ 0x2b
 8013e1e:	d07a      	beq.n	8013f16 <_strtod_l+0x27e>
 8013e20:	2a2d      	cmp	r2, #45	@ 0x2d
 8013e22:	d07e      	beq.n	8013f22 <_strtod_l+0x28a>
 8013e24:	f04f 0c00 	mov.w	ip, #0
 8013e28:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013e2c:	2909      	cmp	r1, #9
 8013e2e:	f240 8085 	bls.w	8013f3c <_strtod_l+0x2a4>
 8013e32:	9419      	str	r4, [sp, #100]	@ 0x64
 8013e34:	f04f 0800 	mov.w	r8, #0
 8013e38:	e0a5      	b.n	8013f86 <_strtod_l+0x2ee>
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	e7c8      	b.n	8013dd0 <_strtod_l+0x138>
 8013e3e:	f1b9 0f08 	cmp.w	r9, #8
 8013e42:	bfd8      	it	le
 8013e44:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8013e46:	f100 0001 	add.w	r0, r0, #1
 8013e4a:	bfda      	itte	le
 8013e4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013e50:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8013e52:	fb02 3707 	mlagt	r7, r2, r7, r3
 8013e56:	f109 0901 	add.w	r9, r9, #1
 8013e5a:	9019      	str	r0, [sp, #100]	@ 0x64
 8013e5c:	e7bf      	b.n	8013dde <_strtod_l+0x146>
 8013e5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013e60:	1c5a      	adds	r2, r3, #1
 8013e62:	9219      	str	r2, [sp, #100]	@ 0x64
 8013e64:	785a      	ldrb	r2, [r3, #1]
 8013e66:	f1b9 0f00 	cmp.w	r9, #0
 8013e6a:	d03b      	beq.n	8013ee4 <_strtod_l+0x24c>
 8013e6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8013e6e:	464d      	mov	r5, r9
 8013e70:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013e74:	2b09      	cmp	r3, #9
 8013e76:	d912      	bls.n	8013e9e <_strtod_l+0x206>
 8013e78:	2301      	movs	r3, #1
 8013e7a:	e7c2      	b.n	8013e02 <_strtod_l+0x16a>
 8013e7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013e7e:	1c5a      	adds	r2, r3, #1
 8013e80:	9219      	str	r2, [sp, #100]	@ 0x64
 8013e82:	785a      	ldrb	r2, [r3, #1]
 8013e84:	3001      	adds	r0, #1
 8013e86:	2a30      	cmp	r2, #48	@ 0x30
 8013e88:	d0f8      	beq.n	8013e7c <_strtod_l+0x1e4>
 8013e8a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013e8e:	2b08      	cmp	r3, #8
 8013e90:	f200 84d2 	bhi.w	8014838 <_strtod_l+0xba0>
 8013e94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013e96:	900a      	str	r0, [sp, #40]	@ 0x28
 8013e98:	2000      	movs	r0, #0
 8013e9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8013e9c:	4605      	mov	r5, r0
 8013e9e:	3a30      	subs	r2, #48	@ 0x30
 8013ea0:	f100 0301 	add.w	r3, r0, #1
 8013ea4:	d018      	beq.n	8013ed8 <_strtod_l+0x240>
 8013ea6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013ea8:	4419      	add	r1, r3
 8013eaa:	910a      	str	r1, [sp, #40]	@ 0x28
 8013eac:	462e      	mov	r6, r5
 8013eae:	f04f 0e0a 	mov.w	lr, #10
 8013eb2:	1c71      	adds	r1, r6, #1
 8013eb4:	eba1 0c05 	sub.w	ip, r1, r5
 8013eb8:	4563      	cmp	r3, ip
 8013eba:	dc15      	bgt.n	8013ee8 <_strtod_l+0x250>
 8013ebc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013ec0:	182b      	adds	r3, r5, r0
 8013ec2:	2b08      	cmp	r3, #8
 8013ec4:	f105 0501 	add.w	r5, r5, #1
 8013ec8:	4405      	add	r5, r0
 8013eca:	dc1a      	bgt.n	8013f02 <_strtod_l+0x26a>
 8013ecc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013ece:	230a      	movs	r3, #10
 8013ed0:	fb03 2301 	mla	r3, r3, r1, r2
 8013ed4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013eda:	1c51      	adds	r1, r2, #1
 8013edc:	9119      	str	r1, [sp, #100]	@ 0x64
 8013ede:	7852      	ldrb	r2, [r2, #1]
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	e7c5      	b.n	8013e70 <_strtod_l+0x1d8>
 8013ee4:	4648      	mov	r0, r9
 8013ee6:	e7ce      	b.n	8013e86 <_strtod_l+0x1ee>
 8013ee8:	2e08      	cmp	r6, #8
 8013eea:	dc05      	bgt.n	8013ef8 <_strtod_l+0x260>
 8013eec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013eee:	fb0e f606 	mul.w	r6, lr, r6
 8013ef2:	960b      	str	r6, [sp, #44]	@ 0x2c
 8013ef4:	460e      	mov	r6, r1
 8013ef6:	e7dc      	b.n	8013eb2 <_strtod_l+0x21a>
 8013ef8:	2910      	cmp	r1, #16
 8013efa:	bfd8      	it	le
 8013efc:	fb0e f707 	mulle.w	r7, lr, r7
 8013f00:	e7f8      	b.n	8013ef4 <_strtod_l+0x25c>
 8013f02:	2b0f      	cmp	r3, #15
 8013f04:	bfdc      	itt	le
 8013f06:	230a      	movle	r3, #10
 8013f08:	fb03 2707 	mlale	r7, r3, r7, r2
 8013f0c:	e7e3      	b.n	8013ed6 <_strtod_l+0x23e>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f12:	2301      	movs	r3, #1
 8013f14:	e77a      	b.n	8013e0c <_strtod_l+0x174>
 8013f16:	f04f 0c00 	mov.w	ip, #0
 8013f1a:	1ca2      	adds	r2, r4, #2
 8013f1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8013f1e:	78a2      	ldrb	r2, [r4, #2]
 8013f20:	e782      	b.n	8013e28 <_strtod_l+0x190>
 8013f22:	f04f 0c01 	mov.w	ip, #1
 8013f26:	e7f8      	b.n	8013f1a <_strtod_l+0x282>
 8013f28:	080189a8 	.word	0x080189a8
 8013f2c:	0801877f 	.word	0x0801877f
 8013f30:	7ff00000 	.word	0x7ff00000
 8013f34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013f36:	1c51      	adds	r1, r2, #1
 8013f38:	9119      	str	r1, [sp, #100]	@ 0x64
 8013f3a:	7852      	ldrb	r2, [r2, #1]
 8013f3c:	2a30      	cmp	r2, #48	@ 0x30
 8013f3e:	d0f9      	beq.n	8013f34 <_strtod_l+0x29c>
 8013f40:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013f44:	2908      	cmp	r1, #8
 8013f46:	f63f af75 	bhi.w	8013e34 <_strtod_l+0x19c>
 8013f4a:	3a30      	subs	r2, #48	@ 0x30
 8013f4c:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013f50:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013f52:	f04f 080a 	mov.w	r8, #10
 8013f56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013f58:	1c56      	adds	r6, r2, #1
 8013f5a:	9619      	str	r6, [sp, #100]	@ 0x64
 8013f5c:	7852      	ldrb	r2, [r2, #1]
 8013f5e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013f62:	f1be 0f09 	cmp.w	lr, #9
 8013f66:	d939      	bls.n	8013fdc <_strtod_l+0x344>
 8013f68:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013f6a:	1a76      	subs	r6, r6, r1
 8013f6c:	2e08      	cmp	r6, #8
 8013f6e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013f72:	dc03      	bgt.n	8013f7c <_strtod_l+0x2e4>
 8013f74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013f76:	4588      	cmp	r8, r1
 8013f78:	bfa8      	it	ge
 8013f7a:	4688      	movge	r8, r1
 8013f7c:	f1bc 0f00 	cmp.w	ip, #0
 8013f80:	d001      	beq.n	8013f86 <_strtod_l+0x2ee>
 8013f82:	f1c8 0800 	rsb	r8, r8, #0
 8013f86:	2d00      	cmp	r5, #0
 8013f88:	d14e      	bne.n	8014028 <_strtod_l+0x390>
 8013f8a:	9908      	ldr	r1, [sp, #32]
 8013f8c:	4308      	orrs	r0, r1
 8013f8e:	f47f aebc 	bne.w	8013d0a <_strtod_l+0x72>
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	f47f aed4 	bne.w	8013d40 <_strtod_l+0xa8>
 8013f98:	2a69      	cmp	r2, #105	@ 0x69
 8013f9a:	d028      	beq.n	8013fee <_strtod_l+0x356>
 8013f9c:	dc25      	bgt.n	8013fea <_strtod_l+0x352>
 8013f9e:	2a49      	cmp	r2, #73	@ 0x49
 8013fa0:	d025      	beq.n	8013fee <_strtod_l+0x356>
 8013fa2:	2a4e      	cmp	r2, #78	@ 0x4e
 8013fa4:	f47f aecc 	bne.w	8013d40 <_strtod_l+0xa8>
 8013fa8:	499a      	ldr	r1, [pc, #616]	@ (8014214 <_strtod_l+0x57c>)
 8013faa:	a819      	add	r0, sp, #100	@ 0x64
 8013fac:	f001 fffc 	bl	8015fa8 <__match>
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	f43f aec5 	beq.w	8013d40 <_strtod_l+0xa8>
 8013fb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013fb8:	781b      	ldrb	r3, [r3, #0]
 8013fba:	2b28      	cmp	r3, #40	@ 0x28
 8013fbc:	d12e      	bne.n	801401c <_strtod_l+0x384>
 8013fbe:	4996      	ldr	r1, [pc, #600]	@ (8014218 <_strtod_l+0x580>)
 8013fc0:	aa1c      	add	r2, sp, #112	@ 0x70
 8013fc2:	a819      	add	r0, sp, #100	@ 0x64
 8013fc4:	f002 f804 	bl	8015fd0 <__hexnan>
 8013fc8:	2805      	cmp	r0, #5
 8013fca:	d127      	bne.n	801401c <_strtod_l+0x384>
 8013fcc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013fce:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013fd2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013fd6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013fda:	e696      	b.n	8013d0a <_strtod_l+0x72>
 8013fdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013fde:	fb08 2101 	mla	r1, r8, r1, r2
 8013fe2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013fe6:	9209      	str	r2, [sp, #36]	@ 0x24
 8013fe8:	e7b5      	b.n	8013f56 <_strtod_l+0x2be>
 8013fea:	2a6e      	cmp	r2, #110	@ 0x6e
 8013fec:	e7da      	b.n	8013fa4 <_strtod_l+0x30c>
 8013fee:	498b      	ldr	r1, [pc, #556]	@ (801421c <_strtod_l+0x584>)
 8013ff0:	a819      	add	r0, sp, #100	@ 0x64
 8013ff2:	f001 ffd9 	bl	8015fa8 <__match>
 8013ff6:	2800      	cmp	r0, #0
 8013ff8:	f43f aea2 	beq.w	8013d40 <_strtod_l+0xa8>
 8013ffc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ffe:	4988      	ldr	r1, [pc, #544]	@ (8014220 <_strtod_l+0x588>)
 8014000:	3b01      	subs	r3, #1
 8014002:	a819      	add	r0, sp, #100	@ 0x64
 8014004:	9319      	str	r3, [sp, #100]	@ 0x64
 8014006:	f001 ffcf 	bl	8015fa8 <__match>
 801400a:	b910      	cbnz	r0, 8014012 <_strtod_l+0x37a>
 801400c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801400e:	3301      	adds	r3, #1
 8014010:	9319      	str	r3, [sp, #100]	@ 0x64
 8014012:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8014230 <_strtod_l+0x598>
 8014016:	f04f 0a00 	mov.w	sl, #0
 801401a:	e676      	b.n	8013d0a <_strtod_l+0x72>
 801401c:	4881      	ldr	r0, [pc, #516]	@ (8014224 <_strtod_l+0x58c>)
 801401e:	f000 fe6b 	bl	8014cf8 <nan>
 8014022:	ec5b ab10 	vmov	sl, fp, d0
 8014026:	e670      	b.n	8013d0a <_strtod_l+0x72>
 8014028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801402a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801402c:	eba8 0303 	sub.w	r3, r8, r3
 8014030:	f1b9 0f00 	cmp.w	r9, #0
 8014034:	bf08      	it	eq
 8014036:	46a9      	moveq	r9, r5
 8014038:	2d10      	cmp	r5, #16
 801403a:	9309      	str	r3, [sp, #36]	@ 0x24
 801403c:	462c      	mov	r4, r5
 801403e:	bfa8      	it	ge
 8014040:	2410      	movge	r4, #16
 8014042:	f7ec fa6f 	bl	8000524 <__aeabi_ui2d>
 8014046:	2d09      	cmp	r5, #9
 8014048:	4682      	mov	sl, r0
 801404a:	468b      	mov	fp, r1
 801404c:	dc13      	bgt.n	8014076 <_strtod_l+0x3de>
 801404e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014050:	2b00      	cmp	r3, #0
 8014052:	f43f ae5a 	beq.w	8013d0a <_strtod_l+0x72>
 8014056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014058:	dd78      	ble.n	801414c <_strtod_l+0x4b4>
 801405a:	2b16      	cmp	r3, #22
 801405c:	dc5f      	bgt.n	801411e <_strtod_l+0x486>
 801405e:	4972      	ldr	r1, [pc, #456]	@ (8014228 <_strtod_l+0x590>)
 8014060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014068:	4652      	mov	r2, sl
 801406a:	465b      	mov	r3, fp
 801406c:	f7ec fad4 	bl	8000618 <__aeabi_dmul>
 8014070:	4682      	mov	sl, r0
 8014072:	468b      	mov	fp, r1
 8014074:	e649      	b.n	8013d0a <_strtod_l+0x72>
 8014076:	4b6c      	ldr	r3, [pc, #432]	@ (8014228 <_strtod_l+0x590>)
 8014078:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801407c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8014080:	f7ec faca 	bl	8000618 <__aeabi_dmul>
 8014084:	4682      	mov	sl, r0
 8014086:	4638      	mov	r0, r7
 8014088:	468b      	mov	fp, r1
 801408a:	f7ec fa4b 	bl	8000524 <__aeabi_ui2d>
 801408e:	4602      	mov	r2, r0
 8014090:	460b      	mov	r3, r1
 8014092:	4650      	mov	r0, sl
 8014094:	4659      	mov	r1, fp
 8014096:	f7ec f909 	bl	80002ac <__adddf3>
 801409a:	2d0f      	cmp	r5, #15
 801409c:	4682      	mov	sl, r0
 801409e:	468b      	mov	fp, r1
 80140a0:	ddd5      	ble.n	801404e <_strtod_l+0x3b6>
 80140a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140a4:	1b2c      	subs	r4, r5, r4
 80140a6:	441c      	add	r4, r3
 80140a8:	2c00      	cmp	r4, #0
 80140aa:	f340 8093 	ble.w	80141d4 <_strtod_l+0x53c>
 80140ae:	f014 030f 	ands.w	r3, r4, #15
 80140b2:	d00a      	beq.n	80140ca <_strtod_l+0x432>
 80140b4:	495c      	ldr	r1, [pc, #368]	@ (8014228 <_strtod_l+0x590>)
 80140b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80140ba:	4652      	mov	r2, sl
 80140bc:	465b      	mov	r3, fp
 80140be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140c2:	f7ec faa9 	bl	8000618 <__aeabi_dmul>
 80140c6:	4682      	mov	sl, r0
 80140c8:	468b      	mov	fp, r1
 80140ca:	f034 040f 	bics.w	r4, r4, #15
 80140ce:	d073      	beq.n	80141b8 <_strtod_l+0x520>
 80140d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80140d4:	dd49      	ble.n	801416a <_strtod_l+0x4d2>
 80140d6:	2400      	movs	r4, #0
 80140d8:	46a0      	mov	r8, r4
 80140da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80140dc:	46a1      	mov	r9, r4
 80140de:	9a05      	ldr	r2, [sp, #20]
 80140e0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8014230 <_strtod_l+0x598>
 80140e4:	2322      	movs	r3, #34	@ 0x22
 80140e6:	6013      	str	r3, [r2, #0]
 80140e8:	f04f 0a00 	mov.w	sl, #0
 80140ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	f43f ae0b 	beq.w	8013d0a <_strtod_l+0x72>
 80140f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80140f6:	9805      	ldr	r0, [sp, #20]
 80140f8:	f002 ffaa 	bl	8017050 <_Bfree>
 80140fc:	9805      	ldr	r0, [sp, #20]
 80140fe:	4649      	mov	r1, r9
 8014100:	f002 ffa6 	bl	8017050 <_Bfree>
 8014104:	9805      	ldr	r0, [sp, #20]
 8014106:	4641      	mov	r1, r8
 8014108:	f002 ffa2 	bl	8017050 <_Bfree>
 801410c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801410e:	9805      	ldr	r0, [sp, #20]
 8014110:	f002 ff9e 	bl	8017050 <_Bfree>
 8014114:	9805      	ldr	r0, [sp, #20]
 8014116:	4621      	mov	r1, r4
 8014118:	f002 ff9a 	bl	8017050 <_Bfree>
 801411c:	e5f5      	b.n	8013d0a <_strtod_l+0x72>
 801411e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014120:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8014124:	4293      	cmp	r3, r2
 8014126:	dbbc      	blt.n	80140a2 <_strtod_l+0x40a>
 8014128:	4c3f      	ldr	r4, [pc, #252]	@ (8014228 <_strtod_l+0x590>)
 801412a:	f1c5 050f 	rsb	r5, r5, #15
 801412e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8014132:	4652      	mov	r2, sl
 8014134:	465b      	mov	r3, fp
 8014136:	e9d1 0100 	ldrd	r0, r1, [r1]
 801413a:	f7ec fa6d 	bl	8000618 <__aeabi_dmul>
 801413e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014140:	1b5d      	subs	r5, r3, r5
 8014142:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8014146:	e9d4 2300 	ldrd	r2, r3, [r4]
 801414a:	e78f      	b.n	801406c <_strtod_l+0x3d4>
 801414c:	3316      	adds	r3, #22
 801414e:	dba8      	blt.n	80140a2 <_strtod_l+0x40a>
 8014150:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014152:	eba3 0808 	sub.w	r8, r3, r8
 8014156:	4b34      	ldr	r3, [pc, #208]	@ (8014228 <_strtod_l+0x590>)
 8014158:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801415c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8014160:	4650      	mov	r0, sl
 8014162:	4659      	mov	r1, fp
 8014164:	f7ec fb82 	bl	800086c <__aeabi_ddiv>
 8014168:	e782      	b.n	8014070 <_strtod_l+0x3d8>
 801416a:	2300      	movs	r3, #0
 801416c:	4f2f      	ldr	r7, [pc, #188]	@ (801422c <_strtod_l+0x594>)
 801416e:	1124      	asrs	r4, r4, #4
 8014170:	4650      	mov	r0, sl
 8014172:	4659      	mov	r1, fp
 8014174:	461e      	mov	r6, r3
 8014176:	2c01      	cmp	r4, #1
 8014178:	dc21      	bgt.n	80141be <_strtod_l+0x526>
 801417a:	b10b      	cbz	r3, 8014180 <_strtod_l+0x4e8>
 801417c:	4682      	mov	sl, r0
 801417e:	468b      	mov	fp, r1
 8014180:	492a      	ldr	r1, [pc, #168]	@ (801422c <_strtod_l+0x594>)
 8014182:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8014186:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801418a:	4652      	mov	r2, sl
 801418c:	465b      	mov	r3, fp
 801418e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014192:	f7ec fa41 	bl	8000618 <__aeabi_dmul>
 8014196:	4b26      	ldr	r3, [pc, #152]	@ (8014230 <_strtod_l+0x598>)
 8014198:	460a      	mov	r2, r1
 801419a:	400b      	ands	r3, r1
 801419c:	4925      	ldr	r1, [pc, #148]	@ (8014234 <_strtod_l+0x59c>)
 801419e:	428b      	cmp	r3, r1
 80141a0:	4682      	mov	sl, r0
 80141a2:	d898      	bhi.n	80140d6 <_strtod_l+0x43e>
 80141a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80141a8:	428b      	cmp	r3, r1
 80141aa:	bf86      	itte	hi
 80141ac:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8014238 <_strtod_l+0x5a0>
 80141b0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80141b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80141b8:	2300      	movs	r3, #0
 80141ba:	9308      	str	r3, [sp, #32]
 80141bc:	e076      	b.n	80142ac <_strtod_l+0x614>
 80141be:	07e2      	lsls	r2, r4, #31
 80141c0:	d504      	bpl.n	80141cc <_strtod_l+0x534>
 80141c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80141c6:	f7ec fa27 	bl	8000618 <__aeabi_dmul>
 80141ca:	2301      	movs	r3, #1
 80141cc:	3601      	adds	r6, #1
 80141ce:	1064      	asrs	r4, r4, #1
 80141d0:	3708      	adds	r7, #8
 80141d2:	e7d0      	b.n	8014176 <_strtod_l+0x4de>
 80141d4:	d0f0      	beq.n	80141b8 <_strtod_l+0x520>
 80141d6:	4264      	negs	r4, r4
 80141d8:	f014 020f 	ands.w	r2, r4, #15
 80141dc:	d00a      	beq.n	80141f4 <_strtod_l+0x55c>
 80141de:	4b12      	ldr	r3, [pc, #72]	@ (8014228 <_strtod_l+0x590>)
 80141e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80141e4:	4650      	mov	r0, sl
 80141e6:	4659      	mov	r1, fp
 80141e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ec:	f7ec fb3e 	bl	800086c <__aeabi_ddiv>
 80141f0:	4682      	mov	sl, r0
 80141f2:	468b      	mov	fp, r1
 80141f4:	1124      	asrs	r4, r4, #4
 80141f6:	d0df      	beq.n	80141b8 <_strtod_l+0x520>
 80141f8:	2c1f      	cmp	r4, #31
 80141fa:	dd1f      	ble.n	801423c <_strtod_l+0x5a4>
 80141fc:	2400      	movs	r4, #0
 80141fe:	46a0      	mov	r8, r4
 8014200:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014202:	46a1      	mov	r9, r4
 8014204:	9a05      	ldr	r2, [sp, #20]
 8014206:	2322      	movs	r3, #34	@ 0x22
 8014208:	f04f 0a00 	mov.w	sl, #0
 801420c:	f04f 0b00 	mov.w	fp, #0
 8014210:	6013      	str	r3, [r2, #0]
 8014212:	e76b      	b.n	80140ec <_strtod_l+0x454>
 8014214:	08018755 	.word	0x08018755
 8014218:	08018994 	.word	0x08018994
 801421c:	0801874d 	.word	0x0801874d
 8014220:	08018839 	.word	0x08018839
 8014224:	08018835 	.word	0x08018835
 8014228:	08018b20 	.word	0x08018b20
 801422c:	08018af8 	.word	0x08018af8
 8014230:	7ff00000 	.word	0x7ff00000
 8014234:	7ca00000 	.word	0x7ca00000
 8014238:	7fefffff 	.word	0x7fefffff
 801423c:	f014 0310 	ands.w	r3, r4, #16
 8014240:	bf18      	it	ne
 8014242:	236a      	movne	r3, #106	@ 0x6a
 8014244:	4ea9      	ldr	r6, [pc, #676]	@ (80144ec <_strtod_l+0x854>)
 8014246:	9308      	str	r3, [sp, #32]
 8014248:	4650      	mov	r0, sl
 801424a:	4659      	mov	r1, fp
 801424c:	2300      	movs	r3, #0
 801424e:	07e7      	lsls	r7, r4, #31
 8014250:	d504      	bpl.n	801425c <_strtod_l+0x5c4>
 8014252:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014256:	f7ec f9df 	bl	8000618 <__aeabi_dmul>
 801425a:	2301      	movs	r3, #1
 801425c:	1064      	asrs	r4, r4, #1
 801425e:	f106 0608 	add.w	r6, r6, #8
 8014262:	d1f4      	bne.n	801424e <_strtod_l+0x5b6>
 8014264:	b10b      	cbz	r3, 801426a <_strtod_l+0x5d2>
 8014266:	4682      	mov	sl, r0
 8014268:	468b      	mov	fp, r1
 801426a:	9b08      	ldr	r3, [sp, #32]
 801426c:	b1b3      	cbz	r3, 801429c <_strtod_l+0x604>
 801426e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8014272:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8014276:	2b00      	cmp	r3, #0
 8014278:	4659      	mov	r1, fp
 801427a:	dd0f      	ble.n	801429c <_strtod_l+0x604>
 801427c:	2b1f      	cmp	r3, #31
 801427e:	dd56      	ble.n	801432e <_strtod_l+0x696>
 8014280:	2b34      	cmp	r3, #52	@ 0x34
 8014282:	bfde      	ittt	le
 8014284:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8014288:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801428c:	4093      	lslle	r3, r2
 801428e:	f04f 0a00 	mov.w	sl, #0
 8014292:	bfcc      	ite	gt
 8014294:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8014298:	ea03 0b01 	andle.w	fp, r3, r1
 801429c:	2200      	movs	r2, #0
 801429e:	2300      	movs	r3, #0
 80142a0:	4650      	mov	r0, sl
 80142a2:	4659      	mov	r1, fp
 80142a4:	f7ec fc20 	bl	8000ae8 <__aeabi_dcmpeq>
 80142a8:	2800      	cmp	r0, #0
 80142aa:	d1a7      	bne.n	80141fc <_strtod_l+0x564>
 80142ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142ae:	9300      	str	r3, [sp, #0]
 80142b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80142b2:	9805      	ldr	r0, [sp, #20]
 80142b4:	462b      	mov	r3, r5
 80142b6:	464a      	mov	r2, r9
 80142b8:	f002 ff32 	bl	8017120 <__s2b>
 80142bc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80142be:	2800      	cmp	r0, #0
 80142c0:	f43f af09 	beq.w	80140d6 <_strtod_l+0x43e>
 80142c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80142c8:	2a00      	cmp	r2, #0
 80142ca:	eba3 0308 	sub.w	r3, r3, r8
 80142ce:	bfa8      	it	ge
 80142d0:	2300      	movge	r3, #0
 80142d2:	9312      	str	r3, [sp, #72]	@ 0x48
 80142d4:	2400      	movs	r4, #0
 80142d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80142da:	9316      	str	r3, [sp, #88]	@ 0x58
 80142dc:	46a0      	mov	r8, r4
 80142de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142e0:	9805      	ldr	r0, [sp, #20]
 80142e2:	6859      	ldr	r1, [r3, #4]
 80142e4:	f002 fe74 	bl	8016fd0 <_Balloc>
 80142e8:	4681      	mov	r9, r0
 80142ea:	2800      	cmp	r0, #0
 80142ec:	f43f aef7 	beq.w	80140de <_strtod_l+0x446>
 80142f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80142f2:	691a      	ldr	r2, [r3, #16]
 80142f4:	3202      	adds	r2, #2
 80142f6:	f103 010c 	add.w	r1, r3, #12
 80142fa:	0092      	lsls	r2, r2, #2
 80142fc:	300c      	adds	r0, #12
 80142fe:	f000 fceb 	bl	8014cd8 <memcpy>
 8014302:	ec4b ab10 	vmov	d0, sl, fp
 8014306:	9805      	ldr	r0, [sp, #20]
 8014308:	aa1c      	add	r2, sp, #112	@ 0x70
 801430a:	a91b      	add	r1, sp, #108	@ 0x6c
 801430c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8014310:	f003 fa3a 	bl	8017788 <__d2b>
 8014314:	901a      	str	r0, [sp, #104]	@ 0x68
 8014316:	2800      	cmp	r0, #0
 8014318:	f43f aee1 	beq.w	80140de <_strtod_l+0x446>
 801431c:	9805      	ldr	r0, [sp, #20]
 801431e:	2101      	movs	r1, #1
 8014320:	f002 ff94 	bl	801724c <__i2b>
 8014324:	4680      	mov	r8, r0
 8014326:	b948      	cbnz	r0, 801433c <_strtod_l+0x6a4>
 8014328:	f04f 0800 	mov.w	r8, #0
 801432c:	e6d7      	b.n	80140de <_strtod_l+0x446>
 801432e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014332:	fa02 f303 	lsl.w	r3, r2, r3
 8014336:	ea03 0a0a 	and.w	sl, r3, sl
 801433a:	e7af      	b.n	801429c <_strtod_l+0x604>
 801433c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801433e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8014340:	2d00      	cmp	r5, #0
 8014342:	bfab      	itete	ge
 8014344:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8014346:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8014348:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801434a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801434c:	bfac      	ite	ge
 801434e:	18ef      	addge	r7, r5, r3
 8014350:	1b5e      	sublt	r6, r3, r5
 8014352:	9b08      	ldr	r3, [sp, #32]
 8014354:	1aed      	subs	r5, r5, r3
 8014356:	4415      	add	r5, r2
 8014358:	4b65      	ldr	r3, [pc, #404]	@ (80144f0 <_strtod_l+0x858>)
 801435a:	3d01      	subs	r5, #1
 801435c:	429d      	cmp	r5, r3
 801435e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8014362:	da50      	bge.n	8014406 <_strtod_l+0x76e>
 8014364:	1b5b      	subs	r3, r3, r5
 8014366:	2b1f      	cmp	r3, #31
 8014368:	eba2 0203 	sub.w	r2, r2, r3
 801436c:	f04f 0101 	mov.w	r1, #1
 8014370:	dc3d      	bgt.n	80143ee <_strtod_l+0x756>
 8014372:	fa01 f303 	lsl.w	r3, r1, r3
 8014376:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014378:	2300      	movs	r3, #0
 801437a:	9310      	str	r3, [sp, #64]	@ 0x40
 801437c:	18bd      	adds	r5, r7, r2
 801437e:	9b08      	ldr	r3, [sp, #32]
 8014380:	42af      	cmp	r7, r5
 8014382:	4416      	add	r6, r2
 8014384:	441e      	add	r6, r3
 8014386:	463b      	mov	r3, r7
 8014388:	bfa8      	it	ge
 801438a:	462b      	movge	r3, r5
 801438c:	42b3      	cmp	r3, r6
 801438e:	bfa8      	it	ge
 8014390:	4633      	movge	r3, r6
 8014392:	2b00      	cmp	r3, #0
 8014394:	bfc2      	ittt	gt
 8014396:	1aed      	subgt	r5, r5, r3
 8014398:	1af6      	subgt	r6, r6, r3
 801439a:	1aff      	subgt	r7, r7, r3
 801439c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801439e:	2b00      	cmp	r3, #0
 80143a0:	dd16      	ble.n	80143d0 <_strtod_l+0x738>
 80143a2:	4641      	mov	r1, r8
 80143a4:	9805      	ldr	r0, [sp, #20]
 80143a6:	461a      	mov	r2, r3
 80143a8:	f003 f808 	bl	80173bc <__pow5mult>
 80143ac:	4680      	mov	r8, r0
 80143ae:	2800      	cmp	r0, #0
 80143b0:	d0ba      	beq.n	8014328 <_strtod_l+0x690>
 80143b2:	4601      	mov	r1, r0
 80143b4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80143b6:	9805      	ldr	r0, [sp, #20]
 80143b8:	f002 ff5e 	bl	8017278 <__multiply>
 80143bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80143be:	2800      	cmp	r0, #0
 80143c0:	f43f ae8d 	beq.w	80140de <_strtod_l+0x446>
 80143c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80143c6:	9805      	ldr	r0, [sp, #20]
 80143c8:	f002 fe42 	bl	8017050 <_Bfree>
 80143cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80143ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80143d0:	2d00      	cmp	r5, #0
 80143d2:	dc1d      	bgt.n	8014410 <_strtod_l+0x778>
 80143d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	dd23      	ble.n	8014422 <_strtod_l+0x78a>
 80143da:	4649      	mov	r1, r9
 80143dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80143de:	9805      	ldr	r0, [sp, #20]
 80143e0:	f002 ffec 	bl	80173bc <__pow5mult>
 80143e4:	4681      	mov	r9, r0
 80143e6:	b9e0      	cbnz	r0, 8014422 <_strtod_l+0x78a>
 80143e8:	f04f 0900 	mov.w	r9, #0
 80143ec:	e677      	b.n	80140de <_strtod_l+0x446>
 80143ee:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80143f2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80143f6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80143fa:	35e2      	adds	r5, #226	@ 0xe2
 80143fc:	fa01 f305 	lsl.w	r3, r1, r5
 8014400:	9310      	str	r3, [sp, #64]	@ 0x40
 8014402:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014404:	e7ba      	b.n	801437c <_strtod_l+0x6e4>
 8014406:	2300      	movs	r3, #0
 8014408:	9310      	str	r3, [sp, #64]	@ 0x40
 801440a:	2301      	movs	r3, #1
 801440c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801440e:	e7b5      	b.n	801437c <_strtod_l+0x6e4>
 8014410:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014412:	9805      	ldr	r0, [sp, #20]
 8014414:	462a      	mov	r2, r5
 8014416:	f003 f82b 	bl	8017470 <__lshift>
 801441a:	901a      	str	r0, [sp, #104]	@ 0x68
 801441c:	2800      	cmp	r0, #0
 801441e:	d1d9      	bne.n	80143d4 <_strtod_l+0x73c>
 8014420:	e65d      	b.n	80140de <_strtod_l+0x446>
 8014422:	2e00      	cmp	r6, #0
 8014424:	dd07      	ble.n	8014436 <_strtod_l+0x79e>
 8014426:	4649      	mov	r1, r9
 8014428:	9805      	ldr	r0, [sp, #20]
 801442a:	4632      	mov	r2, r6
 801442c:	f003 f820 	bl	8017470 <__lshift>
 8014430:	4681      	mov	r9, r0
 8014432:	2800      	cmp	r0, #0
 8014434:	d0d8      	beq.n	80143e8 <_strtod_l+0x750>
 8014436:	2f00      	cmp	r7, #0
 8014438:	dd08      	ble.n	801444c <_strtod_l+0x7b4>
 801443a:	4641      	mov	r1, r8
 801443c:	9805      	ldr	r0, [sp, #20]
 801443e:	463a      	mov	r2, r7
 8014440:	f003 f816 	bl	8017470 <__lshift>
 8014444:	4680      	mov	r8, r0
 8014446:	2800      	cmp	r0, #0
 8014448:	f43f ae49 	beq.w	80140de <_strtod_l+0x446>
 801444c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801444e:	9805      	ldr	r0, [sp, #20]
 8014450:	464a      	mov	r2, r9
 8014452:	f003 f895 	bl	8017580 <__mdiff>
 8014456:	4604      	mov	r4, r0
 8014458:	2800      	cmp	r0, #0
 801445a:	f43f ae40 	beq.w	80140de <_strtod_l+0x446>
 801445e:	68c3      	ldr	r3, [r0, #12]
 8014460:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014462:	2300      	movs	r3, #0
 8014464:	60c3      	str	r3, [r0, #12]
 8014466:	4641      	mov	r1, r8
 8014468:	f003 f86e 	bl	8017548 <__mcmp>
 801446c:	2800      	cmp	r0, #0
 801446e:	da45      	bge.n	80144fc <_strtod_l+0x864>
 8014470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014472:	ea53 030a 	orrs.w	r3, r3, sl
 8014476:	d16b      	bne.n	8014550 <_strtod_l+0x8b8>
 8014478:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801447c:	2b00      	cmp	r3, #0
 801447e:	d167      	bne.n	8014550 <_strtod_l+0x8b8>
 8014480:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014484:	0d1b      	lsrs	r3, r3, #20
 8014486:	051b      	lsls	r3, r3, #20
 8014488:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801448c:	d960      	bls.n	8014550 <_strtod_l+0x8b8>
 801448e:	6963      	ldr	r3, [r4, #20]
 8014490:	b913      	cbnz	r3, 8014498 <_strtod_l+0x800>
 8014492:	6923      	ldr	r3, [r4, #16]
 8014494:	2b01      	cmp	r3, #1
 8014496:	dd5b      	ble.n	8014550 <_strtod_l+0x8b8>
 8014498:	4621      	mov	r1, r4
 801449a:	2201      	movs	r2, #1
 801449c:	9805      	ldr	r0, [sp, #20]
 801449e:	f002 ffe7 	bl	8017470 <__lshift>
 80144a2:	4641      	mov	r1, r8
 80144a4:	4604      	mov	r4, r0
 80144a6:	f003 f84f 	bl	8017548 <__mcmp>
 80144aa:	2800      	cmp	r0, #0
 80144ac:	dd50      	ble.n	8014550 <_strtod_l+0x8b8>
 80144ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80144b2:	9a08      	ldr	r2, [sp, #32]
 80144b4:	0d1b      	lsrs	r3, r3, #20
 80144b6:	051b      	lsls	r3, r3, #20
 80144b8:	2a00      	cmp	r2, #0
 80144ba:	d06a      	beq.n	8014592 <_strtod_l+0x8fa>
 80144bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80144c0:	d867      	bhi.n	8014592 <_strtod_l+0x8fa>
 80144c2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80144c6:	f67f ae9d 	bls.w	8014204 <_strtod_l+0x56c>
 80144ca:	4b0a      	ldr	r3, [pc, #40]	@ (80144f4 <_strtod_l+0x85c>)
 80144cc:	4650      	mov	r0, sl
 80144ce:	4659      	mov	r1, fp
 80144d0:	2200      	movs	r2, #0
 80144d2:	f7ec f8a1 	bl	8000618 <__aeabi_dmul>
 80144d6:	4b08      	ldr	r3, [pc, #32]	@ (80144f8 <_strtod_l+0x860>)
 80144d8:	400b      	ands	r3, r1
 80144da:	4682      	mov	sl, r0
 80144dc:	468b      	mov	fp, r1
 80144de:	2b00      	cmp	r3, #0
 80144e0:	f47f ae08 	bne.w	80140f4 <_strtod_l+0x45c>
 80144e4:	9a05      	ldr	r2, [sp, #20]
 80144e6:	2322      	movs	r3, #34	@ 0x22
 80144e8:	6013      	str	r3, [r2, #0]
 80144ea:	e603      	b.n	80140f4 <_strtod_l+0x45c>
 80144ec:	080189c0 	.word	0x080189c0
 80144f0:	fffffc02 	.word	0xfffffc02
 80144f4:	39500000 	.word	0x39500000
 80144f8:	7ff00000 	.word	0x7ff00000
 80144fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8014500:	d165      	bne.n	80145ce <_strtod_l+0x936>
 8014502:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014504:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014508:	b35a      	cbz	r2, 8014562 <_strtod_l+0x8ca>
 801450a:	4a9f      	ldr	r2, [pc, #636]	@ (8014788 <_strtod_l+0xaf0>)
 801450c:	4293      	cmp	r3, r2
 801450e:	d12b      	bne.n	8014568 <_strtod_l+0x8d0>
 8014510:	9b08      	ldr	r3, [sp, #32]
 8014512:	4651      	mov	r1, sl
 8014514:	b303      	cbz	r3, 8014558 <_strtod_l+0x8c0>
 8014516:	4b9d      	ldr	r3, [pc, #628]	@ (801478c <_strtod_l+0xaf4>)
 8014518:	465a      	mov	r2, fp
 801451a:	4013      	ands	r3, r2
 801451c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014520:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014524:	d81b      	bhi.n	801455e <_strtod_l+0x8c6>
 8014526:	0d1b      	lsrs	r3, r3, #20
 8014528:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801452c:	fa02 f303 	lsl.w	r3, r2, r3
 8014530:	4299      	cmp	r1, r3
 8014532:	d119      	bne.n	8014568 <_strtod_l+0x8d0>
 8014534:	4b96      	ldr	r3, [pc, #600]	@ (8014790 <_strtod_l+0xaf8>)
 8014536:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014538:	429a      	cmp	r2, r3
 801453a:	d102      	bne.n	8014542 <_strtod_l+0x8aa>
 801453c:	3101      	adds	r1, #1
 801453e:	f43f adce 	beq.w	80140de <_strtod_l+0x446>
 8014542:	4b92      	ldr	r3, [pc, #584]	@ (801478c <_strtod_l+0xaf4>)
 8014544:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014546:	401a      	ands	r2, r3
 8014548:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801454c:	f04f 0a00 	mov.w	sl, #0
 8014550:	9b08      	ldr	r3, [sp, #32]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d1b9      	bne.n	80144ca <_strtod_l+0x832>
 8014556:	e5cd      	b.n	80140f4 <_strtod_l+0x45c>
 8014558:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801455c:	e7e8      	b.n	8014530 <_strtod_l+0x898>
 801455e:	4613      	mov	r3, r2
 8014560:	e7e6      	b.n	8014530 <_strtod_l+0x898>
 8014562:	ea53 030a 	orrs.w	r3, r3, sl
 8014566:	d0a2      	beq.n	80144ae <_strtod_l+0x816>
 8014568:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801456a:	b1db      	cbz	r3, 80145a4 <_strtod_l+0x90c>
 801456c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801456e:	4213      	tst	r3, r2
 8014570:	d0ee      	beq.n	8014550 <_strtod_l+0x8b8>
 8014572:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014574:	9a08      	ldr	r2, [sp, #32]
 8014576:	4650      	mov	r0, sl
 8014578:	4659      	mov	r1, fp
 801457a:	b1bb      	cbz	r3, 80145ac <_strtod_l+0x914>
 801457c:	f7ff fb6c 	bl	8013c58 <sulp>
 8014580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014584:	ec53 2b10 	vmov	r2, r3, d0
 8014588:	f7eb fe90 	bl	80002ac <__adddf3>
 801458c:	4682      	mov	sl, r0
 801458e:	468b      	mov	fp, r1
 8014590:	e7de      	b.n	8014550 <_strtod_l+0x8b8>
 8014592:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8014596:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801459a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801459e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80145a2:	e7d5      	b.n	8014550 <_strtod_l+0x8b8>
 80145a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80145a6:	ea13 0f0a 	tst.w	r3, sl
 80145aa:	e7e1      	b.n	8014570 <_strtod_l+0x8d8>
 80145ac:	f7ff fb54 	bl	8013c58 <sulp>
 80145b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80145b4:	ec53 2b10 	vmov	r2, r3, d0
 80145b8:	f7eb fe76 	bl	80002a8 <__aeabi_dsub>
 80145bc:	2200      	movs	r2, #0
 80145be:	2300      	movs	r3, #0
 80145c0:	4682      	mov	sl, r0
 80145c2:	468b      	mov	fp, r1
 80145c4:	f7ec fa90 	bl	8000ae8 <__aeabi_dcmpeq>
 80145c8:	2800      	cmp	r0, #0
 80145ca:	d0c1      	beq.n	8014550 <_strtod_l+0x8b8>
 80145cc:	e61a      	b.n	8014204 <_strtod_l+0x56c>
 80145ce:	4641      	mov	r1, r8
 80145d0:	4620      	mov	r0, r4
 80145d2:	f003 f931 	bl	8017838 <__ratio>
 80145d6:	ec57 6b10 	vmov	r6, r7, d0
 80145da:	2200      	movs	r2, #0
 80145dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80145e0:	4630      	mov	r0, r6
 80145e2:	4639      	mov	r1, r7
 80145e4:	f7ec fa94 	bl	8000b10 <__aeabi_dcmple>
 80145e8:	2800      	cmp	r0, #0
 80145ea:	d06f      	beq.n	80146cc <_strtod_l+0xa34>
 80145ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d17a      	bne.n	80146e8 <_strtod_l+0xa50>
 80145f2:	f1ba 0f00 	cmp.w	sl, #0
 80145f6:	d158      	bne.n	80146aa <_strtod_l+0xa12>
 80145f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80145fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d15a      	bne.n	80146b8 <_strtod_l+0xa20>
 8014602:	4b64      	ldr	r3, [pc, #400]	@ (8014794 <_strtod_l+0xafc>)
 8014604:	2200      	movs	r2, #0
 8014606:	4630      	mov	r0, r6
 8014608:	4639      	mov	r1, r7
 801460a:	f7ec fa77 	bl	8000afc <__aeabi_dcmplt>
 801460e:	2800      	cmp	r0, #0
 8014610:	d159      	bne.n	80146c6 <_strtod_l+0xa2e>
 8014612:	4630      	mov	r0, r6
 8014614:	4639      	mov	r1, r7
 8014616:	4b60      	ldr	r3, [pc, #384]	@ (8014798 <_strtod_l+0xb00>)
 8014618:	2200      	movs	r2, #0
 801461a:	f7eb fffd 	bl	8000618 <__aeabi_dmul>
 801461e:	4606      	mov	r6, r0
 8014620:	460f      	mov	r7, r1
 8014622:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8014626:	9606      	str	r6, [sp, #24]
 8014628:	9307      	str	r3, [sp, #28]
 801462a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801462e:	4d57      	ldr	r5, [pc, #348]	@ (801478c <_strtod_l+0xaf4>)
 8014630:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014636:	401d      	ands	r5, r3
 8014638:	4b58      	ldr	r3, [pc, #352]	@ (801479c <_strtod_l+0xb04>)
 801463a:	429d      	cmp	r5, r3
 801463c:	f040 80b2 	bne.w	80147a4 <_strtod_l+0xb0c>
 8014640:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014642:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8014646:	ec4b ab10 	vmov	d0, sl, fp
 801464a:	f003 f82d 	bl	80176a8 <__ulp>
 801464e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014652:	ec51 0b10 	vmov	r0, r1, d0
 8014656:	f7eb ffdf 	bl	8000618 <__aeabi_dmul>
 801465a:	4652      	mov	r2, sl
 801465c:	465b      	mov	r3, fp
 801465e:	f7eb fe25 	bl	80002ac <__adddf3>
 8014662:	460b      	mov	r3, r1
 8014664:	4949      	ldr	r1, [pc, #292]	@ (801478c <_strtod_l+0xaf4>)
 8014666:	4a4e      	ldr	r2, [pc, #312]	@ (80147a0 <_strtod_l+0xb08>)
 8014668:	4019      	ands	r1, r3
 801466a:	4291      	cmp	r1, r2
 801466c:	4682      	mov	sl, r0
 801466e:	d942      	bls.n	80146f6 <_strtod_l+0xa5e>
 8014670:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014672:	4b47      	ldr	r3, [pc, #284]	@ (8014790 <_strtod_l+0xaf8>)
 8014674:	429a      	cmp	r2, r3
 8014676:	d103      	bne.n	8014680 <_strtod_l+0x9e8>
 8014678:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801467a:	3301      	adds	r3, #1
 801467c:	f43f ad2f 	beq.w	80140de <_strtod_l+0x446>
 8014680:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014790 <_strtod_l+0xaf8>
 8014684:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8014688:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801468a:	9805      	ldr	r0, [sp, #20]
 801468c:	f002 fce0 	bl	8017050 <_Bfree>
 8014690:	9805      	ldr	r0, [sp, #20]
 8014692:	4649      	mov	r1, r9
 8014694:	f002 fcdc 	bl	8017050 <_Bfree>
 8014698:	9805      	ldr	r0, [sp, #20]
 801469a:	4641      	mov	r1, r8
 801469c:	f002 fcd8 	bl	8017050 <_Bfree>
 80146a0:	9805      	ldr	r0, [sp, #20]
 80146a2:	4621      	mov	r1, r4
 80146a4:	f002 fcd4 	bl	8017050 <_Bfree>
 80146a8:	e619      	b.n	80142de <_strtod_l+0x646>
 80146aa:	f1ba 0f01 	cmp.w	sl, #1
 80146ae:	d103      	bne.n	80146b8 <_strtod_l+0xa20>
 80146b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	f43f ada6 	beq.w	8014204 <_strtod_l+0x56c>
 80146b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014768 <_strtod_l+0xad0>
 80146bc:	4f35      	ldr	r7, [pc, #212]	@ (8014794 <_strtod_l+0xafc>)
 80146be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80146c2:	2600      	movs	r6, #0
 80146c4:	e7b1      	b.n	801462a <_strtod_l+0x992>
 80146c6:	4f34      	ldr	r7, [pc, #208]	@ (8014798 <_strtod_l+0xb00>)
 80146c8:	2600      	movs	r6, #0
 80146ca:	e7aa      	b.n	8014622 <_strtod_l+0x98a>
 80146cc:	4b32      	ldr	r3, [pc, #200]	@ (8014798 <_strtod_l+0xb00>)
 80146ce:	4630      	mov	r0, r6
 80146d0:	4639      	mov	r1, r7
 80146d2:	2200      	movs	r2, #0
 80146d4:	f7eb ffa0 	bl	8000618 <__aeabi_dmul>
 80146d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80146da:	4606      	mov	r6, r0
 80146dc:	460f      	mov	r7, r1
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d09f      	beq.n	8014622 <_strtod_l+0x98a>
 80146e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80146e6:	e7a0      	b.n	801462a <_strtod_l+0x992>
 80146e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014770 <_strtod_l+0xad8>
 80146ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80146f0:	ec57 6b17 	vmov	r6, r7, d7
 80146f4:	e799      	b.n	801462a <_strtod_l+0x992>
 80146f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80146fa:	9b08      	ldr	r3, [sp, #32]
 80146fc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8014700:	2b00      	cmp	r3, #0
 8014702:	d1c1      	bne.n	8014688 <_strtod_l+0x9f0>
 8014704:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014708:	0d1b      	lsrs	r3, r3, #20
 801470a:	051b      	lsls	r3, r3, #20
 801470c:	429d      	cmp	r5, r3
 801470e:	d1bb      	bne.n	8014688 <_strtod_l+0x9f0>
 8014710:	4630      	mov	r0, r6
 8014712:	4639      	mov	r1, r7
 8014714:	f7ec fae0 	bl	8000cd8 <__aeabi_d2lz>
 8014718:	f7eb ff50 	bl	80005bc <__aeabi_l2d>
 801471c:	4602      	mov	r2, r0
 801471e:	460b      	mov	r3, r1
 8014720:	4630      	mov	r0, r6
 8014722:	4639      	mov	r1, r7
 8014724:	f7eb fdc0 	bl	80002a8 <__aeabi_dsub>
 8014728:	460b      	mov	r3, r1
 801472a:	4602      	mov	r2, r0
 801472c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014730:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8014734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014736:	ea46 060a 	orr.w	r6, r6, sl
 801473a:	431e      	orrs	r6, r3
 801473c:	d06f      	beq.n	801481e <_strtod_l+0xb86>
 801473e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014778 <_strtod_l+0xae0>)
 8014740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014744:	f7ec f9da 	bl	8000afc <__aeabi_dcmplt>
 8014748:	2800      	cmp	r0, #0
 801474a:	f47f acd3 	bne.w	80140f4 <_strtod_l+0x45c>
 801474e:	a30c      	add	r3, pc, #48	@ (adr r3, 8014780 <_strtod_l+0xae8>)
 8014750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014758:	f7ec f9ee 	bl	8000b38 <__aeabi_dcmpgt>
 801475c:	2800      	cmp	r0, #0
 801475e:	d093      	beq.n	8014688 <_strtod_l+0x9f0>
 8014760:	e4c8      	b.n	80140f4 <_strtod_l+0x45c>
 8014762:	bf00      	nop
 8014764:	f3af 8000 	nop.w
 8014768:	00000000 	.word	0x00000000
 801476c:	bff00000 	.word	0xbff00000
 8014770:	00000000 	.word	0x00000000
 8014774:	3ff00000 	.word	0x3ff00000
 8014778:	94a03595 	.word	0x94a03595
 801477c:	3fdfffff 	.word	0x3fdfffff
 8014780:	35afe535 	.word	0x35afe535
 8014784:	3fe00000 	.word	0x3fe00000
 8014788:	000fffff 	.word	0x000fffff
 801478c:	7ff00000 	.word	0x7ff00000
 8014790:	7fefffff 	.word	0x7fefffff
 8014794:	3ff00000 	.word	0x3ff00000
 8014798:	3fe00000 	.word	0x3fe00000
 801479c:	7fe00000 	.word	0x7fe00000
 80147a0:	7c9fffff 	.word	0x7c9fffff
 80147a4:	9b08      	ldr	r3, [sp, #32]
 80147a6:	b323      	cbz	r3, 80147f2 <_strtod_l+0xb5a>
 80147a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80147ac:	d821      	bhi.n	80147f2 <_strtod_l+0xb5a>
 80147ae:	a328      	add	r3, pc, #160	@ (adr r3, 8014850 <_strtod_l+0xbb8>)
 80147b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b4:	4630      	mov	r0, r6
 80147b6:	4639      	mov	r1, r7
 80147b8:	f7ec f9aa 	bl	8000b10 <__aeabi_dcmple>
 80147bc:	b1a0      	cbz	r0, 80147e8 <_strtod_l+0xb50>
 80147be:	4639      	mov	r1, r7
 80147c0:	4630      	mov	r0, r6
 80147c2:	f7ec fa01 	bl	8000bc8 <__aeabi_d2uiz>
 80147c6:	2801      	cmp	r0, #1
 80147c8:	bf38      	it	cc
 80147ca:	2001      	movcc	r0, #1
 80147cc:	f7eb feaa 	bl	8000524 <__aeabi_ui2d>
 80147d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80147d2:	4606      	mov	r6, r0
 80147d4:	460f      	mov	r7, r1
 80147d6:	b9fb      	cbnz	r3, 8014818 <_strtod_l+0xb80>
 80147d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80147dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80147de:	9315      	str	r3, [sp, #84]	@ 0x54
 80147e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80147e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80147e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80147ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80147ee:	1b5b      	subs	r3, r3, r5
 80147f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80147f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80147f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80147fa:	f002 ff55 	bl	80176a8 <__ulp>
 80147fe:	4650      	mov	r0, sl
 8014800:	ec53 2b10 	vmov	r2, r3, d0
 8014804:	4659      	mov	r1, fp
 8014806:	f7eb ff07 	bl	8000618 <__aeabi_dmul>
 801480a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801480e:	f7eb fd4d 	bl	80002ac <__adddf3>
 8014812:	4682      	mov	sl, r0
 8014814:	468b      	mov	fp, r1
 8014816:	e770      	b.n	80146fa <_strtod_l+0xa62>
 8014818:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801481c:	e7e0      	b.n	80147e0 <_strtod_l+0xb48>
 801481e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014858 <_strtod_l+0xbc0>)
 8014820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014824:	f7ec f96a 	bl	8000afc <__aeabi_dcmplt>
 8014828:	e798      	b.n	801475c <_strtod_l+0xac4>
 801482a:	2300      	movs	r3, #0
 801482c:	930e      	str	r3, [sp, #56]	@ 0x38
 801482e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014830:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014832:	6013      	str	r3, [r2, #0]
 8014834:	f7ff ba6d 	b.w	8013d12 <_strtod_l+0x7a>
 8014838:	2a65      	cmp	r2, #101	@ 0x65
 801483a:	f43f ab68 	beq.w	8013f0e <_strtod_l+0x276>
 801483e:	2a45      	cmp	r2, #69	@ 0x45
 8014840:	f43f ab65 	beq.w	8013f0e <_strtod_l+0x276>
 8014844:	2301      	movs	r3, #1
 8014846:	f7ff bba0 	b.w	8013f8a <_strtod_l+0x2f2>
 801484a:	bf00      	nop
 801484c:	f3af 8000 	nop.w
 8014850:	ffc00000 	.word	0xffc00000
 8014854:	41dfffff 	.word	0x41dfffff
 8014858:	94a03595 	.word	0x94a03595
 801485c:	3fcfffff 	.word	0x3fcfffff

08014860 <_strtod_r>:
 8014860:	4b01      	ldr	r3, [pc, #4]	@ (8014868 <_strtod_r+0x8>)
 8014862:	f7ff ba19 	b.w	8013c98 <_strtod_l>
 8014866:	bf00      	nop
 8014868:	20000068 	.word	0x20000068

0801486c <strtod>:
 801486c:	460a      	mov	r2, r1
 801486e:	4601      	mov	r1, r0
 8014870:	4802      	ldr	r0, [pc, #8]	@ (801487c <strtod+0x10>)
 8014872:	4b03      	ldr	r3, [pc, #12]	@ (8014880 <strtod+0x14>)
 8014874:	6800      	ldr	r0, [r0, #0]
 8014876:	f7ff ba0f 	b.w	8013c98 <_strtod_l>
 801487a:	bf00      	nop
 801487c:	200001d4 	.word	0x200001d4
 8014880:	20000068 	.word	0x20000068

08014884 <_strtol_l.isra.0>:
 8014884:	2b24      	cmp	r3, #36	@ 0x24
 8014886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801488a:	4686      	mov	lr, r0
 801488c:	4690      	mov	r8, r2
 801488e:	d801      	bhi.n	8014894 <_strtol_l.isra.0+0x10>
 8014890:	2b01      	cmp	r3, #1
 8014892:	d106      	bne.n	80148a2 <_strtol_l.isra.0+0x1e>
 8014894:	f000 f9d6 	bl	8014c44 <__errno>
 8014898:	2316      	movs	r3, #22
 801489a:	6003      	str	r3, [r0, #0]
 801489c:	2000      	movs	r0, #0
 801489e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148a2:	4834      	ldr	r0, [pc, #208]	@ (8014974 <_strtol_l.isra.0+0xf0>)
 80148a4:	460d      	mov	r5, r1
 80148a6:	462a      	mov	r2, r5
 80148a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80148ac:	5d06      	ldrb	r6, [r0, r4]
 80148ae:	f016 0608 	ands.w	r6, r6, #8
 80148b2:	d1f8      	bne.n	80148a6 <_strtol_l.isra.0+0x22>
 80148b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80148b6:	d110      	bne.n	80148da <_strtol_l.isra.0+0x56>
 80148b8:	782c      	ldrb	r4, [r5, #0]
 80148ba:	2601      	movs	r6, #1
 80148bc:	1c95      	adds	r5, r2, #2
 80148be:	f033 0210 	bics.w	r2, r3, #16
 80148c2:	d115      	bne.n	80148f0 <_strtol_l.isra.0+0x6c>
 80148c4:	2c30      	cmp	r4, #48	@ 0x30
 80148c6:	d10d      	bne.n	80148e4 <_strtol_l.isra.0+0x60>
 80148c8:	782a      	ldrb	r2, [r5, #0]
 80148ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80148ce:	2a58      	cmp	r2, #88	@ 0x58
 80148d0:	d108      	bne.n	80148e4 <_strtol_l.isra.0+0x60>
 80148d2:	786c      	ldrb	r4, [r5, #1]
 80148d4:	3502      	adds	r5, #2
 80148d6:	2310      	movs	r3, #16
 80148d8:	e00a      	b.n	80148f0 <_strtol_l.isra.0+0x6c>
 80148da:	2c2b      	cmp	r4, #43	@ 0x2b
 80148dc:	bf04      	itt	eq
 80148de:	782c      	ldrbeq	r4, [r5, #0]
 80148e0:	1c95      	addeq	r5, r2, #2
 80148e2:	e7ec      	b.n	80148be <_strtol_l.isra.0+0x3a>
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d1f6      	bne.n	80148d6 <_strtol_l.isra.0+0x52>
 80148e8:	2c30      	cmp	r4, #48	@ 0x30
 80148ea:	bf14      	ite	ne
 80148ec:	230a      	movne	r3, #10
 80148ee:	2308      	moveq	r3, #8
 80148f0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80148f4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80148f8:	2200      	movs	r2, #0
 80148fa:	fbbc f9f3 	udiv	r9, ip, r3
 80148fe:	4610      	mov	r0, r2
 8014900:	fb03 ca19 	mls	sl, r3, r9, ip
 8014904:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014908:	2f09      	cmp	r7, #9
 801490a:	d80f      	bhi.n	801492c <_strtol_l.isra.0+0xa8>
 801490c:	463c      	mov	r4, r7
 801490e:	42a3      	cmp	r3, r4
 8014910:	dd1b      	ble.n	801494a <_strtol_l.isra.0+0xc6>
 8014912:	1c57      	adds	r7, r2, #1
 8014914:	d007      	beq.n	8014926 <_strtol_l.isra.0+0xa2>
 8014916:	4581      	cmp	r9, r0
 8014918:	d314      	bcc.n	8014944 <_strtol_l.isra.0+0xc0>
 801491a:	d101      	bne.n	8014920 <_strtol_l.isra.0+0x9c>
 801491c:	45a2      	cmp	sl, r4
 801491e:	db11      	blt.n	8014944 <_strtol_l.isra.0+0xc0>
 8014920:	fb00 4003 	mla	r0, r0, r3, r4
 8014924:	2201      	movs	r2, #1
 8014926:	f815 4b01 	ldrb.w	r4, [r5], #1
 801492a:	e7eb      	b.n	8014904 <_strtol_l.isra.0+0x80>
 801492c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014930:	2f19      	cmp	r7, #25
 8014932:	d801      	bhi.n	8014938 <_strtol_l.isra.0+0xb4>
 8014934:	3c37      	subs	r4, #55	@ 0x37
 8014936:	e7ea      	b.n	801490e <_strtol_l.isra.0+0x8a>
 8014938:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801493c:	2f19      	cmp	r7, #25
 801493e:	d804      	bhi.n	801494a <_strtol_l.isra.0+0xc6>
 8014940:	3c57      	subs	r4, #87	@ 0x57
 8014942:	e7e4      	b.n	801490e <_strtol_l.isra.0+0x8a>
 8014944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014948:	e7ed      	b.n	8014926 <_strtol_l.isra.0+0xa2>
 801494a:	1c53      	adds	r3, r2, #1
 801494c:	d108      	bne.n	8014960 <_strtol_l.isra.0+0xdc>
 801494e:	2322      	movs	r3, #34	@ 0x22
 8014950:	f8ce 3000 	str.w	r3, [lr]
 8014954:	4660      	mov	r0, ip
 8014956:	f1b8 0f00 	cmp.w	r8, #0
 801495a:	d0a0      	beq.n	801489e <_strtol_l.isra.0+0x1a>
 801495c:	1e69      	subs	r1, r5, #1
 801495e:	e006      	b.n	801496e <_strtol_l.isra.0+0xea>
 8014960:	b106      	cbz	r6, 8014964 <_strtol_l.isra.0+0xe0>
 8014962:	4240      	negs	r0, r0
 8014964:	f1b8 0f00 	cmp.w	r8, #0
 8014968:	d099      	beq.n	801489e <_strtol_l.isra.0+0x1a>
 801496a:	2a00      	cmp	r2, #0
 801496c:	d1f6      	bne.n	801495c <_strtol_l.isra.0+0xd8>
 801496e:	f8c8 1000 	str.w	r1, [r8]
 8014972:	e794      	b.n	801489e <_strtol_l.isra.0+0x1a>
 8014974:	080189e9 	.word	0x080189e9

08014978 <_strtol_r>:
 8014978:	f7ff bf84 	b.w	8014884 <_strtol_l.isra.0>

0801497c <strtol>:
 801497c:	4613      	mov	r3, r2
 801497e:	460a      	mov	r2, r1
 8014980:	4601      	mov	r1, r0
 8014982:	4802      	ldr	r0, [pc, #8]	@ (801498c <strtol+0x10>)
 8014984:	6800      	ldr	r0, [r0, #0]
 8014986:	f7ff bf7d 	b.w	8014884 <_strtol_l.isra.0>
 801498a:	bf00      	nop
 801498c:	200001d4 	.word	0x200001d4

08014990 <_fwalk_sglue>:
 8014990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014994:	4607      	mov	r7, r0
 8014996:	4688      	mov	r8, r1
 8014998:	4614      	mov	r4, r2
 801499a:	2600      	movs	r6, #0
 801499c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80149a0:	f1b9 0901 	subs.w	r9, r9, #1
 80149a4:	d505      	bpl.n	80149b2 <_fwalk_sglue+0x22>
 80149a6:	6824      	ldr	r4, [r4, #0]
 80149a8:	2c00      	cmp	r4, #0
 80149aa:	d1f7      	bne.n	801499c <_fwalk_sglue+0xc>
 80149ac:	4630      	mov	r0, r6
 80149ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149b2:	89ab      	ldrh	r3, [r5, #12]
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d907      	bls.n	80149c8 <_fwalk_sglue+0x38>
 80149b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149bc:	3301      	adds	r3, #1
 80149be:	d003      	beq.n	80149c8 <_fwalk_sglue+0x38>
 80149c0:	4629      	mov	r1, r5
 80149c2:	4638      	mov	r0, r7
 80149c4:	47c0      	blx	r8
 80149c6:	4306      	orrs	r6, r0
 80149c8:	3568      	adds	r5, #104	@ 0x68
 80149ca:	e7e9      	b.n	80149a0 <_fwalk_sglue+0x10>

080149cc <iprintf>:
 80149cc:	b40f      	push	{r0, r1, r2, r3}
 80149ce:	b507      	push	{r0, r1, r2, lr}
 80149d0:	4906      	ldr	r1, [pc, #24]	@ (80149ec <iprintf+0x20>)
 80149d2:	ab04      	add	r3, sp, #16
 80149d4:	6808      	ldr	r0, [r1, #0]
 80149d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80149da:	6881      	ldr	r1, [r0, #8]
 80149dc:	9301      	str	r3, [sp, #4]
 80149de:	f001 fee3 	bl	80167a8 <_vfiprintf_r>
 80149e2:	b003      	add	sp, #12
 80149e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80149e8:	b004      	add	sp, #16
 80149ea:	4770      	bx	lr
 80149ec:	200001d4 	.word	0x200001d4

080149f0 <_puts_r>:
 80149f0:	6a03      	ldr	r3, [r0, #32]
 80149f2:	b570      	push	{r4, r5, r6, lr}
 80149f4:	6884      	ldr	r4, [r0, #8]
 80149f6:	4605      	mov	r5, r0
 80149f8:	460e      	mov	r6, r1
 80149fa:	b90b      	cbnz	r3, 8014a00 <_puts_r+0x10>
 80149fc:	f7ff f914 	bl	8013c28 <__sinit>
 8014a00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a02:	07db      	lsls	r3, r3, #31
 8014a04:	d405      	bmi.n	8014a12 <_puts_r+0x22>
 8014a06:	89a3      	ldrh	r3, [r4, #12]
 8014a08:	0598      	lsls	r0, r3, #22
 8014a0a:	d402      	bmi.n	8014a12 <_puts_r+0x22>
 8014a0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a0e:	f000 f944 	bl	8014c9a <__retarget_lock_acquire_recursive>
 8014a12:	89a3      	ldrh	r3, [r4, #12]
 8014a14:	0719      	lsls	r1, r3, #28
 8014a16:	d502      	bpl.n	8014a1e <_puts_r+0x2e>
 8014a18:	6923      	ldr	r3, [r4, #16]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d135      	bne.n	8014a8a <_puts_r+0x9a>
 8014a1e:	4621      	mov	r1, r4
 8014a20:	4628      	mov	r0, r5
 8014a22:	f003 f8a7 	bl	8017b74 <__swsetup_r>
 8014a26:	b380      	cbz	r0, 8014a8a <_puts_r+0x9a>
 8014a28:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8014a2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a2e:	07da      	lsls	r2, r3, #31
 8014a30:	d405      	bmi.n	8014a3e <_puts_r+0x4e>
 8014a32:	89a3      	ldrh	r3, [r4, #12]
 8014a34:	059b      	lsls	r3, r3, #22
 8014a36:	d402      	bmi.n	8014a3e <_puts_r+0x4e>
 8014a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a3a:	f000 f92f 	bl	8014c9c <__retarget_lock_release_recursive>
 8014a3e:	4628      	mov	r0, r5
 8014a40:	bd70      	pop	{r4, r5, r6, pc}
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	da04      	bge.n	8014a50 <_puts_r+0x60>
 8014a46:	69a2      	ldr	r2, [r4, #24]
 8014a48:	429a      	cmp	r2, r3
 8014a4a:	dc17      	bgt.n	8014a7c <_puts_r+0x8c>
 8014a4c:	290a      	cmp	r1, #10
 8014a4e:	d015      	beq.n	8014a7c <_puts_r+0x8c>
 8014a50:	6823      	ldr	r3, [r4, #0]
 8014a52:	1c5a      	adds	r2, r3, #1
 8014a54:	6022      	str	r2, [r4, #0]
 8014a56:	7019      	strb	r1, [r3, #0]
 8014a58:	68a3      	ldr	r3, [r4, #8]
 8014a5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014a5e:	3b01      	subs	r3, #1
 8014a60:	60a3      	str	r3, [r4, #8]
 8014a62:	2900      	cmp	r1, #0
 8014a64:	d1ed      	bne.n	8014a42 <_puts_r+0x52>
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	da11      	bge.n	8014a8e <_puts_r+0x9e>
 8014a6a:	4622      	mov	r2, r4
 8014a6c:	210a      	movs	r1, #10
 8014a6e:	4628      	mov	r0, r5
 8014a70:	f002 ffd2 	bl	8017a18 <__swbuf_r>
 8014a74:	3001      	adds	r0, #1
 8014a76:	d0d7      	beq.n	8014a28 <_puts_r+0x38>
 8014a78:	250a      	movs	r5, #10
 8014a7a:	e7d7      	b.n	8014a2c <_puts_r+0x3c>
 8014a7c:	4622      	mov	r2, r4
 8014a7e:	4628      	mov	r0, r5
 8014a80:	f002 ffca 	bl	8017a18 <__swbuf_r>
 8014a84:	3001      	adds	r0, #1
 8014a86:	d1e7      	bne.n	8014a58 <_puts_r+0x68>
 8014a88:	e7ce      	b.n	8014a28 <_puts_r+0x38>
 8014a8a:	3e01      	subs	r6, #1
 8014a8c:	e7e4      	b.n	8014a58 <_puts_r+0x68>
 8014a8e:	6823      	ldr	r3, [r4, #0]
 8014a90:	1c5a      	adds	r2, r3, #1
 8014a92:	6022      	str	r2, [r4, #0]
 8014a94:	220a      	movs	r2, #10
 8014a96:	701a      	strb	r2, [r3, #0]
 8014a98:	e7ee      	b.n	8014a78 <_puts_r+0x88>
	...

08014a9c <puts>:
 8014a9c:	4b02      	ldr	r3, [pc, #8]	@ (8014aa8 <puts+0xc>)
 8014a9e:	4601      	mov	r1, r0
 8014aa0:	6818      	ldr	r0, [r3, #0]
 8014aa2:	f7ff bfa5 	b.w	80149f0 <_puts_r>
 8014aa6:	bf00      	nop
 8014aa8:	200001d4 	.word	0x200001d4

08014aac <memset>:
 8014aac:	4402      	add	r2, r0
 8014aae:	4603      	mov	r3, r0
 8014ab0:	4293      	cmp	r3, r2
 8014ab2:	d100      	bne.n	8014ab6 <memset+0xa>
 8014ab4:	4770      	bx	lr
 8014ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8014aba:	e7f9      	b.n	8014ab0 <memset+0x4>

08014abc <strchr>:
 8014abc:	b2c9      	uxtb	r1, r1
 8014abe:	4603      	mov	r3, r0
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ac6:	b112      	cbz	r2, 8014ace <strchr+0x12>
 8014ac8:	428a      	cmp	r2, r1
 8014aca:	d1f9      	bne.n	8014ac0 <strchr+0x4>
 8014acc:	4770      	bx	lr
 8014ace:	2900      	cmp	r1, #0
 8014ad0:	bf18      	it	ne
 8014ad2:	2000      	movne	r0, #0
 8014ad4:	4770      	bx	lr

08014ad6 <strncmp>:
 8014ad6:	b510      	push	{r4, lr}
 8014ad8:	b16a      	cbz	r2, 8014af6 <strncmp+0x20>
 8014ada:	3901      	subs	r1, #1
 8014adc:	1884      	adds	r4, r0, r2
 8014ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ae2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d103      	bne.n	8014af2 <strncmp+0x1c>
 8014aea:	42a0      	cmp	r0, r4
 8014aec:	d001      	beq.n	8014af2 <strncmp+0x1c>
 8014aee:	2a00      	cmp	r2, #0
 8014af0:	d1f5      	bne.n	8014ade <strncmp+0x8>
 8014af2:	1ad0      	subs	r0, r2, r3
 8014af4:	bd10      	pop	{r4, pc}
 8014af6:	4610      	mov	r0, r2
 8014af8:	e7fc      	b.n	8014af4 <strncmp+0x1e>

08014afa <strncpy>:
 8014afa:	b510      	push	{r4, lr}
 8014afc:	3901      	subs	r1, #1
 8014afe:	4603      	mov	r3, r0
 8014b00:	b132      	cbz	r2, 8014b10 <strncpy+0x16>
 8014b02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014b06:	f803 4b01 	strb.w	r4, [r3], #1
 8014b0a:	3a01      	subs	r2, #1
 8014b0c:	2c00      	cmp	r4, #0
 8014b0e:	d1f7      	bne.n	8014b00 <strncpy+0x6>
 8014b10:	441a      	add	r2, r3
 8014b12:	2100      	movs	r1, #0
 8014b14:	4293      	cmp	r3, r2
 8014b16:	d100      	bne.n	8014b1a <strncpy+0x20>
 8014b18:	bd10      	pop	{r4, pc}
 8014b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8014b1e:	e7f9      	b.n	8014b14 <strncpy+0x1a>

08014b20 <strtok>:
 8014b20:	4b16      	ldr	r3, [pc, #88]	@ (8014b7c <strtok+0x5c>)
 8014b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b26:	681f      	ldr	r7, [r3, #0]
 8014b28:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014b2a:	4605      	mov	r5, r0
 8014b2c:	460e      	mov	r6, r1
 8014b2e:	b9ec      	cbnz	r4, 8014b6c <strtok+0x4c>
 8014b30:	2050      	movs	r0, #80	@ 0x50
 8014b32:	f001 ff51 	bl	80169d8 <malloc>
 8014b36:	4602      	mov	r2, r0
 8014b38:	6478      	str	r0, [r7, #68]	@ 0x44
 8014b3a:	b920      	cbnz	r0, 8014b46 <strtok+0x26>
 8014b3c:	4b10      	ldr	r3, [pc, #64]	@ (8014b80 <strtok+0x60>)
 8014b3e:	4811      	ldr	r0, [pc, #68]	@ (8014b84 <strtok+0x64>)
 8014b40:	215b      	movs	r1, #91	@ 0x5b
 8014b42:	f000 f8e7 	bl	8014d14 <__assert_func>
 8014b46:	e9c0 4400 	strd	r4, r4, [r0]
 8014b4a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014b4e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014b52:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8014b56:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8014b5a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8014b5e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8014b62:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8014b66:	6184      	str	r4, [r0, #24]
 8014b68:	7704      	strb	r4, [r0, #28]
 8014b6a:	6244      	str	r4, [r0, #36]	@ 0x24
 8014b6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014b6e:	4631      	mov	r1, r6
 8014b70:	4628      	mov	r0, r5
 8014b72:	2301      	movs	r3, #1
 8014b74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b78:	f000 b806 	b.w	8014b88 <__strtok_r>
 8014b7c:	200001d4 	.word	0x200001d4
 8014b80:	08018781 	.word	0x08018781
 8014b84:	08018798 	.word	0x08018798

08014b88 <__strtok_r>:
 8014b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b8a:	4604      	mov	r4, r0
 8014b8c:	b908      	cbnz	r0, 8014b92 <__strtok_r+0xa>
 8014b8e:	6814      	ldr	r4, [r2, #0]
 8014b90:	b144      	cbz	r4, 8014ba4 <__strtok_r+0x1c>
 8014b92:	4620      	mov	r0, r4
 8014b94:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014b98:	460f      	mov	r7, r1
 8014b9a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014b9e:	b91e      	cbnz	r6, 8014ba8 <__strtok_r+0x20>
 8014ba0:	b965      	cbnz	r5, 8014bbc <__strtok_r+0x34>
 8014ba2:	6015      	str	r5, [r2, #0]
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	e005      	b.n	8014bb4 <__strtok_r+0x2c>
 8014ba8:	42b5      	cmp	r5, r6
 8014baa:	d1f6      	bne.n	8014b9a <__strtok_r+0x12>
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d1f0      	bne.n	8014b92 <__strtok_r+0xa>
 8014bb0:	6014      	str	r4, [r2, #0]
 8014bb2:	7003      	strb	r3, [r0, #0]
 8014bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bb6:	461c      	mov	r4, r3
 8014bb8:	e00c      	b.n	8014bd4 <__strtok_r+0x4c>
 8014bba:	b91d      	cbnz	r5, 8014bc4 <__strtok_r+0x3c>
 8014bbc:	4627      	mov	r7, r4
 8014bbe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014bc2:	460e      	mov	r6, r1
 8014bc4:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014bc8:	42ab      	cmp	r3, r5
 8014bca:	d1f6      	bne.n	8014bba <__strtok_r+0x32>
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d0f2      	beq.n	8014bb6 <__strtok_r+0x2e>
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	703b      	strb	r3, [r7, #0]
 8014bd4:	6014      	str	r4, [r2, #0]
 8014bd6:	e7ed      	b.n	8014bb4 <__strtok_r+0x2c>

08014bd8 <_lseek_r>:
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	4d07      	ldr	r5, [pc, #28]	@ (8014bf8 <_lseek_r+0x20>)
 8014bdc:	4604      	mov	r4, r0
 8014bde:	4608      	mov	r0, r1
 8014be0:	4611      	mov	r1, r2
 8014be2:	2200      	movs	r2, #0
 8014be4:	602a      	str	r2, [r5, #0]
 8014be6:	461a      	mov	r2, r3
 8014be8:	f7ee fc2f 	bl	800344a <_lseek>
 8014bec:	1c43      	adds	r3, r0, #1
 8014bee:	d102      	bne.n	8014bf6 <_lseek_r+0x1e>
 8014bf0:	682b      	ldr	r3, [r5, #0]
 8014bf2:	b103      	cbz	r3, 8014bf6 <_lseek_r+0x1e>
 8014bf4:	6023      	str	r3, [r4, #0]
 8014bf6:	bd38      	pop	{r3, r4, r5, pc}
 8014bf8:	200067ac 	.word	0x200067ac

08014bfc <_read_r>:
 8014bfc:	b538      	push	{r3, r4, r5, lr}
 8014bfe:	4d07      	ldr	r5, [pc, #28]	@ (8014c1c <_read_r+0x20>)
 8014c00:	4604      	mov	r4, r0
 8014c02:	4608      	mov	r0, r1
 8014c04:	4611      	mov	r1, r2
 8014c06:	2200      	movs	r2, #0
 8014c08:	602a      	str	r2, [r5, #0]
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	f7ee fbd9 	bl	80033c2 <_read>
 8014c10:	1c43      	adds	r3, r0, #1
 8014c12:	d102      	bne.n	8014c1a <_read_r+0x1e>
 8014c14:	682b      	ldr	r3, [r5, #0]
 8014c16:	b103      	cbz	r3, 8014c1a <_read_r+0x1e>
 8014c18:	6023      	str	r3, [r4, #0]
 8014c1a:	bd38      	pop	{r3, r4, r5, pc}
 8014c1c:	200067ac 	.word	0x200067ac

08014c20 <_write_r>:
 8014c20:	b538      	push	{r3, r4, r5, lr}
 8014c22:	4d07      	ldr	r5, [pc, #28]	@ (8014c40 <_write_r+0x20>)
 8014c24:	4604      	mov	r4, r0
 8014c26:	4608      	mov	r0, r1
 8014c28:	4611      	mov	r1, r2
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	602a      	str	r2, [r5, #0]
 8014c2e:	461a      	mov	r2, r3
 8014c30:	f7ee feb2 	bl	8003998 <_write>
 8014c34:	1c43      	adds	r3, r0, #1
 8014c36:	d102      	bne.n	8014c3e <_write_r+0x1e>
 8014c38:	682b      	ldr	r3, [r5, #0]
 8014c3a:	b103      	cbz	r3, 8014c3e <_write_r+0x1e>
 8014c3c:	6023      	str	r3, [r4, #0]
 8014c3e:	bd38      	pop	{r3, r4, r5, pc}
 8014c40:	200067ac 	.word	0x200067ac

08014c44 <__errno>:
 8014c44:	4b01      	ldr	r3, [pc, #4]	@ (8014c4c <__errno+0x8>)
 8014c46:	6818      	ldr	r0, [r3, #0]
 8014c48:	4770      	bx	lr
 8014c4a:	bf00      	nop
 8014c4c:	200001d4 	.word	0x200001d4

08014c50 <__libc_init_array>:
 8014c50:	b570      	push	{r4, r5, r6, lr}
 8014c52:	4d0d      	ldr	r5, [pc, #52]	@ (8014c88 <__libc_init_array+0x38>)
 8014c54:	4c0d      	ldr	r4, [pc, #52]	@ (8014c8c <__libc_init_array+0x3c>)
 8014c56:	1b64      	subs	r4, r4, r5
 8014c58:	10a4      	asrs	r4, r4, #2
 8014c5a:	2600      	movs	r6, #0
 8014c5c:	42a6      	cmp	r6, r4
 8014c5e:	d109      	bne.n	8014c74 <__libc_init_array+0x24>
 8014c60:	4d0b      	ldr	r5, [pc, #44]	@ (8014c90 <__libc_init_array+0x40>)
 8014c62:	4c0c      	ldr	r4, [pc, #48]	@ (8014c94 <__libc_init_array+0x44>)
 8014c64:	f003 f900 	bl	8017e68 <_init>
 8014c68:	1b64      	subs	r4, r4, r5
 8014c6a:	10a4      	asrs	r4, r4, #2
 8014c6c:	2600      	movs	r6, #0
 8014c6e:	42a6      	cmp	r6, r4
 8014c70:	d105      	bne.n	8014c7e <__libc_init_array+0x2e>
 8014c72:	bd70      	pop	{r4, r5, r6, pc}
 8014c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c78:	4798      	blx	r3
 8014c7a:	3601      	adds	r6, #1
 8014c7c:	e7ee      	b.n	8014c5c <__libc_init_array+0xc>
 8014c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c82:	4798      	blx	r3
 8014c84:	3601      	adds	r6, #1
 8014c86:	e7f2      	b.n	8014c6e <__libc_init_array+0x1e>
 8014c88:	08018bf0 	.word	0x08018bf0
 8014c8c:	08018bf0 	.word	0x08018bf0
 8014c90:	08018bf0 	.word	0x08018bf0
 8014c94:	08018bf4 	.word	0x08018bf4

08014c98 <__retarget_lock_init_recursive>:
 8014c98:	4770      	bx	lr

08014c9a <__retarget_lock_acquire_recursive>:
 8014c9a:	4770      	bx	lr

08014c9c <__retarget_lock_release_recursive>:
 8014c9c:	4770      	bx	lr
	...

08014ca0 <_localeconv_r>:
 8014ca0:	4800      	ldr	r0, [pc, #0]	@ (8014ca4 <_localeconv_r+0x4>)
 8014ca2:	4770      	bx	lr
 8014ca4:	20000158 	.word	0x20000158

08014ca8 <_close_r>:
 8014ca8:	b538      	push	{r3, r4, r5, lr}
 8014caa:	4d06      	ldr	r5, [pc, #24]	@ (8014cc4 <_close_r+0x1c>)
 8014cac:	2300      	movs	r3, #0
 8014cae:	4604      	mov	r4, r0
 8014cb0:	4608      	mov	r0, r1
 8014cb2:	602b      	str	r3, [r5, #0]
 8014cb4:	f7ee fba2 	bl	80033fc <_close>
 8014cb8:	1c43      	adds	r3, r0, #1
 8014cba:	d102      	bne.n	8014cc2 <_close_r+0x1a>
 8014cbc:	682b      	ldr	r3, [r5, #0]
 8014cbe:	b103      	cbz	r3, 8014cc2 <_close_r+0x1a>
 8014cc0:	6023      	str	r3, [r4, #0]
 8014cc2:	bd38      	pop	{r3, r4, r5, pc}
 8014cc4:	200067ac 	.word	0x200067ac

08014cc8 <strcpy>:
 8014cc8:	4603      	mov	r3, r0
 8014cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014cce:	f803 2b01 	strb.w	r2, [r3], #1
 8014cd2:	2a00      	cmp	r2, #0
 8014cd4:	d1f9      	bne.n	8014cca <strcpy+0x2>
 8014cd6:	4770      	bx	lr

08014cd8 <memcpy>:
 8014cd8:	440a      	add	r2, r1
 8014cda:	4291      	cmp	r1, r2
 8014cdc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8014ce0:	d100      	bne.n	8014ce4 <memcpy+0xc>
 8014ce2:	4770      	bx	lr
 8014ce4:	b510      	push	{r4, lr}
 8014ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014cea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014cee:	4291      	cmp	r1, r2
 8014cf0:	d1f9      	bne.n	8014ce6 <memcpy+0xe>
 8014cf2:	bd10      	pop	{r4, pc}
 8014cf4:	0000      	movs	r0, r0
	...

08014cf8 <nan>:
 8014cf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014d00 <nan+0x8>
 8014cfc:	4770      	bx	lr
 8014cfe:	bf00      	nop
 8014d00:	00000000 	.word	0x00000000
 8014d04:	7ff80000 	.word	0x7ff80000

08014d08 <nanf>:
 8014d08:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014d10 <nanf+0x8>
 8014d0c:	4770      	bx	lr
 8014d0e:	bf00      	nop
 8014d10:	7fc00000 	.word	0x7fc00000

08014d14 <__assert_func>:
 8014d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014d16:	4614      	mov	r4, r2
 8014d18:	461a      	mov	r2, r3
 8014d1a:	4b09      	ldr	r3, [pc, #36]	@ (8014d40 <__assert_func+0x2c>)
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	4605      	mov	r5, r0
 8014d20:	68d8      	ldr	r0, [r3, #12]
 8014d22:	b14c      	cbz	r4, 8014d38 <__assert_func+0x24>
 8014d24:	4b07      	ldr	r3, [pc, #28]	@ (8014d44 <__assert_func+0x30>)
 8014d26:	9100      	str	r1, [sp, #0]
 8014d28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014d2c:	4906      	ldr	r1, [pc, #24]	@ (8014d48 <__assert_func+0x34>)
 8014d2e:	462b      	mov	r3, r5
 8014d30:	f002 fe32 	bl	8017998 <fiprintf>
 8014d34:	f003 f830 	bl	8017d98 <abort>
 8014d38:	4b04      	ldr	r3, [pc, #16]	@ (8014d4c <__assert_func+0x38>)
 8014d3a:	461c      	mov	r4, r3
 8014d3c:	e7f3      	b.n	8014d26 <__assert_func+0x12>
 8014d3e:	bf00      	nop
 8014d40:	200001d4 	.word	0x200001d4
 8014d44:	080187fa 	.word	0x080187fa
 8014d48:	08018807 	.word	0x08018807
 8014d4c:	08018835 	.word	0x08018835

08014d50 <quorem>:
 8014d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d54:	6903      	ldr	r3, [r0, #16]
 8014d56:	690c      	ldr	r4, [r1, #16]
 8014d58:	42a3      	cmp	r3, r4
 8014d5a:	4607      	mov	r7, r0
 8014d5c:	db7e      	blt.n	8014e5c <quorem+0x10c>
 8014d5e:	3c01      	subs	r4, #1
 8014d60:	f101 0814 	add.w	r8, r1, #20
 8014d64:	00a3      	lsls	r3, r4, #2
 8014d66:	f100 0514 	add.w	r5, r0, #20
 8014d6a:	9300      	str	r3, [sp, #0]
 8014d6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d70:	9301      	str	r3, [sp, #4]
 8014d72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d7a:	3301      	adds	r3, #1
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d82:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d86:	d32e      	bcc.n	8014de6 <quorem+0x96>
 8014d88:	f04f 0a00 	mov.w	sl, #0
 8014d8c:	46c4      	mov	ip, r8
 8014d8e:	46ae      	mov	lr, r5
 8014d90:	46d3      	mov	fp, sl
 8014d92:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014d96:	b298      	uxth	r0, r3
 8014d98:	fb06 a000 	mla	r0, r6, r0, sl
 8014d9c:	0c02      	lsrs	r2, r0, #16
 8014d9e:	0c1b      	lsrs	r3, r3, #16
 8014da0:	fb06 2303 	mla	r3, r6, r3, r2
 8014da4:	f8de 2000 	ldr.w	r2, [lr]
 8014da8:	b280      	uxth	r0, r0
 8014daa:	b292      	uxth	r2, r2
 8014dac:	1a12      	subs	r2, r2, r0
 8014dae:	445a      	add	r2, fp
 8014db0:	f8de 0000 	ldr.w	r0, [lr]
 8014db4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014dbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014dc2:	b292      	uxth	r2, r2
 8014dc4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014dc8:	45e1      	cmp	r9, ip
 8014dca:	f84e 2b04 	str.w	r2, [lr], #4
 8014dce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014dd2:	d2de      	bcs.n	8014d92 <quorem+0x42>
 8014dd4:	9b00      	ldr	r3, [sp, #0]
 8014dd6:	58eb      	ldr	r3, [r5, r3]
 8014dd8:	b92b      	cbnz	r3, 8014de6 <quorem+0x96>
 8014dda:	9b01      	ldr	r3, [sp, #4]
 8014ddc:	3b04      	subs	r3, #4
 8014dde:	429d      	cmp	r5, r3
 8014de0:	461a      	mov	r2, r3
 8014de2:	d32f      	bcc.n	8014e44 <quorem+0xf4>
 8014de4:	613c      	str	r4, [r7, #16]
 8014de6:	4638      	mov	r0, r7
 8014de8:	f002 fbae 	bl	8017548 <__mcmp>
 8014dec:	2800      	cmp	r0, #0
 8014dee:	db25      	blt.n	8014e3c <quorem+0xec>
 8014df0:	4629      	mov	r1, r5
 8014df2:	2000      	movs	r0, #0
 8014df4:	f858 2b04 	ldr.w	r2, [r8], #4
 8014df8:	f8d1 c000 	ldr.w	ip, [r1]
 8014dfc:	fa1f fe82 	uxth.w	lr, r2
 8014e00:	fa1f f38c 	uxth.w	r3, ip
 8014e04:	eba3 030e 	sub.w	r3, r3, lr
 8014e08:	4403      	add	r3, r0
 8014e0a:	0c12      	lsrs	r2, r2, #16
 8014e0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014e10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014e14:	b29b      	uxth	r3, r3
 8014e16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014e1a:	45c1      	cmp	r9, r8
 8014e1c:	f841 3b04 	str.w	r3, [r1], #4
 8014e20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e24:	d2e6      	bcs.n	8014df4 <quorem+0xa4>
 8014e26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e2e:	b922      	cbnz	r2, 8014e3a <quorem+0xea>
 8014e30:	3b04      	subs	r3, #4
 8014e32:	429d      	cmp	r5, r3
 8014e34:	461a      	mov	r2, r3
 8014e36:	d30b      	bcc.n	8014e50 <quorem+0x100>
 8014e38:	613c      	str	r4, [r7, #16]
 8014e3a:	3601      	adds	r6, #1
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	b003      	add	sp, #12
 8014e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e44:	6812      	ldr	r2, [r2, #0]
 8014e46:	3b04      	subs	r3, #4
 8014e48:	2a00      	cmp	r2, #0
 8014e4a:	d1cb      	bne.n	8014de4 <quorem+0x94>
 8014e4c:	3c01      	subs	r4, #1
 8014e4e:	e7c6      	b.n	8014dde <quorem+0x8e>
 8014e50:	6812      	ldr	r2, [r2, #0]
 8014e52:	3b04      	subs	r3, #4
 8014e54:	2a00      	cmp	r2, #0
 8014e56:	d1ef      	bne.n	8014e38 <quorem+0xe8>
 8014e58:	3c01      	subs	r4, #1
 8014e5a:	e7ea      	b.n	8014e32 <quorem+0xe2>
 8014e5c:	2000      	movs	r0, #0
 8014e5e:	e7ee      	b.n	8014e3e <quorem+0xee>

08014e60 <_dtoa_r>:
 8014e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e64:	69c7      	ldr	r7, [r0, #28]
 8014e66:	b097      	sub	sp, #92	@ 0x5c
 8014e68:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014e6c:	ec55 4b10 	vmov	r4, r5, d0
 8014e70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014e72:	9107      	str	r1, [sp, #28]
 8014e74:	4681      	mov	r9, r0
 8014e76:	920c      	str	r2, [sp, #48]	@ 0x30
 8014e78:	9311      	str	r3, [sp, #68]	@ 0x44
 8014e7a:	b97f      	cbnz	r7, 8014e9c <_dtoa_r+0x3c>
 8014e7c:	2010      	movs	r0, #16
 8014e7e:	f001 fdab 	bl	80169d8 <malloc>
 8014e82:	4602      	mov	r2, r0
 8014e84:	f8c9 001c 	str.w	r0, [r9, #28]
 8014e88:	b920      	cbnz	r0, 8014e94 <_dtoa_r+0x34>
 8014e8a:	4ba9      	ldr	r3, [pc, #676]	@ (8015130 <_dtoa_r+0x2d0>)
 8014e8c:	21ef      	movs	r1, #239	@ 0xef
 8014e8e:	48a9      	ldr	r0, [pc, #676]	@ (8015134 <_dtoa_r+0x2d4>)
 8014e90:	f7ff ff40 	bl	8014d14 <__assert_func>
 8014e94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014e98:	6007      	str	r7, [r0, #0]
 8014e9a:	60c7      	str	r7, [r0, #12]
 8014e9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014ea0:	6819      	ldr	r1, [r3, #0]
 8014ea2:	b159      	cbz	r1, 8014ebc <_dtoa_r+0x5c>
 8014ea4:	685a      	ldr	r2, [r3, #4]
 8014ea6:	604a      	str	r2, [r1, #4]
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	4093      	lsls	r3, r2
 8014eac:	608b      	str	r3, [r1, #8]
 8014eae:	4648      	mov	r0, r9
 8014eb0:	f002 f8ce 	bl	8017050 <_Bfree>
 8014eb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014eb8:	2200      	movs	r2, #0
 8014eba:	601a      	str	r2, [r3, #0]
 8014ebc:	1e2b      	subs	r3, r5, #0
 8014ebe:	bfb9      	ittee	lt
 8014ec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014ec4:	9305      	strlt	r3, [sp, #20]
 8014ec6:	2300      	movge	r3, #0
 8014ec8:	6033      	strge	r3, [r6, #0]
 8014eca:	9f05      	ldr	r7, [sp, #20]
 8014ecc:	4b9a      	ldr	r3, [pc, #616]	@ (8015138 <_dtoa_r+0x2d8>)
 8014ece:	bfbc      	itt	lt
 8014ed0:	2201      	movlt	r2, #1
 8014ed2:	6032      	strlt	r2, [r6, #0]
 8014ed4:	43bb      	bics	r3, r7
 8014ed6:	d112      	bne.n	8014efe <_dtoa_r+0x9e>
 8014ed8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014eda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014ede:	6013      	str	r3, [r2, #0]
 8014ee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014ee4:	4323      	orrs	r3, r4
 8014ee6:	f000 855a 	beq.w	801599e <_dtoa_r+0xb3e>
 8014eea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014eec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801514c <_dtoa_r+0x2ec>
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	f000 855c 	beq.w	80159ae <_dtoa_r+0xb4e>
 8014ef6:	f10a 0303 	add.w	r3, sl, #3
 8014efa:	f000 bd56 	b.w	80159aa <_dtoa_r+0xb4a>
 8014efe:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014f02:	2200      	movs	r2, #0
 8014f04:	ec51 0b17 	vmov	r0, r1, d7
 8014f08:	2300      	movs	r3, #0
 8014f0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014f0e:	f7eb fdeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8014f12:	4680      	mov	r8, r0
 8014f14:	b158      	cbz	r0, 8014f2e <_dtoa_r+0xce>
 8014f16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014f18:	2301      	movs	r3, #1
 8014f1a:	6013      	str	r3, [r2, #0]
 8014f1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014f1e:	b113      	cbz	r3, 8014f26 <_dtoa_r+0xc6>
 8014f20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014f22:	4b86      	ldr	r3, [pc, #536]	@ (801513c <_dtoa_r+0x2dc>)
 8014f24:	6013      	str	r3, [r2, #0]
 8014f26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8015150 <_dtoa_r+0x2f0>
 8014f2a:	f000 bd40 	b.w	80159ae <_dtoa_r+0xb4e>
 8014f2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8014f32:	aa14      	add	r2, sp, #80	@ 0x50
 8014f34:	a915      	add	r1, sp, #84	@ 0x54
 8014f36:	4648      	mov	r0, r9
 8014f38:	f002 fc26 	bl	8017788 <__d2b>
 8014f3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014f40:	9002      	str	r0, [sp, #8]
 8014f42:	2e00      	cmp	r6, #0
 8014f44:	d078      	beq.n	8015038 <_dtoa_r+0x1d8>
 8014f46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014f48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014f54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014f58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014f5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014f60:	4619      	mov	r1, r3
 8014f62:	2200      	movs	r2, #0
 8014f64:	4b76      	ldr	r3, [pc, #472]	@ (8015140 <_dtoa_r+0x2e0>)
 8014f66:	f7eb f99f 	bl	80002a8 <__aeabi_dsub>
 8014f6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8015118 <_dtoa_r+0x2b8>)
 8014f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f70:	f7eb fb52 	bl	8000618 <__aeabi_dmul>
 8014f74:	a36a      	add	r3, pc, #424	@ (adr r3, 8015120 <_dtoa_r+0x2c0>)
 8014f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7a:	f7eb f997 	bl	80002ac <__adddf3>
 8014f7e:	4604      	mov	r4, r0
 8014f80:	4630      	mov	r0, r6
 8014f82:	460d      	mov	r5, r1
 8014f84:	f7eb fade 	bl	8000544 <__aeabi_i2d>
 8014f88:	a367      	add	r3, pc, #412	@ (adr r3, 8015128 <_dtoa_r+0x2c8>)
 8014f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8e:	f7eb fb43 	bl	8000618 <__aeabi_dmul>
 8014f92:	4602      	mov	r2, r0
 8014f94:	460b      	mov	r3, r1
 8014f96:	4620      	mov	r0, r4
 8014f98:	4629      	mov	r1, r5
 8014f9a:	f7eb f987 	bl	80002ac <__adddf3>
 8014f9e:	4604      	mov	r4, r0
 8014fa0:	460d      	mov	r5, r1
 8014fa2:	f7eb fde9 	bl	8000b78 <__aeabi_d2iz>
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	4607      	mov	r7, r0
 8014faa:	2300      	movs	r3, #0
 8014fac:	4620      	mov	r0, r4
 8014fae:	4629      	mov	r1, r5
 8014fb0:	f7eb fda4 	bl	8000afc <__aeabi_dcmplt>
 8014fb4:	b140      	cbz	r0, 8014fc8 <_dtoa_r+0x168>
 8014fb6:	4638      	mov	r0, r7
 8014fb8:	f7eb fac4 	bl	8000544 <__aeabi_i2d>
 8014fbc:	4622      	mov	r2, r4
 8014fbe:	462b      	mov	r3, r5
 8014fc0:	f7eb fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 8014fc4:	b900      	cbnz	r0, 8014fc8 <_dtoa_r+0x168>
 8014fc6:	3f01      	subs	r7, #1
 8014fc8:	2f16      	cmp	r7, #22
 8014fca:	d852      	bhi.n	8015072 <_dtoa_r+0x212>
 8014fcc:	4b5d      	ldr	r3, [pc, #372]	@ (8015144 <_dtoa_r+0x2e4>)
 8014fce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014fda:	f7eb fd8f 	bl	8000afc <__aeabi_dcmplt>
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	d049      	beq.n	8015076 <_dtoa_r+0x216>
 8014fe2:	3f01      	subs	r7, #1
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	9310      	str	r3, [sp, #64]	@ 0x40
 8014fe8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014fea:	1b9b      	subs	r3, r3, r6
 8014fec:	1e5a      	subs	r2, r3, #1
 8014fee:	bf45      	ittet	mi
 8014ff0:	f1c3 0301 	rsbmi	r3, r3, #1
 8014ff4:	9300      	strmi	r3, [sp, #0]
 8014ff6:	2300      	movpl	r3, #0
 8014ff8:	2300      	movmi	r3, #0
 8014ffa:	9206      	str	r2, [sp, #24]
 8014ffc:	bf54      	ite	pl
 8014ffe:	9300      	strpl	r3, [sp, #0]
 8015000:	9306      	strmi	r3, [sp, #24]
 8015002:	2f00      	cmp	r7, #0
 8015004:	db39      	blt.n	801507a <_dtoa_r+0x21a>
 8015006:	9b06      	ldr	r3, [sp, #24]
 8015008:	970d      	str	r7, [sp, #52]	@ 0x34
 801500a:	443b      	add	r3, r7
 801500c:	9306      	str	r3, [sp, #24]
 801500e:	2300      	movs	r3, #0
 8015010:	9308      	str	r3, [sp, #32]
 8015012:	9b07      	ldr	r3, [sp, #28]
 8015014:	2b09      	cmp	r3, #9
 8015016:	d863      	bhi.n	80150e0 <_dtoa_r+0x280>
 8015018:	2b05      	cmp	r3, #5
 801501a:	bfc4      	itt	gt
 801501c:	3b04      	subgt	r3, #4
 801501e:	9307      	strgt	r3, [sp, #28]
 8015020:	9b07      	ldr	r3, [sp, #28]
 8015022:	f1a3 0302 	sub.w	r3, r3, #2
 8015026:	bfcc      	ite	gt
 8015028:	2400      	movgt	r4, #0
 801502a:	2401      	movle	r4, #1
 801502c:	2b03      	cmp	r3, #3
 801502e:	d863      	bhi.n	80150f8 <_dtoa_r+0x298>
 8015030:	e8df f003 	tbb	[pc, r3]
 8015034:	2b375452 	.word	0x2b375452
 8015038:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801503c:	441e      	add	r6, r3
 801503e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8015042:	2b20      	cmp	r3, #32
 8015044:	bfc1      	itttt	gt
 8015046:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801504a:	409f      	lslgt	r7, r3
 801504c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8015050:	fa24 f303 	lsrgt.w	r3, r4, r3
 8015054:	bfd6      	itet	le
 8015056:	f1c3 0320 	rsble	r3, r3, #32
 801505a:	ea47 0003 	orrgt.w	r0, r7, r3
 801505e:	fa04 f003 	lslle.w	r0, r4, r3
 8015062:	f7eb fa5f 	bl	8000524 <__aeabi_ui2d>
 8015066:	2201      	movs	r2, #1
 8015068:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801506c:	3e01      	subs	r6, #1
 801506e:	9212      	str	r2, [sp, #72]	@ 0x48
 8015070:	e776      	b.n	8014f60 <_dtoa_r+0x100>
 8015072:	2301      	movs	r3, #1
 8015074:	e7b7      	b.n	8014fe6 <_dtoa_r+0x186>
 8015076:	9010      	str	r0, [sp, #64]	@ 0x40
 8015078:	e7b6      	b.n	8014fe8 <_dtoa_r+0x188>
 801507a:	9b00      	ldr	r3, [sp, #0]
 801507c:	1bdb      	subs	r3, r3, r7
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	427b      	negs	r3, r7
 8015082:	9308      	str	r3, [sp, #32]
 8015084:	2300      	movs	r3, #0
 8015086:	930d      	str	r3, [sp, #52]	@ 0x34
 8015088:	e7c3      	b.n	8015012 <_dtoa_r+0x1b2>
 801508a:	2301      	movs	r3, #1
 801508c:	9309      	str	r3, [sp, #36]	@ 0x24
 801508e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015090:	eb07 0b03 	add.w	fp, r7, r3
 8015094:	f10b 0301 	add.w	r3, fp, #1
 8015098:	2b01      	cmp	r3, #1
 801509a:	9303      	str	r3, [sp, #12]
 801509c:	bfb8      	it	lt
 801509e:	2301      	movlt	r3, #1
 80150a0:	e006      	b.n	80150b0 <_dtoa_r+0x250>
 80150a2:	2301      	movs	r3, #1
 80150a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80150a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	dd28      	ble.n	80150fe <_dtoa_r+0x29e>
 80150ac:	469b      	mov	fp, r3
 80150ae:	9303      	str	r3, [sp, #12]
 80150b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80150b4:	2100      	movs	r1, #0
 80150b6:	2204      	movs	r2, #4
 80150b8:	f102 0514 	add.w	r5, r2, #20
 80150bc:	429d      	cmp	r5, r3
 80150be:	d926      	bls.n	801510e <_dtoa_r+0x2ae>
 80150c0:	6041      	str	r1, [r0, #4]
 80150c2:	4648      	mov	r0, r9
 80150c4:	f001 ff84 	bl	8016fd0 <_Balloc>
 80150c8:	4682      	mov	sl, r0
 80150ca:	2800      	cmp	r0, #0
 80150cc:	d142      	bne.n	8015154 <_dtoa_r+0x2f4>
 80150ce:	4b1e      	ldr	r3, [pc, #120]	@ (8015148 <_dtoa_r+0x2e8>)
 80150d0:	4602      	mov	r2, r0
 80150d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80150d6:	e6da      	b.n	8014e8e <_dtoa_r+0x2e>
 80150d8:	2300      	movs	r3, #0
 80150da:	e7e3      	b.n	80150a4 <_dtoa_r+0x244>
 80150dc:	2300      	movs	r3, #0
 80150de:	e7d5      	b.n	801508c <_dtoa_r+0x22c>
 80150e0:	2401      	movs	r4, #1
 80150e2:	2300      	movs	r3, #0
 80150e4:	9307      	str	r3, [sp, #28]
 80150e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80150e8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80150ec:	2200      	movs	r2, #0
 80150ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80150f2:	2312      	movs	r3, #18
 80150f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80150f6:	e7db      	b.n	80150b0 <_dtoa_r+0x250>
 80150f8:	2301      	movs	r3, #1
 80150fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80150fc:	e7f4      	b.n	80150e8 <_dtoa_r+0x288>
 80150fe:	f04f 0b01 	mov.w	fp, #1
 8015102:	f8cd b00c 	str.w	fp, [sp, #12]
 8015106:	465b      	mov	r3, fp
 8015108:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801510c:	e7d0      	b.n	80150b0 <_dtoa_r+0x250>
 801510e:	3101      	adds	r1, #1
 8015110:	0052      	lsls	r2, r2, #1
 8015112:	e7d1      	b.n	80150b8 <_dtoa_r+0x258>
 8015114:	f3af 8000 	nop.w
 8015118:	636f4361 	.word	0x636f4361
 801511c:	3fd287a7 	.word	0x3fd287a7
 8015120:	8b60c8b3 	.word	0x8b60c8b3
 8015124:	3fc68a28 	.word	0x3fc68a28
 8015128:	509f79fb 	.word	0x509f79fb
 801512c:	3fd34413 	.word	0x3fd34413
 8015130:	08018781 	.word	0x08018781
 8015134:	08018843 	.word	0x08018843
 8015138:	7ff00000 	.word	0x7ff00000
 801513c:	08018934 	.word	0x08018934
 8015140:	3ff80000 	.word	0x3ff80000
 8015144:	08018b20 	.word	0x08018b20
 8015148:	0801889b 	.word	0x0801889b
 801514c:	0801883f 	.word	0x0801883f
 8015150:	08018933 	.word	0x08018933
 8015154:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8015158:	6018      	str	r0, [r3, #0]
 801515a:	9b03      	ldr	r3, [sp, #12]
 801515c:	2b0e      	cmp	r3, #14
 801515e:	f200 80a1 	bhi.w	80152a4 <_dtoa_r+0x444>
 8015162:	2c00      	cmp	r4, #0
 8015164:	f000 809e 	beq.w	80152a4 <_dtoa_r+0x444>
 8015168:	2f00      	cmp	r7, #0
 801516a:	dd33      	ble.n	80151d4 <_dtoa_r+0x374>
 801516c:	4b9c      	ldr	r3, [pc, #624]	@ (80153e0 <_dtoa_r+0x580>)
 801516e:	f007 020f 	and.w	r2, r7, #15
 8015172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015176:	ed93 7b00 	vldr	d7, [r3]
 801517a:	05f8      	lsls	r0, r7, #23
 801517c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8015180:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015184:	d516      	bpl.n	80151b4 <_dtoa_r+0x354>
 8015186:	4b97      	ldr	r3, [pc, #604]	@ (80153e4 <_dtoa_r+0x584>)
 8015188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801518c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015190:	f7eb fb6c 	bl	800086c <__aeabi_ddiv>
 8015194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015198:	f004 040f 	and.w	r4, r4, #15
 801519c:	2603      	movs	r6, #3
 801519e:	4d91      	ldr	r5, [pc, #580]	@ (80153e4 <_dtoa_r+0x584>)
 80151a0:	b954      	cbnz	r4, 80151b8 <_dtoa_r+0x358>
 80151a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80151a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80151aa:	f7eb fb5f 	bl	800086c <__aeabi_ddiv>
 80151ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80151b2:	e028      	b.n	8015206 <_dtoa_r+0x3a6>
 80151b4:	2602      	movs	r6, #2
 80151b6:	e7f2      	b.n	801519e <_dtoa_r+0x33e>
 80151b8:	07e1      	lsls	r1, r4, #31
 80151ba:	d508      	bpl.n	80151ce <_dtoa_r+0x36e>
 80151bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80151c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80151c4:	f7eb fa28 	bl	8000618 <__aeabi_dmul>
 80151c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80151cc:	3601      	adds	r6, #1
 80151ce:	1064      	asrs	r4, r4, #1
 80151d0:	3508      	adds	r5, #8
 80151d2:	e7e5      	b.n	80151a0 <_dtoa_r+0x340>
 80151d4:	f000 80af 	beq.w	8015336 <_dtoa_r+0x4d6>
 80151d8:	427c      	negs	r4, r7
 80151da:	4b81      	ldr	r3, [pc, #516]	@ (80153e0 <_dtoa_r+0x580>)
 80151dc:	4d81      	ldr	r5, [pc, #516]	@ (80153e4 <_dtoa_r+0x584>)
 80151de:	f004 020f 	and.w	r2, r4, #15
 80151e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80151e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80151ee:	f7eb fa13 	bl	8000618 <__aeabi_dmul>
 80151f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80151f6:	1124      	asrs	r4, r4, #4
 80151f8:	2300      	movs	r3, #0
 80151fa:	2602      	movs	r6, #2
 80151fc:	2c00      	cmp	r4, #0
 80151fe:	f040 808f 	bne.w	8015320 <_dtoa_r+0x4c0>
 8015202:	2b00      	cmp	r3, #0
 8015204:	d1d3      	bne.n	80151ae <_dtoa_r+0x34e>
 8015206:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015208:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801520c:	2b00      	cmp	r3, #0
 801520e:	f000 8094 	beq.w	801533a <_dtoa_r+0x4da>
 8015212:	4b75      	ldr	r3, [pc, #468]	@ (80153e8 <_dtoa_r+0x588>)
 8015214:	2200      	movs	r2, #0
 8015216:	4620      	mov	r0, r4
 8015218:	4629      	mov	r1, r5
 801521a:	f7eb fc6f 	bl	8000afc <__aeabi_dcmplt>
 801521e:	2800      	cmp	r0, #0
 8015220:	f000 808b 	beq.w	801533a <_dtoa_r+0x4da>
 8015224:	9b03      	ldr	r3, [sp, #12]
 8015226:	2b00      	cmp	r3, #0
 8015228:	f000 8087 	beq.w	801533a <_dtoa_r+0x4da>
 801522c:	f1bb 0f00 	cmp.w	fp, #0
 8015230:	dd34      	ble.n	801529c <_dtoa_r+0x43c>
 8015232:	4620      	mov	r0, r4
 8015234:	4b6d      	ldr	r3, [pc, #436]	@ (80153ec <_dtoa_r+0x58c>)
 8015236:	2200      	movs	r2, #0
 8015238:	4629      	mov	r1, r5
 801523a:	f7eb f9ed 	bl	8000618 <__aeabi_dmul>
 801523e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015242:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8015246:	3601      	adds	r6, #1
 8015248:	465c      	mov	r4, fp
 801524a:	4630      	mov	r0, r6
 801524c:	f7eb f97a 	bl	8000544 <__aeabi_i2d>
 8015250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015254:	f7eb f9e0 	bl	8000618 <__aeabi_dmul>
 8015258:	4b65      	ldr	r3, [pc, #404]	@ (80153f0 <_dtoa_r+0x590>)
 801525a:	2200      	movs	r2, #0
 801525c:	f7eb f826 	bl	80002ac <__adddf3>
 8015260:	4605      	mov	r5, r0
 8015262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015266:	2c00      	cmp	r4, #0
 8015268:	d16a      	bne.n	8015340 <_dtoa_r+0x4e0>
 801526a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801526e:	4b61      	ldr	r3, [pc, #388]	@ (80153f4 <_dtoa_r+0x594>)
 8015270:	2200      	movs	r2, #0
 8015272:	f7eb f819 	bl	80002a8 <__aeabi_dsub>
 8015276:	4602      	mov	r2, r0
 8015278:	460b      	mov	r3, r1
 801527a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801527e:	462a      	mov	r2, r5
 8015280:	4633      	mov	r3, r6
 8015282:	f7eb fc59 	bl	8000b38 <__aeabi_dcmpgt>
 8015286:	2800      	cmp	r0, #0
 8015288:	f040 8298 	bne.w	80157bc <_dtoa_r+0x95c>
 801528c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015290:	462a      	mov	r2, r5
 8015292:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015296:	f7eb fc31 	bl	8000afc <__aeabi_dcmplt>
 801529a:	bb38      	cbnz	r0, 80152ec <_dtoa_r+0x48c>
 801529c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80152a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80152a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	f2c0 8157 	blt.w	801555a <_dtoa_r+0x6fa>
 80152ac:	2f0e      	cmp	r7, #14
 80152ae:	f300 8154 	bgt.w	801555a <_dtoa_r+0x6fa>
 80152b2:	4b4b      	ldr	r3, [pc, #300]	@ (80153e0 <_dtoa_r+0x580>)
 80152b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80152b8:	ed93 7b00 	vldr	d7, [r3]
 80152bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152be:	2b00      	cmp	r3, #0
 80152c0:	ed8d 7b00 	vstr	d7, [sp]
 80152c4:	f280 80e5 	bge.w	8015492 <_dtoa_r+0x632>
 80152c8:	9b03      	ldr	r3, [sp, #12]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	f300 80e1 	bgt.w	8015492 <_dtoa_r+0x632>
 80152d0:	d10c      	bne.n	80152ec <_dtoa_r+0x48c>
 80152d2:	4b48      	ldr	r3, [pc, #288]	@ (80153f4 <_dtoa_r+0x594>)
 80152d4:	2200      	movs	r2, #0
 80152d6:	ec51 0b17 	vmov	r0, r1, d7
 80152da:	f7eb f99d 	bl	8000618 <__aeabi_dmul>
 80152de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80152e2:	f7eb fc1f 	bl	8000b24 <__aeabi_dcmpge>
 80152e6:	2800      	cmp	r0, #0
 80152e8:	f000 8266 	beq.w	80157b8 <_dtoa_r+0x958>
 80152ec:	2400      	movs	r4, #0
 80152ee:	4625      	mov	r5, r4
 80152f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80152f2:	4656      	mov	r6, sl
 80152f4:	ea6f 0803 	mvn.w	r8, r3
 80152f8:	2700      	movs	r7, #0
 80152fa:	4621      	mov	r1, r4
 80152fc:	4648      	mov	r0, r9
 80152fe:	f001 fea7 	bl	8017050 <_Bfree>
 8015302:	2d00      	cmp	r5, #0
 8015304:	f000 80bd 	beq.w	8015482 <_dtoa_r+0x622>
 8015308:	b12f      	cbz	r7, 8015316 <_dtoa_r+0x4b6>
 801530a:	42af      	cmp	r7, r5
 801530c:	d003      	beq.n	8015316 <_dtoa_r+0x4b6>
 801530e:	4639      	mov	r1, r7
 8015310:	4648      	mov	r0, r9
 8015312:	f001 fe9d 	bl	8017050 <_Bfree>
 8015316:	4629      	mov	r1, r5
 8015318:	4648      	mov	r0, r9
 801531a:	f001 fe99 	bl	8017050 <_Bfree>
 801531e:	e0b0      	b.n	8015482 <_dtoa_r+0x622>
 8015320:	07e2      	lsls	r2, r4, #31
 8015322:	d505      	bpl.n	8015330 <_dtoa_r+0x4d0>
 8015324:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015328:	f7eb f976 	bl	8000618 <__aeabi_dmul>
 801532c:	3601      	adds	r6, #1
 801532e:	2301      	movs	r3, #1
 8015330:	1064      	asrs	r4, r4, #1
 8015332:	3508      	adds	r5, #8
 8015334:	e762      	b.n	80151fc <_dtoa_r+0x39c>
 8015336:	2602      	movs	r6, #2
 8015338:	e765      	b.n	8015206 <_dtoa_r+0x3a6>
 801533a:	9c03      	ldr	r4, [sp, #12]
 801533c:	46b8      	mov	r8, r7
 801533e:	e784      	b.n	801524a <_dtoa_r+0x3ea>
 8015340:	4b27      	ldr	r3, [pc, #156]	@ (80153e0 <_dtoa_r+0x580>)
 8015342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801534c:	4454      	add	r4, sl
 801534e:	2900      	cmp	r1, #0
 8015350:	d054      	beq.n	80153fc <_dtoa_r+0x59c>
 8015352:	4929      	ldr	r1, [pc, #164]	@ (80153f8 <_dtoa_r+0x598>)
 8015354:	2000      	movs	r0, #0
 8015356:	f7eb fa89 	bl	800086c <__aeabi_ddiv>
 801535a:	4633      	mov	r3, r6
 801535c:	462a      	mov	r2, r5
 801535e:	f7ea ffa3 	bl	80002a8 <__aeabi_dsub>
 8015362:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015366:	4656      	mov	r6, sl
 8015368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801536c:	f7eb fc04 	bl	8000b78 <__aeabi_d2iz>
 8015370:	4605      	mov	r5, r0
 8015372:	f7eb f8e7 	bl	8000544 <__aeabi_i2d>
 8015376:	4602      	mov	r2, r0
 8015378:	460b      	mov	r3, r1
 801537a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801537e:	f7ea ff93 	bl	80002a8 <__aeabi_dsub>
 8015382:	3530      	adds	r5, #48	@ 0x30
 8015384:	4602      	mov	r2, r0
 8015386:	460b      	mov	r3, r1
 8015388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801538c:	f806 5b01 	strb.w	r5, [r6], #1
 8015390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8015394:	f7eb fbb2 	bl	8000afc <__aeabi_dcmplt>
 8015398:	2800      	cmp	r0, #0
 801539a:	d172      	bne.n	8015482 <_dtoa_r+0x622>
 801539c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153a0:	4911      	ldr	r1, [pc, #68]	@ (80153e8 <_dtoa_r+0x588>)
 80153a2:	2000      	movs	r0, #0
 80153a4:	f7ea ff80 	bl	80002a8 <__aeabi_dsub>
 80153a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80153ac:	f7eb fba6 	bl	8000afc <__aeabi_dcmplt>
 80153b0:	2800      	cmp	r0, #0
 80153b2:	f040 80b4 	bne.w	801551e <_dtoa_r+0x6be>
 80153b6:	42a6      	cmp	r6, r4
 80153b8:	f43f af70 	beq.w	801529c <_dtoa_r+0x43c>
 80153bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80153c0:	4b0a      	ldr	r3, [pc, #40]	@ (80153ec <_dtoa_r+0x58c>)
 80153c2:	2200      	movs	r2, #0
 80153c4:	f7eb f928 	bl	8000618 <__aeabi_dmul>
 80153c8:	4b08      	ldr	r3, [pc, #32]	@ (80153ec <_dtoa_r+0x58c>)
 80153ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80153ce:	2200      	movs	r2, #0
 80153d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80153d4:	f7eb f920 	bl	8000618 <__aeabi_dmul>
 80153d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153dc:	e7c4      	b.n	8015368 <_dtoa_r+0x508>
 80153de:	bf00      	nop
 80153e0:	08018b20 	.word	0x08018b20
 80153e4:	08018af8 	.word	0x08018af8
 80153e8:	3ff00000 	.word	0x3ff00000
 80153ec:	40240000 	.word	0x40240000
 80153f0:	401c0000 	.word	0x401c0000
 80153f4:	40140000 	.word	0x40140000
 80153f8:	3fe00000 	.word	0x3fe00000
 80153fc:	4631      	mov	r1, r6
 80153fe:	4628      	mov	r0, r5
 8015400:	f7eb f90a 	bl	8000618 <__aeabi_dmul>
 8015404:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015408:	9413      	str	r4, [sp, #76]	@ 0x4c
 801540a:	4656      	mov	r6, sl
 801540c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015410:	f7eb fbb2 	bl	8000b78 <__aeabi_d2iz>
 8015414:	4605      	mov	r5, r0
 8015416:	f7eb f895 	bl	8000544 <__aeabi_i2d>
 801541a:	4602      	mov	r2, r0
 801541c:	460b      	mov	r3, r1
 801541e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015422:	f7ea ff41 	bl	80002a8 <__aeabi_dsub>
 8015426:	3530      	adds	r5, #48	@ 0x30
 8015428:	f806 5b01 	strb.w	r5, [r6], #1
 801542c:	4602      	mov	r2, r0
 801542e:	460b      	mov	r3, r1
 8015430:	42a6      	cmp	r6, r4
 8015432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015436:	f04f 0200 	mov.w	r2, #0
 801543a:	d124      	bne.n	8015486 <_dtoa_r+0x626>
 801543c:	4baf      	ldr	r3, [pc, #700]	@ (80156fc <_dtoa_r+0x89c>)
 801543e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015442:	f7ea ff33 	bl	80002ac <__adddf3>
 8015446:	4602      	mov	r2, r0
 8015448:	460b      	mov	r3, r1
 801544a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801544e:	f7eb fb73 	bl	8000b38 <__aeabi_dcmpgt>
 8015452:	2800      	cmp	r0, #0
 8015454:	d163      	bne.n	801551e <_dtoa_r+0x6be>
 8015456:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801545a:	49a8      	ldr	r1, [pc, #672]	@ (80156fc <_dtoa_r+0x89c>)
 801545c:	2000      	movs	r0, #0
 801545e:	f7ea ff23 	bl	80002a8 <__aeabi_dsub>
 8015462:	4602      	mov	r2, r0
 8015464:	460b      	mov	r3, r1
 8015466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801546a:	f7eb fb47 	bl	8000afc <__aeabi_dcmplt>
 801546e:	2800      	cmp	r0, #0
 8015470:	f43f af14 	beq.w	801529c <_dtoa_r+0x43c>
 8015474:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015476:	1e73      	subs	r3, r6, #1
 8015478:	9313      	str	r3, [sp, #76]	@ 0x4c
 801547a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801547e:	2b30      	cmp	r3, #48	@ 0x30
 8015480:	d0f8      	beq.n	8015474 <_dtoa_r+0x614>
 8015482:	4647      	mov	r7, r8
 8015484:	e03b      	b.n	80154fe <_dtoa_r+0x69e>
 8015486:	4b9e      	ldr	r3, [pc, #632]	@ (8015700 <_dtoa_r+0x8a0>)
 8015488:	f7eb f8c6 	bl	8000618 <__aeabi_dmul>
 801548c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015490:	e7bc      	b.n	801540c <_dtoa_r+0x5ac>
 8015492:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8015496:	4656      	mov	r6, sl
 8015498:	e9dd 2300 	ldrd	r2, r3, [sp]
 801549c:	4620      	mov	r0, r4
 801549e:	4629      	mov	r1, r5
 80154a0:	f7eb f9e4 	bl	800086c <__aeabi_ddiv>
 80154a4:	f7eb fb68 	bl	8000b78 <__aeabi_d2iz>
 80154a8:	4680      	mov	r8, r0
 80154aa:	f7eb f84b 	bl	8000544 <__aeabi_i2d>
 80154ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154b2:	f7eb f8b1 	bl	8000618 <__aeabi_dmul>
 80154b6:	4602      	mov	r2, r0
 80154b8:	460b      	mov	r3, r1
 80154ba:	4620      	mov	r0, r4
 80154bc:	4629      	mov	r1, r5
 80154be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80154c2:	f7ea fef1 	bl	80002a8 <__aeabi_dsub>
 80154c6:	f806 4b01 	strb.w	r4, [r6], #1
 80154ca:	9d03      	ldr	r5, [sp, #12]
 80154cc:	eba6 040a 	sub.w	r4, r6, sl
 80154d0:	42a5      	cmp	r5, r4
 80154d2:	4602      	mov	r2, r0
 80154d4:	460b      	mov	r3, r1
 80154d6:	d133      	bne.n	8015540 <_dtoa_r+0x6e0>
 80154d8:	f7ea fee8 	bl	80002ac <__adddf3>
 80154dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154e0:	4604      	mov	r4, r0
 80154e2:	460d      	mov	r5, r1
 80154e4:	f7eb fb28 	bl	8000b38 <__aeabi_dcmpgt>
 80154e8:	b9c0      	cbnz	r0, 801551c <_dtoa_r+0x6bc>
 80154ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154ee:	4620      	mov	r0, r4
 80154f0:	4629      	mov	r1, r5
 80154f2:	f7eb faf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80154f6:	b110      	cbz	r0, 80154fe <_dtoa_r+0x69e>
 80154f8:	f018 0f01 	tst.w	r8, #1
 80154fc:	d10e      	bne.n	801551c <_dtoa_r+0x6bc>
 80154fe:	9902      	ldr	r1, [sp, #8]
 8015500:	4648      	mov	r0, r9
 8015502:	f001 fda5 	bl	8017050 <_Bfree>
 8015506:	2300      	movs	r3, #0
 8015508:	7033      	strb	r3, [r6, #0]
 801550a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801550c:	3701      	adds	r7, #1
 801550e:	601f      	str	r7, [r3, #0]
 8015510:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8015512:	2b00      	cmp	r3, #0
 8015514:	f000 824b 	beq.w	80159ae <_dtoa_r+0xb4e>
 8015518:	601e      	str	r6, [r3, #0]
 801551a:	e248      	b.n	80159ae <_dtoa_r+0xb4e>
 801551c:	46b8      	mov	r8, r7
 801551e:	4633      	mov	r3, r6
 8015520:	461e      	mov	r6, r3
 8015522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015526:	2a39      	cmp	r2, #57	@ 0x39
 8015528:	d106      	bne.n	8015538 <_dtoa_r+0x6d8>
 801552a:	459a      	cmp	sl, r3
 801552c:	d1f8      	bne.n	8015520 <_dtoa_r+0x6c0>
 801552e:	2230      	movs	r2, #48	@ 0x30
 8015530:	f108 0801 	add.w	r8, r8, #1
 8015534:	f88a 2000 	strb.w	r2, [sl]
 8015538:	781a      	ldrb	r2, [r3, #0]
 801553a:	3201      	adds	r2, #1
 801553c:	701a      	strb	r2, [r3, #0]
 801553e:	e7a0      	b.n	8015482 <_dtoa_r+0x622>
 8015540:	4b6f      	ldr	r3, [pc, #444]	@ (8015700 <_dtoa_r+0x8a0>)
 8015542:	2200      	movs	r2, #0
 8015544:	f7eb f868 	bl	8000618 <__aeabi_dmul>
 8015548:	2200      	movs	r2, #0
 801554a:	2300      	movs	r3, #0
 801554c:	4604      	mov	r4, r0
 801554e:	460d      	mov	r5, r1
 8015550:	f7eb faca 	bl	8000ae8 <__aeabi_dcmpeq>
 8015554:	2800      	cmp	r0, #0
 8015556:	d09f      	beq.n	8015498 <_dtoa_r+0x638>
 8015558:	e7d1      	b.n	80154fe <_dtoa_r+0x69e>
 801555a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801555c:	2a00      	cmp	r2, #0
 801555e:	f000 80ea 	beq.w	8015736 <_dtoa_r+0x8d6>
 8015562:	9a07      	ldr	r2, [sp, #28]
 8015564:	2a01      	cmp	r2, #1
 8015566:	f300 80cd 	bgt.w	8015704 <_dtoa_r+0x8a4>
 801556a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801556c:	2a00      	cmp	r2, #0
 801556e:	f000 80c1 	beq.w	80156f4 <_dtoa_r+0x894>
 8015572:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015576:	9c08      	ldr	r4, [sp, #32]
 8015578:	9e00      	ldr	r6, [sp, #0]
 801557a:	9a00      	ldr	r2, [sp, #0]
 801557c:	441a      	add	r2, r3
 801557e:	9200      	str	r2, [sp, #0]
 8015580:	9a06      	ldr	r2, [sp, #24]
 8015582:	2101      	movs	r1, #1
 8015584:	441a      	add	r2, r3
 8015586:	4648      	mov	r0, r9
 8015588:	9206      	str	r2, [sp, #24]
 801558a:	f001 fe5f 	bl	801724c <__i2b>
 801558e:	4605      	mov	r5, r0
 8015590:	b166      	cbz	r6, 80155ac <_dtoa_r+0x74c>
 8015592:	9b06      	ldr	r3, [sp, #24]
 8015594:	2b00      	cmp	r3, #0
 8015596:	dd09      	ble.n	80155ac <_dtoa_r+0x74c>
 8015598:	42b3      	cmp	r3, r6
 801559a:	9a00      	ldr	r2, [sp, #0]
 801559c:	bfa8      	it	ge
 801559e:	4633      	movge	r3, r6
 80155a0:	1ad2      	subs	r2, r2, r3
 80155a2:	9200      	str	r2, [sp, #0]
 80155a4:	9a06      	ldr	r2, [sp, #24]
 80155a6:	1af6      	subs	r6, r6, r3
 80155a8:	1ad3      	subs	r3, r2, r3
 80155aa:	9306      	str	r3, [sp, #24]
 80155ac:	9b08      	ldr	r3, [sp, #32]
 80155ae:	b30b      	cbz	r3, 80155f4 <_dtoa_r+0x794>
 80155b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	f000 80c6 	beq.w	8015744 <_dtoa_r+0x8e4>
 80155b8:	2c00      	cmp	r4, #0
 80155ba:	f000 80c0 	beq.w	801573e <_dtoa_r+0x8de>
 80155be:	4629      	mov	r1, r5
 80155c0:	4622      	mov	r2, r4
 80155c2:	4648      	mov	r0, r9
 80155c4:	f001 fefa 	bl	80173bc <__pow5mult>
 80155c8:	9a02      	ldr	r2, [sp, #8]
 80155ca:	4601      	mov	r1, r0
 80155cc:	4605      	mov	r5, r0
 80155ce:	4648      	mov	r0, r9
 80155d0:	f001 fe52 	bl	8017278 <__multiply>
 80155d4:	9902      	ldr	r1, [sp, #8]
 80155d6:	4680      	mov	r8, r0
 80155d8:	4648      	mov	r0, r9
 80155da:	f001 fd39 	bl	8017050 <_Bfree>
 80155de:	9b08      	ldr	r3, [sp, #32]
 80155e0:	1b1b      	subs	r3, r3, r4
 80155e2:	9308      	str	r3, [sp, #32]
 80155e4:	f000 80b1 	beq.w	801574a <_dtoa_r+0x8ea>
 80155e8:	9a08      	ldr	r2, [sp, #32]
 80155ea:	4641      	mov	r1, r8
 80155ec:	4648      	mov	r0, r9
 80155ee:	f001 fee5 	bl	80173bc <__pow5mult>
 80155f2:	9002      	str	r0, [sp, #8]
 80155f4:	2101      	movs	r1, #1
 80155f6:	4648      	mov	r0, r9
 80155f8:	f001 fe28 	bl	801724c <__i2b>
 80155fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80155fe:	4604      	mov	r4, r0
 8015600:	2b00      	cmp	r3, #0
 8015602:	f000 81d8 	beq.w	80159b6 <_dtoa_r+0xb56>
 8015606:	461a      	mov	r2, r3
 8015608:	4601      	mov	r1, r0
 801560a:	4648      	mov	r0, r9
 801560c:	f001 fed6 	bl	80173bc <__pow5mult>
 8015610:	9b07      	ldr	r3, [sp, #28]
 8015612:	2b01      	cmp	r3, #1
 8015614:	4604      	mov	r4, r0
 8015616:	f300 809f 	bgt.w	8015758 <_dtoa_r+0x8f8>
 801561a:	9b04      	ldr	r3, [sp, #16]
 801561c:	2b00      	cmp	r3, #0
 801561e:	f040 8097 	bne.w	8015750 <_dtoa_r+0x8f0>
 8015622:	9b05      	ldr	r3, [sp, #20]
 8015624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015628:	2b00      	cmp	r3, #0
 801562a:	f040 8093 	bne.w	8015754 <_dtoa_r+0x8f4>
 801562e:	9b05      	ldr	r3, [sp, #20]
 8015630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015634:	0d1b      	lsrs	r3, r3, #20
 8015636:	051b      	lsls	r3, r3, #20
 8015638:	b133      	cbz	r3, 8015648 <_dtoa_r+0x7e8>
 801563a:	9b00      	ldr	r3, [sp, #0]
 801563c:	3301      	adds	r3, #1
 801563e:	9300      	str	r3, [sp, #0]
 8015640:	9b06      	ldr	r3, [sp, #24]
 8015642:	3301      	adds	r3, #1
 8015644:	9306      	str	r3, [sp, #24]
 8015646:	2301      	movs	r3, #1
 8015648:	9308      	str	r3, [sp, #32]
 801564a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801564c:	2b00      	cmp	r3, #0
 801564e:	f000 81b8 	beq.w	80159c2 <_dtoa_r+0xb62>
 8015652:	6923      	ldr	r3, [r4, #16]
 8015654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015658:	6918      	ldr	r0, [r3, #16]
 801565a:	f001 fdab 	bl	80171b4 <__hi0bits>
 801565e:	f1c0 0020 	rsb	r0, r0, #32
 8015662:	9b06      	ldr	r3, [sp, #24]
 8015664:	4418      	add	r0, r3
 8015666:	f010 001f 	ands.w	r0, r0, #31
 801566a:	f000 8082 	beq.w	8015772 <_dtoa_r+0x912>
 801566e:	f1c0 0320 	rsb	r3, r0, #32
 8015672:	2b04      	cmp	r3, #4
 8015674:	dd73      	ble.n	801575e <_dtoa_r+0x8fe>
 8015676:	9b00      	ldr	r3, [sp, #0]
 8015678:	f1c0 001c 	rsb	r0, r0, #28
 801567c:	4403      	add	r3, r0
 801567e:	9300      	str	r3, [sp, #0]
 8015680:	9b06      	ldr	r3, [sp, #24]
 8015682:	4403      	add	r3, r0
 8015684:	4406      	add	r6, r0
 8015686:	9306      	str	r3, [sp, #24]
 8015688:	9b00      	ldr	r3, [sp, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	dd05      	ble.n	801569a <_dtoa_r+0x83a>
 801568e:	9902      	ldr	r1, [sp, #8]
 8015690:	461a      	mov	r2, r3
 8015692:	4648      	mov	r0, r9
 8015694:	f001 feec 	bl	8017470 <__lshift>
 8015698:	9002      	str	r0, [sp, #8]
 801569a:	9b06      	ldr	r3, [sp, #24]
 801569c:	2b00      	cmp	r3, #0
 801569e:	dd05      	ble.n	80156ac <_dtoa_r+0x84c>
 80156a0:	4621      	mov	r1, r4
 80156a2:	461a      	mov	r2, r3
 80156a4:	4648      	mov	r0, r9
 80156a6:	f001 fee3 	bl	8017470 <__lshift>
 80156aa:	4604      	mov	r4, r0
 80156ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d061      	beq.n	8015776 <_dtoa_r+0x916>
 80156b2:	9802      	ldr	r0, [sp, #8]
 80156b4:	4621      	mov	r1, r4
 80156b6:	f001 ff47 	bl	8017548 <__mcmp>
 80156ba:	2800      	cmp	r0, #0
 80156bc:	da5b      	bge.n	8015776 <_dtoa_r+0x916>
 80156be:	2300      	movs	r3, #0
 80156c0:	9902      	ldr	r1, [sp, #8]
 80156c2:	220a      	movs	r2, #10
 80156c4:	4648      	mov	r0, r9
 80156c6:	f001 fce5 	bl	8017094 <__multadd>
 80156ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156cc:	9002      	str	r0, [sp, #8]
 80156ce:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	f000 8177 	beq.w	80159c6 <_dtoa_r+0xb66>
 80156d8:	4629      	mov	r1, r5
 80156da:	2300      	movs	r3, #0
 80156dc:	220a      	movs	r2, #10
 80156de:	4648      	mov	r0, r9
 80156e0:	f001 fcd8 	bl	8017094 <__multadd>
 80156e4:	f1bb 0f00 	cmp.w	fp, #0
 80156e8:	4605      	mov	r5, r0
 80156ea:	dc6f      	bgt.n	80157cc <_dtoa_r+0x96c>
 80156ec:	9b07      	ldr	r3, [sp, #28]
 80156ee:	2b02      	cmp	r3, #2
 80156f0:	dc49      	bgt.n	8015786 <_dtoa_r+0x926>
 80156f2:	e06b      	b.n	80157cc <_dtoa_r+0x96c>
 80156f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80156f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80156fa:	e73c      	b.n	8015576 <_dtoa_r+0x716>
 80156fc:	3fe00000 	.word	0x3fe00000
 8015700:	40240000 	.word	0x40240000
 8015704:	9b03      	ldr	r3, [sp, #12]
 8015706:	1e5c      	subs	r4, r3, #1
 8015708:	9b08      	ldr	r3, [sp, #32]
 801570a:	42a3      	cmp	r3, r4
 801570c:	db09      	blt.n	8015722 <_dtoa_r+0x8c2>
 801570e:	1b1c      	subs	r4, r3, r4
 8015710:	9b03      	ldr	r3, [sp, #12]
 8015712:	2b00      	cmp	r3, #0
 8015714:	f6bf af30 	bge.w	8015578 <_dtoa_r+0x718>
 8015718:	9b00      	ldr	r3, [sp, #0]
 801571a:	9a03      	ldr	r2, [sp, #12]
 801571c:	1a9e      	subs	r6, r3, r2
 801571e:	2300      	movs	r3, #0
 8015720:	e72b      	b.n	801557a <_dtoa_r+0x71a>
 8015722:	9b08      	ldr	r3, [sp, #32]
 8015724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015726:	9408      	str	r4, [sp, #32]
 8015728:	1ae3      	subs	r3, r4, r3
 801572a:	441a      	add	r2, r3
 801572c:	9e00      	ldr	r6, [sp, #0]
 801572e:	9b03      	ldr	r3, [sp, #12]
 8015730:	920d      	str	r2, [sp, #52]	@ 0x34
 8015732:	2400      	movs	r4, #0
 8015734:	e721      	b.n	801557a <_dtoa_r+0x71a>
 8015736:	9c08      	ldr	r4, [sp, #32]
 8015738:	9e00      	ldr	r6, [sp, #0]
 801573a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801573c:	e728      	b.n	8015590 <_dtoa_r+0x730>
 801573e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015742:	e751      	b.n	80155e8 <_dtoa_r+0x788>
 8015744:	9a08      	ldr	r2, [sp, #32]
 8015746:	9902      	ldr	r1, [sp, #8]
 8015748:	e750      	b.n	80155ec <_dtoa_r+0x78c>
 801574a:	f8cd 8008 	str.w	r8, [sp, #8]
 801574e:	e751      	b.n	80155f4 <_dtoa_r+0x794>
 8015750:	2300      	movs	r3, #0
 8015752:	e779      	b.n	8015648 <_dtoa_r+0x7e8>
 8015754:	9b04      	ldr	r3, [sp, #16]
 8015756:	e777      	b.n	8015648 <_dtoa_r+0x7e8>
 8015758:	2300      	movs	r3, #0
 801575a:	9308      	str	r3, [sp, #32]
 801575c:	e779      	b.n	8015652 <_dtoa_r+0x7f2>
 801575e:	d093      	beq.n	8015688 <_dtoa_r+0x828>
 8015760:	9a00      	ldr	r2, [sp, #0]
 8015762:	331c      	adds	r3, #28
 8015764:	441a      	add	r2, r3
 8015766:	9200      	str	r2, [sp, #0]
 8015768:	9a06      	ldr	r2, [sp, #24]
 801576a:	441a      	add	r2, r3
 801576c:	441e      	add	r6, r3
 801576e:	9206      	str	r2, [sp, #24]
 8015770:	e78a      	b.n	8015688 <_dtoa_r+0x828>
 8015772:	4603      	mov	r3, r0
 8015774:	e7f4      	b.n	8015760 <_dtoa_r+0x900>
 8015776:	9b03      	ldr	r3, [sp, #12]
 8015778:	2b00      	cmp	r3, #0
 801577a:	46b8      	mov	r8, r7
 801577c:	dc20      	bgt.n	80157c0 <_dtoa_r+0x960>
 801577e:	469b      	mov	fp, r3
 8015780:	9b07      	ldr	r3, [sp, #28]
 8015782:	2b02      	cmp	r3, #2
 8015784:	dd1e      	ble.n	80157c4 <_dtoa_r+0x964>
 8015786:	f1bb 0f00 	cmp.w	fp, #0
 801578a:	f47f adb1 	bne.w	80152f0 <_dtoa_r+0x490>
 801578e:	4621      	mov	r1, r4
 8015790:	465b      	mov	r3, fp
 8015792:	2205      	movs	r2, #5
 8015794:	4648      	mov	r0, r9
 8015796:	f001 fc7d 	bl	8017094 <__multadd>
 801579a:	4601      	mov	r1, r0
 801579c:	4604      	mov	r4, r0
 801579e:	9802      	ldr	r0, [sp, #8]
 80157a0:	f001 fed2 	bl	8017548 <__mcmp>
 80157a4:	2800      	cmp	r0, #0
 80157a6:	f77f ada3 	ble.w	80152f0 <_dtoa_r+0x490>
 80157aa:	4656      	mov	r6, sl
 80157ac:	2331      	movs	r3, #49	@ 0x31
 80157ae:	f806 3b01 	strb.w	r3, [r6], #1
 80157b2:	f108 0801 	add.w	r8, r8, #1
 80157b6:	e59f      	b.n	80152f8 <_dtoa_r+0x498>
 80157b8:	9c03      	ldr	r4, [sp, #12]
 80157ba:	46b8      	mov	r8, r7
 80157bc:	4625      	mov	r5, r4
 80157be:	e7f4      	b.n	80157aa <_dtoa_r+0x94a>
 80157c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80157c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	f000 8101 	beq.w	80159ce <_dtoa_r+0xb6e>
 80157cc:	2e00      	cmp	r6, #0
 80157ce:	dd05      	ble.n	80157dc <_dtoa_r+0x97c>
 80157d0:	4629      	mov	r1, r5
 80157d2:	4632      	mov	r2, r6
 80157d4:	4648      	mov	r0, r9
 80157d6:	f001 fe4b 	bl	8017470 <__lshift>
 80157da:	4605      	mov	r5, r0
 80157dc:	9b08      	ldr	r3, [sp, #32]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d05c      	beq.n	801589c <_dtoa_r+0xa3c>
 80157e2:	6869      	ldr	r1, [r5, #4]
 80157e4:	4648      	mov	r0, r9
 80157e6:	f001 fbf3 	bl	8016fd0 <_Balloc>
 80157ea:	4606      	mov	r6, r0
 80157ec:	b928      	cbnz	r0, 80157fa <_dtoa_r+0x99a>
 80157ee:	4b82      	ldr	r3, [pc, #520]	@ (80159f8 <_dtoa_r+0xb98>)
 80157f0:	4602      	mov	r2, r0
 80157f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80157f6:	f7ff bb4a 	b.w	8014e8e <_dtoa_r+0x2e>
 80157fa:	692a      	ldr	r2, [r5, #16]
 80157fc:	3202      	adds	r2, #2
 80157fe:	0092      	lsls	r2, r2, #2
 8015800:	f105 010c 	add.w	r1, r5, #12
 8015804:	300c      	adds	r0, #12
 8015806:	f7ff fa67 	bl	8014cd8 <memcpy>
 801580a:	2201      	movs	r2, #1
 801580c:	4631      	mov	r1, r6
 801580e:	4648      	mov	r0, r9
 8015810:	f001 fe2e 	bl	8017470 <__lshift>
 8015814:	f10a 0301 	add.w	r3, sl, #1
 8015818:	9300      	str	r3, [sp, #0]
 801581a:	eb0a 030b 	add.w	r3, sl, fp
 801581e:	9308      	str	r3, [sp, #32]
 8015820:	9b04      	ldr	r3, [sp, #16]
 8015822:	f003 0301 	and.w	r3, r3, #1
 8015826:	462f      	mov	r7, r5
 8015828:	9306      	str	r3, [sp, #24]
 801582a:	4605      	mov	r5, r0
 801582c:	9b00      	ldr	r3, [sp, #0]
 801582e:	9802      	ldr	r0, [sp, #8]
 8015830:	4621      	mov	r1, r4
 8015832:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8015836:	f7ff fa8b 	bl	8014d50 <quorem>
 801583a:	4603      	mov	r3, r0
 801583c:	3330      	adds	r3, #48	@ 0x30
 801583e:	9003      	str	r0, [sp, #12]
 8015840:	4639      	mov	r1, r7
 8015842:	9802      	ldr	r0, [sp, #8]
 8015844:	9309      	str	r3, [sp, #36]	@ 0x24
 8015846:	f001 fe7f 	bl	8017548 <__mcmp>
 801584a:	462a      	mov	r2, r5
 801584c:	9004      	str	r0, [sp, #16]
 801584e:	4621      	mov	r1, r4
 8015850:	4648      	mov	r0, r9
 8015852:	f001 fe95 	bl	8017580 <__mdiff>
 8015856:	68c2      	ldr	r2, [r0, #12]
 8015858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801585a:	4606      	mov	r6, r0
 801585c:	bb02      	cbnz	r2, 80158a0 <_dtoa_r+0xa40>
 801585e:	4601      	mov	r1, r0
 8015860:	9802      	ldr	r0, [sp, #8]
 8015862:	f001 fe71 	bl	8017548 <__mcmp>
 8015866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015868:	4602      	mov	r2, r0
 801586a:	4631      	mov	r1, r6
 801586c:	4648      	mov	r0, r9
 801586e:	920c      	str	r2, [sp, #48]	@ 0x30
 8015870:	9309      	str	r3, [sp, #36]	@ 0x24
 8015872:	f001 fbed 	bl	8017050 <_Bfree>
 8015876:	9b07      	ldr	r3, [sp, #28]
 8015878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801587a:	9e00      	ldr	r6, [sp, #0]
 801587c:	ea42 0103 	orr.w	r1, r2, r3
 8015880:	9b06      	ldr	r3, [sp, #24]
 8015882:	4319      	orrs	r1, r3
 8015884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015886:	d10d      	bne.n	80158a4 <_dtoa_r+0xa44>
 8015888:	2b39      	cmp	r3, #57	@ 0x39
 801588a:	d027      	beq.n	80158dc <_dtoa_r+0xa7c>
 801588c:	9a04      	ldr	r2, [sp, #16]
 801588e:	2a00      	cmp	r2, #0
 8015890:	dd01      	ble.n	8015896 <_dtoa_r+0xa36>
 8015892:	9b03      	ldr	r3, [sp, #12]
 8015894:	3331      	adds	r3, #49	@ 0x31
 8015896:	f88b 3000 	strb.w	r3, [fp]
 801589a:	e52e      	b.n	80152fa <_dtoa_r+0x49a>
 801589c:	4628      	mov	r0, r5
 801589e:	e7b9      	b.n	8015814 <_dtoa_r+0x9b4>
 80158a0:	2201      	movs	r2, #1
 80158a2:	e7e2      	b.n	801586a <_dtoa_r+0xa0a>
 80158a4:	9904      	ldr	r1, [sp, #16]
 80158a6:	2900      	cmp	r1, #0
 80158a8:	db04      	blt.n	80158b4 <_dtoa_r+0xa54>
 80158aa:	9807      	ldr	r0, [sp, #28]
 80158ac:	4301      	orrs	r1, r0
 80158ae:	9806      	ldr	r0, [sp, #24]
 80158b0:	4301      	orrs	r1, r0
 80158b2:	d120      	bne.n	80158f6 <_dtoa_r+0xa96>
 80158b4:	2a00      	cmp	r2, #0
 80158b6:	ddee      	ble.n	8015896 <_dtoa_r+0xa36>
 80158b8:	9902      	ldr	r1, [sp, #8]
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	2201      	movs	r2, #1
 80158be:	4648      	mov	r0, r9
 80158c0:	f001 fdd6 	bl	8017470 <__lshift>
 80158c4:	4621      	mov	r1, r4
 80158c6:	9002      	str	r0, [sp, #8]
 80158c8:	f001 fe3e 	bl	8017548 <__mcmp>
 80158cc:	2800      	cmp	r0, #0
 80158ce:	9b00      	ldr	r3, [sp, #0]
 80158d0:	dc02      	bgt.n	80158d8 <_dtoa_r+0xa78>
 80158d2:	d1e0      	bne.n	8015896 <_dtoa_r+0xa36>
 80158d4:	07da      	lsls	r2, r3, #31
 80158d6:	d5de      	bpl.n	8015896 <_dtoa_r+0xa36>
 80158d8:	2b39      	cmp	r3, #57	@ 0x39
 80158da:	d1da      	bne.n	8015892 <_dtoa_r+0xa32>
 80158dc:	2339      	movs	r3, #57	@ 0x39
 80158de:	f88b 3000 	strb.w	r3, [fp]
 80158e2:	4633      	mov	r3, r6
 80158e4:	461e      	mov	r6, r3
 80158e6:	3b01      	subs	r3, #1
 80158e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80158ec:	2a39      	cmp	r2, #57	@ 0x39
 80158ee:	d04e      	beq.n	801598e <_dtoa_r+0xb2e>
 80158f0:	3201      	adds	r2, #1
 80158f2:	701a      	strb	r2, [r3, #0]
 80158f4:	e501      	b.n	80152fa <_dtoa_r+0x49a>
 80158f6:	2a00      	cmp	r2, #0
 80158f8:	dd03      	ble.n	8015902 <_dtoa_r+0xaa2>
 80158fa:	2b39      	cmp	r3, #57	@ 0x39
 80158fc:	d0ee      	beq.n	80158dc <_dtoa_r+0xa7c>
 80158fe:	3301      	adds	r3, #1
 8015900:	e7c9      	b.n	8015896 <_dtoa_r+0xa36>
 8015902:	9a00      	ldr	r2, [sp, #0]
 8015904:	9908      	ldr	r1, [sp, #32]
 8015906:	f802 3c01 	strb.w	r3, [r2, #-1]
 801590a:	428a      	cmp	r2, r1
 801590c:	d028      	beq.n	8015960 <_dtoa_r+0xb00>
 801590e:	9902      	ldr	r1, [sp, #8]
 8015910:	2300      	movs	r3, #0
 8015912:	220a      	movs	r2, #10
 8015914:	4648      	mov	r0, r9
 8015916:	f001 fbbd 	bl	8017094 <__multadd>
 801591a:	42af      	cmp	r7, r5
 801591c:	9002      	str	r0, [sp, #8]
 801591e:	f04f 0300 	mov.w	r3, #0
 8015922:	f04f 020a 	mov.w	r2, #10
 8015926:	4639      	mov	r1, r7
 8015928:	4648      	mov	r0, r9
 801592a:	d107      	bne.n	801593c <_dtoa_r+0xadc>
 801592c:	f001 fbb2 	bl	8017094 <__multadd>
 8015930:	4607      	mov	r7, r0
 8015932:	4605      	mov	r5, r0
 8015934:	9b00      	ldr	r3, [sp, #0]
 8015936:	3301      	adds	r3, #1
 8015938:	9300      	str	r3, [sp, #0]
 801593a:	e777      	b.n	801582c <_dtoa_r+0x9cc>
 801593c:	f001 fbaa 	bl	8017094 <__multadd>
 8015940:	4629      	mov	r1, r5
 8015942:	4607      	mov	r7, r0
 8015944:	2300      	movs	r3, #0
 8015946:	220a      	movs	r2, #10
 8015948:	4648      	mov	r0, r9
 801594a:	f001 fba3 	bl	8017094 <__multadd>
 801594e:	4605      	mov	r5, r0
 8015950:	e7f0      	b.n	8015934 <_dtoa_r+0xad4>
 8015952:	f1bb 0f00 	cmp.w	fp, #0
 8015956:	bfcc      	ite	gt
 8015958:	465e      	movgt	r6, fp
 801595a:	2601      	movle	r6, #1
 801595c:	4456      	add	r6, sl
 801595e:	2700      	movs	r7, #0
 8015960:	9902      	ldr	r1, [sp, #8]
 8015962:	9300      	str	r3, [sp, #0]
 8015964:	2201      	movs	r2, #1
 8015966:	4648      	mov	r0, r9
 8015968:	f001 fd82 	bl	8017470 <__lshift>
 801596c:	4621      	mov	r1, r4
 801596e:	9002      	str	r0, [sp, #8]
 8015970:	f001 fdea 	bl	8017548 <__mcmp>
 8015974:	2800      	cmp	r0, #0
 8015976:	dcb4      	bgt.n	80158e2 <_dtoa_r+0xa82>
 8015978:	d102      	bne.n	8015980 <_dtoa_r+0xb20>
 801597a:	9b00      	ldr	r3, [sp, #0]
 801597c:	07db      	lsls	r3, r3, #31
 801597e:	d4b0      	bmi.n	80158e2 <_dtoa_r+0xa82>
 8015980:	4633      	mov	r3, r6
 8015982:	461e      	mov	r6, r3
 8015984:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015988:	2a30      	cmp	r2, #48	@ 0x30
 801598a:	d0fa      	beq.n	8015982 <_dtoa_r+0xb22>
 801598c:	e4b5      	b.n	80152fa <_dtoa_r+0x49a>
 801598e:	459a      	cmp	sl, r3
 8015990:	d1a8      	bne.n	80158e4 <_dtoa_r+0xa84>
 8015992:	2331      	movs	r3, #49	@ 0x31
 8015994:	f108 0801 	add.w	r8, r8, #1
 8015998:	f88a 3000 	strb.w	r3, [sl]
 801599c:	e4ad      	b.n	80152fa <_dtoa_r+0x49a>
 801599e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80159a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80159fc <_dtoa_r+0xb9c>
 80159a4:	b11b      	cbz	r3, 80159ae <_dtoa_r+0xb4e>
 80159a6:	f10a 0308 	add.w	r3, sl, #8
 80159aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80159ac:	6013      	str	r3, [r2, #0]
 80159ae:	4650      	mov	r0, sl
 80159b0:	b017      	add	sp, #92	@ 0x5c
 80159b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159b6:	9b07      	ldr	r3, [sp, #28]
 80159b8:	2b01      	cmp	r3, #1
 80159ba:	f77f ae2e 	ble.w	801561a <_dtoa_r+0x7ba>
 80159be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80159c0:	9308      	str	r3, [sp, #32]
 80159c2:	2001      	movs	r0, #1
 80159c4:	e64d      	b.n	8015662 <_dtoa_r+0x802>
 80159c6:	f1bb 0f00 	cmp.w	fp, #0
 80159ca:	f77f aed9 	ble.w	8015780 <_dtoa_r+0x920>
 80159ce:	4656      	mov	r6, sl
 80159d0:	9802      	ldr	r0, [sp, #8]
 80159d2:	4621      	mov	r1, r4
 80159d4:	f7ff f9bc 	bl	8014d50 <quorem>
 80159d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80159dc:	f806 3b01 	strb.w	r3, [r6], #1
 80159e0:	eba6 020a 	sub.w	r2, r6, sl
 80159e4:	4593      	cmp	fp, r2
 80159e6:	ddb4      	ble.n	8015952 <_dtoa_r+0xaf2>
 80159e8:	9902      	ldr	r1, [sp, #8]
 80159ea:	2300      	movs	r3, #0
 80159ec:	220a      	movs	r2, #10
 80159ee:	4648      	mov	r0, r9
 80159f0:	f001 fb50 	bl	8017094 <__multadd>
 80159f4:	9002      	str	r0, [sp, #8]
 80159f6:	e7eb      	b.n	80159d0 <_dtoa_r+0xb70>
 80159f8:	0801889b 	.word	0x0801889b
 80159fc:	08018836 	.word	0x08018836

08015a00 <_free_r>:
 8015a00:	b538      	push	{r3, r4, r5, lr}
 8015a02:	4605      	mov	r5, r0
 8015a04:	2900      	cmp	r1, #0
 8015a06:	d041      	beq.n	8015a8c <_free_r+0x8c>
 8015a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a0c:	1f0c      	subs	r4, r1, #4
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	bfb8      	it	lt
 8015a12:	18e4      	addlt	r4, r4, r3
 8015a14:	f001 fad0 	bl	8016fb8 <__malloc_lock>
 8015a18:	4a1d      	ldr	r2, [pc, #116]	@ (8015a90 <_free_r+0x90>)
 8015a1a:	6813      	ldr	r3, [r2, #0]
 8015a1c:	b933      	cbnz	r3, 8015a2c <_free_r+0x2c>
 8015a1e:	6063      	str	r3, [r4, #4]
 8015a20:	6014      	str	r4, [r2, #0]
 8015a22:	4628      	mov	r0, r5
 8015a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a28:	f001 bacc 	b.w	8016fc4 <__malloc_unlock>
 8015a2c:	42a3      	cmp	r3, r4
 8015a2e:	d908      	bls.n	8015a42 <_free_r+0x42>
 8015a30:	6820      	ldr	r0, [r4, #0]
 8015a32:	1821      	adds	r1, r4, r0
 8015a34:	428b      	cmp	r3, r1
 8015a36:	bf01      	itttt	eq
 8015a38:	6819      	ldreq	r1, [r3, #0]
 8015a3a:	685b      	ldreq	r3, [r3, #4]
 8015a3c:	1809      	addeq	r1, r1, r0
 8015a3e:	6021      	streq	r1, [r4, #0]
 8015a40:	e7ed      	b.n	8015a1e <_free_r+0x1e>
 8015a42:	461a      	mov	r2, r3
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	b10b      	cbz	r3, 8015a4c <_free_r+0x4c>
 8015a48:	42a3      	cmp	r3, r4
 8015a4a:	d9fa      	bls.n	8015a42 <_free_r+0x42>
 8015a4c:	6811      	ldr	r1, [r2, #0]
 8015a4e:	1850      	adds	r0, r2, r1
 8015a50:	42a0      	cmp	r0, r4
 8015a52:	d10b      	bne.n	8015a6c <_free_r+0x6c>
 8015a54:	6820      	ldr	r0, [r4, #0]
 8015a56:	4401      	add	r1, r0
 8015a58:	1850      	adds	r0, r2, r1
 8015a5a:	4283      	cmp	r3, r0
 8015a5c:	6011      	str	r1, [r2, #0]
 8015a5e:	d1e0      	bne.n	8015a22 <_free_r+0x22>
 8015a60:	6818      	ldr	r0, [r3, #0]
 8015a62:	685b      	ldr	r3, [r3, #4]
 8015a64:	6053      	str	r3, [r2, #4]
 8015a66:	4408      	add	r0, r1
 8015a68:	6010      	str	r0, [r2, #0]
 8015a6a:	e7da      	b.n	8015a22 <_free_r+0x22>
 8015a6c:	d902      	bls.n	8015a74 <_free_r+0x74>
 8015a6e:	230c      	movs	r3, #12
 8015a70:	602b      	str	r3, [r5, #0]
 8015a72:	e7d6      	b.n	8015a22 <_free_r+0x22>
 8015a74:	6820      	ldr	r0, [r4, #0]
 8015a76:	1821      	adds	r1, r4, r0
 8015a78:	428b      	cmp	r3, r1
 8015a7a:	bf04      	itt	eq
 8015a7c:	6819      	ldreq	r1, [r3, #0]
 8015a7e:	685b      	ldreq	r3, [r3, #4]
 8015a80:	6063      	str	r3, [r4, #4]
 8015a82:	bf04      	itt	eq
 8015a84:	1809      	addeq	r1, r1, r0
 8015a86:	6021      	streq	r1, [r4, #0]
 8015a88:	6054      	str	r4, [r2, #4]
 8015a8a:	e7ca      	b.n	8015a22 <_free_r+0x22>
 8015a8c:	bd38      	pop	{r3, r4, r5, pc}
 8015a8e:	bf00      	nop
 8015a90:	200067b4 	.word	0x200067b4

08015a94 <rshift>:
 8015a94:	6903      	ldr	r3, [r0, #16]
 8015a96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015a9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015a9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015aa2:	f100 0414 	add.w	r4, r0, #20
 8015aa6:	dd45      	ble.n	8015b34 <rshift+0xa0>
 8015aa8:	f011 011f 	ands.w	r1, r1, #31
 8015aac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015ab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015ab4:	d10c      	bne.n	8015ad0 <rshift+0x3c>
 8015ab6:	f100 0710 	add.w	r7, r0, #16
 8015aba:	4629      	mov	r1, r5
 8015abc:	42b1      	cmp	r1, r6
 8015abe:	d334      	bcc.n	8015b2a <rshift+0x96>
 8015ac0:	1a9b      	subs	r3, r3, r2
 8015ac2:	009b      	lsls	r3, r3, #2
 8015ac4:	1eea      	subs	r2, r5, #3
 8015ac6:	4296      	cmp	r6, r2
 8015ac8:	bf38      	it	cc
 8015aca:	2300      	movcc	r3, #0
 8015acc:	4423      	add	r3, r4
 8015ace:	e015      	b.n	8015afc <rshift+0x68>
 8015ad0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015ad4:	f1c1 0820 	rsb	r8, r1, #32
 8015ad8:	40cf      	lsrs	r7, r1
 8015ada:	f105 0e04 	add.w	lr, r5, #4
 8015ade:	46a1      	mov	r9, r4
 8015ae0:	4576      	cmp	r6, lr
 8015ae2:	46f4      	mov	ip, lr
 8015ae4:	d815      	bhi.n	8015b12 <rshift+0x7e>
 8015ae6:	1a9a      	subs	r2, r3, r2
 8015ae8:	0092      	lsls	r2, r2, #2
 8015aea:	3a04      	subs	r2, #4
 8015aec:	3501      	adds	r5, #1
 8015aee:	42ae      	cmp	r6, r5
 8015af0:	bf38      	it	cc
 8015af2:	2200      	movcc	r2, #0
 8015af4:	18a3      	adds	r3, r4, r2
 8015af6:	50a7      	str	r7, [r4, r2]
 8015af8:	b107      	cbz	r7, 8015afc <rshift+0x68>
 8015afa:	3304      	adds	r3, #4
 8015afc:	1b1a      	subs	r2, r3, r4
 8015afe:	42a3      	cmp	r3, r4
 8015b00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015b04:	bf08      	it	eq
 8015b06:	2300      	moveq	r3, #0
 8015b08:	6102      	str	r2, [r0, #16]
 8015b0a:	bf08      	it	eq
 8015b0c:	6143      	streq	r3, [r0, #20]
 8015b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b12:	f8dc c000 	ldr.w	ip, [ip]
 8015b16:	fa0c fc08 	lsl.w	ip, ip, r8
 8015b1a:	ea4c 0707 	orr.w	r7, ip, r7
 8015b1e:	f849 7b04 	str.w	r7, [r9], #4
 8015b22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015b26:	40cf      	lsrs	r7, r1
 8015b28:	e7da      	b.n	8015ae0 <rshift+0x4c>
 8015b2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8015b2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015b32:	e7c3      	b.n	8015abc <rshift+0x28>
 8015b34:	4623      	mov	r3, r4
 8015b36:	e7e1      	b.n	8015afc <rshift+0x68>

08015b38 <__hexdig_fun>:
 8015b38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015b3c:	2b09      	cmp	r3, #9
 8015b3e:	d802      	bhi.n	8015b46 <__hexdig_fun+0xe>
 8015b40:	3820      	subs	r0, #32
 8015b42:	b2c0      	uxtb	r0, r0
 8015b44:	4770      	bx	lr
 8015b46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015b4a:	2b05      	cmp	r3, #5
 8015b4c:	d801      	bhi.n	8015b52 <__hexdig_fun+0x1a>
 8015b4e:	3847      	subs	r0, #71	@ 0x47
 8015b50:	e7f7      	b.n	8015b42 <__hexdig_fun+0xa>
 8015b52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015b56:	2b05      	cmp	r3, #5
 8015b58:	d801      	bhi.n	8015b5e <__hexdig_fun+0x26>
 8015b5a:	3827      	subs	r0, #39	@ 0x27
 8015b5c:	e7f1      	b.n	8015b42 <__hexdig_fun+0xa>
 8015b5e:	2000      	movs	r0, #0
 8015b60:	4770      	bx	lr
	...

08015b64 <__gethex>:
 8015b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b68:	b085      	sub	sp, #20
 8015b6a:	468a      	mov	sl, r1
 8015b6c:	9302      	str	r3, [sp, #8]
 8015b6e:	680b      	ldr	r3, [r1, #0]
 8015b70:	9001      	str	r0, [sp, #4]
 8015b72:	4690      	mov	r8, r2
 8015b74:	1c9c      	adds	r4, r3, #2
 8015b76:	46a1      	mov	r9, r4
 8015b78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015b7c:	2830      	cmp	r0, #48	@ 0x30
 8015b7e:	d0fa      	beq.n	8015b76 <__gethex+0x12>
 8015b80:	eba9 0303 	sub.w	r3, r9, r3
 8015b84:	f1a3 0b02 	sub.w	fp, r3, #2
 8015b88:	f7ff ffd6 	bl	8015b38 <__hexdig_fun>
 8015b8c:	4605      	mov	r5, r0
 8015b8e:	2800      	cmp	r0, #0
 8015b90:	d168      	bne.n	8015c64 <__gethex+0x100>
 8015b92:	49a0      	ldr	r1, [pc, #640]	@ (8015e14 <__gethex+0x2b0>)
 8015b94:	2201      	movs	r2, #1
 8015b96:	4648      	mov	r0, r9
 8015b98:	f7fe ff9d 	bl	8014ad6 <strncmp>
 8015b9c:	4607      	mov	r7, r0
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	d167      	bne.n	8015c72 <__gethex+0x10e>
 8015ba2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015ba6:	4626      	mov	r6, r4
 8015ba8:	f7ff ffc6 	bl	8015b38 <__hexdig_fun>
 8015bac:	2800      	cmp	r0, #0
 8015bae:	d062      	beq.n	8015c76 <__gethex+0x112>
 8015bb0:	4623      	mov	r3, r4
 8015bb2:	7818      	ldrb	r0, [r3, #0]
 8015bb4:	2830      	cmp	r0, #48	@ 0x30
 8015bb6:	4699      	mov	r9, r3
 8015bb8:	f103 0301 	add.w	r3, r3, #1
 8015bbc:	d0f9      	beq.n	8015bb2 <__gethex+0x4e>
 8015bbe:	f7ff ffbb 	bl	8015b38 <__hexdig_fun>
 8015bc2:	fab0 f580 	clz	r5, r0
 8015bc6:	096d      	lsrs	r5, r5, #5
 8015bc8:	f04f 0b01 	mov.w	fp, #1
 8015bcc:	464a      	mov	r2, r9
 8015bce:	4616      	mov	r6, r2
 8015bd0:	3201      	adds	r2, #1
 8015bd2:	7830      	ldrb	r0, [r6, #0]
 8015bd4:	f7ff ffb0 	bl	8015b38 <__hexdig_fun>
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	d1f8      	bne.n	8015bce <__gethex+0x6a>
 8015bdc:	498d      	ldr	r1, [pc, #564]	@ (8015e14 <__gethex+0x2b0>)
 8015bde:	2201      	movs	r2, #1
 8015be0:	4630      	mov	r0, r6
 8015be2:	f7fe ff78 	bl	8014ad6 <strncmp>
 8015be6:	2800      	cmp	r0, #0
 8015be8:	d13f      	bne.n	8015c6a <__gethex+0x106>
 8015bea:	b944      	cbnz	r4, 8015bfe <__gethex+0x9a>
 8015bec:	1c74      	adds	r4, r6, #1
 8015bee:	4622      	mov	r2, r4
 8015bf0:	4616      	mov	r6, r2
 8015bf2:	3201      	adds	r2, #1
 8015bf4:	7830      	ldrb	r0, [r6, #0]
 8015bf6:	f7ff ff9f 	bl	8015b38 <__hexdig_fun>
 8015bfa:	2800      	cmp	r0, #0
 8015bfc:	d1f8      	bne.n	8015bf0 <__gethex+0x8c>
 8015bfe:	1ba4      	subs	r4, r4, r6
 8015c00:	00a7      	lsls	r7, r4, #2
 8015c02:	7833      	ldrb	r3, [r6, #0]
 8015c04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015c08:	2b50      	cmp	r3, #80	@ 0x50
 8015c0a:	d13e      	bne.n	8015c8a <__gethex+0x126>
 8015c0c:	7873      	ldrb	r3, [r6, #1]
 8015c0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8015c10:	d033      	beq.n	8015c7a <__gethex+0x116>
 8015c12:	2b2d      	cmp	r3, #45	@ 0x2d
 8015c14:	d034      	beq.n	8015c80 <__gethex+0x11c>
 8015c16:	1c71      	adds	r1, r6, #1
 8015c18:	2400      	movs	r4, #0
 8015c1a:	7808      	ldrb	r0, [r1, #0]
 8015c1c:	f7ff ff8c 	bl	8015b38 <__hexdig_fun>
 8015c20:	1e43      	subs	r3, r0, #1
 8015c22:	b2db      	uxtb	r3, r3
 8015c24:	2b18      	cmp	r3, #24
 8015c26:	d830      	bhi.n	8015c8a <__gethex+0x126>
 8015c28:	f1a0 0210 	sub.w	r2, r0, #16
 8015c2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015c30:	f7ff ff82 	bl	8015b38 <__hexdig_fun>
 8015c34:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8015c38:	fa5f fc8c 	uxtb.w	ip, ip
 8015c3c:	f1bc 0f18 	cmp.w	ip, #24
 8015c40:	f04f 030a 	mov.w	r3, #10
 8015c44:	d91e      	bls.n	8015c84 <__gethex+0x120>
 8015c46:	b104      	cbz	r4, 8015c4a <__gethex+0xe6>
 8015c48:	4252      	negs	r2, r2
 8015c4a:	4417      	add	r7, r2
 8015c4c:	f8ca 1000 	str.w	r1, [sl]
 8015c50:	b1ed      	cbz	r5, 8015c8e <__gethex+0x12a>
 8015c52:	f1bb 0f00 	cmp.w	fp, #0
 8015c56:	bf0c      	ite	eq
 8015c58:	2506      	moveq	r5, #6
 8015c5a:	2500      	movne	r5, #0
 8015c5c:	4628      	mov	r0, r5
 8015c5e:	b005      	add	sp, #20
 8015c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c64:	2500      	movs	r5, #0
 8015c66:	462c      	mov	r4, r5
 8015c68:	e7b0      	b.n	8015bcc <__gethex+0x68>
 8015c6a:	2c00      	cmp	r4, #0
 8015c6c:	d1c7      	bne.n	8015bfe <__gethex+0x9a>
 8015c6e:	4627      	mov	r7, r4
 8015c70:	e7c7      	b.n	8015c02 <__gethex+0x9e>
 8015c72:	464e      	mov	r6, r9
 8015c74:	462f      	mov	r7, r5
 8015c76:	2501      	movs	r5, #1
 8015c78:	e7c3      	b.n	8015c02 <__gethex+0x9e>
 8015c7a:	2400      	movs	r4, #0
 8015c7c:	1cb1      	adds	r1, r6, #2
 8015c7e:	e7cc      	b.n	8015c1a <__gethex+0xb6>
 8015c80:	2401      	movs	r4, #1
 8015c82:	e7fb      	b.n	8015c7c <__gethex+0x118>
 8015c84:	fb03 0002 	mla	r0, r3, r2, r0
 8015c88:	e7ce      	b.n	8015c28 <__gethex+0xc4>
 8015c8a:	4631      	mov	r1, r6
 8015c8c:	e7de      	b.n	8015c4c <__gethex+0xe8>
 8015c8e:	eba6 0309 	sub.w	r3, r6, r9
 8015c92:	3b01      	subs	r3, #1
 8015c94:	4629      	mov	r1, r5
 8015c96:	2b07      	cmp	r3, #7
 8015c98:	dc0a      	bgt.n	8015cb0 <__gethex+0x14c>
 8015c9a:	9801      	ldr	r0, [sp, #4]
 8015c9c:	f001 f998 	bl	8016fd0 <_Balloc>
 8015ca0:	4604      	mov	r4, r0
 8015ca2:	b940      	cbnz	r0, 8015cb6 <__gethex+0x152>
 8015ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8015e18 <__gethex+0x2b4>)
 8015ca6:	4602      	mov	r2, r0
 8015ca8:	21e4      	movs	r1, #228	@ 0xe4
 8015caa:	485c      	ldr	r0, [pc, #368]	@ (8015e1c <__gethex+0x2b8>)
 8015cac:	f7ff f832 	bl	8014d14 <__assert_func>
 8015cb0:	3101      	adds	r1, #1
 8015cb2:	105b      	asrs	r3, r3, #1
 8015cb4:	e7ef      	b.n	8015c96 <__gethex+0x132>
 8015cb6:	f100 0a14 	add.w	sl, r0, #20
 8015cba:	2300      	movs	r3, #0
 8015cbc:	4655      	mov	r5, sl
 8015cbe:	469b      	mov	fp, r3
 8015cc0:	45b1      	cmp	r9, r6
 8015cc2:	d337      	bcc.n	8015d34 <__gethex+0x1d0>
 8015cc4:	f845 bb04 	str.w	fp, [r5], #4
 8015cc8:	eba5 050a 	sub.w	r5, r5, sl
 8015ccc:	10ad      	asrs	r5, r5, #2
 8015cce:	6125      	str	r5, [r4, #16]
 8015cd0:	4658      	mov	r0, fp
 8015cd2:	f001 fa6f 	bl	80171b4 <__hi0bits>
 8015cd6:	016d      	lsls	r5, r5, #5
 8015cd8:	f8d8 6000 	ldr.w	r6, [r8]
 8015cdc:	1a2d      	subs	r5, r5, r0
 8015cde:	42b5      	cmp	r5, r6
 8015ce0:	dd54      	ble.n	8015d8c <__gethex+0x228>
 8015ce2:	1bad      	subs	r5, r5, r6
 8015ce4:	4629      	mov	r1, r5
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f001 fdfb 	bl	80178e2 <__any_on>
 8015cec:	4681      	mov	r9, r0
 8015cee:	b178      	cbz	r0, 8015d10 <__gethex+0x1ac>
 8015cf0:	1e6b      	subs	r3, r5, #1
 8015cf2:	1159      	asrs	r1, r3, #5
 8015cf4:	f003 021f 	and.w	r2, r3, #31
 8015cf8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015cfc:	f04f 0901 	mov.w	r9, #1
 8015d00:	fa09 f202 	lsl.w	r2, r9, r2
 8015d04:	420a      	tst	r2, r1
 8015d06:	d003      	beq.n	8015d10 <__gethex+0x1ac>
 8015d08:	454b      	cmp	r3, r9
 8015d0a:	dc36      	bgt.n	8015d7a <__gethex+0x216>
 8015d0c:	f04f 0902 	mov.w	r9, #2
 8015d10:	4629      	mov	r1, r5
 8015d12:	4620      	mov	r0, r4
 8015d14:	f7ff febe 	bl	8015a94 <rshift>
 8015d18:	442f      	add	r7, r5
 8015d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015d1e:	42bb      	cmp	r3, r7
 8015d20:	da42      	bge.n	8015da8 <__gethex+0x244>
 8015d22:	9801      	ldr	r0, [sp, #4]
 8015d24:	4621      	mov	r1, r4
 8015d26:	f001 f993 	bl	8017050 <_Bfree>
 8015d2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	6013      	str	r3, [r2, #0]
 8015d30:	25a3      	movs	r5, #163	@ 0xa3
 8015d32:	e793      	b.n	8015c5c <__gethex+0xf8>
 8015d34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015d38:	2a2e      	cmp	r2, #46	@ 0x2e
 8015d3a:	d012      	beq.n	8015d62 <__gethex+0x1fe>
 8015d3c:	2b20      	cmp	r3, #32
 8015d3e:	d104      	bne.n	8015d4a <__gethex+0x1e6>
 8015d40:	f845 bb04 	str.w	fp, [r5], #4
 8015d44:	f04f 0b00 	mov.w	fp, #0
 8015d48:	465b      	mov	r3, fp
 8015d4a:	7830      	ldrb	r0, [r6, #0]
 8015d4c:	9303      	str	r3, [sp, #12]
 8015d4e:	f7ff fef3 	bl	8015b38 <__hexdig_fun>
 8015d52:	9b03      	ldr	r3, [sp, #12]
 8015d54:	f000 000f 	and.w	r0, r0, #15
 8015d58:	4098      	lsls	r0, r3
 8015d5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8015d5e:	3304      	adds	r3, #4
 8015d60:	e7ae      	b.n	8015cc0 <__gethex+0x15c>
 8015d62:	45b1      	cmp	r9, r6
 8015d64:	d8ea      	bhi.n	8015d3c <__gethex+0x1d8>
 8015d66:	492b      	ldr	r1, [pc, #172]	@ (8015e14 <__gethex+0x2b0>)
 8015d68:	9303      	str	r3, [sp, #12]
 8015d6a:	2201      	movs	r2, #1
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	f7fe feb2 	bl	8014ad6 <strncmp>
 8015d72:	9b03      	ldr	r3, [sp, #12]
 8015d74:	2800      	cmp	r0, #0
 8015d76:	d1e1      	bne.n	8015d3c <__gethex+0x1d8>
 8015d78:	e7a2      	b.n	8015cc0 <__gethex+0x15c>
 8015d7a:	1ea9      	subs	r1, r5, #2
 8015d7c:	4620      	mov	r0, r4
 8015d7e:	f001 fdb0 	bl	80178e2 <__any_on>
 8015d82:	2800      	cmp	r0, #0
 8015d84:	d0c2      	beq.n	8015d0c <__gethex+0x1a8>
 8015d86:	f04f 0903 	mov.w	r9, #3
 8015d8a:	e7c1      	b.n	8015d10 <__gethex+0x1ac>
 8015d8c:	da09      	bge.n	8015da2 <__gethex+0x23e>
 8015d8e:	1b75      	subs	r5, r6, r5
 8015d90:	4621      	mov	r1, r4
 8015d92:	9801      	ldr	r0, [sp, #4]
 8015d94:	462a      	mov	r2, r5
 8015d96:	f001 fb6b 	bl	8017470 <__lshift>
 8015d9a:	1b7f      	subs	r7, r7, r5
 8015d9c:	4604      	mov	r4, r0
 8015d9e:	f100 0a14 	add.w	sl, r0, #20
 8015da2:	f04f 0900 	mov.w	r9, #0
 8015da6:	e7b8      	b.n	8015d1a <__gethex+0x1b6>
 8015da8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015dac:	42bd      	cmp	r5, r7
 8015dae:	dd6f      	ble.n	8015e90 <__gethex+0x32c>
 8015db0:	1bed      	subs	r5, r5, r7
 8015db2:	42ae      	cmp	r6, r5
 8015db4:	dc34      	bgt.n	8015e20 <__gethex+0x2bc>
 8015db6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015dba:	2b02      	cmp	r3, #2
 8015dbc:	d022      	beq.n	8015e04 <__gethex+0x2a0>
 8015dbe:	2b03      	cmp	r3, #3
 8015dc0:	d024      	beq.n	8015e0c <__gethex+0x2a8>
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d115      	bne.n	8015df2 <__gethex+0x28e>
 8015dc6:	42ae      	cmp	r6, r5
 8015dc8:	d113      	bne.n	8015df2 <__gethex+0x28e>
 8015dca:	2e01      	cmp	r6, #1
 8015dcc:	d10b      	bne.n	8015de6 <__gethex+0x282>
 8015dce:	9a02      	ldr	r2, [sp, #8]
 8015dd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015dd4:	6013      	str	r3, [r2, #0]
 8015dd6:	2301      	movs	r3, #1
 8015dd8:	6123      	str	r3, [r4, #16]
 8015dda:	f8ca 3000 	str.w	r3, [sl]
 8015dde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015de0:	2562      	movs	r5, #98	@ 0x62
 8015de2:	601c      	str	r4, [r3, #0]
 8015de4:	e73a      	b.n	8015c5c <__gethex+0xf8>
 8015de6:	1e71      	subs	r1, r6, #1
 8015de8:	4620      	mov	r0, r4
 8015dea:	f001 fd7a 	bl	80178e2 <__any_on>
 8015dee:	2800      	cmp	r0, #0
 8015df0:	d1ed      	bne.n	8015dce <__gethex+0x26a>
 8015df2:	9801      	ldr	r0, [sp, #4]
 8015df4:	4621      	mov	r1, r4
 8015df6:	f001 f92b 	bl	8017050 <_Bfree>
 8015dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	6013      	str	r3, [r2, #0]
 8015e00:	2550      	movs	r5, #80	@ 0x50
 8015e02:	e72b      	b.n	8015c5c <__gethex+0xf8>
 8015e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d1f3      	bne.n	8015df2 <__gethex+0x28e>
 8015e0a:	e7e0      	b.n	8015dce <__gethex+0x26a>
 8015e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d1dd      	bne.n	8015dce <__gethex+0x26a>
 8015e12:	e7ee      	b.n	8015df2 <__gethex+0x28e>
 8015e14:	0801877f 	.word	0x0801877f
 8015e18:	0801889b 	.word	0x0801889b
 8015e1c:	080188ac 	.word	0x080188ac
 8015e20:	1e6f      	subs	r7, r5, #1
 8015e22:	f1b9 0f00 	cmp.w	r9, #0
 8015e26:	d130      	bne.n	8015e8a <__gethex+0x326>
 8015e28:	b127      	cbz	r7, 8015e34 <__gethex+0x2d0>
 8015e2a:	4639      	mov	r1, r7
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	f001 fd58 	bl	80178e2 <__any_on>
 8015e32:	4681      	mov	r9, r0
 8015e34:	117a      	asrs	r2, r7, #5
 8015e36:	2301      	movs	r3, #1
 8015e38:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015e3c:	f007 071f 	and.w	r7, r7, #31
 8015e40:	40bb      	lsls	r3, r7
 8015e42:	4213      	tst	r3, r2
 8015e44:	4629      	mov	r1, r5
 8015e46:	4620      	mov	r0, r4
 8015e48:	bf18      	it	ne
 8015e4a:	f049 0902 	orrne.w	r9, r9, #2
 8015e4e:	f7ff fe21 	bl	8015a94 <rshift>
 8015e52:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015e56:	1b76      	subs	r6, r6, r5
 8015e58:	2502      	movs	r5, #2
 8015e5a:	f1b9 0f00 	cmp.w	r9, #0
 8015e5e:	d047      	beq.n	8015ef0 <__gethex+0x38c>
 8015e60:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e64:	2b02      	cmp	r3, #2
 8015e66:	d015      	beq.n	8015e94 <__gethex+0x330>
 8015e68:	2b03      	cmp	r3, #3
 8015e6a:	d017      	beq.n	8015e9c <__gethex+0x338>
 8015e6c:	2b01      	cmp	r3, #1
 8015e6e:	d109      	bne.n	8015e84 <__gethex+0x320>
 8015e70:	f019 0f02 	tst.w	r9, #2
 8015e74:	d006      	beq.n	8015e84 <__gethex+0x320>
 8015e76:	f8da 3000 	ldr.w	r3, [sl]
 8015e7a:	ea49 0903 	orr.w	r9, r9, r3
 8015e7e:	f019 0f01 	tst.w	r9, #1
 8015e82:	d10e      	bne.n	8015ea2 <__gethex+0x33e>
 8015e84:	f045 0510 	orr.w	r5, r5, #16
 8015e88:	e032      	b.n	8015ef0 <__gethex+0x38c>
 8015e8a:	f04f 0901 	mov.w	r9, #1
 8015e8e:	e7d1      	b.n	8015e34 <__gethex+0x2d0>
 8015e90:	2501      	movs	r5, #1
 8015e92:	e7e2      	b.n	8015e5a <__gethex+0x2f6>
 8015e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e96:	f1c3 0301 	rsb	r3, r3, #1
 8015e9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d0f0      	beq.n	8015e84 <__gethex+0x320>
 8015ea2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015ea6:	f104 0314 	add.w	r3, r4, #20
 8015eaa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015eae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015eb2:	f04f 0c00 	mov.w	ip, #0
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ebc:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8015ec0:	d01b      	beq.n	8015efa <__gethex+0x396>
 8015ec2:	3201      	adds	r2, #1
 8015ec4:	6002      	str	r2, [r0, #0]
 8015ec6:	2d02      	cmp	r5, #2
 8015ec8:	f104 0314 	add.w	r3, r4, #20
 8015ecc:	d13c      	bne.n	8015f48 <__gethex+0x3e4>
 8015ece:	f8d8 2000 	ldr.w	r2, [r8]
 8015ed2:	3a01      	subs	r2, #1
 8015ed4:	42b2      	cmp	r2, r6
 8015ed6:	d109      	bne.n	8015eec <__gethex+0x388>
 8015ed8:	1171      	asrs	r1, r6, #5
 8015eda:	2201      	movs	r2, #1
 8015edc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015ee0:	f006 061f 	and.w	r6, r6, #31
 8015ee4:	fa02 f606 	lsl.w	r6, r2, r6
 8015ee8:	421e      	tst	r6, r3
 8015eea:	d13a      	bne.n	8015f62 <__gethex+0x3fe>
 8015eec:	f045 0520 	orr.w	r5, r5, #32
 8015ef0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ef2:	601c      	str	r4, [r3, #0]
 8015ef4:	9b02      	ldr	r3, [sp, #8]
 8015ef6:	601f      	str	r7, [r3, #0]
 8015ef8:	e6b0      	b.n	8015c5c <__gethex+0xf8>
 8015efa:	4299      	cmp	r1, r3
 8015efc:	f843 cc04 	str.w	ip, [r3, #-4]
 8015f00:	d8d9      	bhi.n	8015eb6 <__gethex+0x352>
 8015f02:	68a3      	ldr	r3, [r4, #8]
 8015f04:	459b      	cmp	fp, r3
 8015f06:	db17      	blt.n	8015f38 <__gethex+0x3d4>
 8015f08:	6861      	ldr	r1, [r4, #4]
 8015f0a:	9801      	ldr	r0, [sp, #4]
 8015f0c:	3101      	adds	r1, #1
 8015f0e:	f001 f85f 	bl	8016fd0 <_Balloc>
 8015f12:	4681      	mov	r9, r0
 8015f14:	b918      	cbnz	r0, 8015f1e <__gethex+0x3ba>
 8015f16:	4b1a      	ldr	r3, [pc, #104]	@ (8015f80 <__gethex+0x41c>)
 8015f18:	4602      	mov	r2, r0
 8015f1a:	2184      	movs	r1, #132	@ 0x84
 8015f1c:	e6c5      	b.n	8015caa <__gethex+0x146>
 8015f1e:	6922      	ldr	r2, [r4, #16]
 8015f20:	3202      	adds	r2, #2
 8015f22:	f104 010c 	add.w	r1, r4, #12
 8015f26:	0092      	lsls	r2, r2, #2
 8015f28:	300c      	adds	r0, #12
 8015f2a:	f7fe fed5 	bl	8014cd8 <memcpy>
 8015f2e:	4621      	mov	r1, r4
 8015f30:	9801      	ldr	r0, [sp, #4]
 8015f32:	f001 f88d 	bl	8017050 <_Bfree>
 8015f36:	464c      	mov	r4, r9
 8015f38:	6923      	ldr	r3, [r4, #16]
 8015f3a:	1c5a      	adds	r2, r3, #1
 8015f3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015f40:	6122      	str	r2, [r4, #16]
 8015f42:	2201      	movs	r2, #1
 8015f44:	615a      	str	r2, [r3, #20]
 8015f46:	e7be      	b.n	8015ec6 <__gethex+0x362>
 8015f48:	6922      	ldr	r2, [r4, #16]
 8015f4a:	455a      	cmp	r2, fp
 8015f4c:	dd0b      	ble.n	8015f66 <__gethex+0x402>
 8015f4e:	2101      	movs	r1, #1
 8015f50:	4620      	mov	r0, r4
 8015f52:	f7ff fd9f 	bl	8015a94 <rshift>
 8015f56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015f5a:	3701      	adds	r7, #1
 8015f5c:	42bb      	cmp	r3, r7
 8015f5e:	f6ff aee0 	blt.w	8015d22 <__gethex+0x1be>
 8015f62:	2501      	movs	r5, #1
 8015f64:	e7c2      	b.n	8015eec <__gethex+0x388>
 8015f66:	f016 061f 	ands.w	r6, r6, #31
 8015f6a:	d0fa      	beq.n	8015f62 <__gethex+0x3fe>
 8015f6c:	4453      	add	r3, sl
 8015f6e:	f1c6 0620 	rsb	r6, r6, #32
 8015f72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015f76:	f001 f91d 	bl	80171b4 <__hi0bits>
 8015f7a:	42b0      	cmp	r0, r6
 8015f7c:	dbe7      	blt.n	8015f4e <__gethex+0x3ea>
 8015f7e:	e7f0      	b.n	8015f62 <__gethex+0x3fe>
 8015f80:	0801889b 	.word	0x0801889b

08015f84 <L_shift>:
 8015f84:	f1c2 0208 	rsb	r2, r2, #8
 8015f88:	0092      	lsls	r2, r2, #2
 8015f8a:	b570      	push	{r4, r5, r6, lr}
 8015f8c:	f1c2 0620 	rsb	r6, r2, #32
 8015f90:	6843      	ldr	r3, [r0, #4]
 8015f92:	6804      	ldr	r4, [r0, #0]
 8015f94:	fa03 f506 	lsl.w	r5, r3, r6
 8015f98:	432c      	orrs	r4, r5
 8015f9a:	40d3      	lsrs	r3, r2
 8015f9c:	6004      	str	r4, [r0, #0]
 8015f9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015fa2:	4288      	cmp	r0, r1
 8015fa4:	d3f4      	bcc.n	8015f90 <L_shift+0xc>
 8015fa6:	bd70      	pop	{r4, r5, r6, pc}

08015fa8 <__match>:
 8015fa8:	b530      	push	{r4, r5, lr}
 8015faa:	6803      	ldr	r3, [r0, #0]
 8015fac:	3301      	adds	r3, #1
 8015fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015fb2:	b914      	cbnz	r4, 8015fba <__match+0x12>
 8015fb4:	6003      	str	r3, [r0, #0]
 8015fb6:	2001      	movs	r0, #1
 8015fb8:	bd30      	pop	{r4, r5, pc}
 8015fba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015fbe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015fc2:	2d19      	cmp	r5, #25
 8015fc4:	bf98      	it	ls
 8015fc6:	3220      	addls	r2, #32
 8015fc8:	42a2      	cmp	r2, r4
 8015fca:	d0f0      	beq.n	8015fae <__match+0x6>
 8015fcc:	2000      	movs	r0, #0
 8015fce:	e7f3      	b.n	8015fb8 <__match+0x10>

08015fd0 <__hexnan>:
 8015fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd4:	680b      	ldr	r3, [r1, #0]
 8015fd6:	6801      	ldr	r1, [r0, #0]
 8015fd8:	115e      	asrs	r6, r3, #5
 8015fda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015fde:	f013 031f 	ands.w	r3, r3, #31
 8015fe2:	b087      	sub	sp, #28
 8015fe4:	bf18      	it	ne
 8015fe6:	3604      	addne	r6, #4
 8015fe8:	2500      	movs	r5, #0
 8015fea:	1f37      	subs	r7, r6, #4
 8015fec:	4682      	mov	sl, r0
 8015fee:	4690      	mov	r8, r2
 8015ff0:	9301      	str	r3, [sp, #4]
 8015ff2:	f846 5c04 	str.w	r5, [r6, #-4]
 8015ff6:	46b9      	mov	r9, r7
 8015ff8:	463c      	mov	r4, r7
 8015ffa:	9502      	str	r5, [sp, #8]
 8015ffc:	46ab      	mov	fp, r5
 8015ffe:	784a      	ldrb	r2, [r1, #1]
 8016000:	1c4b      	adds	r3, r1, #1
 8016002:	9303      	str	r3, [sp, #12]
 8016004:	b342      	cbz	r2, 8016058 <__hexnan+0x88>
 8016006:	4610      	mov	r0, r2
 8016008:	9105      	str	r1, [sp, #20]
 801600a:	9204      	str	r2, [sp, #16]
 801600c:	f7ff fd94 	bl	8015b38 <__hexdig_fun>
 8016010:	2800      	cmp	r0, #0
 8016012:	d151      	bne.n	80160b8 <__hexnan+0xe8>
 8016014:	9a04      	ldr	r2, [sp, #16]
 8016016:	9905      	ldr	r1, [sp, #20]
 8016018:	2a20      	cmp	r2, #32
 801601a:	d818      	bhi.n	801604e <__hexnan+0x7e>
 801601c:	9b02      	ldr	r3, [sp, #8]
 801601e:	459b      	cmp	fp, r3
 8016020:	dd13      	ble.n	801604a <__hexnan+0x7a>
 8016022:	454c      	cmp	r4, r9
 8016024:	d206      	bcs.n	8016034 <__hexnan+0x64>
 8016026:	2d07      	cmp	r5, #7
 8016028:	dc04      	bgt.n	8016034 <__hexnan+0x64>
 801602a:	462a      	mov	r2, r5
 801602c:	4649      	mov	r1, r9
 801602e:	4620      	mov	r0, r4
 8016030:	f7ff ffa8 	bl	8015f84 <L_shift>
 8016034:	4544      	cmp	r4, r8
 8016036:	d952      	bls.n	80160de <__hexnan+0x10e>
 8016038:	2300      	movs	r3, #0
 801603a:	f1a4 0904 	sub.w	r9, r4, #4
 801603e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016042:	f8cd b008 	str.w	fp, [sp, #8]
 8016046:	464c      	mov	r4, r9
 8016048:	461d      	mov	r5, r3
 801604a:	9903      	ldr	r1, [sp, #12]
 801604c:	e7d7      	b.n	8015ffe <__hexnan+0x2e>
 801604e:	2a29      	cmp	r2, #41	@ 0x29
 8016050:	d157      	bne.n	8016102 <__hexnan+0x132>
 8016052:	3102      	adds	r1, #2
 8016054:	f8ca 1000 	str.w	r1, [sl]
 8016058:	f1bb 0f00 	cmp.w	fp, #0
 801605c:	d051      	beq.n	8016102 <__hexnan+0x132>
 801605e:	454c      	cmp	r4, r9
 8016060:	d206      	bcs.n	8016070 <__hexnan+0xa0>
 8016062:	2d07      	cmp	r5, #7
 8016064:	dc04      	bgt.n	8016070 <__hexnan+0xa0>
 8016066:	462a      	mov	r2, r5
 8016068:	4649      	mov	r1, r9
 801606a:	4620      	mov	r0, r4
 801606c:	f7ff ff8a 	bl	8015f84 <L_shift>
 8016070:	4544      	cmp	r4, r8
 8016072:	d936      	bls.n	80160e2 <__hexnan+0x112>
 8016074:	f1a8 0204 	sub.w	r2, r8, #4
 8016078:	4623      	mov	r3, r4
 801607a:	f853 1b04 	ldr.w	r1, [r3], #4
 801607e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016082:	429f      	cmp	r7, r3
 8016084:	d2f9      	bcs.n	801607a <__hexnan+0xaa>
 8016086:	1b3b      	subs	r3, r7, r4
 8016088:	f023 0303 	bic.w	r3, r3, #3
 801608c:	3304      	adds	r3, #4
 801608e:	3401      	adds	r4, #1
 8016090:	3e03      	subs	r6, #3
 8016092:	42b4      	cmp	r4, r6
 8016094:	bf88      	it	hi
 8016096:	2304      	movhi	r3, #4
 8016098:	4443      	add	r3, r8
 801609a:	2200      	movs	r2, #0
 801609c:	f843 2b04 	str.w	r2, [r3], #4
 80160a0:	429f      	cmp	r7, r3
 80160a2:	d2fb      	bcs.n	801609c <__hexnan+0xcc>
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	b91b      	cbnz	r3, 80160b0 <__hexnan+0xe0>
 80160a8:	4547      	cmp	r7, r8
 80160aa:	d128      	bne.n	80160fe <__hexnan+0x12e>
 80160ac:	2301      	movs	r3, #1
 80160ae:	603b      	str	r3, [r7, #0]
 80160b0:	2005      	movs	r0, #5
 80160b2:	b007      	add	sp, #28
 80160b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b8:	3501      	adds	r5, #1
 80160ba:	2d08      	cmp	r5, #8
 80160bc:	f10b 0b01 	add.w	fp, fp, #1
 80160c0:	dd06      	ble.n	80160d0 <__hexnan+0x100>
 80160c2:	4544      	cmp	r4, r8
 80160c4:	d9c1      	bls.n	801604a <__hexnan+0x7a>
 80160c6:	2300      	movs	r3, #0
 80160c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80160cc:	2501      	movs	r5, #1
 80160ce:	3c04      	subs	r4, #4
 80160d0:	6822      	ldr	r2, [r4, #0]
 80160d2:	f000 000f 	and.w	r0, r0, #15
 80160d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80160da:	6020      	str	r0, [r4, #0]
 80160dc:	e7b5      	b.n	801604a <__hexnan+0x7a>
 80160de:	2508      	movs	r5, #8
 80160e0:	e7b3      	b.n	801604a <__hexnan+0x7a>
 80160e2:	9b01      	ldr	r3, [sp, #4]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d0dd      	beq.n	80160a4 <__hexnan+0xd4>
 80160e8:	f1c3 0320 	rsb	r3, r3, #32
 80160ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80160f0:	40da      	lsrs	r2, r3
 80160f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80160f6:	4013      	ands	r3, r2
 80160f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80160fc:	e7d2      	b.n	80160a4 <__hexnan+0xd4>
 80160fe:	3f04      	subs	r7, #4
 8016100:	e7d0      	b.n	80160a4 <__hexnan+0xd4>
 8016102:	2004      	movs	r0, #4
 8016104:	e7d5      	b.n	80160b2 <__hexnan+0xe2>

08016106 <__ssputs_r>:
 8016106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801610a:	688e      	ldr	r6, [r1, #8]
 801610c:	461f      	mov	r7, r3
 801610e:	42be      	cmp	r6, r7
 8016110:	680b      	ldr	r3, [r1, #0]
 8016112:	4682      	mov	sl, r0
 8016114:	460c      	mov	r4, r1
 8016116:	4690      	mov	r8, r2
 8016118:	d82d      	bhi.n	8016176 <__ssputs_r+0x70>
 801611a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801611e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016122:	d026      	beq.n	8016172 <__ssputs_r+0x6c>
 8016124:	6965      	ldr	r5, [r4, #20]
 8016126:	6909      	ldr	r1, [r1, #16]
 8016128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801612c:	eba3 0901 	sub.w	r9, r3, r1
 8016130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016134:	1c7b      	adds	r3, r7, #1
 8016136:	444b      	add	r3, r9
 8016138:	106d      	asrs	r5, r5, #1
 801613a:	429d      	cmp	r5, r3
 801613c:	bf38      	it	cc
 801613e:	461d      	movcc	r5, r3
 8016140:	0553      	lsls	r3, r2, #21
 8016142:	d527      	bpl.n	8016194 <__ssputs_r+0x8e>
 8016144:	4629      	mov	r1, r5
 8016146:	f000 fc71 	bl	8016a2c <_malloc_r>
 801614a:	4606      	mov	r6, r0
 801614c:	b360      	cbz	r0, 80161a8 <__ssputs_r+0xa2>
 801614e:	6921      	ldr	r1, [r4, #16]
 8016150:	464a      	mov	r2, r9
 8016152:	f7fe fdc1 	bl	8014cd8 <memcpy>
 8016156:	89a3      	ldrh	r3, [r4, #12]
 8016158:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801615c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016160:	81a3      	strh	r3, [r4, #12]
 8016162:	6126      	str	r6, [r4, #16]
 8016164:	6165      	str	r5, [r4, #20]
 8016166:	444e      	add	r6, r9
 8016168:	eba5 0509 	sub.w	r5, r5, r9
 801616c:	6026      	str	r6, [r4, #0]
 801616e:	60a5      	str	r5, [r4, #8]
 8016170:	463e      	mov	r6, r7
 8016172:	42be      	cmp	r6, r7
 8016174:	d900      	bls.n	8016178 <__ssputs_r+0x72>
 8016176:	463e      	mov	r6, r7
 8016178:	6820      	ldr	r0, [r4, #0]
 801617a:	4632      	mov	r2, r6
 801617c:	4641      	mov	r1, r8
 801617e:	f001 fdbe 	bl	8017cfe <memmove>
 8016182:	68a3      	ldr	r3, [r4, #8]
 8016184:	1b9b      	subs	r3, r3, r6
 8016186:	60a3      	str	r3, [r4, #8]
 8016188:	6823      	ldr	r3, [r4, #0]
 801618a:	4433      	add	r3, r6
 801618c:	6023      	str	r3, [r4, #0]
 801618e:	2000      	movs	r0, #0
 8016190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016194:	462a      	mov	r2, r5
 8016196:	f001 fc11 	bl	80179bc <_realloc_r>
 801619a:	4606      	mov	r6, r0
 801619c:	2800      	cmp	r0, #0
 801619e:	d1e0      	bne.n	8016162 <__ssputs_r+0x5c>
 80161a0:	6921      	ldr	r1, [r4, #16]
 80161a2:	4650      	mov	r0, sl
 80161a4:	f7ff fc2c 	bl	8015a00 <_free_r>
 80161a8:	230c      	movs	r3, #12
 80161aa:	f8ca 3000 	str.w	r3, [sl]
 80161ae:	89a3      	ldrh	r3, [r4, #12]
 80161b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80161b4:	81a3      	strh	r3, [r4, #12]
 80161b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161ba:	e7e9      	b.n	8016190 <__ssputs_r+0x8a>

080161bc <_svfiprintf_r>:
 80161bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c0:	4698      	mov	r8, r3
 80161c2:	898b      	ldrh	r3, [r1, #12]
 80161c4:	061b      	lsls	r3, r3, #24
 80161c6:	b09d      	sub	sp, #116	@ 0x74
 80161c8:	4607      	mov	r7, r0
 80161ca:	460d      	mov	r5, r1
 80161cc:	4614      	mov	r4, r2
 80161ce:	d510      	bpl.n	80161f2 <_svfiprintf_r+0x36>
 80161d0:	690b      	ldr	r3, [r1, #16]
 80161d2:	b973      	cbnz	r3, 80161f2 <_svfiprintf_r+0x36>
 80161d4:	2140      	movs	r1, #64	@ 0x40
 80161d6:	f000 fc29 	bl	8016a2c <_malloc_r>
 80161da:	6028      	str	r0, [r5, #0]
 80161dc:	6128      	str	r0, [r5, #16]
 80161de:	b930      	cbnz	r0, 80161ee <_svfiprintf_r+0x32>
 80161e0:	230c      	movs	r3, #12
 80161e2:	603b      	str	r3, [r7, #0]
 80161e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161e8:	b01d      	add	sp, #116	@ 0x74
 80161ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ee:	2340      	movs	r3, #64	@ 0x40
 80161f0:	616b      	str	r3, [r5, #20]
 80161f2:	2300      	movs	r3, #0
 80161f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80161f6:	2320      	movs	r3, #32
 80161f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80161fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016200:	2330      	movs	r3, #48	@ 0x30
 8016202:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80163a0 <_svfiprintf_r+0x1e4>
 8016206:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801620a:	f04f 0901 	mov.w	r9, #1
 801620e:	4623      	mov	r3, r4
 8016210:	469a      	mov	sl, r3
 8016212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016216:	b10a      	cbz	r2, 801621c <_svfiprintf_r+0x60>
 8016218:	2a25      	cmp	r2, #37	@ 0x25
 801621a:	d1f9      	bne.n	8016210 <_svfiprintf_r+0x54>
 801621c:	ebba 0b04 	subs.w	fp, sl, r4
 8016220:	d00b      	beq.n	801623a <_svfiprintf_r+0x7e>
 8016222:	465b      	mov	r3, fp
 8016224:	4622      	mov	r2, r4
 8016226:	4629      	mov	r1, r5
 8016228:	4638      	mov	r0, r7
 801622a:	f7ff ff6c 	bl	8016106 <__ssputs_r>
 801622e:	3001      	adds	r0, #1
 8016230:	f000 80a7 	beq.w	8016382 <_svfiprintf_r+0x1c6>
 8016234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016236:	445a      	add	r2, fp
 8016238:	9209      	str	r2, [sp, #36]	@ 0x24
 801623a:	f89a 3000 	ldrb.w	r3, [sl]
 801623e:	2b00      	cmp	r3, #0
 8016240:	f000 809f 	beq.w	8016382 <_svfiprintf_r+0x1c6>
 8016244:	2300      	movs	r3, #0
 8016246:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801624a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801624e:	f10a 0a01 	add.w	sl, sl, #1
 8016252:	9304      	str	r3, [sp, #16]
 8016254:	9307      	str	r3, [sp, #28]
 8016256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801625a:	931a      	str	r3, [sp, #104]	@ 0x68
 801625c:	4654      	mov	r4, sl
 801625e:	2205      	movs	r2, #5
 8016260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016264:	484e      	ldr	r0, [pc, #312]	@ (80163a0 <_svfiprintf_r+0x1e4>)
 8016266:	f7e9 ffc3 	bl	80001f0 <memchr>
 801626a:	9a04      	ldr	r2, [sp, #16]
 801626c:	b9d8      	cbnz	r0, 80162a6 <_svfiprintf_r+0xea>
 801626e:	06d0      	lsls	r0, r2, #27
 8016270:	bf44      	itt	mi
 8016272:	2320      	movmi	r3, #32
 8016274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016278:	0711      	lsls	r1, r2, #28
 801627a:	bf44      	itt	mi
 801627c:	232b      	movmi	r3, #43	@ 0x2b
 801627e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016282:	f89a 3000 	ldrb.w	r3, [sl]
 8016286:	2b2a      	cmp	r3, #42	@ 0x2a
 8016288:	d015      	beq.n	80162b6 <_svfiprintf_r+0xfa>
 801628a:	9a07      	ldr	r2, [sp, #28]
 801628c:	4654      	mov	r4, sl
 801628e:	2000      	movs	r0, #0
 8016290:	f04f 0c0a 	mov.w	ip, #10
 8016294:	4621      	mov	r1, r4
 8016296:	f811 3b01 	ldrb.w	r3, [r1], #1
 801629a:	3b30      	subs	r3, #48	@ 0x30
 801629c:	2b09      	cmp	r3, #9
 801629e:	d94b      	bls.n	8016338 <_svfiprintf_r+0x17c>
 80162a0:	b1b0      	cbz	r0, 80162d0 <_svfiprintf_r+0x114>
 80162a2:	9207      	str	r2, [sp, #28]
 80162a4:	e014      	b.n	80162d0 <_svfiprintf_r+0x114>
 80162a6:	eba0 0308 	sub.w	r3, r0, r8
 80162aa:	fa09 f303 	lsl.w	r3, r9, r3
 80162ae:	4313      	orrs	r3, r2
 80162b0:	9304      	str	r3, [sp, #16]
 80162b2:	46a2      	mov	sl, r4
 80162b4:	e7d2      	b.n	801625c <_svfiprintf_r+0xa0>
 80162b6:	9b03      	ldr	r3, [sp, #12]
 80162b8:	1d19      	adds	r1, r3, #4
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	9103      	str	r1, [sp, #12]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	bfbb      	ittet	lt
 80162c2:	425b      	neglt	r3, r3
 80162c4:	f042 0202 	orrlt.w	r2, r2, #2
 80162c8:	9307      	strge	r3, [sp, #28]
 80162ca:	9307      	strlt	r3, [sp, #28]
 80162cc:	bfb8      	it	lt
 80162ce:	9204      	strlt	r2, [sp, #16]
 80162d0:	7823      	ldrb	r3, [r4, #0]
 80162d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80162d4:	d10a      	bne.n	80162ec <_svfiprintf_r+0x130>
 80162d6:	7863      	ldrb	r3, [r4, #1]
 80162d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80162da:	d132      	bne.n	8016342 <_svfiprintf_r+0x186>
 80162dc:	9b03      	ldr	r3, [sp, #12]
 80162de:	1d1a      	adds	r2, r3, #4
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	9203      	str	r2, [sp, #12]
 80162e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80162e8:	3402      	adds	r4, #2
 80162ea:	9305      	str	r3, [sp, #20]
 80162ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80163b0 <_svfiprintf_r+0x1f4>
 80162f0:	7821      	ldrb	r1, [r4, #0]
 80162f2:	2203      	movs	r2, #3
 80162f4:	4650      	mov	r0, sl
 80162f6:	f7e9 ff7b 	bl	80001f0 <memchr>
 80162fa:	b138      	cbz	r0, 801630c <_svfiprintf_r+0x150>
 80162fc:	9b04      	ldr	r3, [sp, #16]
 80162fe:	eba0 000a 	sub.w	r0, r0, sl
 8016302:	2240      	movs	r2, #64	@ 0x40
 8016304:	4082      	lsls	r2, r0
 8016306:	4313      	orrs	r3, r2
 8016308:	3401      	adds	r4, #1
 801630a:	9304      	str	r3, [sp, #16]
 801630c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016310:	4824      	ldr	r0, [pc, #144]	@ (80163a4 <_svfiprintf_r+0x1e8>)
 8016312:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016316:	2206      	movs	r2, #6
 8016318:	f7e9 ff6a 	bl	80001f0 <memchr>
 801631c:	2800      	cmp	r0, #0
 801631e:	d036      	beq.n	801638e <_svfiprintf_r+0x1d2>
 8016320:	4b21      	ldr	r3, [pc, #132]	@ (80163a8 <_svfiprintf_r+0x1ec>)
 8016322:	bb1b      	cbnz	r3, 801636c <_svfiprintf_r+0x1b0>
 8016324:	9b03      	ldr	r3, [sp, #12]
 8016326:	3307      	adds	r3, #7
 8016328:	f023 0307 	bic.w	r3, r3, #7
 801632c:	3308      	adds	r3, #8
 801632e:	9303      	str	r3, [sp, #12]
 8016330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016332:	4433      	add	r3, r6
 8016334:	9309      	str	r3, [sp, #36]	@ 0x24
 8016336:	e76a      	b.n	801620e <_svfiprintf_r+0x52>
 8016338:	fb0c 3202 	mla	r2, ip, r2, r3
 801633c:	460c      	mov	r4, r1
 801633e:	2001      	movs	r0, #1
 8016340:	e7a8      	b.n	8016294 <_svfiprintf_r+0xd8>
 8016342:	2300      	movs	r3, #0
 8016344:	3401      	adds	r4, #1
 8016346:	9305      	str	r3, [sp, #20]
 8016348:	4619      	mov	r1, r3
 801634a:	f04f 0c0a 	mov.w	ip, #10
 801634e:	4620      	mov	r0, r4
 8016350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016354:	3a30      	subs	r2, #48	@ 0x30
 8016356:	2a09      	cmp	r2, #9
 8016358:	d903      	bls.n	8016362 <_svfiprintf_r+0x1a6>
 801635a:	2b00      	cmp	r3, #0
 801635c:	d0c6      	beq.n	80162ec <_svfiprintf_r+0x130>
 801635e:	9105      	str	r1, [sp, #20]
 8016360:	e7c4      	b.n	80162ec <_svfiprintf_r+0x130>
 8016362:	fb0c 2101 	mla	r1, ip, r1, r2
 8016366:	4604      	mov	r4, r0
 8016368:	2301      	movs	r3, #1
 801636a:	e7f0      	b.n	801634e <_svfiprintf_r+0x192>
 801636c:	ab03      	add	r3, sp, #12
 801636e:	9300      	str	r3, [sp, #0]
 8016370:	462a      	mov	r2, r5
 8016372:	4b0e      	ldr	r3, [pc, #56]	@ (80163ac <_svfiprintf_r+0x1f0>)
 8016374:	a904      	add	r1, sp, #16
 8016376:	4638      	mov	r0, r7
 8016378:	f7fc fd3c 	bl	8012df4 <_printf_float>
 801637c:	1c42      	adds	r2, r0, #1
 801637e:	4606      	mov	r6, r0
 8016380:	d1d6      	bne.n	8016330 <_svfiprintf_r+0x174>
 8016382:	89ab      	ldrh	r3, [r5, #12]
 8016384:	065b      	lsls	r3, r3, #25
 8016386:	f53f af2d 	bmi.w	80161e4 <_svfiprintf_r+0x28>
 801638a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801638c:	e72c      	b.n	80161e8 <_svfiprintf_r+0x2c>
 801638e:	ab03      	add	r3, sp, #12
 8016390:	9300      	str	r3, [sp, #0]
 8016392:	462a      	mov	r2, r5
 8016394:	4b05      	ldr	r3, [pc, #20]	@ (80163ac <_svfiprintf_r+0x1f0>)
 8016396:	a904      	add	r1, sp, #16
 8016398:	4638      	mov	r0, r7
 801639a:	f7fc ffc3 	bl	8013324 <_printf_i>
 801639e:	e7ed      	b.n	801637c <_svfiprintf_r+0x1c0>
 80163a0:	0801890c 	.word	0x0801890c
 80163a4:	08018916 	.word	0x08018916
 80163a8:	08012df5 	.word	0x08012df5
 80163ac:	08016107 	.word	0x08016107
 80163b0:	08018912 	.word	0x08018912

080163b4 <_sungetc_r>:
 80163b4:	b538      	push	{r3, r4, r5, lr}
 80163b6:	1c4b      	adds	r3, r1, #1
 80163b8:	4614      	mov	r4, r2
 80163ba:	d103      	bne.n	80163c4 <_sungetc_r+0x10>
 80163bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80163c0:	4628      	mov	r0, r5
 80163c2:	bd38      	pop	{r3, r4, r5, pc}
 80163c4:	8993      	ldrh	r3, [r2, #12]
 80163c6:	f023 0320 	bic.w	r3, r3, #32
 80163ca:	8193      	strh	r3, [r2, #12]
 80163cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80163ce:	6852      	ldr	r2, [r2, #4]
 80163d0:	b2cd      	uxtb	r5, r1
 80163d2:	b18b      	cbz	r3, 80163f8 <_sungetc_r+0x44>
 80163d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80163d6:	4293      	cmp	r3, r2
 80163d8:	dd08      	ble.n	80163ec <_sungetc_r+0x38>
 80163da:	6823      	ldr	r3, [r4, #0]
 80163dc:	1e5a      	subs	r2, r3, #1
 80163de:	6022      	str	r2, [r4, #0]
 80163e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80163e4:	6863      	ldr	r3, [r4, #4]
 80163e6:	3301      	adds	r3, #1
 80163e8:	6063      	str	r3, [r4, #4]
 80163ea:	e7e9      	b.n	80163c0 <_sungetc_r+0xc>
 80163ec:	4621      	mov	r1, r4
 80163ee:	f001 fa99 	bl	8017924 <__submore>
 80163f2:	2800      	cmp	r0, #0
 80163f4:	d0f1      	beq.n	80163da <_sungetc_r+0x26>
 80163f6:	e7e1      	b.n	80163bc <_sungetc_r+0x8>
 80163f8:	6921      	ldr	r1, [r4, #16]
 80163fa:	6823      	ldr	r3, [r4, #0]
 80163fc:	b151      	cbz	r1, 8016414 <_sungetc_r+0x60>
 80163fe:	4299      	cmp	r1, r3
 8016400:	d208      	bcs.n	8016414 <_sungetc_r+0x60>
 8016402:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016406:	42a9      	cmp	r1, r5
 8016408:	d104      	bne.n	8016414 <_sungetc_r+0x60>
 801640a:	3b01      	subs	r3, #1
 801640c:	3201      	adds	r2, #1
 801640e:	6023      	str	r3, [r4, #0]
 8016410:	6062      	str	r2, [r4, #4]
 8016412:	e7d5      	b.n	80163c0 <_sungetc_r+0xc>
 8016414:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8016418:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801641c:	6363      	str	r3, [r4, #52]	@ 0x34
 801641e:	2303      	movs	r3, #3
 8016420:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016422:	4623      	mov	r3, r4
 8016424:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016428:	6023      	str	r3, [r4, #0]
 801642a:	2301      	movs	r3, #1
 801642c:	e7dc      	b.n	80163e8 <_sungetc_r+0x34>

0801642e <__ssrefill_r>:
 801642e:	b510      	push	{r4, lr}
 8016430:	460c      	mov	r4, r1
 8016432:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016434:	b169      	cbz	r1, 8016452 <__ssrefill_r+0x24>
 8016436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801643a:	4299      	cmp	r1, r3
 801643c:	d001      	beq.n	8016442 <__ssrefill_r+0x14>
 801643e:	f7ff fadf 	bl	8015a00 <_free_r>
 8016442:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016444:	6063      	str	r3, [r4, #4]
 8016446:	2000      	movs	r0, #0
 8016448:	6360      	str	r0, [r4, #52]	@ 0x34
 801644a:	b113      	cbz	r3, 8016452 <__ssrefill_r+0x24>
 801644c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801644e:	6023      	str	r3, [r4, #0]
 8016450:	bd10      	pop	{r4, pc}
 8016452:	6923      	ldr	r3, [r4, #16]
 8016454:	6023      	str	r3, [r4, #0]
 8016456:	2300      	movs	r3, #0
 8016458:	6063      	str	r3, [r4, #4]
 801645a:	89a3      	ldrh	r3, [r4, #12]
 801645c:	f043 0320 	orr.w	r3, r3, #32
 8016460:	81a3      	strh	r3, [r4, #12]
 8016462:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016466:	e7f3      	b.n	8016450 <__ssrefill_r+0x22>

08016468 <__ssvfiscanf_r>:
 8016468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801646c:	460c      	mov	r4, r1
 801646e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8016472:	2100      	movs	r1, #0
 8016474:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8016478:	49a6      	ldr	r1, [pc, #664]	@ (8016714 <__ssvfiscanf_r+0x2ac>)
 801647a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801647c:	f10d 0804 	add.w	r8, sp, #4
 8016480:	49a5      	ldr	r1, [pc, #660]	@ (8016718 <__ssvfiscanf_r+0x2b0>)
 8016482:	4fa6      	ldr	r7, [pc, #664]	@ (801671c <__ssvfiscanf_r+0x2b4>)
 8016484:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8016488:	4606      	mov	r6, r0
 801648a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801648c:	9300      	str	r3, [sp, #0]
 801648e:	f892 9000 	ldrb.w	r9, [r2]
 8016492:	f1b9 0f00 	cmp.w	r9, #0
 8016496:	f000 8158 	beq.w	801674a <__ssvfiscanf_r+0x2e2>
 801649a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801649e:	f013 0308 	ands.w	r3, r3, #8
 80164a2:	f102 0501 	add.w	r5, r2, #1
 80164a6:	d019      	beq.n	80164dc <__ssvfiscanf_r+0x74>
 80164a8:	6863      	ldr	r3, [r4, #4]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	dd0f      	ble.n	80164ce <__ssvfiscanf_r+0x66>
 80164ae:	6823      	ldr	r3, [r4, #0]
 80164b0:	781a      	ldrb	r2, [r3, #0]
 80164b2:	5cba      	ldrb	r2, [r7, r2]
 80164b4:	0712      	lsls	r2, r2, #28
 80164b6:	d401      	bmi.n	80164bc <__ssvfiscanf_r+0x54>
 80164b8:	462a      	mov	r2, r5
 80164ba:	e7e8      	b.n	801648e <__ssvfiscanf_r+0x26>
 80164bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80164be:	3201      	adds	r2, #1
 80164c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80164c2:	6862      	ldr	r2, [r4, #4]
 80164c4:	3301      	adds	r3, #1
 80164c6:	3a01      	subs	r2, #1
 80164c8:	6062      	str	r2, [r4, #4]
 80164ca:	6023      	str	r3, [r4, #0]
 80164cc:	e7ec      	b.n	80164a8 <__ssvfiscanf_r+0x40>
 80164ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80164d0:	4621      	mov	r1, r4
 80164d2:	4630      	mov	r0, r6
 80164d4:	4798      	blx	r3
 80164d6:	2800      	cmp	r0, #0
 80164d8:	d0e9      	beq.n	80164ae <__ssvfiscanf_r+0x46>
 80164da:	e7ed      	b.n	80164b8 <__ssvfiscanf_r+0x50>
 80164dc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80164e0:	f040 8085 	bne.w	80165ee <__ssvfiscanf_r+0x186>
 80164e4:	9341      	str	r3, [sp, #260]	@ 0x104
 80164e6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80164e8:	7853      	ldrb	r3, [r2, #1]
 80164ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80164ec:	bf02      	ittt	eq
 80164ee:	2310      	moveq	r3, #16
 80164f0:	1c95      	addeq	r5, r2, #2
 80164f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80164f4:	220a      	movs	r2, #10
 80164f6:	46aa      	mov	sl, r5
 80164f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80164fc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016500:	2b09      	cmp	r3, #9
 8016502:	d91e      	bls.n	8016542 <__ssvfiscanf_r+0xda>
 8016504:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8016720 <__ssvfiscanf_r+0x2b8>
 8016508:	2203      	movs	r2, #3
 801650a:	4658      	mov	r0, fp
 801650c:	f7e9 fe70 	bl	80001f0 <memchr>
 8016510:	b138      	cbz	r0, 8016522 <__ssvfiscanf_r+0xba>
 8016512:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016514:	eba0 000b 	sub.w	r0, r0, fp
 8016518:	2301      	movs	r3, #1
 801651a:	4083      	lsls	r3, r0
 801651c:	4313      	orrs	r3, r2
 801651e:	9341      	str	r3, [sp, #260]	@ 0x104
 8016520:	4655      	mov	r5, sl
 8016522:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016526:	2b78      	cmp	r3, #120	@ 0x78
 8016528:	d806      	bhi.n	8016538 <__ssvfiscanf_r+0xd0>
 801652a:	2b57      	cmp	r3, #87	@ 0x57
 801652c:	d810      	bhi.n	8016550 <__ssvfiscanf_r+0xe8>
 801652e:	2b25      	cmp	r3, #37	@ 0x25
 8016530:	d05d      	beq.n	80165ee <__ssvfiscanf_r+0x186>
 8016532:	d857      	bhi.n	80165e4 <__ssvfiscanf_r+0x17c>
 8016534:	2b00      	cmp	r3, #0
 8016536:	d075      	beq.n	8016624 <__ssvfiscanf_r+0x1bc>
 8016538:	2303      	movs	r3, #3
 801653a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801653c:	230a      	movs	r3, #10
 801653e:	9342      	str	r3, [sp, #264]	@ 0x108
 8016540:	e088      	b.n	8016654 <__ssvfiscanf_r+0x1ec>
 8016542:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016544:	fb02 1103 	mla	r1, r2, r3, r1
 8016548:	3930      	subs	r1, #48	@ 0x30
 801654a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801654c:	4655      	mov	r5, sl
 801654e:	e7d2      	b.n	80164f6 <__ssvfiscanf_r+0x8e>
 8016550:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8016554:	2a20      	cmp	r2, #32
 8016556:	d8ef      	bhi.n	8016538 <__ssvfiscanf_r+0xd0>
 8016558:	a101      	add	r1, pc, #4	@ (adr r1, 8016560 <__ssvfiscanf_r+0xf8>)
 801655a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801655e:	bf00      	nop
 8016560:	08016633 	.word	0x08016633
 8016564:	08016539 	.word	0x08016539
 8016568:	08016539 	.word	0x08016539
 801656c:	0801668d 	.word	0x0801668d
 8016570:	08016539 	.word	0x08016539
 8016574:	08016539 	.word	0x08016539
 8016578:	08016539 	.word	0x08016539
 801657c:	08016539 	.word	0x08016539
 8016580:	08016539 	.word	0x08016539
 8016584:	08016539 	.word	0x08016539
 8016588:	08016539 	.word	0x08016539
 801658c:	080166a3 	.word	0x080166a3
 8016590:	08016689 	.word	0x08016689
 8016594:	080165eb 	.word	0x080165eb
 8016598:	080165eb 	.word	0x080165eb
 801659c:	080165eb 	.word	0x080165eb
 80165a0:	08016539 	.word	0x08016539
 80165a4:	08016645 	.word	0x08016645
 80165a8:	08016539 	.word	0x08016539
 80165ac:	08016539 	.word	0x08016539
 80165b0:	08016539 	.word	0x08016539
 80165b4:	08016539 	.word	0x08016539
 80165b8:	080166b3 	.word	0x080166b3
 80165bc:	0801664d 	.word	0x0801664d
 80165c0:	0801662b 	.word	0x0801662b
 80165c4:	08016539 	.word	0x08016539
 80165c8:	08016539 	.word	0x08016539
 80165cc:	080166af 	.word	0x080166af
 80165d0:	08016539 	.word	0x08016539
 80165d4:	08016689 	.word	0x08016689
 80165d8:	08016539 	.word	0x08016539
 80165dc:	08016539 	.word	0x08016539
 80165e0:	08016633 	.word	0x08016633
 80165e4:	3b45      	subs	r3, #69	@ 0x45
 80165e6:	2b02      	cmp	r3, #2
 80165e8:	d8a6      	bhi.n	8016538 <__ssvfiscanf_r+0xd0>
 80165ea:	2305      	movs	r3, #5
 80165ec:	e031      	b.n	8016652 <__ssvfiscanf_r+0x1ea>
 80165ee:	6863      	ldr	r3, [r4, #4]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	dd0d      	ble.n	8016610 <__ssvfiscanf_r+0x1a8>
 80165f4:	6823      	ldr	r3, [r4, #0]
 80165f6:	781a      	ldrb	r2, [r3, #0]
 80165f8:	454a      	cmp	r2, r9
 80165fa:	f040 80a6 	bne.w	801674a <__ssvfiscanf_r+0x2e2>
 80165fe:	3301      	adds	r3, #1
 8016600:	6862      	ldr	r2, [r4, #4]
 8016602:	6023      	str	r3, [r4, #0]
 8016604:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8016606:	3a01      	subs	r2, #1
 8016608:	3301      	adds	r3, #1
 801660a:	6062      	str	r2, [r4, #4]
 801660c:	9345      	str	r3, [sp, #276]	@ 0x114
 801660e:	e753      	b.n	80164b8 <__ssvfiscanf_r+0x50>
 8016610:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016612:	4621      	mov	r1, r4
 8016614:	4630      	mov	r0, r6
 8016616:	4798      	blx	r3
 8016618:	2800      	cmp	r0, #0
 801661a:	d0eb      	beq.n	80165f4 <__ssvfiscanf_r+0x18c>
 801661c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801661e:	2800      	cmp	r0, #0
 8016620:	f040 808b 	bne.w	801673a <__ssvfiscanf_r+0x2d2>
 8016624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016628:	e08b      	b.n	8016742 <__ssvfiscanf_r+0x2da>
 801662a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801662c:	f042 0220 	orr.w	r2, r2, #32
 8016630:	9241      	str	r2, [sp, #260]	@ 0x104
 8016632:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016638:	9241      	str	r2, [sp, #260]	@ 0x104
 801663a:	2210      	movs	r2, #16
 801663c:	2b6e      	cmp	r3, #110	@ 0x6e
 801663e:	9242      	str	r2, [sp, #264]	@ 0x108
 8016640:	d902      	bls.n	8016648 <__ssvfiscanf_r+0x1e0>
 8016642:	e005      	b.n	8016650 <__ssvfiscanf_r+0x1e8>
 8016644:	2300      	movs	r3, #0
 8016646:	9342      	str	r3, [sp, #264]	@ 0x108
 8016648:	2303      	movs	r3, #3
 801664a:	e002      	b.n	8016652 <__ssvfiscanf_r+0x1ea>
 801664c:	2308      	movs	r3, #8
 801664e:	9342      	str	r3, [sp, #264]	@ 0x108
 8016650:	2304      	movs	r3, #4
 8016652:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016654:	6863      	ldr	r3, [r4, #4]
 8016656:	2b00      	cmp	r3, #0
 8016658:	dd39      	ble.n	80166ce <__ssvfiscanf_r+0x266>
 801665a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801665c:	0659      	lsls	r1, r3, #25
 801665e:	d404      	bmi.n	801666a <__ssvfiscanf_r+0x202>
 8016660:	6823      	ldr	r3, [r4, #0]
 8016662:	781a      	ldrb	r2, [r3, #0]
 8016664:	5cba      	ldrb	r2, [r7, r2]
 8016666:	0712      	lsls	r2, r2, #28
 8016668:	d438      	bmi.n	80166dc <__ssvfiscanf_r+0x274>
 801666a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801666c:	2b02      	cmp	r3, #2
 801666e:	dc47      	bgt.n	8016700 <__ssvfiscanf_r+0x298>
 8016670:	466b      	mov	r3, sp
 8016672:	4622      	mov	r2, r4
 8016674:	a941      	add	r1, sp, #260	@ 0x104
 8016676:	4630      	mov	r0, r6
 8016678:	f000 fa6a 	bl	8016b50 <_scanf_chars>
 801667c:	2801      	cmp	r0, #1
 801667e:	d064      	beq.n	801674a <__ssvfiscanf_r+0x2e2>
 8016680:	2802      	cmp	r0, #2
 8016682:	f47f af19 	bne.w	80164b8 <__ssvfiscanf_r+0x50>
 8016686:	e7c9      	b.n	801661c <__ssvfiscanf_r+0x1b4>
 8016688:	220a      	movs	r2, #10
 801668a:	e7d7      	b.n	801663c <__ssvfiscanf_r+0x1d4>
 801668c:	4629      	mov	r1, r5
 801668e:	4640      	mov	r0, r8
 8016690:	f000 fbac 	bl	8016dec <__sccl>
 8016694:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801669a:	9341      	str	r3, [sp, #260]	@ 0x104
 801669c:	4605      	mov	r5, r0
 801669e:	2301      	movs	r3, #1
 80166a0:	e7d7      	b.n	8016652 <__ssvfiscanf_r+0x1ea>
 80166a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80166a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80166a8:	9341      	str	r3, [sp, #260]	@ 0x104
 80166aa:	2300      	movs	r3, #0
 80166ac:	e7d1      	b.n	8016652 <__ssvfiscanf_r+0x1ea>
 80166ae:	2302      	movs	r3, #2
 80166b0:	e7cf      	b.n	8016652 <__ssvfiscanf_r+0x1ea>
 80166b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80166b4:	06c3      	lsls	r3, r0, #27
 80166b6:	f53f aeff 	bmi.w	80164b8 <__ssvfiscanf_r+0x50>
 80166ba:	9b00      	ldr	r3, [sp, #0]
 80166bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80166be:	1d19      	adds	r1, r3, #4
 80166c0:	9100      	str	r1, [sp, #0]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	07c0      	lsls	r0, r0, #31
 80166c6:	bf4c      	ite	mi
 80166c8:	801a      	strhmi	r2, [r3, #0]
 80166ca:	601a      	strpl	r2, [r3, #0]
 80166cc:	e6f4      	b.n	80164b8 <__ssvfiscanf_r+0x50>
 80166ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80166d0:	4621      	mov	r1, r4
 80166d2:	4630      	mov	r0, r6
 80166d4:	4798      	blx	r3
 80166d6:	2800      	cmp	r0, #0
 80166d8:	d0bf      	beq.n	801665a <__ssvfiscanf_r+0x1f2>
 80166da:	e79f      	b.n	801661c <__ssvfiscanf_r+0x1b4>
 80166dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80166de:	3201      	adds	r2, #1
 80166e0:	9245      	str	r2, [sp, #276]	@ 0x114
 80166e2:	6862      	ldr	r2, [r4, #4]
 80166e4:	3a01      	subs	r2, #1
 80166e6:	2a00      	cmp	r2, #0
 80166e8:	6062      	str	r2, [r4, #4]
 80166ea:	dd02      	ble.n	80166f2 <__ssvfiscanf_r+0x28a>
 80166ec:	3301      	adds	r3, #1
 80166ee:	6023      	str	r3, [r4, #0]
 80166f0:	e7b6      	b.n	8016660 <__ssvfiscanf_r+0x1f8>
 80166f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80166f4:	4621      	mov	r1, r4
 80166f6:	4630      	mov	r0, r6
 80166f8:	4798      	blx	r3
 80166fa:	2800      	cmp	r0, #0
 80166fc:	d0b0      	beq.n	8016660 <__ssvfiscanf_r+0x1f8>
 80166fe:	e78d      	b.n	801661c <__ssvfiscanf_r+0x1b4>
 8016700:	2b04      	cmp	r3, #4
 8016702:	dc0f      	bgt.n	8016724 <__ssvfiscanf_r+0x2bc>
 8016704:	466b      	mov	r3, sp
 8016706:	4622      	mov	r2, r4
 8016708:	a941      	add	r1, sp, #260	@ 0x104
 801670a:	4630      	mov	r0, r6
 801670c:	f000 fa7a 	bl	8016c04 <_scanf_i>
 8016710:	e7b4      	b.n	801667c <__ssvfiscanf_r+0x214>
 8016712:	bf00      	nop
 8016714:	080163b5 	.word	0x080163b5
 8016718:	0801642f 	.word	0x0801642f
 801671c:	080189e9 	.word	0x080189e9
 8016720:	08018912 	.word	0x08018912
 8016724:	4b0a      	ldr	r3, [pc, #40]	@ (8016750 <__ssvfiscanf_r+0x2e8>)
 8016726:	2b00      	cmp	r3, #0
 8016728:	f43f aec6 	beq.w	80164b8 <__ssvfiscanf_r+0x50>
 801672c:	466b      	mov	r3, sp
 801672e:	4622      	mov	r2, r4
 8016730:	a941      	add	r1, sp, #260	@ 0x104
 8016732:	4630      	mov	r0, r6
 8016734:	f7fc ff14 	bl	8013560 <_scanf_float>
 8016738:	e7a0      	b.n	801667c <__ssvfiscanf_r+0x214>
 801673a:	89a3      	ldrh	r3, [r4, #12]
 801673c:	065b      	lsls	r3, r3, #25
 801673e:	f53f af71 	bmi.w	8016624 <__ssvfiscanf_r+0x1bc>
 8016742:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8016746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801674a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801674c:	e7f9      	b.n	8016742 <__ssvfiscanf_r+0x2da>
 801674e:	bf00      	nop
 8016750:	08013561 	.word	0x08013561

08016754 <__sfputc_r>:
 8016754:	6893      	ldr	r3, [r2, #8]
 8016756:	3b01      	subs	r3, #1
 8016758:	2b00      	cmp	r3, #0
 801675a:	b410      	push	{r4}
 801675c:	6093      	str	r3, [r2, #8]
 801675e:	da08      	bge.n	8016772 <__sfputc_r+0x1e>
 8016760:	6994      	ldr	r4, [r2, #24]
 8016762:	42a3      	cmp	r3, r4
 8016764:	db01      	blt.n	801676a <__sfputc_r+0x16>
 8016766:	290a      	cmp	r1, #10
 8016768:	d103      	bne.n	8016772 <__sfputc_r+0x1e>
 801676a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801676e:	f001 b953 	b.w	8017a18 <__swbuf_r>
 8016772:	6813      	ldr	r3, [r2, #0]
 8016774:	1c58      	adds	r0, r3, #1
 8016776:	6010      	str	r0, [r2, #0]
 8016778:	7019      	strb	r1, [r3, #0]
 801677a:	4608      	mov	r0, r1
 801677c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016780:	4770      	bx	lr

08016782 <__sfputs_r>:
 8016782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016784:	4606      	mov	r6, r0
 8016786:	460f      	mov	r7, r1
 8016788:	4614      	mov	r4, r2
 801678a:	18d5      	adds	r5, r2, r3
 801678c:	42ac      	cmp	r4, r5
 801678e:	d101      	bne.n	8016794 <__sfputs_r+0x12>
 8016790:	2000      	movs	r0, #0
 8016792:	e007      	b.n	80167a4 <__sfputs_r+0x22>
 8016794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016798:	463a      	mov	r2, r7
 801679a:	4630      	mov	r0, r6
 801679c:	f7ff ffda 	bl	8016754 <__sfputc_r>
 80167a0:	1c43      	adds	r3, r0, #1
 80167a2:	d1f3      	bne.n	801678c <__sfputs_r+0xa>
 80167a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167a8 <_vfiprintf_r>:
 80167a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ac:	460d      	mov	r5, r1
 80167ae:	b09d      	sub	sp, #116	@ 0x74
 80167b0:	4614      	mov	r4, r2
 80167b2:	4698      	mov	r8, r3
 80167b4:	4606      	mov	r6, r0
 80167b6:	b118      	cbz	r0, 80167c0 <_vfiprintf_r+0x18>
 80167b8:	6a03      	ldr	r3, [r0, #32]
 80167ba:	b90b      	cbnz	r3, 80167c0 <_vfiprintf_r+0x18>
 80167bc:	f7fd fa34 	bl	8013c28 <__sinit>
 80167c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80167c2:	07d9      	lsls	r1, r3, #31
 80167c4:	d405      	bmi.n	80167d2 <_vfiprintf_r+0x2a>
 80167c6:	89ab      	ldrh	r3, [r5, #12]
 80167c8:	059a      	lsls	r2, r3, #22
 80167ca:	d402      	bmi.n	80167d2 <_vfiprintf_r+0x2a>
 80167cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80167ce:	f7fe fa64 	bl	8014c9a <__retarget_lock_acquire_recursive>
 80167d2:	89ab      	ldrh	r3, [r5, #12]
 80167d4:	071b      	lsls	r3, r3, #28
 80167d6:	d501      	bpl.n	80167dc <_vfiprintf_r+0x34>
 80167d8:	692b      	ldr	r3, [r5, #16]
 80167da:	b99b      	cbnz	r3, 8016804 <_vfiprintf_r+0x5c>
 80167dc:	4629      	mov	r1, r5
 80167de:	4630      	mov	r0, r6
 80167e0:	f001 f9c8 	bl	8017b74 <__swsetup_r>
 80167e4:	b170      	cbz	r0, 8016804 <_vfiprintf_r+0x5c>
 80167e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80167e8:	07dc      	lsls	r4, r3, #31
 80167ea:	d504      	bpl.n	80167f6 <_vfiprintf_r+0x4e>
 80167ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80167f0:	b01d      	add	sp, #116	@ 0x74
 80167f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f6:	89ab      	ldrh	r3, [r5, #12]
 80167f8:	0598      	lsls	r0, r3, #22
 80167fa:	d4f7      	bmi.n	80167ec <_vfiprintf_r+0x44>
 80167fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80167fe:	f7fe fa4d 	bl	8014c9c <__retarget_lock_release_recursive>
 8016802:	e7f3      	b.n	80167ec <_vfiprintf_r+0x44>
 8016804:	2300      	movs	r3, #0
 8016806:	9309      	str	r3, [sp, #36]	@ 0x24
 8016808:	2320      	movs	r3, #32
 801680a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801680e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016812:	2330      	movs	r3, #48	@ 0x30
 8016814:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80169c4 <_vfiprintf_r+0x21c>
 8016818:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801681c:	f04f 0901 	mov.w	r9, #1
 8016820:	4623      	mov	r3, r4
 8016822:	469a      	mov	sl, r3
 8016824:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016828:	b10a      	cbz	r2, 801682e <_vfiprintf_r+0x86>
 801682a:	2a25      	cmp	r2, #37	@ 0x25
 801682c:	d1f9      	bne.n	8016822 <_vfiprintf_r+0x7a>
 801682e:	ebba 0b04 	subs.w	fp, sl, r4
 8016832:	d00b      	beq.n	801684c <_vfiprintf_r+0xa4>
 8016834:	465b      	mov	r3, fp
 8016836:	4622      	mov	r2, r4
 8016838:	4629      	mov	r1, r5
 801683a:	4630      	mov	r0, r6
 801683c:	f7ff ffa1 	bl	8016782 <__sfputs_r>
 8016840:	3001      	adds	r0, #1
 8016842:	f000 80a7 	beq.w	8016994 <_vfiprintf_r+0x1ec>
 8016846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016848:	445a      	add	r2, fp
 801684a:	9209      	str	r2, [sp, #36]	@ 0x24
 801684c:	f89a 3000 	ldrb.w	r3, [sl]
 8016850:	2b00      	cmp	r3, #0
 8016852:	f000 809f 	beq.w	8016994 <_vfiprintf_r+0x1ec>
 8016856:	2300      	movs	r3, #0
 8016858:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801685c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016860:	f10a 0a01 	add.w	sl, sl, #1
 8016864:	9304      	str	r3, [sp, #16]
 8016866:	9307      	str	r3, [sp, #28]
 8016868:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801686c:	931a      	str	r3, [sp, #104]	@ 0x68
 801686e:	4654      	mov	r4, sl
 8016870:	2205      	movs	r2, #5
 8016872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016876:	4853      	ldr	r0, [pc, #332]	@ (80169c4 <_vfiprintf_r+0x21c>)
 8016878:	f7e9 fcba 	bl	80001f0 <memchr>
 801687c:	9a04      	ldr	r2, [sp, #16]
 801687e:	b9d8      	cbnz	r0, 80168b8 <_vfiprintf_r+0x110>
 8016880:	06d1      	lsls	r1, r2, #27
 8016882:	bf44      	itt	mi
 8016884:	2320      	movmi	r3, #32
 8016886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801688a:	0713      	lsls	r3, r2, #28
 801688c:	bf44      	itt	mi
 801688e:	232b      	movmi	r3, #43	@ 0x2b
 8016890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016894:	f89a 3000 	ldrb.w	r3, [sl]
 8016898:	2b2a      	cmp	r3, #42	@ 0x2a
 801689a:	d015      	beq.n	80168c8 <_vfiprintf_r+0x120>
 801689c:	9a07      	ldr	r2, [sp, #28]
 801689e:	4654      	mov	r4, sl
 80168a0:	2000      	movs	r0, #0
 80168a2:	f04f 0c0a 	mov.w	ip, #10
 80168a6:	4621      	mov	r1, r4
 80168a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168ac:	3b30      	subs	r3, #48	@ 0x30
 80168ae:	2b09      	cmp	r3, #9
 80168b0:	d94b      	bls.n	801694a <_vfiprintf_r+0x1a2>
 80168b2:	b1b0      	cbz	r0, 80168e2 <_vfiprintf_r+0x13a>
 80168b4:	9207      	str	r2, [sp, #28]
 80168b6:	e014      	b.n	80168e2 <_vfiprintf_r+0x13a>
 80168b8:	eba0 0308 	sub.w	r3, r0, r8
 80168bc:	fa09 f303 	lsl.w	r3, r9, r3
 80168c0:	4313      	orrs	r3, r2
 80168c2:	9304      	str	r3, [sp, #16]
 80168c4:	46a2      	mov	sl, r4
 80168c6:	e7d2      	b.n	801686e <_vfiprintf_r+0xc6>
 80168c8:	9b03      	ldr	r3, [sp, #12]
 80168ca:	1d19      	adds	r1, r3, #4
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	9103      	str	r1, [sp, #12]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	bfbb      	ittet	lt
 80168d4:	425b      	neglt	r3, r3
 80168d6:	f042 0202 	orrlt.w	r2, r2, #2
 80168da:	9307      	strge	r3, [sp, #28]
 80168dc:	9307      	strlt	r3, [sp, #28]
 80168de:	bfb8      	it	lt
 80168e0:	9204      	strlt	r2, [sp, #16]
 80168e2:	7823      	ldrb	r3, [r4, #0]
 80168e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80168e6:	d10a      	bne.n	80168fe <_vfiprintf_r+0x156>
 80168e8:	7863      	ldrb	r3, [r4, #1]
 80168ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80168ec:	d132      	bne.n	8016954 <_vfiprintf_r+0x1ac>
 80168ee:	9b03      	ldr	r3, [sp, #12]
 80168f0:	1d1a      	adds	r2, r3, #4
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	9203      	str	r2, [sp, #12]
 80168f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80168fa:	3402      	adds	r4, #2
 80168fc:	9305      	str	r3, [sp, #20]
 80168fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80169d4 <_vfiprintf_r+0x22c>
 8016902:	7821      	ldrb	r1, [r4, #0]
 8016904:	2203      	movs	r2, #3
 8016906:	4650      	mov	r0, sl
 8016908:	f7e9 fc72 	bl	80001f0 <memchr>
 801690c:	b138      	cbz	r0, 801691e <_vfiprintf_r+0x176>
 801690e:	9b04      	ldr	r3, [sp, #16]
 8016910:	eba0 000a 	sub.w	r0, r0, sl
 8016914:	2240      	movs	r2, #64	@ 0x40
 8016916:	4082      	lsls	r2, r0
 8016918:	4313      	orrs	r3, r2
 801691a:	3401      	adds	r4, #1
 801691c:	9304      	str	r3, [sp, #16]
 801691e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016922:	4829      	ldr	r0, [pc, #164]	@ (80169c8 <_vfiprintf_r+0x220>)
 8016924:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016928:	2206      	movs	r2, #6
 801692a:	f7e9 fc61 	bl	80001f0 <memchr>
 801692e:	2800      	cmp	r0, #0
 8016930:	d03f      	beq.n	80169b2 <_vfiprintf_r+0x20a>
 8016932:	4b26      	ldr	r3, [pc, #152]	@ (80169cc <_vfiprintf_r+0x224>)
 8016934:	bb1b      	cbnz	r3, 801697e <_vfiprintf_r+0x1d6>
 8016936:	9b03      	ldr	r3, [sp, #12]
 8016938:	3307      	adds	r3, #7
 801693a:	f023 0307 	bic.w	r3, r3, #7
 801693e:	3308      	adds	r3, #8
 8016940:	9303      	str	r3, [sp, #12]
 8016942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016944:	443b      	add	r3, r7
 8016946:	9309      	str	r3, [sp, #36]	@ 0x24
 8016948:	e76a      	b.n	8016820 <_vfiprintf_r+0x78>
 801694a:	fb0c 3202 	mla	r2, ip, r2, r3
 801694e:	460c      	mov	r4, r1
 8016950:	2001      	movs	r0, #1
 8016952:	e7a8      	b.n	80168a6 <_vfiprintf_r+0xfe>
 8016954:	2300      	movs	r3, #0
 8016956:	3401      	adds	r4, #1
 8016958:	9305      	str	r3, [sp, #20]
 801695a:	4619      	mov	r1, r3
 801695c:	f04f 0c0a 	mov.w	ip, #10
 8016960:	4620      	mov	r0, r4
 8016962:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016966:	3a30      	subs	r2, #48	@ 0x30
 8016968:	2a09      	cmp	r2, #9
 801696a:	d903      	bls.n	8016974 <_vfiprintf_r+0x1cc>
 801696c:	2b00      	cmp	r3, #0
 801696e:	d0c6      	beq.n	80168fe <_vfiprintf_r+0x156>
 8016970:	9105      	str	r1, [sp, #20]
 8016972:	e7c4      	b.n	80168fe <_vfiprintf_r+0x156>
 8016974:	fb0c 2101 	mla	r1, ip, r1, r2
 8016978:	4604      	mov	r4, r0
 801697a:	2301      	movs	r3, #1
 801697c:	e7f0      	b.n	8016960 <_vfiprintf_r+0x1b8>
 801697e:	ab03      	add	r3, sp, #12
 8016980:	9300      	str	r3, [sp, #0]
 8016982:	462a      	mov	r2, r5
 8016984:	4b12      	ldr	r3, [pc, #72]	@ (80169d0 <_vfiprintf_r+0x228>)
 8016986:	a904      	add	r1, sp, #16
 8016988:	4630      	mov	r0, r6
 801698a:	f7fc fa33 	bl	8012df4 <_printf_float>
 801698e:	4607      	mov	r7, r0
 8016990:	1c78      	adds	r0, r7, #1
 8016992:	d1d6      	bne.n	8016942 <_vfiprintf_r+0x19a>
 8016994:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016996:	07d9      	lsls	r1, r3, #31
 8016998:	d405      	bmi.n	80169a6 <_vfiprintf_r+0x1fe>
 801699a:	89ab      	ldrh	r3, [r5, #12]
 801699c:	059a      	lsls	r2, r3, #22
 801699e:	d402      	bmi.n	80169a6 <_vfiprintf_r+0x1fe>
 80169a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80169a2:	f7fe f97b 	bl	8014c9c <__retarget_lock_release_recursive>
 80169a6:	89ab      	ldrh	r3, [r5, #12]
 80169a8:	065b      	lsls	r3, r3, #25
 80169aa:	f53f af1f 	bmi.w	80167ec <_vfiprintf_r+0x44>
 80169ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80169b0:	e71e      	b.n	80167f0 <_vfiprintf_r+0x48>
 80169b2:	ab03      	add	r3, sp, #12
 80169b4:	9300      	str	r3, [sp, #0]
 80169b6:	462a      	mov	r2, r5
 80169b8:	4b05      	ldr	r3, [pc, #20]	@ (80169d0 <_vfiprintf_r+0x228>)
 80169ba:	a904      	add	r1, sp, #16
 80169bc:	4630      	mov	r0, r6
 80169be:	f7fc fcb1 	bl	8013324 <_printf_i>
 80169c2:	e7e4      	b.n	801698e <_vfiprintf_r+0x1e6>
 80169c4:	0801890c 	.word	0x0801890c
 80169c8:	08018916 	.word	0x08018916
 80169cc:	08012df5 	.word	0x08012df5
 80169d0:	08016783 	.word	0x08016783
 80169d4:	08018912 	.word	0x08018912

080169d8 <malloc>:
 80169d8:	4b02      	ldr	r3, [pc, #8]	@ (80169e4 <malloc+0xc>)
 80169da:	4601      	mov	r1, r0
 80169dc:	6818      	ldr	r0, [r3, #0]
 80169de:	f000 b825 	b.w	8016a2c <_malloc_r>
 80169e2:	bf00      	nop
 80169e4:	200001d4 	.word	0x200001d4

080169e8 <sbrk_aligned>:
 80169e8:	b570      	push	{r4, r5, r6, lr}
 80169ea:	4e0f      	ldr	r6, [pc, #60]	@ (8016a28 <sbrk_aligned+0x40>)
 80169ec:	460c      	mov	r4, r1
 80169ee:	6831      	ldr	r1, [r6, #0]
 80169f0:	4605      	mov	r5, r0
 80169f2:	b911      	cbnz	r1, 80169fa <sbrk_aligned+0x12>
 80169f4:	f001 f9ae 	bl	8017d54 <_sbrk_r>
 80169f8:	6030      	str	r0, [r6, #0]
 80169fa:	4621      	mov	r1, r4
 80169fc:	4628      	mov	r0, r5
 80169fe:	f001 f9a9 	bl	8017d54 <_sbrk_r>
 8016a02:	1c43      	adds	r3, r0, #1
 8016a04:	d103      	bne.n	8016a0e <sbrk_aligned+0x26>
 8016a06:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016a0a:	4620      	mov	r0, r4
 8016a0c:	bd70      	pop	{r4, r5, r6, pc}
 8016a0e:	1cc4      	adds	r4, r0, #3
 8016a10:	f024 0403 	bic.w	r4, r4, #3
 8016a14:	42a0      	cmp	r0, r4
 8016a16:	d0f8      	beq.n	8016a0a <sbrk_aligned+0x22>
 8016a18:	1a21      	subs	r1, r4, r0
 8016a1a:	4628      	mov	r0, r5
 8016a1c:	f001 f99a 	bl	8017d54 <_sbrk_r>
 8016a20:	3001      	adds	r0, #1
 8016a22:	d1f2      	bne.n	8016a0a <sbrk_aligned+0x22>
 8016a24:	e7ef      	b.n	8016a06 <sbrk_aligned+0x1e>
 8016a26:	bf00      	nop
 8016a28:	200067b0 	.word	0x200067b0

08016a2c <_malloc_r>:
 8016a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a30:	1ccd      	adds	r5, r1, #3
 8016a32:	f025 0503 	bic.w	r5, r5, #3
 8016a36:	3508      	adds	r5, #8
 8016a38:	2d0c      	cmp	r5, #12
 8016a3a:	bf38      	it	cc
 8016a3c:	250c      	movcc	r5, #12
 8016a3e:	2d00      	cmp	r5, #0
 8016a40:	4606      	mov	r6, r0
 8016a42:	db01      	blt.n	8016a48 <_malloc_r+0x1c>
 8016a44:	42a9      	cmp	r1, r5
 8016a46:	d904      	bls.n	8016a52 <_malloc_r+0x26>
 8016a48:	230c      	movs	r3, #12
 8016a4a:	6033      	str	r3, [r6, #0]
 8016a4c:	2000      	movs	r0, #0
 8016a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016b28 <_malloc_r+0xfc>
 8016a56:	f000 faaf 	bl	8016fb8 <__malloc_lock>
 8016a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8016a5e:	461c      	mov	r4, r3
 8016a60:	bb44      	cbnz	r4, 8016ab4 <_malloc_r+0x88>
 8016a62:	4629      	mov	r1, r5
 8016a64:	4630      	mov	r0, r6
 8016a66:	f7ff ffbf 	bl	80169e8 <sbrk_aligned>
 8016a6a:	1c43      	adds	r3, r0, #1
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	d158      	bne.n	8016b22 <_malloc_r+0xf6>
 8016a70:	f8d8 4000 	ldr.w	r4, [r8]
 8016a74:	4627      	mov	r7, r4
 8016a76:	2f00      	cmp	r7, #0
 8016a78:	d143      	bne.n	8016b02 <_malloc_r+0xd6>
 8016a7a:	2c00      	cmp	r4, #0
 8016a7c:	d04b      	beq.n	8016b16 <_malloc_r+0xea>
 8016a7e:	6823      	ldr	r3, [r4, #0]
 8016a80:	4639      	mov	r1, r7
 8016a82:	4630      	mov	r0, r6
 8016a84:	eb04 0903 	add.w	r9, r4, r3
 8016a88:	f001 f964 	bl	8017d54 <_sbrk_r>
 8016a8c:	4581      	cmp	r9, r0
 8016a8e:	d142      	bne.n	8016b16 <_malloc_r+0xea>
 8016a90:	6821      	ldr	r1, [r4, #0]
 8016a92:	1a6d      	subs	r5, r5, r1
 8016a94:	4629      	mov	r1, r5
 8016a96:	4630      	mov	r0, r6
 8016a98:	f7ff ffa6 	bl	80169e8 <sbrk_aligned>
 8016a9c:	3001      	adds	r0, #1
 8016a9e:	d03a      	beq.n	8016b16 <_malloc_r+0xea>
 8016aa0:	6823      	ldr	r3, [r4, #0]
 8016aa2:	442b      	add	r3, r5
 8016aa4:	6023      	str	r3, [r4, #0]
 8016aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8016aaa:	685a      	ldr	r2, [r3, #4]
 8016aac:	bb62      	cbnz	r2, 8016b08 <_malloc_r+0xdc>
 8016aae:	f8c8 7000 	str.w	r7, [r8]
 8016ab2:	e00f      	b.n	8016ad4 <_malloc_r+0xa8>
 8016ab4:	6822      	ldr	r2, [r4, #0]
 8016ab6:	1b52      	subs	r2, r2, r5
 8016ab8:	d420      	bmi.n	8016afc <_malloc_r+0xd0>
 8016aba:	2a0b      	cmp	r2, #11
 8016abc:	d917      	bls.n	8016aee <_malloc_r+0xc2>
 8016abe:	1961      	adds	r1, r4, r5
 8016ac0:	42a3      	cmp	r3, r4
 8016ac2:	6025      	str	r5, [r4, #0]
 8016ac4:	bf18      	it	ne
 8016ac6:	6059      	strne	r1, [r3, #4]
 8016ac8:	6863      	ldr	r3, [r4, #4]
 8016aca:	bf08      	it	eq
 8016acc:	f8c8 1000 	streq.w	r1, [r8]
 8016ad0:	5162      	str	r2, [r4, r5]
 8016ad2:	604b      	str	r3, [r1, #4]
 8016ad4:	4630      	mov	r0, r6
 8016ad6:	f000 fa75 	bl	8016fc4 <__malloc_unlock>
 8016ada:	f104 000b 	add.w	r0, r4, #11
 8016ade:	1d23      	adds	r3, r4, #4
 8016ae0:	f020 0007 	bic.w	r0, r0, #7
 8016ae4:	1ac2      	subs	r2, r0, r3
 8016ae6:	bf1c      	itt	ne
 8016ae8:	1a1b      	subne	r3, r3, r0
 8016aea:	50a3      	strne	r3, [r4, r2]
 8016aec:	e7af      	b.n	8016a4e <_malloc_r+0x22>
 8016aee:	6862      	ldr	r2, [r4, #4]
 8016af0:	42a3      	cmp	r3, r4
 8016af2:	bf0c      	ite	eq
 8016af4:	f8c8 2000 	streq.w	r2, [r8]
 8016af8:	605a      	strne	r2, [r3, #4]
 8016afa:	e7eb      	b.n	8016ad4 <_malloc_r+0xa8>
 8016afc:	4623      	mov	r3, r4
 8016afe:	6864      	ldr	r4, [r4, #4]
 8016b00:	e7ae      	b.n	8016a60 <_malloc_r+0x34>
 8016b02:	463c      	mov	r4, r7
 8016b04:	687f      	ldr	r7, [r7, #4]
 8016b06:	e7b6      	b.n	8016a76 <_malloc_r+0x4a>
 8016b08:	461a      	mov	r2, r3
 8016b0a:	685b      	ldr	r3, [r3, #4]
 8016b0c:	42a3      	cmp	r3, r4
 8016b0e:	d1fb      	bne.n	8016b08 <_malloc_r+0xdc>
 8016b10:	2300      	movs	r3, #0
 8016b12:	6053      	str	r3, [r2, #4]
 8016b14:	e7de      	b.n	8016ad4 <_malloc_r+0xa8>
 8016b16:	230c      	movs	r3, #12
 8016b18:	6033      	str	r3, [r6, #0]
 8016b1a:	4630      	mov	r0, r6
 8016b1c:	f000 fa52 	bl	8016fc4 <__malloc_unlock>
 8016b20:	e794      	b.n	8016a4c <_malloc_r+0x20>
 8016b22:	6005      	str	r5, [r0, #0]
 8016b24:	e7d6      	b.n	8016ad4 <_malloc_r+0xa8>
 8016b26:	bf00      	nop
 8016b28:	200067b4 	.word	0x200067b4

08016b2c <__ascii_mbtowc>:
 8016b2c:	b082      	sub	sp, #8
 8016b2e:	b901      	cbnz	r1, 8016b32 <__ascii_mbtowc+0x6>
 8016b30:	a901      	add	r1, sp, #4
 8016b32:	b142      	cbz	r2, 8016b46 <__ascii_mbtowc+0x1a>
 8016b34:	b14b      	cbz	r3, 8016b4a <__ascii_mbtowc+0x1e>
 8016b36:	7813      	ldrb	r3, [r2, #0]
 8016b38:	600b      	str	r3, [r1, #0]
 8016b3a:	7812      	ldrb	r2, [r2, #0]
 8016b3c:	1e10      	subs	r0, r2, #0
 8016b3e:	bf18      	it	ne
 8016b40:	2001      	movne	r0, #1
 8016b42:	b002      	add	sp, #8
 8016b44:	4770      	bx	lr
 8016b46:	4610      	mov	r0, r2
 8016b48:	e7fb      	b.n	8016b42 <__ascii_mbtowc+0x16>
 8016b4a:	f06f 0001 	mvn.w	r0, #1
 8016b4e:	e7f8      	b.n	8016b42 <__ascii_mbtowc+0x16>

08016b50 <_scanf_chars>:
 8016b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b54:	4615      	mov	r5, r2
 8016b56:	688a      	ldr	r2, [r1, #8]
 8016b58:	4680      	mov	r8, r0
 8016b5a:	460c      	mov	r4, r1
 8016b5c:	b932      	cbnz	r2, 8016b6c <_scanf_chars+0x1c>
 8016b5e:	698a      	ldr	r2, [r1, #24]
 8016b60:	2a00      	cmp	r2, #0
 8016b62:	bf14      	ite	ne
 8016b64:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8016b68:	2201      	moveq	r2, #1
 8016b6a:	608a      	str	r2, [r1, #8]
 8016b6c:	6822      	ldr	r2, [r4, #0]
 8016b6e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016c00 <_scanf_chars+0xb0>
 8016b72:	06d1      	lsls	r1, r2, #27
 8016b74:	bf5f      	itttt	pl
 8016b76:	681a      	ldrpl	r2, [r3, #0]
 8016b78:	1d11      	addpl	r1, r2, #4
 8016b7a:	6019      	strpl	r1, [r3, #0]
 8016b7c:	6816      	ldrpl	r6, [r2, #0]
 8016b7e:	2700      	movs	r7, #0
 8016b80:	69a0      	ldr	r0, [r4, #24]
 8016b82:	b188      	cbz	r0, 8016ba8 <_scanf_chars+0x58>
 8016b84:	2801      	cmp	r0, #1
 8016b86:	d107      	bne.n	8016b98 <_scanf_chars+0x48>
 8016b88:	682b      	ldr	r3, [r5, #0]
 8016b8a:	781a      	ldrb	r2, [r3, #0]
 8016b8c:	6963      	ldr	r3, [r4, #20]
 8016b8e:	5c9b      	ldrb	r3, [r3, r2]
 8016b90:	b953      	cbnz	r3, 8016ba8 <_scanf_chars+0x58>
 8016b92:	2f00      	cmp	r7, #0
 8016b94:	d031      	beq.n	8016bfa <_scanf_chars+0xaa>
 8016b96:	e022      	b.n	8016bde <_scanf_chars+0x8e>
 8016b98:	2802      	cmp	r0, #2
 8016b9a:	d120      	bne.n	8016bde <_scanf_chars+0x8e>
 8016b9c:	682b      	ldr	r3, [r5, #0]
 8016b9e:	781b      	ldrb	r3, [r3, #0]
 8016ba0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016ba4:	071b      	lsls	r3, r3, #28
 8016ba6:	d41a      	bmi.n	8016bde <_scanf_chars+0x8e>
 8016ba8:	6823      	ldr	r3, [r4, #0]
 8016baa:	06da      	lsls	r2, r3, #27
 8016bac:	bf5e      	ittt	pl
 8016bae:	682b      	ldrpl	r3, [r5, #0]
 8016bb0:	781b      	ldrbpl	r3, [r3, #0]
 8016bb2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016bb6:	682a      	ldr	r2, [r5, #0]
 8016bb8:	686b      	ldr	r3, [r5, #4]
 8016bba:	3201      	adds	r2, #1
 8016bbc:	602a      	str	r2, [r5, #0]
 8016bbe:	68a2      	ldr	r2, [r4, #8]
 8016bc0:	3b01      	subs	r3, #1
 8016bc2:	3a01      	subs	r2, #1
 8016bc4:	606b      	str	r3, [r5, #4]
 8016bc6:	3701      	adds	r7, #1
 8016bc8:	60a2      	str	r2, [r4, #8]
 8016bca:	b142      	cbz	r2, 8016bde <_scanf_chars+0x8e>
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	dcd7      	bgt.n	8016b80 <_scanf_chars+0x30>
 8016bd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016bd4:	4629      	mov	r1, r5
 8016bd6:	4640      	mov	r0, r8
 8016bd8:	4798      	blx	r3
 8016bda:	2800      	cmp	r0, #0
 8016bdc:	d0d0      	beq.n	8016b80 <_scanf_chars+0x30>
 8016bde:	6823      	ldr	r3, [r4, #0]
 8016be0:	f013 0310 	ands.w	r3, r3, #16
 8016be4:	d105      	bne.n	8016bf2 <_scanf_chars+0xa2>
 8016be6:	68e2      	ldr	r2, [r4, #12]
 8016be8:	3201      	adds	r2, #1
 8016bea:	60e2      	str	r2, [r4, #12]
 8016bec:	69a2      	ldr	r2, [r4, #24]
 8016bee:	b102      	cbz	r2, 8016bf2 <_scanf_chars+0xa2>
 8016bf0:	7033      	strb	r3, [r6, #0]
 8016bf2:	6923      	ldr	r3, [r4, #16]
 8016bf4:	443b      	add	r3, r7
 8016bf6:	6123      	str	r3, [r4, #16]
 8016bf8:	2000      	movs	r0, #0
 8016bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bfe:	bf00      	nop
 8016c00:	080189e9 	.word	0x080189e9

08016c04 <_scanf_i>:
 8016c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c08:	4698      	mov	r8, r3
 8016c0a:	4b74      	ldr	r3, [pc, #464]	@ (8016ddc <_scanf_i+0x1d8>)
 8016c0c:	460c      	mov	r4, r1
 8016c0e:	4682      	mov	sl, r0
 8016c10:	4616      	mov	r6, r2
 8016c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016c16:	b087      	sub	sp, #28
 8016c18:	ab03      	add	r3, sp, #12
 8016c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016c1e:	4b70      	ldr	r3, [pc, #448]	@ (8016de0 <_scanf_i+0x1dc>)
 8016c20:	69a1      	ldr	r1, [r4, #24]
 8016c22:	4a70      	ldr	r2, [pc, #448]	@ (8016de4 <_scanf_i+0x1e0>)
 8016c24:	2903      	cmp	r1, #3
 8016c26:	bf08      	it	eq
 8016c28:	461a      	moveq	r2, r3
 8016c2a:	68a3      	ldr	r3, [r4, #8]
 8016c2c:	9201      	str	r2, [sp, #4]
 8016c2e:	1e5a      	subs	r2, r3, #1
 8016c30:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016c34:	bf88      	it	hi
 8016c36:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016c3a:	4627      	mov	r7, r4
 8016c3c:	bf82      	ittt	hi
 8016c3e:	eb03 0905 	addhi.w	r9, r3, r5
 8016c42:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016c46:	60a3      	strhi	r3, [r4, #8]
 8016c48:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016c4c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016c50:	bf98      	it	ls
 8016c52:	f04f 0900 	movls.w	r9, #0
 8016c56:	6023      	str	r3, [r4, #0]
 8016c58:	463d      	mov	r5, r7
 8016c5a:	f04f 0b00 	mov.w	fp, #0
 8016c5e:	6831      	ldr	r1, [r6, #0]
 8016c60:	ab03      	add	r3, sp, #12
 8016c62:	7809      	ldrb	r1, [r1, #0]
 8016c64:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016c68:	2202      	movs	r2, #2
 8016c6a:	f7e9 fac1 	bl	80001f0 <memchr>
 8016c6e:	b328      	cbz	r0, 8016cbc <_scanf_i+0xb8>
 8016c70:	f1bb 0f01 	cmp.w	fp, #1
 8016c74:	d159      	bne.n	8016d2a <_scanf_i+0x126>
 8016c76:	6862      	ldr	r2, [r4, #4]
 8016c78:	b92a      	cbnz	r2, 8016c86 <_scanf_i+0x82>
 8016c7a:	6822      	ldr	r2, [r4, #0]
 8016c7c:	2108      	movs	r1, #8
 8016c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016c82:	6061      	str	r1, [r4, #4]
 8016c84:	6022      	str	r2, [r4, #0]
 8016c86:	6822      	ldr	r2, [r4, #0]
 8016c88:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8016c8c:	6022      	str	r2, [r4, #0]
 8016c8e:	68a2      	ldr	r2, [r4, #8]
 8016c90:	1e51      	subs	r1, r2, #1
 8016c92:	60a1      	str	r1, [r4, #8]
 8016c94:	b192      	cbz	r2, 8016cbc <_scanf_i+0xb8>
 8016c96:	6832      	ldr	r2, [r6, #0]
 8016c98:	1c51      	adds	r1, r2, #1
 8016c9a:	6031      	str	r1, [r6, #0]
 8016c9c:	7812      	ldrb	r2, [r2, #0]
 8016c9e:	f805 2b01 	strb.w	r2, [r5], #1
 8016ca2:	6872      	ldr	r2, [r6, #4]
 8016ca4:	3a01      	subs	r2, #1
 8016ca6:	2a00      	cmp	r2, #0
 8016ca8:	6072      	str	r2, [r6, #4]
 8016caa:	dc07      	bgt.n	8016cbc <_scanf_i+0xb8>
 8016cac:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8016cb0:	4631      	mov	r1, r6
 8016cb2:	4650      	mov	r0, sl
 8016cb4:	4790      	blx	r2
 8016cb6:	2800      	cmp	r0, #0
 8016cb8:	f040 8085 	bne.w	8016dc6 <_scanf_i+0x1c2>
 8016cbc:	f10b 0b01 	add.w	fp, fp, #1
 8016cc0:	f1bb 0f03 	cmp.w	fp, #3
 8016cc4:	d1cb      	bne.n	8016c5e <_scanf_i+0x5a>
 8016cc6:	6863      	ldr	r3, [r4, #4]
 8016cc8:	b90b      	cbnz	r3, 8016cce <_scanf_i+0xca>
 8016cca:	230a      	movs	r3, #10
 8016ccc:	6063      	str	r3, [r4, #4]
 8016cce:	6863      	ldr	r3, [r4, #4]
 8016cd0:	4945      	ldr	r1, [pc, #276]	@ (8016de8 <_scanf_i+0x1e4>)
 8016cd2:	6960      	ldr	r0, [r4, #20]
 8016cd4:	1ac9      	subs	r1, r1, r3
 8016cd6:	f000 f889 	bl	8016dec <__sccl>
 8016cda:	f04f 0b00 	mov.w	fp, #0
 8016cde:	68a3      	ldr	r3, [r4, #8]
 8016ce0:	6822      	ldr	r2, [r4, #0]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d03d      	beq.n	8016d62 <_scanf_i+0x15e>
 8016ce6:	6831      	ldr	r1, [r6, #0]
 8016ce8:	6960      	ldr	r0, [r4, #20]
 8016cea:	f891 c000 	ldrb.w	ip, [r1]
 8016cee:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016cf2:	2800      	cmp	r0, #0
 8016cf4:	d035      	beq.n	8016d62 <_scanf_i+0x15e>
 8016cf6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016cfa:	d124      	bne.n	8016d46 <_scanf_i+0x142>
 8016cfc:	0510      	lsls	r0, r2, #20
 8016cfe:	d522      	bpl.n	8016d46 <_scanf_i+0x142>
 8016d00:	f10b 0b01 	add.w	fp, fp, #1
 8016d04:	f1b9 0f00 	cmp.w	r9, #0
 8016d08:	d003      	beq.n	8016d12 <_scanf_i+0x10e>
 8016d0a:	3301      	adds	r3, #1
 8016d0c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8016d10:	60a3      	str	r3, [r4, #8]
 8016d12:	6873      	ldr	r3, [r6, #4]
 8016d14:	3b01      	subs	r3, #1
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	6073      	str	r3, [r6, #4]
 8016d1a:	dd1b      	ble.n	8016d54 <_scanf_i+0x150>
 8016d1c:	6833      	ldr	r3, [r6, #0]
 8016d1e:	3301      	adds	r3, #1
 8016d20:	6033      	str	r3, [r6, #0]
 8016d22:	68a3      	ldr	r3, [r4, #8]
 8016d24:	3b01      	subs	r3, #1
 8016d26:	60a3      	str	r3, [r4, #8]
 8016d28:	e7d9      	b.n	8016cde <_scanf_i+0xda>
 8016d2a:	f1bb 0f02 	cmp.w	fp, #2
 8016d2e:	d1ae      	bne.n	8016c8e <_scanf_i+0x8a>
 8016d30:	6822      	ldr	r2, [r4, #0]
 8016d32:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8016d36:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8016d3a:	d1c4      	bne.n	8016cc6 <_scanf_i+0xc2>
 8016d3c:	2110      	movs	r1, #16
 8016d3e:	6061      	str	r1, [r4, #4]
 8016d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016d44:	e7a2      	b.n	8016c8c <_scanf_i+0x88>
 8016d46:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8016d4a:	6022      	str	r2, [r4, #0]
 8016d4c:	780b      	ldrb	r3, [r1, #0]
 8016d4e:	f805 3b01 	strb.w	r3, [r5], #1
 8016d52:	e7de      	b.n	8016d12 <_scanf_i+0x10e>
 8016d54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016d58:	4631      	mov	r1, r6
 8016d5a:	4650      	mov	r0, sl
 8016d5c:	4798      	blx	r3
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	d0df      	beq.n	8016d22 <_scanf_i+0x11e>
 8016d62:	6823      	ldr	r3, [r4, #0]
 8016d64:	05d9      	lsls	r1, r3, #23
 8016d66:	d50d      	bpl.n	8016d84 <_scanf_i+0x180>
 8016d68:	42bd      	cmp	r5, r7
 8016d6a:	d909      	bls.n	8016d80 <_scanf_i+0x17c>
 8016d6c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016d74:	4632      	mov	r2, r6
 8016d76:	4650      	mov	r0, sl
 8016d78:	4798      	blx	r3
 8016d7a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8016d7e:	464d      	mov	r5, r9
 8016d80:	42bd      	cmp	r5, r7
 8016d82:	d028      	beq.n	8016dd6 <_scanf_i+0x1d2>
 8016d84:	6822      	ldr	r2, [r4, #0]
 8016d86:	f012 0210 	ands.w	r2, r2, #16
 8016d8a:	d113      	bne.n	8016db4 <_scanf_i+0x1b0>
 8016d8c:	702a      	strb	r2, [r5, #0]
 8016d8e:	6863      	ldr	r3, [r4, #4]
 8016d90:	9e01      	ldr	r6, [sp, #4]
 8016d92:	4639      	mov	r1, r7
 8016d94:	4650      	mov	r0, sl
 8016d96:	47b0      	blx	r6
 8016d98:	f8d8 3000 	ldr.w	r3, [r8]
 8016d9c:	6821      	ldr	r1, [r4, #0]
 8016d9e:	1d1a      	adds	r2, r3, #4
 8016da0:	f8c8 2000 	str.w	r2, [r8]
 8016da4:	f011 0f20 	tst.w	r1, #32
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	d00f      	beq.n	8016dcc <_scanf_i+0x1c8>
 8016dac:	6018      	str	r0, [r3, #0]
 8016dae:	68e3      	ldr	r3, [r4, #12]
 8016db0:	3301      	adds	r3, #1
 8016db2:	60e3      	str	r3, [r4, #12]
 8016db4:	6923      	ldr	r3, [r4, #16]
 8016db6:	1bed      	subs	r5, r5, r7
 8016db8:	445d      	add	r5, fp
 8016dba:	442b      	add	r3, r5
 8016dbc:	6123      	str	r3, [r4, #16]
 8016dbe:	2000      	movs	r0, #0
 8016dc0:	b007      	add	sp, #28
 8016dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dc6:	f04f 0b00 	mov.w	fp, #0
 8016dca:	e7ca      	b.n	8016d62 <_scanf_i+0x15e>
 8016dcc:	07ca      	lsls	r2, r1, #31
 8016dce:	bf4c      	ite	mi
 8016dd0:	8018      	strhmi	r0, [r3, #0]
 8016dd2:	6018      	strpl	r0, [r3, #0]
 8016dd4:	e7eb      	b.n	8016dae <_scanf_i+0x1aa>
 8016dd6:	2001      	movs	r0, #1
 8016dd8:	e7f2      	b.n	8016dc0 <_scanf_i+0x1bc>
 8016dda:	bf00      	nop
 8016ddc:	0801855c 	.word	0x0801855c
 8016de0:	08014979 	.word	0x08014979
 8016de4:	08017b71 	.word	0x08017b71
 8016de8:	0801892d 	.word	0x0801892d

08016dec <__sccl>:
 8016dec:	b570      	push	{r4, r5, r6, lr}
 8016dee:	780b      	ldrb	r3, [r1, #0]
 8016df0:	4604      	mov	r4, r0
 8016df2:	2b5e      	cmp	r3, #94	@ 0x5e
 8016df4:	bf0b      	itete	eq
 8016df6:	784b      	ldrbeq	r3, [r1, #1]
 8016df8:	1c4a      	addne	r2, r1, #1
 8016dfa:	1c8a      	addeq	r2, r1, #2
 8016dfc:	2100      	movne	r1, #0
 8016dfe:	bf08      	it	eq
 8016e00:	2101      	moveq	r1, #1
 8016e02:	3801      	subs	r0, #1
 8016e04:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016e08:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016e0c:	42a8      	cmp	r0, r5
 8016e0e:	d1fb      	bne.n	8016e08 <__sccl+0x1c>
 8016e10:	b90b      	cbnz	r3, 8016e16 <__sccl+0x2a>
 8016e12:	1e50      	subs	r0, r2, #1
 8016e14:	bd70      	pop	{r4, r5, r6, pc}
 8016e16:	f081 0101 	eor.w	r1, r1, #1
 8016e1a:	54e1      	strb	r1, [r4, r3]
 8016e1c:	4610      	mov	r0, r2
 8016e1e:	4602      	mov	r2, r0
 8016e20:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016e24:	2d2d      	cmp	r5, #45	@ 0x2d
 8016e26:	d005      	beq.n	8016e34 <__sccl+0x48>
 8016e28:	2d5d      	cmp	r5, #93	@ 0x5d
 8016e2a:	d016      	beq.n	8016e5a <__sccl+0x6e>
 8016e2c:	2d00      	cmp	r5, #0
 8016e2e:	d0f1      	beq.n	8016e14 <__sccl+0x28>
 8016e30:	462b      	mov	r3, r5
 8016e32:	e7f2      	b.n	8016e1a <__sccl+0x2e>
 8016e34:	7846      	ldrb	r6, [r0, #1]
 8016e36:	2e5d      	cmp	r6, #93	@ 0x5d
 8016e38:	d0fa      	beq.n	8016e30 <__sccl+0x44>
 8016e3a:	42b3      	cmp	r3, r6
 8016e3c:	dcf8      	bgt.n	8016e30 <__sccl+0x44>
 8016e3e:	3002      	adds	r0, #2
 8016e40:	461a      	mov	r2, r3
 8016e42:	3201      	adds	r2, #1
 8016e44:	4296      	cmp	r6, r2
 8016e46:	54a1      	strb	r1, [r4, r2]
 8016e48:	dcfb      	bgt.n	8016e42 <__sccl+0x56>
 8016e4a:	1af2      	subs	r2, r6, r3
 8016e4c:	3a01      	subs	r2, #1
 8016e4e:	1c5d      	adds	r5, r3, #1
 8016e50:	42b3      	cmp	r3, r6
 8016e52:	bfa8      	it	ge
 8016e54:	2200      	movge	r2, #0
 8016e56:	18ab      	adds	r3, r5, r2
 8016e58:	e7e1      	b.n	8016e1e <__sccl+0x32>
 8016e5a:	4610      	mov	r0, r2
 8016e5c:	e7da      	b.n	8016e14 <__sccl+0x28>
	...

08016e60 <__sflush_r>:
 8016e60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e68:	0716      	lsls	r6, r2, #28
 8016e6a:	4605      	mov	r5, r0
 8016e6c:	460c      	mov	r4, r1
 8016e6e:	d454      	bmi.n	8016f1a <__sflush_r+0xba>
 8016e70:	684b      	ldr	r3, [r1, #4]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	dc02      	bgt.n	8016e7c <__sflush_r+0x1c>
 8016e76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	dd48      	ble.n	8016f0e <__sflush_r+0xae>
 8016e7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016e7e:	2e00      	cmp	r6, #0
 8016e80:	d045      	beq.n	8016f0e <__sflush_r+0xae>
 8016e82:	2300      	movs	r3, #0
 8016e84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016e88:	682f      	ldr	r7, [r5, #0]
 8016e8a:	6a21      	ldr	r1, [r4, #32]
 8016e8c:	602b      	str	r3, [r5, #0]
 8016e8e:	d030      	beq.n	8016ef2 <__sflush_r+0x92>
 8016e90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016e92:	89a3      	ldrh	r3, [r4, #12]
 8016e94:	0759      	lsls	r1, r3, #29
 8016e96:	d505      	bpl.n	8016ea4 <__sflush_r+0x44>
 8016e98:	6863      	ldr	r3, [r4, #4]
 8016e9a:	1ad2      	subs	r2, r2, r3
 8016e9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016e9e:	b10b      	cbz	r3, 8016ea4 <__sflush_r+0x44>
 8016ea0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016ea2:	1ad2      	subs	r2, r2, r3
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016ea8:	6a21      	ldr	r1, [r4, #32]
 8016eaa:	4628      	mov	r0, r5
 8016eac:	47b0      	blx	r6
 8016eae:	1c43      	adds	r3, r0, #1
 8016eb0:	89a3      	ldrh	r3, [r4, #12]
 8016eb2:	d106      	bne.n	8016ec2 <__sflush_r+0x62>
 8016eb4:	6829      	ldr	r1, [r5, #0]
 8016eb6:	291d      	cmp	r1, #29
 8016eb8:	d82b      	bhi.n	8016f12 <__sflush_r+0xb2>
 8016eba:	4a2a      	ldr	r2, [pc, #168]	@ (8016f64 <__sflush_r+0x104>)
 8016ebc:	40ca      	lsrs	r2, r1
 8016ebe:	07d6      	lsls	r6, r2, #31
 8016ec0:	d527      	bpl.n	8016f12 <__sflush_r+0xb2>
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	6062      	str	r2, [r4, #4]
 8016ec6:	04d9      	lsls	r1, r3, #19
 8016ec8:	6922      	ldr	r2, [r4, #16]
 8016eca:	6022      	str	r2, [r4, #0]
 8016ecc:	d504      	bpl.n	8016ed8 <__sflush_r+0x78>
 8016ece:	1c42      	adds	r2, r0, #1
 8016ed0:	d101      	bne.n	8016ed6 <__sflush_r+0x76>
 8016ed2:	682b      	ldr	r3, [r5, #0]
 8016ed4:	b903      	cbnz	r3, 8016ed8 <__sflush_r+0x78>
 8016ed6:	6560      	str	r0, [r4, #84]	@ 0x54
 8016ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016eda:	602f      	str	r7, [r5, #0]
 8016edc:	b1b9      	cbz	r1, 8016f0e <__sflush_r+0xae>
 8016ede:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016ee2:	4299      	cmp	r1, r3
 8016ee4:	d002      	beq.n	8016eec <__sflush_r+0x8c>
 8016ee6:	4628      	mov	r0, r5
 8016ee8:	f7fe fd8a 	bl	8015a00 <_free_r>
 8016eec:	2300      	movs	r3, #0
 8016eee:	6363      	str	r3, [r4, #52]	@ 0x34
 8016ef0:	e00d      	b.n	8016f0e <__sflush_r+0xae>
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	4628      	mov	r0, r5
 8016ef6:	47b0      	blx	r6
 8016ef8:	4602      	mov	r2, r0
 8016efa:	1c50      	adds	r0, r2, #1
 8016efc:	d1c9      	bne.n	8016e92 <__sflush_r+0x32>
 8016efe:	682b      	ldr	r3, [r5, #0]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d0c6      	beq.n	8016e92 <__sflush_r+0x32>
 8016f04:	2b1d      	cmp	r3, #29
 8016f06:	d001      	beq.n	8016f0c <__sflush_r+0xac>
 8016f08:	2b16      	cmp	r3, #22
 8016f0a:	d11e      	bne.n	8016f4a <__sflush_r+0xea>
 8016f0c:	602f      	str	r7, [r5, #0]
 8016f0e:	2000      	movs	r0, #0
 8016f10:	e022      	b.n	8016f58 <__sflush_r+0xf8>
 8016f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f16:	b21b      	sxth	r3, r3
 8016f18:	e01b      	b.n	8016f52 <__sflush_r+0xf2>
 8016f1a:	690f      	ldr	r7, [r1, #16]
 8016f1c:	2f00      	cmp	r7, #0
 8016f1e:	d0f6      	beq.n	8016f0e <__sflush_r+0xae>
 8016f20:	0793      	lsls	r3, r2, #30
 8016f22:	680e      	ldr	r6, [r1, #0]
 8016f24:	bf08      	it	eq
 8016f26:	694b      	ldreq	r3, [r1, #20]
 8016f28:	600f      	str	r7, [r1, #0]
 8016f2a:	bf18      	it	ne
 8016f2c:	2300      	movne	r3, #0
 8016f2e:	eba6 0807 	sub.w	r8, r6, r7
 8016f32:	608b      	str	r3, [r1, #8]
 8016f34:	f1b8 0f00 	cmp.w	r8, #0
 8016f38:	dde9      	ble.n	8016f0e <__sflush_r+0xae>
 8016f3a:	6a21      	ldr	r1, [r4, #32]
 8016f3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016f3e:	4643      	mov	r3, r8
 8016f40:	463a      	mov	r2, r7
 8016f42:	4628      	mov	r0, r5
 8016f44:	47b0      	blx	r6
 8016f46:	2800      	cmp	r0, #0
 8016f48:	dc08      	bgt.n	8016f5c <__sflush_r+0xfc>
 8016f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016f52:	81a3      	strh	r3, [r4, #12]
 8016f54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f5c:	4407      	add	r7, r0
 8016f5e:	eba8 0800 	sub.w	r8, r8, r0
 8016f62:	e7e7      	b.n	8016f34 <__sflush_r+0xd4>
 8016f64:	20400001 	.word	0x20400001

08016f68 <_fflush_r>:
 8016f68:	b538      	push	{r3, r4, r5, lr}
 8016f6a:	690b      	ldr	r3, [r1, #16]
 8016f6c:	4605      	mov	r5, r0
 8016f6e:	460c      	mov	r4, r1
 8016f70:	b913      	cbnz	r3, 8016f78 <_fflush_r+0x10>
 8016f72:	2500      	movs	r5, #0
 8016f74:	4628      	mov	r0, r5
 8016f76:	bd38      	pop	{r3, r4, r5, pc}
 8016f78:	b118      	cbz	r0, 8016f82 <_fflush_r+0x1a>
 8016f7a:	6a03      	ldr	r3, [r0, #32]
 8016f7c:	b90b      	cbnz	r3, 8016f82 <_fflush_r+0x1a>
 8016f7e:	f7fc fe53 	bl	8013c28 <__sinit>
 8016f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d0f3      	beq.n	8016f72 <_fflush_r+0xa>
 8016f8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016f8c:	07d0      	lsls	r0, r2, #31
 8016f8e:	d404      	bmi.n	8016f9a <_fflush_r+0x32>
 8016f90:	0599      	lsls	r1, r3, #22
 8016f92:	d402      	bmi.n	8016f9a <_fflush_r+0x32>
 8016f94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016f96:	f7fd fe80 	bl	8014c9a <__retarget_lock_acquire_recursive>
 8016f9a:	4628      	mov	r0, r5
 8016f9c:	4621      	mov	r1, r4
 8016f9e:	f7ff ff5f 	bl	8016e60 <__sflush_r>
 8016fa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016fa4:	07da      	lsls	r2, r3, #31
 8016fa6:	4605      	mov	r5, r0
 8016fa8:	d4e4      	bmi.n	8016f74 <_fflush_r+0xc>
 8016faa:	89a3      	ldrh	r3, [r4, #12]
 8016fac:	059b      	lsls	r3, r3, #22
 8016fae:	d4e1      	bmi.n	8016f74 <_fflush_r+0xc>
 8016fb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016fb2:	f7fd fe73 	bl	8014c9c <__retarget_lock_release_recursive>
 8016fb6:	e7dd      	b.n	8016f74 <_fflush_r+0xc>

08016fb8 <__malloc_lock>:
 8016fb8:	4801      	ldr	r0, [pc, #4]	@ (8016fc0 <__malloc_lock+0x8>)
 8016fba:	f7fd be6e 	b.w	8014c9a <__retarget_lock_acquire_recursive>
 8016fbe:	bf00      	nop
 8016fc0:	200067a8 	.word	0x200067a8

08016fc4 <__malloc_unlock>:
 8016fc4:	4801      	ldr	r0, [pc, #4]	@ (8016fcc <__malloc_unlock+0x8>)
 8016fc6:	f7fd be69 	b.w	8014c9c <__retarget_lock_release_recursive>
 8016fca:	bf00      	nop
 8016fcc:	200067a8 	.word	0x200067a8

08016fd0 <_Balloc>:
 8016fd0:	b570      	push	{r4, r5, r6, lr}
 8016fd2:	69c6      	ldr	r6, [r0, #28]
 8016fd4:	4604      	mov	r4, r0
 8016fd6:	460d      	mov	r5, r1
 8016fd8:	b976      	cbnz	r6, 8016ff8 <_Balloc+0x28>
 8016fda:	2010      	movs	r0, #16
 8016fdc:	f7ff fcfc 	bl	80169d8 <malloc>
 8016fe0:	4602      	mov	r2, r0
 8016fe2:	61e0      	str	r0, [r4, #28]
 8016fe4:	b920      	cbnz	r0, 8016ff0 <_Balloc+0x20>
 8016fe6:	4b18      	ldr	r3, [pc, #96]	@ (8017048 <_Balloc+0x78>)
 8016fe8:	4818      	ldr	r0, [pc, #96]	@ (801704c <_Balloc+0x7c>)
 8016fea:	216b      	movs	r1, #107	@ 0x6b
 8016fec:	f7fd fe92 	bl	8014d14 <__assert_func>
 8016ff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016ff4:	6006      	str	r6, [r0, #0]
 8016ff6:	60c6      	str	r6, [r0, #12]
 8016ff8:	69e6      	ldr	r6, [r4, #28]
 8016ffa:	68f3      	ldr	r3, [r6, #12]
 8016ffc:	b183      	cbz	r3, 8017020 <_Balloc+0x50>
 8016ffe:	69e3      	ldr	r3, [r4, #28]
 8017000:	68db      	ldr	r3, [r3, #12]
 8017002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017006:	b9b8      	cbnz	r0, 8017038 <_Balloc+0x68>
 8017008:	2101      	movs	r1, #1
 801700a:	fa01 f605 	lsl.w	r6, r1, r5
 801700e:	1d72      	adds	r2, r6, #5
 8017010:	0092      	lsls	r2, r2, #2
 8017012:	4620      	mov	r0, r4
 8017014:	f000 fec7 	bl	8017da6 <_calloc_r>
 8017018:	b160      	cbz	r0, 8017034 <_Balloc+0x64>
 801701a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801701e:	e00e      	b.n	801703e <_Balloc+0x6e>
 8017020:	2221      	movs	r2, #33	@ 0x21
 8017022:	2104      	movs	r1, #4
 8017024:	4620      	mov	r0, r4
 8017026:	f000 febe 	bl	8017da6 <_calloc_r>
 801702a:	69e3      	ldr	r3, [r4, #28]
 801702c:	60f0      	str	r0, [r6, #12]
 801702e:	68db      	ldr	r3, [r3, #12]
 8017030:	2b00      	cmp	r3, #0
 8017032:	d1e4      	bne.n	8016ffe <_Balloc+0x2e>
 8017034:	2000      	movs	r0, #0
 8017036:	bd70      	pop	{r4, r5, r6, pc}
 8017038:	6802      	ldr	r2, [r0, #0]
 801703a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801703e:	2300      	movs	r3, #0
 8017040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017044:	e7f7      	b.n	8017036 <_Balloc+0x66>
 8017046:	bf00      	nop
 8017048:	08018781 	.word	0x08018781
 801704c:	08018938 	.word	0x08018938

08017050 <_Bfree>:
 8017050:	b570      	push	{r4, r5, r6, lr}
 8017052:	69c6      	ldr	r6, [r0, #28]
 8017054:	4605      	mov	r5, r0
 8017056:	460c      	mov	r4, r1
 8017058:	b976      	cbnz	r6, 8017078 <_Bfree+0x28>
 801705a:	2010      	movs	r0, #16
 801705c:	f7ff fcbc 	bl	80169d8 <malloc>
 8017060:	4602      	mov	r2, r0
 8017062:	61e8      	str	r0, [r5, #28]
 8017064:	b920      	cbnz	r0, 8017070 <_Bfree+0x20>
 8017066:	4b09      	ldr	r3, [pc, #36]	@ (801708c <_Bfree+0x3c>)
 8017068:	4809      	ldr	r0, [pc, #36]	@ (8017090 <_Bfree+0x40>)
 801706a:	218f      	movs	r1, #143	@ 0x8f
 801706c:	f7fd fe52 	bl	8014d14 <__assert_func>
 8017070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017074:	6006      	str	r6, [r0, #0]
 8017076:	60c6      	str	r6, [r0, #12]
 8017078:	b13c      	cbz	r4, 801708a <_Bfree+0x3a>
 801707a:	69eb      	ldr	r3, [r5, #28]
 801707c:	6862      	ldr	r2, [r4, #4]
 801707e:	68db      	ldr	r3, [r3, #12]
 8017080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017084:	6021      	str	r1, [r4, #0]
 8017086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801708a:	bd70      	pop	{r4, r5, r6, pc}
 801708c:	08018781 	.word	0x08018781
 8017090:	08018938 	.word	0x08018938

08017094 <__multadd>:
 8017094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017098:	690d      	ldr	r5, [r1, #16]
 801709a:	4607      	mov	r7, r0
 801709c:	460c      	mov	r4, r1
 801709e:	461e      	mov	r6, r3
 80170a0:	f101 0c14 	add.w	ip, r1, #20
 80170a4:	2000      	movs	r0, #0
 80170a6:	f8dc 3000 	ldr.w	r3, [ip]
 80170aa:	b299      	uxth	r1, r3
 80170ac:	fb02 6101 	mla	r1, r2, r1, r6
 80170b0:	0c1e      	lsrs	r6, r3, #16
 80170b2:	0c0b      	lsrs	r3, r1, #16
 80170b4:	fb02 3306 	mla	r3, r2, r6, r3
 80170b8:	b289      	uxth	r1, r1
 80170ba:	3001      	adds	r0, #1
 80170bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80170c0:	4285      	cmp	r5, r0
 80170c2:	f84c 1b04 	str.w	r1, [ip], #4
 80170c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80170ca:	dcec      	bgt.n	80170a6 <__multadd+0x12>
 80170cc:	b30e      	cbz	r6, 8017112 <__multadd+0x7e>
 80170ce:	68a3      	ldr	r3, [r4, #8]
 80170d0:	42ab      	cmp	r3, r5
 80170d2:	dc19      	bgt.n	8017108 <__multadd+0x74>
 80170d4:	6861      	ldr	r1, [r4, #4]
 80170d6:	4638      	mov	r0, r7
 80170d8:	3101      	adds	r1, #1
 80170da:	f7ff ff79 	bl	8016fd0 <_Balloc>
 80170de:	4680      	mov	r8, r0
 80170e0:	b928      	cbnz	r0, 80170ee <__multadd+0x5a>
 80170e2:	4602      	mov	r2, r0
 80170e4:	4b0c      	ldr	r3, [pc, #48]	@ (8017118 <__multadd+0x84>)
 80170e6:	480d      	ldr	r0, [pc, #52]	@ (801711c <__multadd+0x88>)
 80170e8:	21ba      	movs	r1, #186	@ 0xba
 80170ea:	f7fd fe13 	bl	8014d14 <__assert_func>
 80170ee:	6922      	ldr	r2, [r4, #16]
 80170f0:	3202      	adds	r2, #2
 80170f2:	f104 010c 	add.w	r1, r4, #12
 80170f6:	0092      	lsls	r2, r2, #2
 80170f8:	300c      	adds	r0, #12
 80170fa:	f7fd fded 	bl	8014cd8 <memcpy>
 80170fe:	4621      	mov	r1, r4
 8017100:	4638      	mov	r0, r7
 8017102:	f7ff ffa5 	bl	8017050 <_Bfree>
 8017106:	4644      	mov	r4, r8
 8017108:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801710c:	3501      	adds	r5, #1
 801710e:	615e      	str	r6, [r3, #20]
 8017110:	6125      	str	r5, [r4, #16]
 8017112:	4620      	mov	r0, r4
 8017114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017118:	0801889b 	.word	0x0801889b
 801711c:	08018938 	.word	0x08018938

08017120 <__s2b>:
 8017120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017124:	460c      	mov	r4, r1
 8017126:	4615      	mov	r5, r2
 8017128:	461f      	mov	r7, r3
 801712a:	2209      	movs	r2, #9
 801712c:	3308      	adds	r3, #8
 801712e:	4606      	mov	r6, r0
 8017130:	fb93 f3f2 	sdiv	r3, r3, r2
 8017134:	2100      	movs	r1, #0
 8017136:	2201      	movs	r2, #1
 8017138:	429a      	cmp	r2, r3
 801713a:	db09      	blt.n	8017150 <__s2b+0x30>
 801713c:	4630      	mov	r0, r6
 801713e:	f7ff ff47 	bl	8016fd0 <_Balloc>
 8017142:	b940      	cbnz	r0, 8017156 <__s2b+0x36>
 8017144:	4602      	mov	r2, r0
 8017146:	4b19      	ldr	r3, [pc, #100]	@ (80171ac <__s2b+0x8c>)
 8017148:	4819      	ldr	r0, [pc, #100]	@ (80171b0 <__s2b+0x90>)
 801714a:	21d3      	movs	r1, #211	@ 0xd3
 801714c:	f7fd fde2 	bl	8014d14 <__assert_func>
 8017150:	0052      	lsls	r2, r2, #1
 8017152:	3101      	adds	r1, #1
 8017154:	e7f0      	b.n	8017138 <__s2b+0x18>
 8017156:	9b08      	ldr	r3, [sp, #32]
 8017158:	6143      	str	r3, [r0, #20]
 801715a:	2d09      	cmp	r5, #9
 801715c:	f04f 0301 	mov.w	r3, #1
 8017160:	6103      	str	r3, [r0, #16]
 8017162:	dd16      	ble.n	8017192 <__s2b+0x72>
 8017164:	f104 0909 	add.w	r9, r4, #9
 8017168:	46c8      	mov	r8, r9
 801716a:	442c      	add	r4, r5
 801716c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8017170:	4601      	mov	r1, r0
 8017172:	3b30      	subs	r3, #48	@ 0x30
 8017174:	220a      	movs	r2, #10
 8017176:	4630      	mov	r0, r6
 8017178:	f7ff ff8c 	bl	8017094 <__multadd>
 801717c:	45a0      	cmp	r8, r4
 801717e:	d1f5      	bne.n	801716c <__s2b+0x4c>
 8017180:	f1a5 0408 	sub.w	r4, r5, #8
 8017184:	444c      	add	r4, r9
 8017186:	1b2d      	subs	r5, r5, r4
 8017188:	1963      	adds	r3, r4, r5
 801718a:	42bb      	cmp	r3, r7
 801718c:	db04      	blt.n	8017198 <__s2b+0x78>
 801718e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017192:	340a      	adds	r4, #10
 8017194:	2509      	movs	r5, #9
 8017196:	e7f6      	b.n	8017186 <__s2b+0x66>
 8017198:	f814 3b01 	ldrb.w	r3, [r4], #1
 801719c:	4601      	mov	r1, r0
 801719e:	3b30      	subs	r3, #48	@ 0x30
 80171a0:	220a      	movs	r2, #10
 80171a2:	4630      	mov	r0, r6
 80171a4:	f7ff ff76 	bl	8017094 <__multadd>
 80171a8:	e7ee      	b.n	8017188 <__s2b+0x68>
 80171aa:	bf00      	nop
 80171ac:	0801889b 	.word	0x0801889b
 80171b0:	08018938 	.word	0x08018938

080171b4 <__hi0bits>:
 80171b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80171b8:	4603      	mov	r3, r0
 80171ba:	bf36      	itet	cc
 80171bc:	0403      	lslcc	r3, r0, #16
 80171be:	2000      	movcs	r0, #0
 80171c0:	2010      	movcc	r0, #16
 80171c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80171c6:	bf3c      	itt	cc
 80171c8:	021b      	lslcc	r3, r3, #8
 80171ca:	3008      	addcc	r0, #8
 80171cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80171d0:	bf3c      	itt	cc
 80171d2:	011b      	lslcc	r3, r3, #4
 80171d4:	3004      	addcc	r0, #4
 80171d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80171da:	bf3c      	itt	cc
 80171dc:	009b      	lslcc	r3, r3, #2
 80171de:	3002      	addcc	r0, #2
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	db05      	blt.n	80171f0 <__hi0bits+0x3c>
 80171e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80171e8:	f100 0001 	add.w	r0, r0, #1
 80171ec:	bf08      	it	eq
 80171ee:	2020      	moveq	r0, #32
 80171f0:	4770      	bx	lr

080171f2 <__lo0bits>:
 80171f2:	6803      	ldr	r3, [r0, #0]
 80171f4:	4602      	mov	r2, r0
 80171f6:	f013 0007 	ands.w	r0, r3, #7
 80171fa:	d00b      	beq.n	8017214 <__lo0bits+0x22>
 80171fc:	07d9      	lsls	r1, r3, #31
 80171fe:	d421      	bmi.n	8017244 <__lo0bits+0x52>
 8017200:	0798      	lsls	r0, r3, #30
 8017202:	bf49      	itett	mi
 8017204:	085b      	lsrmi	r3, r3, #1
 8017206:	089b      	lsrpl	r3, r3, #2
 8017208:	2001      	movmi	r0, #1
 801720a:	6013      	strmi	r3, [r2, #0]
 801720c:	bf5c      	itt	pl
 801720e:	6013      	strpl	r3, [r2, #0]
 8017210:	2002      	movpl	r0, #2
 8017212:	4770      	bx	lr
 8017214:	b299      	uxth	r1, r3
 8017216:	b909      	cbnz	r1, 801721c <__lo0bits+0x2a>
 8017218:	0c1b      	lsrs	r3, r3, #16
 801721a:	2010      	movs	r0, #16
 801721c:	b2d9      	uxtb	r1, r3
 801721e:	b909      	cbnz	r1, 8017224 <__lo0bits+0x32>
 8017220:	3008      	adds	r0, #8
 8017222:	0a1b      	lsrs	r3, r3, #8
 8017224:	0719      	lsls	r1, r3, #28
 8017226:	bf04      	itt	eq
 8017228:	091b      	lsreq	r3, r3, #4
 801722a:	3004      	addeq	r0, #4
 801722c:	0799      	lsls	r1, r3, #30
 801722e:	bf04      	itt	eq
 8017230:	089b      	lsreq	r3, r3, #2
 8017232:	3002      	addeq	r0, #2
 8017234:	07d9      	lsls	r1, r3, #31
 8017236:	d403      	bmi.n	8017240 <__lo0bits+0x4e>
 8017238:	085b      	lsrs	r3, r3, #1
 801723a:	f100 0001 	add.w	r0, r0, #1
 801723e:	d003      	beq.n	8017248 <__lo0bits+0x56>
 8017240:	6013      	str	r3, [r2, #0]
 8017242:	4770      	bx	lr
 8017244:	2000      	movs	r0, #0
 8017246:	4770      	bx	lr
 8017248:	2020      	movs	r0, #32
 801724a:	4770      	bx	lr

0801724c <__i2b>:
 801724c:	b510      	push	{r4, lr}
 801724e:	460c      	mov	r4, r1
 8017250:	2101      	movs	r1, #1
 8017252:	f7ff febd 	bl	8016fd0 <_Balloc>
 8017256:	4602      	mov	r2, r0
 8017258:	b928      	cbnz	r0, 8017266 <__i2b+0x1a>
 801725a:	4b05      	ldr	r3, [pc, #20]	@ (8017270 <__i2b+0x24>)
 801725c:	4805      	ldr	r0, [pc, #20]	@ (8017274 <__i2b+0x28>)
 801725e:	f240 1145 	movw	r1, #325	@ 0x145
 8017262:	f7fd fd57 	bl	8014d14 <__assert_func>
 8017266:	2301      	movs	r3, #1
 8017268:	6144      	str	r4, [r0, #20]
 801726a:	6103      	str	r3, [r0, #16]
 801726c:	bd10      	pop	{r4, pc}
 801726e:	bf00      	nop
 8017270:	0801889b 	.word	0x0801889b
 8017274:	08018938 	.word	0x08018938

08017278 <__multiply>:
 8017278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801727c:	4617      	mov	r7, r2
 801727e:	690a      	ldr	r2, [r1, #16]
 8017280:	693b      	ldr	r3, [r7, #16]
 8017282:	429a      	cmp	r2, r3
 8017284:	bfa8      	it	ge
 8017286:	463b      	movge	r3, r7
 8017288:	4689      	mov	r9, r1
 801728a:	bfa4      	itt	ge
 801728c:	460f      	movge	r7, r1
 801728e:	4699      	movge	r9, r3
 8017290:	693d      	ldr	r5, [r7, #16]
 8017292:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017296:	68bb      	ldr	r3, [r7, #8]
 8017298:	6879      	ldr	r1, [r7, #4]
 801729a:	eb05 060a 	add.w	r6, r5, sl
 801729e:	42b3      	cmp	r3, r6
 80172a0:	b085      	sub	sp, #20
 80172a2:	bfb8      	it	lt
 80172a4:	3101      	addlt	r1, #1
 80172a6:	f7ff fe93 	bl	8016fd0 <_Balloc>
 80172aa:	b930      	cbnz	r0, 80172ba <__multiply+0x42>
 80172ac:	4602      	mov	r2, r0
 80172ae:	4b41      	ldr	r3, [pc, #260]	@ (80173b4 <__multiply+0x13c>)
 80172b0:	4841      	ldr	r0, [pc, #260]	@ (80173b8 <__multiply+0x140>)
 80172b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80172b6:	f7fd fd2d 	bl	8014d14 <__assert_func>
 80172ba:	f100 0414 	add.w	r4, r0, #20
 80172be:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80172c2:	4623      	mov	r3, r4
 80172c4:	2200      	movs	r2, #0
 80172c6:	4573      	cmp	r3, lr
 80172c8:	d320      	bcc.n	801730c <__multiply+0x94>
 80172ca:	f107 0814 	add.w	r8, r7, #20
 80172ce:	f109 0114 	add.w	r1, r9, #20
 80172d2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80172d6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80172da:	9302      	str	r3, [sp, #8]
 80172dc:	1beb      	subs	r3, r5, r7
 80172de:	3b15      	subs	r3, #21
 80172e0:	f023 0303 	bic.w	r3, r3, #3
 80172e4:	3304      	adds	r3, #4
 80172e6:	3715      	adds	r7, #21
 80172e8:	42bd      	cmp	r5, r7
 80172ea:	bf38      	it	cc
 80172ec:	2304      	movcc	r3, #4
 80172ee:	9301      	str	r3, [sp, #4]
 80172f0:	9b02      	ldr	r3, [sp, #8]
 80172f2:	9103      	str	r1, [sp, #12]
 80172f4:	428b      	cmp	r3, r1
 80172f6:	d80c      	bhi.n	8017312 <__multiply+0x9a>
 80172f8:	2e00      	cmp	r6, #0
 80172fa:	dd03      	ble.n	8017304 <__multiply+0x8c>
 80172fc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017300:	2b00      	cmp	r3, #0
 8017302:	d055      	beq.n	80173b0 <__multiply+0x138>
 8017304:	6106      	str	r6, [r0, #16]
 8017306:	b005      	add	sp, #20
 8017308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801730c:	f843 2b04 	str.w	r2, [r3], #4
 8017310:	e7d9      	b.n	80172c6 <__multiply+0x4e>
 8017312:	f8b1 a000 	ldrh.w	sl, [r1]
 8017316:	f1ba 0f00 	cmp.w	sl, #0
 801731a:	d01f      	beq.n	801735c <__multiply+0xe4>
 801731c:	46c4      	mov	ip, r8
 801731e:	46a1      	mov	r9, r4
 8017320:	2700      	movs	r7, #0
 8017322:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017326:	f8d9 3000 	ldr.w	r3, [r9]
 801732a:	fa1f fb82 	uxth.w	fp, r2
 801732e:	b29b      	uxth	r3, r3
 8017330:	fb0a 330b 	mla	r3, sl, fp, r3
 8017334:	443b      	add	r3, r7
 8017336:	f8d9 7000 	ldr.w	r7, [r9]
 801733a:	0c12      	lsrs	r2, r2, #16
 801733c:	0c3f      	lsrs	r7, r7, #16
 801733e:	fb0a 7202 	mla	r2, sl, r2, r7
 8017342:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8017346:	b29b      	uxth	r3, r3
 8017348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801734c:	4565      	cmp	r5, ip
 801734e:	f849 3b04 	str.w	r3, [r9], #4
 8017352:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8017356:	d8e4      	bhi.n	8017322 <__multiply+0xaa>
 8017358:	9b01      	ldr	r3, [sp, #4]
 801735a:	50e7      	str	r7, [r4, r3]
 801735c:	9b03      	ldr	r3, [sp, #12]
 801735e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017362:	3104      	adds	r1, #4
 8017364:	f1b9 0f00 	cmp.w	r9, #0
 8017368:	d020      	beq.n	80173ac <__multiply+0x134>
 801736a:	6823      	ldr	r3, [r4, #0]
 801736c:	4647      	mov	r7, r8
 801736e:	46a4      	mov	ip, r4
 8017370:	f04f 0a00 	mov.w	sl, #0
 8017374:	f8b7 b000 	ldrh.w	fp, [r7]
 8017378:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801737c:	fb09 220b 	mla	r2, r9, fp, r2
 8017380:	4452      	add	r2, sl
 8017382:	b29b      	uxth	r3, r3
 8017384:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017388:	f84c 3b04 	str.w	r3, [ip], #4
 801738c:	f857 3b04 	ldr.w	r3, [r7], #4
 8017390:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017394:	f8bc 3000 	ldrh.w	r3, [ip]
 8017398:	fb09 330a 	mla	r3, r9, sl, r3
 801739c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80173a0:	42bd      	cmp	r5, r7
 80173a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80173a6:	d8e5      	bhi.n	8017374 <__multiply+0xfc>
 80173a8:	9a01      	ldr	r2, [sp, #4]
 80173aa:	50a3      	str	r3, [r4, r2]
 80173ac:	3404      	adds	r4, #4
 80173ae:	e79f      	b.n	80172f0 <__multiply+0x78>
 80173b0:	3e01      	subs	r6, #1
 80173b2:	e7a1      	b.n	80172f8 <__multiply+0x80>
 80173b4:	0801889b 	.word	0x0801889b
 80173b8:	08018938 	.word	0x08018938

080173bc <__pow5mult>:
 80173bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173c0:	4615      	mov	r5, r2
 80173c2:	f012 0203 	ands.w	r2, r2, #3
 80173c6:	4607      	mov	r7, r0
 80173c8:	460e      	mov	r6, r1
 80173ca:	d007      	beq.n	80173dc <__pow5mult+0x20>
 80173cc:	4c25      	ldr	r4, [pc, #148]	@ (8017464 <__pow5mult+0xa8>)
 80173ce:	3a01      	subs	r2, #1
 80173d0:	2300      	movs	r3, #0
 80173d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80173d6:	f7ff fe5d 	bl	8017094 <__multadd>
 80173da:	4606      	mov	r6, r0
 80173dc:	10ad      	asrs	r5, r5, #2
 80173de:	d03d      	beq.n	801745c <__pow5mult+0xa0>
 80173e0:	69fc      	ldr	r4, [r7, #28]
 80173e2:	b97c      	cbnz	r4, 8017404 <__pow5mult+0x48>
 80173e4:	2010      	movs	r0, #16
 80173e6:	f7ff faf7 	bl	80169d8 <malloc>
 80173ea:	4602      	mov	r2, r0
 80173ec:	61f8      	str	r0, [r7, #28]
 80173ee:	b928      	cbnz	r0, 80173fc <__pow5mult+0x40>
 80173f0:	4b1d      	ldr	r3, [pc, #116]	@ (8017468 <__pow5mult+0xac>)
 80173f2:	481e      	ldr	r0, [pc, #120]	@ (801746c <__pow5mult+0xb0>)
 80173f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80173f8:	f7fd fc8c 	bl	8014d14 <__assert_func>
 80173fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017400:	6004      	str	r4, [r0, #0]
 8017402:	60c4      	str	r4, [r0, #12]
 8017404:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801740c:	b94c      	cbnz	r4, 8017422 <__pow5mult+0x66>
 801740e:	f240 2171 	movw	r1, #625	@ 0x271
 8017412:	4638      	mov	r0, r7
 8017414:	f7ff ff1a 	bl	801724c <__i2b>
 8017418:	2300      	movs	r3, #0
 801741a:	f8c8 0008 	str.w	r0, [r8, #8]
 801741e:	4604      	mov	r4, r0
 8017420:	6003      	str	r3, [r0, #0]
 8017422:	f04f 0900 	mov.w	r9, #0
 8017426:	07eb      	lsls	r3, r5, #31
 8017428:	d50a      	bpl.n	8017440 <__pow5mult+0x84>
 801742a:	4631      	mov	r1, r6
 801742c:	4622      	mov	r2, r4
 801742e:	4638      	mov	r0, r7
 8017430:	f7ff ff22 	bl	8017278 <__multiply>
 8017434:	4631      	mov	r1, r6
 8017436:	4680      	mov	r8, r0
 8017438:	4638      	mov	r0, r7
 801743a:	f7ff fe09 	bl	8017050 <_Bfree>
 801743e:	4646      	mov	r6, r8
 8017440:	106d      	asrs	r5, r5, #1
 8017442:	d00b      	beq.n	801745c <__pow5mult+0xa0>
 8017444:	6820      	ldr	r0, [r4, #0]
 8017446:	b938      	cbnz	r0, 8017458 <__pow5mult+0x9c>
 8017448:	4622      	mov	r2, r4
 801744a:	4621      	mov	r1, r4
 801744c:	4638      	mov	r0, r7
 801744e:	f7ff ff13 	bl	8017278 <__multiply>
 8017452:	6020      	str	r0, [r4, #0]
 8017454:	f8c0 9000 	str.w	r9, [r0]
 8017458:	4604      	mov	r4, r0
 801745a:	e7e4      	b.n	8017426 <__pow5mult+0x6a>
 801745c:	4630      	mov	r0, r6
 801745e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017462:	bf00      	nop
 8017464:	08018aec 	.word	0x08018aec
 8017468:	08018781 	.word	0x08018781
 801746c:	08018938 	.word	0x08018938

08017470 <__lshift>:
 8017470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017474:	460c      	mov	r4, r1
 8017476:	6849      	ldr	r1, [r1, #4]
 8017478:	6923      	ldr	r3, [r4, #16]
 801747a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801747e:	68a3      	ldr	r3, [r4, #8]
 8017480:	4607      	mov	r7, r0
 8017482:	4691      	mov	r9, r2
 8017484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017488:	f108 0601 	add.w	r6, r8, #1
 801748c:	42b3      	cmp	r3, r6
 801748e:	db0b      	blt.n	80174a8 <__lshift+0x38>
 8017490:	4638      	mov	r0, r7
 8017492:	f7ff fd9d 	bl	8016fd0 <_Balloc>
 8017496:	4605      	mov	r5, r0
 8017498:	b948      	cbnz	r0, 80174ae <__lshift+0x3e>
 801749a:	4602      	mov	r2, r0
 801749c:	4b28      	ldr	r3, [pc, #160]	@ (8017540 <__lshift+0xd0>)
 801749e:	4829      	ldr	r0, [pc, #164]	@ (8017544 <__lshift+0xd4>)
 80174a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80174a4:	f7fd fc36 	bl	8014d14 <__assert_func>
 80174a8:	3101      	adds	r1, #1
 80174aa:	005b      	lsls	r3, r3, #1
 80174ac:	e7ee      	b.n	801748c <__lshift+0x1c>
 80174ae:	2300      	movs	r3, #0
 80174b0:	f100 0114 	add.w	r1, r0, #20
 80174b4:	f100 0210 	add.w	r2, r0, #16
 80174b8:	4618      	mov	r0, r3
 80174ba:	4553      	cmp	r3, sl
 80174bc:	db33      	blt.n	8017526 <__lshift+0xb6>
 80174be:	6920      	ldr	r0, [r4, #16]
 80174c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80174c4:	f104 0314 	add.w	r3, r4, #20
 80174c8:	f019 091f 	ands.w	r9, r9, #31
 80174cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80174d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80174d4:	d02b      	beq.n	801752e <__lshift+0xbe>
 80174d6:	f1c9 0e20 	rsb	lr, r9, #32
 80174da:	468a      	mov	sl, r1
 80174dc:	2200      	movs	r2, #0
 80174de:	6818      	ldr	r0, [r3, #0]
 80174e0:	fa00 f009 	lsl.w	r0, r0, r9
 80174e4:	4310      	orrs	r0, r2
 80174e6:	f84a 0b04 	str.w	r0, [sl], #4
 80174ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80174ee:	459c      	cmp	ip, r3
 80174f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80174f4:	d8f3      	bhi.n	80174de <__lshift+0x6e>
 80174f6:	ebac 0304 	sub.w	r3, ip, r4
 80174fa:	3b15      	subs	r3, #21
 80174fc:	f023 0303 	bic.w	r3, r3, #3
 8017500:	3304      	adds	r3, #4
 8017502:	f104 0015 	add.w	r0, r4, #21
 8017506:	4560      	cmp	r0, ip
 8017508:	bf88      	it	hi
 801750a:	2304      	movhi	r3, #4
 801750c:	50ca      	str	r2, [r1, r3]
 801750e:	b10a      	cbz	r2, 8017514 <__lshift+0xa4>
 8017510:	f108 0602 	add.w	r6, r8, #2
 8017514:	3e01      	subs	r6, #1
 8017516:	4638      	mov	r0, r7
 8017518:	612e      	str	r6, [r5, #16]
 801751a:	4621      	mov	r1, r4
 801751c:	f7ff fd98 	bl	8017050 <_Bfree>
 8017520:	4628      	mov	r0, r5
 8017522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017526:	f842 0f04 	str.w	r0, [r2, #4]!
 801752a:	3301      	adds	r3, #1
 801752c:	e7c5      	b.n	80174ba <__lshift+0x4a>
 801752e:	3904      	subs	r1, #4
 8017530:	f853 2b04 	ldr.w	r2, [r3], #4
 8017534:	f841 2f04 	str.w	r2, [r1, #4]!
 8017538:	459c      	cmp	ip, r3
 801753a:	d8f9      	bhi.n	8017530 <__lshift+0xc0>
 801753c:	e7ea      	b.n	8017514 <__lshift+0xa4>
 801753e:	bf00      	nop
 8017540:	0801889b 	.word	0x0801889b
 8017544:	08018938 	.word	0x08018938

08017548 <__mcmp>:
 8017548:	690a      	ldr	r2, [r1, #16]
 801754a:	4603      	mov	r3, r0
 801754c:	6900      	ldr	r0, [r0, #16]
 801754e:	1a80      	subs	r0, r0, r2
 8017550:	b530      	push	{r4, r5, lr}
 8017552:	d10e      	bne.n	8017572 <__mcmp+0x2a>
 8017554:	3314      	adds	r3, #20
 8017556:	3114      	adds	r1, #20
 8017558:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801755c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017560:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017564:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017568:	4295      	cmp	r5, r2
 801756a:	d003      	beq.n	8017574 <__mcmp+0x2c>
 801756c:	d205      	bcs.n	801757a <__mcmp+0x32>
 801756e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017572:	bd30      	pop	{r4, r5, pc}
 8017574:	42a3      	cmp	r3, r4
 8017576:	d3f3      	bcc.n	8017560 <__mcmp+0x18>
 8017578:	e7fb      	b.n	8017572 <__mcmp+0x2a>
 801757a:	2001      	movs	r0, #1
 801757c:	e7f9      	b.n	8017572 <__mcmp+0x2a>
	...

08017580 <__mdiff>:
 8017580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017584:	4689      	mov	r9, r1
 8017586:	4606      	mov	r6, r0
 8017588:	4611      	mov	r1, r2
 801758a:	4648      	mov	r0, r9
 801758c:	4614      	mov	r4, r2
 801758e:	f7ff ffdb 	bl	8017548 <__mcmp>
 8017592:	1e05      	subs	r5, r0, #0
 8017594:	d112      	bne.n	80175bc <__mdiff+0x3c>
 8017596:	4629      	mov	r1, r5
 8017598:	4630      	mov	r0, r6
 801759a:	f7ff fd19 	bl	8016fd0 <_Balloc>
 801759e:	4602      	mov	r2, r0
 80175a0:	b928      	cbnz	r0, 80175ae <__mdiff+0x2e>
 80175a2:	4b3f      	ldr	r3, [pc, #252]	@ (80176a0 <__mdiff+0x120>)
 80175a4:	f240 2137 	movw	r1, #567	@ 0x237
 80175a8:	483e      	ldr	r0, [pc, #248]	@ (80176a4 <__mdiff+0x124>)
 80175aa:	f7fd fbb3 	bl	8014d14 <__assert_func>
 80175ae:	2301      	movs	r3, #1
 80175b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80175b4:	4610      	mov	r0, r2
 80175b6:	b003      	add	sp, #12
 80175b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175bc:	bfbc      	itt	lt
 80175be:	464b      	movlt	r3, r9
 80175c0:	46a1      	movlt	r9, r4
 80175c2:	4630      	mov	r0, r6
 80175c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80175c8:	bfba      	itte	lt
 80175ca:	461c      	movlt	r4, r3
 80175cc:	2501      	movlt	r5, #1
 80175ce:	2500      	movge	r5, #0
 80175d0:	f7ff fcfe 	bl	8016fd0 <_Balloc>
 80175d4:	4602      	mov	r2, r0
 80175d6:	b918      	cbnz	r0, 80175e0 <__mdiff+0x60>
 80175d8:	4b31      	ldr	r3, [pc, #196]	@ (80176a0 <__mdiff+0x120>)
 80175da:	f240 2145 	movw	r1, #581	@ 0x245
 80175de:	e7e3      	b.n	80175a8 <__mdiff+0x28>
 80175e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80175e4:	6926      	ldr	r6, [r4, #16]
 80175e6:	60c5      	str	r5, [r0, #12]
 80175e8:	f109 0310 	add.w	r3, r9, #16
 80175ec:	f109 0514 	add.w	r5, r9, #20
 80175f0:	f104 0e14 	add.w	lr, r4, #20
 80175f4:	f100 0b14 	add.w	fp, r0, #20
 80175f8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80175fc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017600:	9301      	str	r3, [sp, #4]
 8017602:	46d9      	mov	r9, fp
 8017604:	f04f 0c00 	mov.w	ip, #0
 8017608:	9b01      	ldr	r3, [sp, #4]
 801760a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801760e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8017612:	9301      	str	r3, [sp, #4]
 8017614:	fa1f f38a 	uxth.w	r3, sl
 8017618:	4619      	mov	r1, r3
 801761a:	b283      	uxth	r3, r0
 801761c:	1acb      	subs	r3, r1, r3
 801761e:	0c00      	lsrs	r0, r0, #16
 8017620:	4463      	add	r3, ip
 8017622:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8017626:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801762a:	b29b      	uxth	r3, r3
 801762c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017630:	4576      	cmp	r6, lr
 8017632:	f849 3b04 	str.w	r3, [r9], #4
 8017636:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801763a:	d8e5      	bhi.n	8017608 <__mdiff+0x88>
 801763c:	1b33      	subs	r3, r6, r4
 801763e:	3b15      	subs	r3, #21
 8017640:	f023 0303 	bic.w	r3, r3, #3
 8017644:	3415      	adds	r4, #21
 8017646:	3304      	adds	r3, #4
 8017648:	42a6      	cmp	r6, r4
 801764a:	bf38      	it	cc
 801764c:	2304      	movcc	r3, #4
 801764e:	441d      	add	r5, r3
 8017650:	445b      	add	r3, fp
 8017652:	461e      	mov	r6, r3
 8017654:	462c      	mov	r4, r5
 8017656:	4544      	cmp	r4, r8
 8017658:	d30e      	bcc.n	8017678 <__mdiff+0xf8>
 801765a:	f108 0103 	add.w	r1, r8, #3
 801765e:	1b49      	subs	r1, r1, r5
 8017660:	f021 0103 	bic.w	r1, r1, #3
 8017664:	3d03      	subs	r5, #3
 8017666:	45a8      	cmp	r8, r5
 8017668:	bf38      	it	cc
 801766a:	2100      	movcc	r1, #0
 801766c:	440b      	add	r3, r1
 801766e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017672:	b191      	cbz	r1, 801769a <__mdiff+0x11a>
 8017674:	6117      	str	r7, [r2, #16]
 8017676:	e79d      	b.n	80175b4 <__mdiff+0x34>
 8017678:	f854 1b04 	ldr.w	r1, [r4], #4
 801767c:	46e6      	mov	lr, ip
 801767e:	0c08      	lsrs	r0, r1, #16
 8017680:	fa1c fc81 	uxtah	ip, ip, r1
 8017684:	4471      	add	r1, lr
 8017686:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801768a:	b289      	uxth	r1, r1
 801768c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017690:	f846 1b04 	str.w	r1, [r6], #4
 8017694:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017698:	e7dd      	b.n	8017656 <__mdiff+0xd6>
 801769a:	3f01      	subs	r7, #1
 801769c:	e7e7      	b.n	801766e <__mdiff+0xee>
 801769e:	bf00      	nop
 80176a0:	0801889b 	.word	0x0801889b
 80176a4:	08018938 	.word	0x08018938

080176a8 <__ulp>:
 80176a8:	b082      	sub	sp, #8
 80176aa:	ed8d 0b00 	vstr	d0, [sp]
 80176ae:	9a01      	ldr	r2, [sp, #4]
 80176b0:	4b0f      	ldr	r3, [pc, #60]	@ (80176f0 <__ulp+0x48>)
 80176b2:	4013      	ands	r3, r2
 80176b4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	dc08      	bgt.n	80176ce <__ulp+0x26>
 80176bc:	425b      	negs	r3, r3
 80176be:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80176c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80176c6:	da04      	bge.n	80176d2 <__ulp+0x2a>
 80176c8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80176cc:	4113      	asrs	r3, r2
 80176ce:	2200      	movs	r2, #0
 80176d0:	e008      	b.n	80176e4 <__ulp+0x3c>
 80176d2:	f1a2 0314 	sub.w	r3, r2, #20
 80176d6:	2b1e      	cmp	r3, #30
 80176d8:	bfda      	itte	le
 80176da:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80176de:	40da      	lsrle	r2, r3
 80176e0:	2201      	movgt	r2, #1
 80176e2:	2300      	movs	r3, #0
 80176e4:	4619      	mov	r1, r3
 80176e6:	4610      	mov	r0, r2
 80176e8:	ec41 0b10 	vmov	d0, r0, r1
 80176ec:	b002      	add	sp, #8
 80176ee:	4770      	bx	lr
 80176f0:	7ff00000 	.word	0x7ff00000

080176f4 <__b2d>:
 80176f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176f8:	6906      	ldr	r6, [r0, #16]
 80176fa:	f100 0814 	add.w	r8, r0, #20
 80176fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8017702:	1f37      	subs	r7, r6, #4
 8017704:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017708:	4610      	mov	r0, r2
 801770a:	f7ff fd53 	bl	80171b4 <__hi0bits>
 801770e:	f1c0 0320 	rsb	r3, r0, #32
 8017712:	280a      	cmp	r0, #10
 8017714:	600b      	str	r3, [r1, #0]
 8017716:	491b      	ldr	r1, [pc, #108]	@ (8017784 <__b2d+0x90>)
 8017718:	dc15      	bgt.n	8017746 <__b2d+0x52>
 801771a:	f1c0 0c0b 	rsb	ip, r0, #11
 801771e:	fa22 f30c 	lsr.w	r3, r2, ip
 8017722:	45b8      	cmp	r8, r7
 8017724:	ea43 0501 	orr.w	r5, r3, r1
 8017728:	bf34      	ite	cc
 801772a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801772e:	2300      	movcs	r3, #0
 8017730:	3015      	adds	r0, #21
 8017732:	fa02 f000 	lsl.w	r0, r2, r0
 8017736:	fa23 f30c 	lsr.w	r3, r3, ip
 801773a:	4303      	orrs	r3, r0
 801773c:	461c      	mov	r4, r3
 801773e:	ec45 4b10 	vmov	d0, r4, r5
 8017742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017746:	45b8      	cmp	r8, r7
 8017748:	bf3a      	itte	cc
 801774a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801774e:	f1a6 0708 	subcc.w	r7, r6, #8
 8017752:	2300      	movcs	r3, #0
 8017754:	380b      	subs	r0, #11
 8017756:	d012      	beq.n	801777e <__b2d+0x8a>
 8017758:	f1c0 0120 	rsb	r1, r0, #32
 801775c:	fa23 f401 	lsr.w	r4, r3, r1
 8017760:	4082      	lsls	r2, r0
 8017762:	4322      	orrs	r2, r4
 8017764:	4547      	cmp	r7, r8
 8017766:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801776a:	bf8c      	ite	hi
 801776c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017770:	2200      	movls	r2, #0
 8017772:	4083      	lsls	r3, r0
 8017774:	40ca      	lsrs	r2, r1
 8017776:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801777a:	4313      	orrs	r3, r2
 801777c:	e7de      	b.n	801773c <__b2d+0x48>
 801777e:	ea42 0501 	orr.w	r5, r2, r1
 8017782:	e7db      	b.n	801773c <__b2d+0x48>
 8017784:	3ff00000 	.word	0x3ff00000

08017788 <__d2b>:
 8017788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801778c:	460f      	mov	r7, r1
 801778e:	2101      	movs	r1, #1
 8017790:	ec59 8b10 	vmov	r8, r9, d0
 8017794:	4616      	mov	r6, r2
 8017796:	f7ff fc1b 	bl	8016fd0 <_Balloc>
 801779a:	4604      	mov	r4, r0
 801779c:	b930      	cbnz	r0, 80177ac <__d2b+0x24>
 801779e:	4602      	mov	r2, r0
 80177a0:	4b23      	ldr	r3, [pc, #140]	@ (8017830 <__d2b+0xa8>)
 80177a2:	4824      	ldr	r0, [pc, #144]	@ (8017834 <__d2b+0xac>)
 80177a4:	f240 310f 	movw	r1, #783	@ 0x30f
 80177a8:	f7fd fab4 	bl	8014d14 <__assert_func>
 80177ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80177b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80177b4:	b10d      	cbz	r5, 80177ba <__d2b+0x32>
 80177b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80177ba:	9301      	str	r3, [sp, #4]
 80177bc:	f1b8 0300 	subs.w	r3, r8, #0
 80177c0:	d023      	beq.n	801780a <__d2b+0x82>
 80177c2:	4668      	mov	r0, sp
 80177c4:	9300      	str	r3, [sp, #0]
 80177c6:	f7ff fd14 	bl	80171f2 <__lo0bits>
 80177ca:	e9dd 1200 	ldrd	r1, r2, [sp]
 80177ce:	b1d0      	cbz	r0, 8017806 <__d2b+0x7e>
 80177d0:	f1c0 0320 	rsb	r3, r0, #32
 80177d4:	fa02 f303 	lsl.w	r3, r2, r3
 80177d8:	430b      	orrs	r3, r1
 80177da:	40c2      	lsrs	r2, r0
 80177dc:	6163      	str	r3, [r4, #20]
 80177de:	9201      	str	r2, [sp, #4]
 80177e0:	9b01      	ldr	r3, [sp, #4]
 80177e2:	61a3      	str	r3, [r4, #24]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	bf0c      	ite	eq
 80177e8:	2201      	moveq	r2, #1
 80177ea:	2202      	movne	r2, #2
 80177ec:	6122      	str	r2, [r4, #16]
 80177ee:	b1a5      	cbz	r5, 801781a <__d2b+0x92>
 80177f0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80177f4:	4405      	add	r5, r0
 80177f6:	603d      	str	r5, [r7, #0]
 80177f8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80177fc:	6030      	str	r0, [r6, #0]
 80177fe:	4620      	mov	r0, r4
 8017800:	b003      	add	sp, #12
 8017802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017806:	6161      	str	r1, [r4, #20]
 8017808:	e7ea      	b.n	80177e0 <__d2b+0x58>
 801780a:	a801      	add	r0, sp, #4
 801780c:	f7ff fcf1 	bl	80171f2 <__lo0bits>
 8017810:	9b01      	ldr	r3, [sp, #4]
 8017812:	6163      	str	r3, [r4, #20]
 8017814:	3020      	adds	r0, #32
 8017816:	2201      	movs	r2, #1
 8017818:	e7e8      	b.n	80177ec <__d2b+0x64>
 801781a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801781e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8017822:	6038      	str	r0, [r7, #0]
 8017824:	6918      	ldr	r0, [r3, #16]
 8017826:	f7ff fcc5 	bl	80171b4 <__hi0bits>
 801782a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801782e:	e7e5      	b.n	80177fc <__d2b+0x74>
 8017830:	0801889b 	.word	0x0801889b
 8017834:	08018938 	.word	0x08018938

08017838 <__ratio>:
 8017838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801783c:	b085      	sub	sp, #20
 801783e:	e9cd 1000 	strd	r1, r0, [sp]
 8017842:	a902      	add	r1, sp, #8
 8017844:	f7ff ff56 	bl	80176f4 <__b2d>
 8017848:	9800      	ldr	r0, [sp, #0]
 801784a:	a903      	add	r1, sp, #12
 801784c:	ec55 4b10 	vmov	r4, r5, d0
 8017850:	f7ff ff50 	bl	80176f4 <__b2d>
 8017854:	9b01      	ldr	r3, [sp, #4]
 8017856:	6919      	ldr	r1, [r3, #16]
 8017858:	9b00      	ldr	r3, [sp, #0]
 801785a:	691b      	ldr	r3, [r3, #16]
 801785c:	1ac9      	subs	r1, r1, r3
 801785e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8017862:	1a9b      	subs	r3, r3, r2
 8017864:	ec5b ab10 	vmov	sl, fp, d0
 8017868:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801786c:	2b00      	cmp	r3, #0
 801786e:	bfce      	itee	gt
 8017870:	462a      	movgt	r2, r5
 8017872:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017876:	465a      	movle	r2, fp
 8017878:	462f      	mov	r7, r5
 801787a:	46d9      	mov	r9, fp
 801787c:	bfcc      	ite	gt
 801787e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017882:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8017886:	464b      	mov	r3, r9
 8017888:	4652      	mov	r2, sl
 801788a:	4620      	mov	r0, r4
 801788c:	4639      	mov	r1, r7
 801788e:	f7e8 ffed 	bl	800086c <__aeabi_ddiv>
 8017892:	ec41 0b10 	vmov	d0, r0, r1
 8017896:	b005      	add	sp, #20
 8017898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801789c <__copybits>:
 801789c:	3901      	subs	r1, #1
 801789e:	b570      	push	{r4, r5, r6, lr}
 80178a0:	1149      	asrs	r1, r1, #5
 80178a2:	6914      	ldr	r4, [r2, #16]
 80178a4:	3101      	adds	r1, #1
 80178a6:	f102 0314 	add.w	r3, r2, #20
 80178aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80178ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80178b2:	1f05      	subs	r5, r0, #4
 80178b4:	42a3      	cmp	r3, r4
 80178b6:	d30c      	bcc.n	80178d2 <__copybits+0x36>
 80178b8:	1aa3      	subs	r3, r4, r2
 80178ba:	3b11      	subs	r3, #17
 80178bc:	f023 0303 	bic.w	r3, r3, #3
 80178c0:	3211      	adds	r2, #17
 80178c2:	42a2      	cmp	r2, r4
 80178c4:	bf88      	it	hi
 80178c6:	2300      	movhi	r3, #0
 80178c8:	4418      	add	r0, r3
 80178ca:	2300      	movs	r3, #0
 80178cc:	4288      	cmp	r0, r1
 80178ce:	d305      	bcc.n	80178dc <__copybits+0x40>
 80178d0:	bd70      	pop	{r4, r5, r6, pc}
 80178d2:	f853 6b04 	ldr.w	r6, [r3], #4
 80178d6:	f845 6f04 	str.w	r6, [r5, #4]!
 80178da:	e7eb      	b.n	80178b4 <__copybits+0x18>
 80178dc:	f840 3b04 	str.w	r3, [r0], #4
 80178e0:	e7f4      	b.n	80178cc <__copybits+0x30>

080178e2 <__any_on>:
 80178e2:	f100 0214 	add.w	r2, r0, #20
 80178e6:	6900      	ldr	r0, [r0, #16]
 80178e8:	114b      	asrs	r3, r1, #5
 80178ea:	4298      	cmp	r0, r3
 80178ec:	b510      	push	{r4, lr}
 80178ee:	db11      	blt.n	8017914 <__any_on+0x32>
 80178f0:	dd0a      	ble.n	8017908 <__any_on+0x26>
 80178f2:	f011 011f 	ands.w	r1, r1, #31
 80178f6:	d007      	beq.n	8017908 <__any_on+0x26>
 80178f8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80178fc:	fa24 f001 	lsr.w	r0, r4, r1
 8017900:	fa00 f101 	lsl.w	r1, r0, r1
 8017904:	428c      	cmp	r4, r1
 8017906:	d10b      	bne.n	8017920 <__any_on+0x3e>
 8017908:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801790c:	4293      	cmp	r3, r2
 801790e:	d803      	bhi.n	8017918 <__any_on+0x36>
 8017910:	2000      	movs	r0, #0
 8017912:	bd10      	pop	{r4, pc}
 8017914:	4603      	mov	r3, r0
 8017916:	e7f7      	b.n	8017908 <__any_on+0x26>
 8017918:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801791c:	2900      	cmp	r1, #0
 801791e:	d0f5      	beq.n	801790c <__any_on+0x2a>
 8017920:	2001      	movs	r0, #1
 8017922:	e7f6      	b.n	8017912 <__any_on+0x30>

08017924 <__submore>:
 8017924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017928:	460c      	mov	r4, r1
 801792a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801792c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017930:	4299      	cmp	r1, r3
 8017932:	d11d      	bne.n	8017970 <__submore+0x4c>
 8017934:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8017938:	f7ff f878 	bl	8016a2c <_malloc_r>
 801793c:	b918      	cbnz	r0, 8017946 <__submore+0x22>
 801793e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801794a:	63a3      	str	r3, [r4, #56]	@ 0x38
 801794c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8017950:	6360      	str	r0, [r4, #52]	@ 0x34
 8017952:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8017956:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801795a:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801795e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017962:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8017966:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801796a:	6020      	str	r0, [r4, #0]
 801796c:	2000      	movs	r0, #0
 801796e:	e7e8      	b.n	8017942 <__submore+0x1e>
 8017970:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8017972:	0077      	lsls	r7, r6, #1
 8017974:	463a      	mov	r2, r7
 8017976:	f000 f821 	bl	80179bc <_realloc_r>
 801797a:	4605      	mov	r5, r0
 801797c:	2800      	cmp	r0, #0
 801797e:	d0de      	beq.n	801793e <__submore+0x1a>
 8017980:	eb00 0806 	add.w	r8, r0, r6
 8017984:	4601      	mov	r1, r0
 8017986:	4632      	mov	r2, r6
 8017988:	4640      	mov	r0, r8
 801798a:	f7fd f9a5 	bl	8014cd8 <memcpy>
 801798e:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8017992:	f8c4 8000 	str.w	r8, [r4]
 8017996:	e7e9      	b.n	801796c <__submore+0x48>

08017998 <fiprintf>:
 8017998:	b40e      	push	{r1, r2, r3}
 801799a:	b503      	push	{r0, r1, lr}
 801799c:	4601      	mov	r1, r0
 801799e:	ab03      	add	r3, sp, #12
 80179a0:	4805      	ldr	r0, [pc, #20]	@ (80179b8 <fiprintf+0x20>)
 80179a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80179a6:	6800      	ldr	r0, [r0, #0]
 80179a8:	9301      	str	r3, [sp, #4]
 80179aa:	f7fe fefd 	bl	80167a8 <_vfiprintf_r>
 80179ae:	b002      	add	sp, #8
 80179b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80179b4:	b003      	add	sp, #12
 80179b6:	4770      	bx	lr
 80179b8:	200001d4 	.word	0x200001d4

080179bc <_realloc_r>:
 80179bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179c0:	4607      	mov	r7, r0
 80179c2:	4614      	mov	r4, r2
 80179c4:	460d      	mov	r5, r1
 80179c6:	b921      	cbnz	r1, 80179d2 <_realloc_r+0x16>
 80179c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179cc:	4611      	mov	r1, r2
 80179ce:	f7ff b82d 	b.w	8016a2c <_malloc_r>
 80179d2:	b92a      	cbnz	r2, 80179e0 <_realloc_r+0x24>
 80179d4:	f7fe f814 	bl	8015a00 <_free_r>
 80179d8:	4625      	mov	r5, r4
 80179da:	4628      	mov	r0, r5
 80179dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179e0:	f000 f9f5 	bl	8017dce <_malloc_usable_size_r>
 80179e4:	4284      	cmp	r4, r0
 80179e6:	4606      	mov	r6, r0
 80179e8:	d802      	bhi.n	80179f0 <_realloc_r+0x34>
 80179ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80179ee:	d8f4      	bhi.n	80179da <_realloc_r+0x1e>
 80179f0:	4621      	mov	r1, r4
 80179f2:	4638      	mov	r0, r7
 80179f4:	f7ff f81a 	bl	8016a2c <_malloc_r>
 80179f8:	4680      	mov	r8, r0
 80179fa:	b908      	cbnz	r0, 8017a00 <_realloc_r+0x44>
 80179fc:	4645      	mov	r5, r8
 80179fe:	e7ec      	b.n	80179da <_realloc_r+0x1e>
 8017a00:	42b4      	cmp	r4, r6
 8017a02:	4622      	mov	r2, r4
 8017a04:	4629      	mov	r1, r5
 8017a06:	bf28      	it	cs
 8017a08:	4632      	movcs	r2, r6
 8017a0a:	f7fd f965 	bl	8014cd8 <memcpy>
 8017a0e:	4629      	mov	r1, r5
 8017a10:	4638      	mov	r0, r7
 8017a12:	f7fd fff5 	bl	8015a00 <_free_r>
 8017a16:	e7f1      	b.n	80179fc <_realloc_r+0x40>

08017a18 <__swbuf_r>:
 8017a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a1a:	460e      	mov	r6, r1
 8017a1c:	4614      	mov	r4, r2
 8017a1e:	4605      	mov	r5, r0
 8017a20:	b118      	cbz	r0, 8017a2a <__swbuf_r+0x12>
 8017a22:	6a03      	ldr	r3, [r0, #32]
 8017a24:	b90b      	cbnz	r3, 8017a2a <__swbuf_r+0x12>
 8017a26:	f7fc f8ff 	bl	8013c28 <__sinit>
 8017a2a:	69a3      	ldr	r3, [r4, #24]
 8017a2c:	60a3      	str	r3, [r4, #8]
 8017a2e:	89a3      	ldrh	r3, [r4, #12]
 8017a30:	071a      	lsls	r2, r3, #28
 8017a32:	d501      	bpl.n	8017a38 <__swbuf_r+0x20>
 8017a34:	6923      	ldr	r3, [r4, #16]
 8017a36:	b943      	cbnz	r3, 8017a4a <__swbuf_r+0x32>
 8017a38:	4621      	mov	r1, r4
 8017a3a:	4628      	mov	r0, r5
 8017a3c:	f000 f89a 	bl	8017b74 <__swsetup_r>
 8017a40:	b118      	cbz	r0, 8017a4a <__swbuf_r+0x32>
 8017a42:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017a46:	4638      	mov	r0, r7
 8017a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a4a:	6823      	ldr	r3, [r4, #0]
 8017a4c:	6922      	ldr	r2, [r4, #16]
 8017a4e:	1a98      	subs	r0, r3, r2
 8017a50:	6963      	ldr	r3, [r4, #20]
 8017a52:	b2f6      	uxtb	r6, r6
 8017a54:	4283      	cmp	r3, r0
 8017a56:	4637      	mov	r7, r6
 8017a58:	dc05      	bgt.n	8017a66 <__swbuf_r+0x4e>
 8017a5a:	4621      	mov	r1, r4
 8017a5c:	4628      	mov	r0, r5
 8017a5e:	f7ff fa83 	bl	8016f68 <_fflush_r>
 8017a62:	2800      	cmp	r0, #0
 8017a64:	d1ed      	bne.n	8017a42 <__swbuf_r+0x2a>
 8017a66:	68a3      	ldr	r3, [r4, #8]
 8017a68:	3b01      	subs	r3, #1
 8017a6a:	60a3      	str	r3, [r4, #8]
 8017a6c:	6823      	ldr	r3, [r4, #0]
 8017a6e:	1c5a      	adds	r2, r3, #1
 8017a70:	6022      	str	r2, [r4, #0]
 8017a72:	701e      	strb	r6, [r3, #0]
 8017a74:	6962      	ldr	r2, [r4, #20]
 8017a76:	1c43      	adds	r3, r0, #1
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d004      	beq.n	8017a86 <__swbuf_r+0x6e>
 8017a7c:	89a3      	ldrh	r3, [r4, #12]
 8017a7e:	07db      	lsls	r3, r3, #31
 8017a80:	d5e1      	bpl.n	8017a46 <__swbuf_r+0x2e>
 8017a82:	2e0a      	cmp	r6, #10
 8017a84:	d1df      	bne.n	8017a46 <__swbuf_r+0x2e>
 8017a86:	4621      	mov	r1, r4
 8017a88:	4628      	mov	r0, r5
 8017a8a:	f7ff fa6d 	bl	8016f68 <_fflush_r>
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	d0d9      	beq.n	8017a46 <__swbuf_r+0x2e>
 8017a92:	e7d6      	b.n	8017a42 <__swbuf_r+0x2a>

08017a94 <_strtoul_l.isra.0>:
 8017a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a98:	4e34      	ldr	r6, [pc, #208]	@ (8017b6c <_strtoul_l.isra.0+0xd8>)
 8017a9a:	4686      	mov	lr, r0
 8017a9c:	460d      	mov	r5, r1
 8017a9e:	4628      	mov	r0, r5
 8017aa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017aa4:	5d37      	ldrb	r7, [r6, r4]
 8017aa6:	f017 0708 	ands.w	r7, r7, #8
 8017aaa:	d1f8      	bne.n	8017a9e <_strtoul_l.isra.0+0xa>
 8017aac:	2c2d      	cmp	r4, #45	@ 0x2d
 8017aae:	d110      	bne.n	8017ad2 <_strtoul_l.isra.0+0x3e>
 8017ab0:	782c      	ldrb	r4, [r5, #0]
 8017ab2:	2701      	movs	r7, #1
 8017ab4:	1c85      	adds	r5, r0, #2
 8017ab6:	f033 0010 	bics.w	r0, r3, #16
 8017aba:	d115      	bne.n	8017ae8 <_strtoul_l.isra.0+0x54>
 8017abc:	2c30      	cmp	r4, #48	@ 0x30
 8017abe:	d10d      	bne.n	8017adc <_strtoul_l.isra.0+0x48>
 8017ac0:	7828      	ldrb	r0, [r5, #0]
 8017ac2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8017ac6:	2858      	cmp	r0, #88	@ 0x58
 8017ac8:	d108      	bne.n	8017adc <_strtoul_l.isra.0+0x48>
 8017aca:	786c      	ldrb	r4, [r5, #1]
 8017acc:	3502      	adds	r5, #2
 8017ace:	2310      	movs	r3, #16
 8017ad0:	e00a      	b.n	8017ae8 <_strtoul_l.isra.0+0x54>
 8017ad2:	2c2b      	cmp	r4, #43	@ 0x2b
 8017ad4:	bf04      	itt	eq
 8017ad6:	782c      	ldrbeq	r4, [r5, #0]
 8017ad8:	1c85      	addeq	r5, r0, #2
 8017ada:	e7ec      	b.n	8017ab6 <_strtoul_l.isra.0+0x22>
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d1f6      	bne.n	8017ace <_strtoul_l.isra.0+0x3a>
 8017ae0:	2c30      	cmp	r4, #48	@ 0x30
 8017ae2:	bf14      	ite	ne
 8017ae4:	230a      	movne	r3, #10
 8017ae6:	2308      	moveq	r3, #8
 8017ae8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017aec:	2600      	movs	r6, #0
 8017aee:	fbb8 f8f3 	udiv	r8, r8, r3
 8017af2:	fb03 f908 	mul.w	r9, r3, r8
 8017af6:	ea6f 0909 	mvn.w	r9, r9
 8017afa:	4630      	mov	r0, r6
 8017afc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017b00:	f1bc 0f09 	cmp.w	ip, #9
 8017b04:	d810      	bhi.n	8017b28 <_strtoul_l.isra.0+0x94>
 8017b06:	4664      	mov	r4, ip
 8017b08:	42a3      	cmp	r3, r4
 8017b0a:	dd1e      	ble.n	8017b4a <_strtoul_l.isra.0+0xb6>
 8017b0c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017b10:	d007      	beq.n	8017b22 <_strtoul_l.isra.0+0x8e>
 8017b12:	4580      	cmp	r8, r0
 8017b14:	d316      	bcc.n	8017b44 <_strtoul_l.isra.0+0xb0>
 8017b16:	d101      	bne.n	8017b1c <_strtoul_l.isra.0+0x88>
 8017b18:	45a1      	cmp	r9, r4
 8017b1a:	db13      	blt.n	8017b44 <_strtoul_l.isra.0+0xb0>
 8017b1c:	fb00 4003 	mla	r0, r0, r3, r4
 8017b20:	2601      	movs	r6, #1
 8017b22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b26:	e7e9      	b.n	8017afc <_strtoul_l.isra.0+0x68>
 8017b28:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017b2c:	f1bc 0f19 	cmp.w	ip, #25
 8017b30:	d801      	bhi.n	8017b36 <_strtoul_l.isra.0+0xa2>
 8017b32:	3c37      	subs	r4, #55	@ 0x37
 8017b34:	e7e8      	b.n	8017b08 <_strtoul_l.isra.0+0x74>
 8017b36:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017b3a:	f1bc 0f19 	cmp.w	ip, #25
 8017b3e:	d804      	bhi.n	8017b4a <_strtoul_l.isra.0+0xb6>
 8017b40:	3c57      	subs	r4, #87	@ 0x57
 8017b42:	e7e1      	b.n	8017b08 <_strtoul_l.isra.0+0x74>
 8017b44:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017b48:	e7eb      	b.n	8017b22 <_strtoul_l.isra.0+0x8e>
 8017b4a:	1c73      	adds	r3, r6, #1
 8017b4c:	d106      	bne.n	8017b5c <_strtoul_l.isra.0+0xc8>
 8017b4e:	2322      	movs	r3, #34	@ 0x22
 8017b50:	f8ce 3000 	str.w	r3, [lr]
 8017b54:	4630      	mov	r0, r6
 8017b56:	b932      	cbnz	r2, 8017b66 <_strtoul_l.isra.0+0xd2>
 8017b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b5c:	b107      	cbz	r7, 8017b60 <_strtoul_l.isra.0+0xcc>
 8017b5e:	4240      	negs	r0, r0
 8017b60:	2a00      	cmp	r2, #0
 8017b62:	d0f9      	beq.n	8017b58 <_strtoul_l.isra.0+0xc4>
 8017b64:	b106      	cbz	r6, 8017b68 <_strtoul_l.isra.0+0xd4>
 8017b66:	1e69      	subs	r1, r5, #1
 8017b68:	6011      	str	r1, [r2, #0]
 8017b6a:	e7f5      	b.n	8017b58 <_strtoul_l.isra.0+0xc4>
 8017b6c:	080189e9 	.word	0x080189e9

08017b70 <_strtoul_r>:
 8017b70:	f7ff bf90 	b.w	8017a94 <_strtoul_l.isra.0>

08017b74 <__swsetup_r>:
 8017b74:	b538      	push	{r3, r4, r5, lr}
 8017b76:	4b29      	ldr	r3, [pc, #164]	@ (8017c1c <__swsetup_r+0xa8>)
 8017b78:	4605      	mov	r5, r0
 8017b7a:	6818      	ldr	r0, [r3, #0]
 8017b7c:	460c      	mov	r4, r1
 8017b7e:	b118      	cbz	r0, 8017b88 <__swsetup_r+0x14>
 8017b80:	6a03      	ldr	r3, [r0, #32]
 8017b82:	b90b      	cbnz	r3, 8017b88 <__swsetup_r+0x14>
 8017b84:	f7fc f850 	bl	8013c28 <__sinit>
 8017b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b8c:	0719      	lsls	r1, r3, #28
 8017b8e:	d422      	bmi.n	8017bd6 <__swsetup_r+0x62>
 8017b90:	06da      	lsls	r2, r3, #27
 8017b92:	d407      	bmi.n	8017ba4 <__swsetup_r+0x30>
 8017b94:	2209      	movs	r2, #9
 8017b96:	602a      	str	r2, [r5, #0]
 8017b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b9c:	81a3      	strh	r3, [r4, #12]
 8017b9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ba2:	e033      	b.n	8017c0c <__swsetup_r+0x98>
 8017ba4:	0758      	lsls	r0, r3, #29
 8017ba6:	d512      	bpl.n	8017bce <__swsetup_r+0x5a>
 8017ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017baa:	b141      	cbz	r1, 8017bbe <__swsetup_r+0x4a>
 8017bac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017bb0:	4299      	cmp	r1, r3
 8017bb2:	d002      	beq.n	8017bba <__swsetup_r+0x46>
 8017bb4:	4628      	mov	r0, r5
 8017bb6:	f7fd ff23 	bl	8015a00 <_free_r>
 8017bba:	2300      	movs	r3, #0
 8017bbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8017bbe:	89a3      	ldrh	r3, [r4, #12]
 8017bc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017bc4:	81a3      	strh	r3, [r4, #12]
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	6063      	str	r3, [r4, #4]
 8017bca:	6923      	ldr	r3, [r4, #16]
 8017bcc:	6023      	str	r3, [r4, #0]
 8017bce:	89a3      	ldrh	r3, [r4, #12]
 8017bd0:	f043 0308 	orr.w	r3, r3, #8
 8017bd4:	81a3      	strh	r3, [r4, #12]
 8017bd6:	6923      	ldr	r3, [r4, #16]
 8017bd8:	b94b      	cbnz	r3, 8017bee <__swsetup_r+0x7a>
 8017bda:	89a3      	ldrh	r3, [r4, #12]
 8017bdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017be4:	d003      	beq.n	8017bee <__swsetup_r+0x7a>
 8017be6:	4621      	mov	r1, r4
 8017be8:	4628      	mov	r0, r5
 8017bea:	f000 f84c 	bl	8017c86 <__smakebuf_r>
 8017bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bf2:	f013 0201 	ands.w	r2, r3, #1
 8017bf6:	d00a      	beq.n	8017c0e <__swsetup_r+0x9a>
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	60a2      	str	r2, [r4, #8]
 8017bfc:	6962      	ldr	r2, [r4, #20]
 8017bfe:	4252      	negs	r2, r2
 8017c00:	61a2      	str	r2, [r4, #24]
 8017c02:	6922      	ldr	r2, [r4, #16]
 8017c04:	b942      	cbnz	r2, 8017c18 <__swsetup_r+0xa4>
 8017c06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017c0a:	d1c5      	bne.n	8017b98 <__swsetup_r+0x24>
 8017c0c:	bd38      	pop	{r3, r4, r5, pc}
 8017c0e:	0799      	lsls	r1, r3, #30
 8017c10:	bf58      	it	pl
 8017c12:	6962      	ldrpl	r2, [r4, #20]
 8017c14:	60a2      	str	r2, [r4, #8]
 8017c16:	e7f4      	b.n	8017c02 <__swsetup_r+0x8e>
 8017c18:	2000      	movs	r0, #0
 8017c1a:	e7f7      	b.n	8017c0c <__swsetup_r+0x98>
 8017c1c:	200001d4 	.word	0x200001d4

08017c20 <__ascii_wctomb>:
 8017c20:	4603      	mov	r3, r0
 8017c22:	4608      	mov	r0, r1
 8017c24:	b141      	cbz	r1, 8017c38 <__ascii_wctomb+0x18>
 8017c26:	2aff      	cmp	r2, #255	@ 0xff
 8017c28:	d904      	bls.n	8017c34 <__ascii_wctomb+0x14>
 8017c2a:	228a      	movs	r2, #138	@ 0x8a
 8017c2c:	601a      	str	r2, [r3, #0]
 8017c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c32:	4770      	bx	lr
 8017c34:	700a      	strb	r2, [r1, #0]
 8017c36:	2001      	movs	r0, #1
 8017c38:	4770      	bx	lr

08017c3a <__swhatbuf_r>:
 8017c3a:	b570      	push	{r4, r5, r6, lr}
 8017c3c:	460c      	mov	r4, r1
 8017c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c42:	2900      	cmp	r1, #0
 8017c44:	b096      	sub	sp, #88	@ 0x58
 8017c46:	4615      	mov	r5, r2
 8017c48:	461e      	mov	r6, r3
 8017c4a:	da0d      	bge.n	8017c68 <__swhatbuf_r+0x2e>
 8017c4c:	89a3      	ldrh	r3, [r4, #12]
 8017c4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017c52:	f04f 0100 	mov.w	r1, #0
 8017c56:	bf14      	ite	ne
 8017c58:	2340      	movne	r3, #64	@ 0x40
 8017c5a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017c5e:	2000      	movs	r0, #0
 8017c60:	6031      	str	r1, [r6, #0]
 8017c62:	602b      	str	r3, [r5, #0]
 8017c64:	b016      	add	sp, #88	@ 0x58
 8017c66:	bd70      	pop	{r4, r5, r6, pc}
 8017c68:	466a      	mov	r2, sp
 8017c6a:	f000 f883 	bl	8017d74 <_fstat_r>
 8017c6e:	2800      	cmp	r0, #0
 8017c70:	dbec      	blt.n	8017c4c <__swhatbuf_r+0x12>
 8017c72:	9901      	ldr	r1, [sp, #4]
 8017c74:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017c78:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017c7c:	4259      	negs	r1, r3
 8017c7e:	4159      	adcs	r1, r3
 8017c80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017c84:	e7eb      	b.n	8017c5e <__swhatbuf_r+0x24>

08017c86 <__smakebuf_r>:
 8017c86:	898b      	ldrh	r3, [r1, #12]
 8017c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c8a:	079d      	lsls	r5, r3, #30
 8017c8c:	4606      	mov	r6, r0
 8017c8e:	460c      	mov	r4, r1
 8017c90:	d507      	bpl.n	8017ca2 <__smakebuf_r+0x1c>
 8017c92:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017c96:	6023      	str	r3, [r4, #0]
 8017c98:	6123      	str	r3, [r4, #16]
 8017c9a:	2301      	movs	r3, #1
 8017c9c:	6163      	str	r3, [r4, #20]
 8017c9e:	b003      	add	sp, #12
 8017ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ca2:	ab01      	add	r3, sp, #4
 8017ca4:	466a      	mov	r2, sp
 8017ca6:	f7ff ffc8 	bl	8017c3a <__swhatbuf_r>
 8017caa:	9f00      	ldr	r7, [sp, #0]
 8017cac:	4605      	mov	r5, r0
 8017cae:	4639      	mov	r1, r7
 8017cb0:	4630      	mov	r0, r6
 8017cb2:	f7fe febb 	bl	8016a2c <_malloc_r>
 8017cb6:	b948      	cbnz	r0, 8017ccc <__smakebuf_r+0x46>
 8017cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cbc:	059a      	lsls	r2, r3, #22
 8017cbe:	d4ee      	bmi.n	8017c9e <__smakebuf_r+0x18>
 8017cc0:	f023 0303 	bic.w	r3, r3, #3
 8017cc4:	f043 0302 	orr.w	r3, r3, #2
 8017cc8:	81a3      	strh	r3, [r4, #12]
 8017cca:	e7e2      	b.n	8017c92 <__smakebuf_r+0xc>
 8017ccc:	89a3      	ldrh	r3, [r4, #12]
 8017cce:	6020      	str	r0, [r4, #0]
 8017cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017cd4:	81a3      	strh	r3, [r4, #12]
 8017cd6:	9b01      	ldr	r3, [sp, #4]
 8017cd8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017cdc:	b15b      	cbz	r3, 8017cf6 <__smakebuf_r+0x70>
 8017cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ce2:	4630      	mov	r0, r6
 8017ce4:	f000 f826 	bl	8017d34 <_isatty_r>
 8017ce8:	b128      	cbz	r0, 8017cf6 <__smakebuf_r+0x70>
 8017cea:	89a3      	ldrh	r3, [r4, #12]
 8017cec:	f023 0303 	bic.w	r3, r3, #3
 8017cf0:	f043 0301 	orr.w	r3, r3, #1
 8017cf4:	81a3      	strh	r3, [r4, #12]
 8017cf6:	89a3      	ldrh	r3, [r4, #12]
 8017cf8:	431d      	orrs	r5, r3
 8017cfa:	81a5      	strh	r5, [r4, #12]
 8017cfc:	e7cf      	b.n	8017c9e <__smakebuf_r+0x18>

08017cfe <memmove>:
 8017cfe:	4288      	cmp	r0, r1
 8017d00:	b510      	push	{r4, lr}
 8017d02:	eb01 0402 	add.w	r4, r1, r2
 8017d06:	d902      	bls.n	8017d0e <memmove+0x10>
 8017d08:	4284      	cmp	r4, r0
 8017d0a:	4623      	mov	r3, r4
 8017d0c:	d807      	bhi.n	8017d1e <memmove+0x20>
 8017d0e:	1e43      	subs	r3, r0, #1
 8017d10:	42a1      	cmp	r1, r4
 8017d12:	d008      	beq.n	8017d26 <memmove+0x28>
 8017d14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d18:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d1c:	e7f8      	b.n	8017d10 <memmove+0x12>
 8017d1e:	4402      	add	r2, r0
 8017d20:	4601      	mov	r1, r0
 8017d22:	428a      	cmp	r2, r1
 8017d24:	d100      	bne.n	8017d28 <memmove+0x2a>
 8017d26:	bd10      	pop	{r4, pc}
 8017d28:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d2c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d30:	e7f7      	b.n	8017d22 <memmove+0x24>
	...

08017d34 <_isatty_r>:
 8017d34:	b538      	push	{r3, r4, r5, lr}
 8017d36:	4d06      	ldr	r5, [pc, #24]	@ (8017d50 <_isatty_r+0x1c>)
 8017d38:	2300      	movs	r3, #0
 8017d3a:	4604      	mov	r4, r0
 8017d3c:	4608      	mov	r0, r1
 8017d3e:	602b      	str	r3, [r5, #0]
 8017d40:	f7eb fb78 	bl	8003434 <_isatty>
 8017d44:	1c43      	adds	r3, r0, #1
 8017d46:	d102      	bne.n	8017d4e <_isatty_r+0x1a>
 8017d48:	682b      	ldr	r3, [r5, #0]
 8017d4a:	b103      	cbz	r3, 8017d4e <_isatty_r+0x1a>
 8017d4c:	6023      	str	r3, [r4, #0]
 8017d4e:	bd38      	pop	{r3, r4, r5, pc}
 8017d50:	200067ac 	.word	0x200067ac

08017d54 <_sbrk_r>:
 8017d54:	b538      	push	{r3, r4, r5, lr}
 8017d56:	4d06      	ldr	r5, [pc, #24]	@ (8017d70 <_sbrk_r+0x1c>)
 8017d58:	2300      	movs	r3, #0
 8017d5a:	4604      	mov	r4, r0
 8017d5c:	4608      	mov	r0, r1
 8017d5e:	602b      	str	r3, [r5, #0]
 8017d60:	f7eb fb80 	bl	8003464 <_sbrk>
 8017d64:	1c43      	adds	r3, r0, #1
 8017d66:	d102      	bne.n	8017d6e <_sbrk_r+0x1a>
 8017d68:	682b      	ldr	r3, [r5, #0]
 8017d6a:	b103      	cbz	r3, 8017d6e <_sbrk_r+0x1a>
 8017d6c:	6023      	str	r3, [r4, #0]
 8017d6e:	bd38      	pop	{r3, r4, r5, pc}
 8017d70:	200067ac 	.word	0x200067ac

08017d74 <_fstat_r>:
 8017d74:	b538      	push	{r3, r4, r5, lr}
 8017d76:	4d07      	ldr	r5, [pc, #28]	@ (8017d94 <_fstat_r+0x20>)
 8017d78:	2300      	movs	r3, #0
 8017d7a:	4604      	mov	r4, r0
 8017d7c:	4608      	mov	r0, r1
 8017d7e:	4611      	mov	r1, r2
 8017d80:	602b      	str	r3, [r5, #0]
 8017d82:	f7eb fb47 	bl	8003414 <_fstat>
 8017d86:	1c43      	adds	r3, r0, #1
 8017d88:	d102      	bne.n	8017d90 <_fstat_r+0x1c>
 8017d8a:	682b      	ldr	r3, [r5, #0]
 8017d8c:	b103      	cbz	r3, 8017d90 <_fstat_r+0x1c>
 8017d8e:	6023      	str	r3, [r4, #0]
 8017d90:	bd38      	pop	{r3, r4, r5, pc}
 8017d92:	bf00      	nop
 8017d94:	200067ac 	.word	0x200067ac

08017d98 <abort>:
 8017d98:	b508      	push	{r3, lr}
 8017d9a:	2006      	movs	r0, #6
 8017d9c:	f000 f848 	bl	8017e30 <raise>
 8017da0:	2001      	movs	r0, #1
 8017da2:	f7eb fb03 	bl	80033ac <_exit>

08017da6 <_calloc_r>:
 8017da6:	b570      	push	{r4, r5, r6, lr}
 8017da8:	fba1 5402 	umull	r5, r4, r1, r2
 8017dac:	b934      	cbnz	r4, 8017dbc <_calloc_r+0x16>
 8017dae:	4629      	mov	r1, r5
 8017db0:	f7fe fe3c 	bl	8016a2c <_malloc_r>
 8017db4:	4606      	mov	r6, r0
 8017db6:	b928      	cbnz	r0, 8017dc4 <_calloc_r+0x1e>
 8017db8:	4630      	mov	r0, r6
 8017dba:	bd70      	pop	{r4, r5, r6, pc}
 8017dbc:	220c      	movs	r2, #12
 8017dbe:	6002      	str	r2, [r0, #0]
 8017dc0:	2600      	movs	r6, #0
 8017dc2:	e7f9      	b.n	8017db8 <_calloc_r+0x12>
 8017dc4:	462a      	mov	r2, r5
 8017dc6:	4621      	mov	r1, r4
 8017dc8:	f7fc fe70 	bl	8014aac <memset>
 8017dcc:	e7f4      	b.n	8017db8 <_calloc_r+0x12>

08017dce <_malloc_usable_size_r>:
 8017dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017dd2:	1f18      	subs	r0, r3, #4
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	bfbc      	itt	lt
 8017dd8:	580b      	ldrlt	r3, [r1, r0]
 8017dda:	18c0      	addlt	r0, r0, r3
 8017ddc:	4770      	bx	lr

08017dde <_raise_r>:
 8017dde:	291f      	cmp	r1, #31
 8017de0:	b538      	push	{r3, r4, r5, lr}
 8017de2:	4605      	mov	r5, r0
 8017de4:	460c      	mov	r4, r1
 8017de6:	d904      	bls.n	8017df2 <_raise_r+0x14>
 8017de8:	2316      	movs	r3, #22
 8017dea:	6003      	str	r3, [r0, #0]
 8017dec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017df0:	bd38      	pop	{r3, r4, r5, pc}
 8017df2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017df4:	b112      	cbz	r2, 8017dfc <_raise_r+0x1e>
 8017df6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017dfa:	b94b      	cbnz	r3, 8017e10 <_raise_r+0x32>
 8017dfc:	4628      	mov	r0, r5
 8017dfe:	f000 f831 	bl	8017e64 <_getpid_r>
 8017e02:	4622      	mov	r2, r4
 8017e04:	4601      	mov	r1, r0
 8017e06:	4628      	mov	r0, r5
 8017e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e0c:	f000 b818 	b.w	8017e40 <_kill_r>
 8017e10:	2b01      	cmp	r3, #1
 8017e12:	d00a      	beq.n	8017e2a <_raise_r+0x4c>
 8017e14:	1c59      	adds	r1, r3, #1
 8017e16:	d103      	bne.n	8017e20 <_raise_r+0x42>
 8017e18:	2316      	movs	r3, #22
 8017e1a:	6003      	str	r3, [r0, #0]
 8017e1c:	2001      	movs	r0, #1
 8017e1e:	e7e7      	b.n	8017df0 <_raise_r+0x12>
 8017e20:	2100      	movs	r1, #0
 8017e22:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017e26:	4620      	mov	r0, r4
 8017e28:	4798      	blx	r3
 8017e2a:	2000      	movs	r0, #0
 8017e2c:	e7e0      	b.n	8017df0 <_raise_r+0x12>
	...

08017e30 <raise>:
 8017e30:	4b02      	ldr	r3, [pc, #8]	@ (8017e3c <raise+0xc>)
 8017e32:	4601      	mov	r1, r0
 8017e34:	6818      	ldr	r0, [r3, #0]
 8017e36:	f7ff bfd2 	b.w	8017dde <_raise_r>
 8017e3a:	bf00      	nop
 8017e3c:	200001d4 	.word	0x200001d4

08017e40 <_kill_r>:
 8017e40:	b538      	push	{r3, r4, r5, lr}
 8017e42:	4d07      	ldr	r5, [pc, #28]	@ (8017e60 <_kill_r+0x20>)
 8017e44:	2300      	movs	r3, #0
 8017e46:	4604      	mov	r4, r0
 8017e48:	4608      	mov	r0, r1
 8017e4a:	4611      	mov	r1, r2
 8017e4c:	602b      	str	r3, [r5, #0]
 8017e4e:	f7eb fa9d 	bl	800338c <_kill>
 8017e52:	1c43      	adds	r3, r0, #1
 8017e54:	d102      	bne.n	8017e5c <_kill_r+0x1c>
 8017e56:	682b      	ldr	r3, [r5, #0]
 8017e58:	b103      	cbz	r3, 8017e5c <_kill_r+0x1c>
 8017e5a:	6023      	str	r3, [r4, #0]
 8017e5c:	bd38      	pop	{r3, r4, r5, pc}
 8017e5e:	bf00      	nop
 8017e60:	200067ac 	.word	0x200067ac

08017e64 <_getpid_r>:
 8017e64:	f7eb ba8a 	b.w	800337c <_getpid>

08017e68 <_init>:
 8017e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6a:	bf00      	nop
 8017e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e6e:	bc08      	pop	{r3}
 8017e70:	469e      	mov	lr, r3
 8017e72:	4770      	bx	lr

08017e74 <_fini>:
 8017e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e76:	bf00      	nop
 8017e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e7a:	bc08      	pop	{r3}
 8017e7c:	469e      	mov	lr, r3
 8017e7e:	4770      	bx	lr
