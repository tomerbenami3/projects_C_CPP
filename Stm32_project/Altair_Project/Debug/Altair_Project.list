
Altair_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017a38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c78  08017bc8  08017bc8  00018bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018840  08018840  0001a224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018840  08018840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018848  08018848  0001a224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018848  08018848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801884c  0801884c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  08018850  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006594  20000224  08018a74  0001a224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200067b8  08018a74  0001a7b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f557  00000000  00000000  0001a254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074bb  00000000  00000000  000497ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002780  00000000  00000000  00050c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001e4f  00000000  00000000  000533e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000332ac  00000000  00000000  00055237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000364a6  00000000  00000000  000884e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011df2f  00000000  00000000  000be989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dc8b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bcb0  00000000  00000000  001dc8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001e85ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017bb0 	.word	0x08017bb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	08017bb0 	.word	0x08017bb0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001062:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001064:	4a3a      	ldr	r2, [pc, #232]	@ (8001150 <MX_ADC1_Init+0x110>)
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <MX_ADC1_Init+0x10c>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800106e:	4b37      	ldr	r3, [pc, #220]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001074:	4b35      	ldr	r3, [pc, #212]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800107a:	4b34      	ldr	r3, [pc, #208]	@ (800114c <MX_ADC1_Init+0x10c>)
 800107c:	2201      	movs	r2, #1
 800107e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001080:	4b32      	ldr	r3, [pc, #200]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001082:	2204      	movs	r2, #4
 8001084:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001086:	4b31      	ldr	r3, [pc, #196]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001088:	2200      	movs	r2, #0
 800108a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108c:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <MX_ADC1_Init+0x10c>)
 800108e:	2200      	movs	r2, #0
 8001090:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001092:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001094:	2202      	movs	r2, #2
 8001096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001098:	4b2c      	ldr	r3, [pc, #176]	@ (800114c <MX_ADC1_Init+0x10c>)
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010a6:	4b29      	ldr	r3, [pc, #164]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ac:	4b27      	ldr	r3, [pc, #156]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010ba:	4b24      	ldr	r3, [pc, #144]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c2:	4822      	ldr	r0, [pc, #136]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010c4:	f002 ff08 	bl	8003ed8 <HAL_ADC_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010ce:	f001 fcba 	bl	8002a46 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	481b      	ldr	r0, [pc, #108]	@ (800114c <MX_ADC1_Init+0x10c>)
 80010de:	f003 ffcb 	bl	8005078 <HAL_ADCEx_MultiModeConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010e8:	f001 fcad 	bl	8002a46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_ADC1_Init+0x114>)
 80010ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f0:	2306      	movs	r3, #6
 80010f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f8:	237f      	movs	r3, #127	@ 0x7f
 80010fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fc:	2304      	movs	r3, #4
 80010fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	4810      	ldr	r0, [pc, #64]	@ (800114c <MX_ADC1_Init+0x10c>)
 800110a:	f003 f967 	bl	80043dc <HAL_ADC_ConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001114:	f001 fc97 	bl	8002a46 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001118:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_ADC1_Init+0x118>)
 800111a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800111c:	230c      	movs	r3, #12
 800111e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4809      	ldr	r0, [pc, #36]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001126:	f003 f959 	bl	80043dc <HAL_ADC_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001130:	f001 fc89 	bl	8002a46 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Init(&hadc1);
 8001134:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001136:	f002 fecf 	bl	8003ed8 <HAL_ADC_Init>
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4803      	ldr	r0, [pc, #12]	@ (800114c <MX_ADC1_Init+0x10c>)
 8001140:	f003 f94c 	bl	80043dc <HAL_ADC_ConfigChannel>
  /* USER CODE END ADC1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	@ 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000240 	.word	0x20000240
 8001150:	50040000 	.word	0x50040000
 8001154:	14f00020 	.word	0x14f00020
 8001158:	19200040 	.word	0x19200040

0800115c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0ac      	sub	sp, #176	@ 0xb0
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2288      	movs	r2, #136	@ 0x88
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f013 fb45 	bl	801480c <memset>
  if(adcHandle->Instance==ADC1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a41      	ldr	r2, [pc, #260]	@ (800128c <HAL_ADC_MspInit+0x130>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d17a      	bne.n	8001282 <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800118c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001190:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001192:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001196:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80011a2:	2308      	movs	r3, #8
 80011a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011a6:	2307      	movs	r3, #7
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011b6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4618      	mov	r0, r3
 80011be:	f005 fea3 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80011c8:	f001 fc3d 	bl	8002a46 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011cc:	4b30      	ldr	r3, [pc, #192]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	4a2f      	ldr	r2, [pc, #188]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <HAL_ADC_MspInit+0x134>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001202:	230b      	movs	r3, #11
 8001204:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001212:	4619      	mov	r1, r3
 8001214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001218:	f004 fdfa 	bl	8005e10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800121c:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800121e:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <HAL_ADC_MspInit+0x13c>)
 8001220:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001224:	2200      	movs	r2, #0
 8001226:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800122e:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001236:	2280      	movs	r2, #128	@ 0x80
 8001238:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800123c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001240:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001244:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001248:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800124a:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800124c:	2220      	movs	r2, #32
 800124e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001250:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001256:	480f      	ldr	r0, [pc, #60]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 8001258:	f004 f8d0 	bl	80053fc <HAL_DMA_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001262:	f001 fbf0 	bl	8002a46 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800126a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <HAL_ADC_MspInit+0x138>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2012      	movs	r0, #18
 8001278:	f004 f889 	bl	800538e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800127c:	2012      	movs	r0, #18
 800127e:	f004 f8a2 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	37b0      	adds	r7, #176	@ 0xb0
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	50040000 	.word	0x50040000
 8001290:	40021000 	.word	0x40021000
 8001294:	200002a4 	.word	0x200002a4
 8001298:	40020008 	.word	0x40020008

0800129c <ParseCommand>:
extern osMessageQueueId_t eventQueueHandle;

static int Date_Compare(Date* a, Date* b);

void ParseCommand(const char* cmd)
{
 800129c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012a0:	b0d8      	sub	sp, #352	@ 0x160
 80012a2:	af0a      	add	r7, sp, #40	@ 0x28
 80012a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012ac:	6018      	str	r0, [r3, #0]
	printf("ParseCommand received: '%s'\r\n", cmd);
 80012ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012b2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	48c7      	ldr	r0, [pc, #796]	@ (80015d8 <ParseCommand+0x33c>)
 80012ba:	f013 fa37 	bl	801472c <iprintf>

	if(cmd[0] == '\0' || strcmp(cmd, " \r\n") == strlen(cmd)) {
 80012be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012c2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8298 	beq.w	8001800 <ParseCommand+0x564>
 80012d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012d8:	49c0      	ldr	r1, [pc, #768]	@ (80015dc <ParseCommand+0x340>)
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	f7fe ff78 	bl	80001d0 <strcmp>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461c      	mov	r4, r3
 80012e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f7fe ffcf 	bl	8000290 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	429c      	cmp	r4, r3
 80012f6:	f000 8283 	beq.w	8001800 <ParseCommand+0x564>
		return;
	}

    if (strncmp(cmd, "SETTIME ", 8) == 0)
 80012fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012fe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001302:	2208      	movs	r2, #8
 8001304:	49b6      	ldr	r1, [pc, #728]	@ (80015e0 <ParseCommand+0x344>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	f013 fa88 	bl	801481c <strncmp>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d15b      	bne.n	80013ca <ParseCommand+0x12e>
    {
        int year, month, day, hour, minute, second;
        if (sscanf(cmd + 8, "%d-%d-%d %d:%d:%d",
 8001312:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001316:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f103 0008 	add.w	r0, r3, #8
 8001320:	f507 7196 	add.w	r1, r7, #300	@ 0x12c
 8001324:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001328:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800132c:	9303      	str	r3, [sp, #12]
 800132e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001332:	9302      	str	r3, [sp, #8]
 8001334:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	460b      	mov	r3, r1
 8001342:	49a8      	ldr	r1, [pc, #672]	@ (80015e4 <ParseCommand+0x348>)
 8001344:	f012 fa22 	bl	801378c <siscanf>
 8001348:	4603      	mov	r3, r0
 800134a:	2b06      	cmp	r3, #6
 800134c:	d139      	bne.n	80013c2 <ParseCommand+0x126>
                   &year, &month, &day,
                   &hour, &minute, &second) == 6)
        {
            DateTimeSetDate(g_dt, year % 100, month, day);
 800134e:	4ba6      	ldr	r3, [pc, #664]	@ (80015e8 <ParseCommand+0x34c>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001356:	4aa5      	ldr	r2, [pc, #660]	@ (80015ec <ParseCommand+0x350>)
 8001358:	fb82 1203 	smull	r1, r2, r2, r3
 800135c:	1151      	asrs	r1, r2, #5
 800135e:	17da      	asrs	r2, r3, #31
 8001360:	1a8a      	subs	r2, r1, r2
 8001362:	2164      	movs	r1, #100	@ 0x64
 8001364:	fb01 f202 	mul.w	r2, r1, r2
 8001368:	1a9a      	subs	r2, r3, r2
 800136a:	b2d1      	uxtb	r1, r2
 800136c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001370:	b2da      	uxtb	r2, r3
 8001372:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f000 fb7d 	bl	8001a76 <DateTimeSetDate>
            DateTimeSetTime(g_dt, hour, minute, second);
 800137c:	4b9a      	ldr	r3, [pc, #616]	@ (80015e8 <ParseCommand+0x34c>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001384:	b2d9      	uxtb	r1, r3
 8001386:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800138a:	b2da      	uxtb	r2, r3
 800138c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f000 fb31 	bl	80019f8 <DateTimeSetTime>
            printf("RTC updated to: %04d-%02d-%02d %02d:%02d:%02d\r\n",
 8001396:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 800139a:	f8d7 412c 	ldr.w	r4, [r7, #300]	@ 0x12c
 800139e:	f8d7 5128 	ldr.w	r5, [r7, #296]	@ 0x128
 80013a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80013a6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80013aa:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80013ae:	9102      	str	r1, [sp, #8]
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	462b      	mov	r3, r5
 80013b6:	4622      	mov	r2, r4
 80013b8:	4601      	mov	r1, r0
 80013ba:	488d      	ldr	r0, [pc, #564]	@ (80015f0 <ParseCommand+0x354>)
 80013bc:	f013 f9b6 	bl	801472c <iprintf>
 80013c0:	e21f      	b.n	8001802 <ParseCommand+0x566>
                   year, month, day, hour, minute, second);
        }
        else
        {
            printf("SETTIME format error\r\n");
 80013c2:	488c      	ldr	r0, [pc, #560]	@ (80015f4 <ParseCommand+0x358>)
 80013c4:	f013 fa1a 	bl	80147fc <puts>
 80013c8:	e21b      	b.n	8001802 <ParseCommand+0x566>
        }
    }
    else if (strncmp(cmd, "GET ", 4) == 0)
 80013ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013ce:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013d2:	2204      	movs	r2, #4
 80013d4:	4988      	ldr	r1, [pc, #544]	@ (80015f8 <ParseCommand+0x35c>)
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	f013 fa20 	bl	801481c <strncmp>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f040 8116 	bne.w	8001610 <ParseCommand+0x374>
    {
        int y1, m1, d1, h1, min1, s1;
        int y2, m2, d2, h2, min2, s2;

        if (sscanf(cmd + 4, "%d-%d-%d %d:%d:%d TO %d-%d-%d %d:%d:%d",
 80013e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	1d18      	adds	r0, r3, #4
 80013f0:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 80013f4:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80013f8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80013fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80013fe:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8001402:	9308      	str	r3, [sp, #32]
 8001404:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001408:	9307      	str	r3, [sp, #28]
 800140a:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800140e:	9306      	str	r3, [sp, #24]
 8001410:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001414:	9305      	str	r3, [sp, #20]
 8001416:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800141a:	9304      	str	r3, [sp, #16]
 800141c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001420:	9303      	str	r3, [sp, #12]
 8001422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	460b      	mov	r3, r1
 8001436:	4971      	ldr	r1, [pc, #452]	@ (80015fc <ParseCommand+0x360>)
 8001438:	f012 f9a8 	bl	801378c <siscanf>
 800143c:	4603      	mov	r3, r0
 800143e:	2b0c      	cmp	r3, #12
 8001440:	f040 80c5 	bne.w	80015ce <ParseCommand+0x332>
                   &y1, &m1, &d1, &h1, &min1, &s1,
                   &y2, &m2, &d2, &h2, &min2, &s2) == 12)
        {
            printf("Parsed GET range: %04d-%02d-%02d %02d:%02d:%02d to %04d-%02d-%02d %02d:%02d:%02d\r\n",
 8001444:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800144e:	60fa      	str	r2, [r7, #12]
 8001450:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001454:	60b8      	str	r0, [r7, #8]
 8001456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800145a:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800145e:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8001462:	f8d7 0100 	ldr.w	r0, [r7, #256]	@ 0x100
 8001466:	f8d7 40fc 	ldr.w	r4, [r7, #252]	@ 0xfc
 800146a:	607c      	str	r4, [r7, #4]
 800146c:	f8d7 50f8 	ldr.w	r5, [r7, #248]	@ 0xf8
 8001470:	f8d7 60f4 	ldr.w	r6, [r7, #244]	@ 0xf4
 8001474:	f8d7 40f0 	ldr.w	r4, [r7, #240]	@ 0xf0
 8001478:	603c      	str	r4, [r7, #0]
 800147a:	f8d7 40ec 	ldr.w	r4, [r7, #236]	@ 0xec
 800147e:	9408      	str	r4, [sp, #32]
 8001480:	683c      	ldr	r4, [r7, #0]
 8001482:	9407      	str	r4, [sp, #28]
 8001484:	9606      	str	r6, [sp, #24]
 8001486:	9505      	str	r5, [sp, #20]
 8001488:	687c      	ldr	r4, [r7, #4]
 800148a:	9404      	str	r4, [sp, #16]
 800148c:	9003      	str	r0, [sp, #12]
 800148e:	9102      	str	r1, [sp, #8]
 8001490:	9201      	str	r2, [sp, #4]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	6939      	ldr	r1, [r7, #16]
 800149a:	4859      	ldr	r0, [pc, #356]	@ (8001600 <ParseCommand+0x364>)
 800149c:	f013 f946 	bl	801472c <iprintf>
                   y1, m1, d1, h1, min1, s1,
                   y2, m2, d2, h2, min2, s2);

            DateTime start = {
 80014a0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
 80014b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	f887 30e5 	strb.w	r3, [r7, #229]	@ 0xe5
                .date = { .year = y1 % 100, .month = m1, .day = d1 },
 80014c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80014c4:	4a49      	ldr	r2, [pc, #292]	@ (80015ec <ParseCommand+0x350>)
 80014c6:	fb82 1203 	smull	r1, r2, r2, r3
 80014ca:	1151      	asrs	r1, r2, #5
 80014cc:	17da      	asrs	r2, r3, #31
 80014ce:	1a8a      	subs	r2, r1, r2
 80014d0:	2164      	movs	r1, #100	@ 0x64
 80014d2:	fb01 f202 	mul.w	r2, r1, r2
 80014d6:	1a9a      	subs	r2, r3, r2
            DateTime start = {
 80014d8:	b2d3      	uxtb	r3, r2
 80014da:	f887 30e6 	strb.w	r3, [r7, #230]	@ 0xe6
 80014de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 80014e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f887 30e8 	strb.w	r3, [r7, #232]	@ 0xe8
 80014f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
                .time = { .hours = h1, .minutes = min1, .seconds = s1 }
            };

            DateTime end = {
 80014fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f887 30d8 	strb.w	r3, [r7, #216]	@ 0xd8
 8001512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
                .date = { .year = y2 % 100, .month = m2, .day = d2 },
 800151c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001520:	4a32      	ldr	r2, [pc, #200]	@ (80015ec <ParseCommand+0x350>)
 8001522:	fb82 1203 	smull	r1, r2, r2, r3
 8001526:	1151      	asrs	r1, r2, #5
 8001528:	17da      	asrs	r2, r3, #31
 800152a:	1a8a      	subs	r2, r1, r2
 800152c:	2164      	movs	r1, #100	@ 0x64
 800152e:	fb01 f202 	mul.w	r2, r1, r2
 8001532:	1a9a      	subs	r2, r3, r2
            DateTime end = {
 8001534:	b2d3      	uxtb	r3, r2
 8001536:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800153a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 8001544:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
 800154e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001552:	b2db      	uxtb	r3, r3
 8001554:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
                .time = { .hours = h2, .minutes = min2, .seconds = s2 }
            };

            DateTime current = start;
 8001558:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800155c:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 8001560:	ca07      	ldmia	r2, {r0, r1, r2}
 8001562:	e883 0007 	stmia.w	r3, {r0, r1, r2}

            while (Date_Compare(&current.date, &end.date) <= 0)
 8001566:	e024      	b.n	80015b2 <ParseCommand+0x316>
            {
                char filename[20];
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
                         current.date.year + 2000,
 8001568:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
 800156c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                         current.date.month,
 8001570:	f897 20cd 	ldrb.w	r2, [r7, #205]	@ 0xcd
                         current.date.day);
 8001574:	f897 10cc 	ldrb.w	r1, [r7, #204]	@ 0xcc
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
 8001578:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 800157c:	9101      	str	r1, [sp, #4]
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	4a20      	ldr	r2, [pc, #128]	@ (8001604 <ParseCommand+0x368>)
 8001582:	2114      	movs	r1, #20
 8001584:	f012 f8aa 	bl	80136dc <sniprintf>

                printf("Trying to open file: %s\r\n", filename);
 8001588:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800158c:	4619      	mov	r1, r3
 800158e:	481e      	ldr	r0, [pc, #120]	@ (8001608 <ParseCommand+0x36c>)
 8001590:	f013 f8cc 	bl	801472c <iprintf>
                SD_ReadFilePrintRange(filename, &start, &end);
 8001594:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001598:	f107 01e0 	add.w	r1, r7, #224	@ 0xe0
 800159c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f001 fb53 	bl	8002c4c <SD_ReadFilePrintRange>

                DateTime_NextDay(&current.date);
 80015a6:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80015aa:	3304      	adds	r3, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fb1f 	bl	8001bf0 <DateTime_NextDay>
            while (Date_Compare(&current.date, &end.date) <= 0)
 80015b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015b6:	1d1a      	adds	r2, r3, #4
 80015b8:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80015bc:	3304      	adds	r3, #4
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f93d 	bl	8001840 <Date_Compare>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	ddcd      	ble.n	8001568 <ParseCommand+0x2cc>
 80015cc:	e119      	b.n	8001802 <ParseCommand+0x566>
            }
        }
        else
        {
            printf("Invalid GET command format.\r\n");
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <ParseCommand+0x370>)
 80015d0:	f013 f914 	bl	80147fc <puts>
 80015d4:	e115      	b.n	8001802 <ParseCommand+0x566>
 80015d6:	bf00      	nop
 80015d8:	08017bc8 	.word	0x08017bc8
 80015dc:	08017be8 	.word	0x08017be8
 80015e0:	08017bec 	.word	0x08017bec
 80015e4:	08017bf8 	.word	0x08017bf8
 80015e8:	2000032c 	.word	0x2000032c
 80015ec:	51eb851f 	.word	0x51eb851f
 80015f0:	08017c0c 	.word	0x08017c0c
 80015f4:	08017c3c 	.word	0x08017c3c
 80015f8:	08017c54 	.word	0x08017c54
 80015fc:	08017c5c 	.word	0x08017c5c
 8001600:	08017c84 	.word	0x08017c84
 8001604:	08017cd8 	.word	0x08017cd8
 8001608:	08017cec 	.word	0x08017cec
 800160c:	08017d08 	.word	0x08017d08
        }
    }
    else if (strncmp(cmd, "SETCONFIG ", 10) == 0)
 8001610:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001614:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001618:	220a      	movs	r2, #10
 800161a:	497c      	ldr	r1, [pc, #496]	@ (800180c <ParseCommand+0x570>)
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	f013 f8fd 	bl	801481c <strncmp>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	f040 80e7 	bne.w	80017f8 <ParseCommand+0x55c>
    {
        SystemConfig newConfig;
        newConfig.magic = CONFIG_MAGIC;
 800162a:	4b79      	ldr	r3, [pc, #484]	@ (8001810 <ParseCommand+0x574>)
 800162c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

        char tempStr[128];
        strncpy(tempStr, cmd + 10, sizeof(tempStr) - 1);
 8001630:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001634:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f103 010a 	add.w	r1, r3, #10
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	227f      	movs	r2, #127	@ 0x7f
 8001644:	4618      	mov	r0, r3
 8001646:	f013 f8fb 	bl	8014840 <strncpy>
        tempStr[sizeof(tempStr) - 1] = '\0';
 800164a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800164e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001652:	2200      	movs	r2, #0
 8001654:	f883 207f 	strb.w	r2, [r3, #127]	@ 0x7f

        char* token = strtok(tempStr, " ");
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	496d      	ldr	r1, [pc, #436]	@ (8001814 <ParseCommand+0x578>)
 800165e:	4618      	mov	r0, r3
 8001660:	f013 f902 	bl	8014868 <strtok>
 8001664:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
        printf("DEBUG parsed voltage_min: %.3f\r\n", newConfig.voltage_min);
 8001668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff7b 	bl	8000568 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4868      	ldr	r0, [pc, #416]	@ (8001818 <ParseCommand+0x57c>)
 8001678:	f013 f858 	bl	801472c <iprintf>
        while (token != NULL) {
 800167c:	e06d      	b.n	800175a <ParseCommand+0x4be>
            if (strncmp(token, "temp_min=", 9) == 0)
 800167e:	2209      	movs	r2, #9
 8001680:	4966      	ldr	r1, [pc, #408]	@ (800181c <ParseCommand+0x580>)
 8001682:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8001686:	f013 f8c9 	bl	801481c <strncmp>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10a      	bne.n	80016a6 <ParseCommand+0x40a>
                newConfig.temp_min = atoi(token + 9);
 8001690:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001694:	3309      	adds	r3, #9
 8001696:	4618      	mov	r0, r3
 8001698:	f011 f9b9 	bl	8012a0e <atoi>
 800169c:	4603      	mov	r3, r0
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 80016a4:	e053      	b.n	800174e <ParseCommand+0x4b2>
            else if (strncmp(token, "temp_max=", 9) == 0)
 80016a6:	2209      	movs	r2, #9
 80016a8:	495d      	ldr	r1, [pc, #372]	@ (8001820 <ParseCommand+0x584>)
 80016aa:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80016ae:	f013 f8b5 	bl	801481c <strncmp>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10a      	bne.n	80016ce <ParseCommand+0x432>
                newConfig.temp_max = atoi(token + 9);
 80016b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80016bc:	3309      	adds	r3, #9
 80016be:	4618      	mov	r0, r3
 80016c0:	f011 f9a5 	bl	8012a0e <atoi>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 80016cc:	e03f      	b.n	800174e <ParseCommand+0x4b2>
            else if (strncmp(token, "humidity_min=", 13) == 0)
 80016ce:	220d      	movs	r2, #13
 80016d0:	4954      	ldr	r1, [pc, #336]	@ (8001824 <ParseCommand+0x588>)
 80016d2:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80016d6:	f013 f8a1 	bl	801481c <strncmp>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10a      	bne.n	80016f6 <ParseCommand+0x45a>
                newConfig.humidity_min = atoi(token + 13);
 80016e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80016e4:	330d      	adds	r3, #13
 80016e6:	4618      	mov	r0, r3
 80016e8:	f011 f991 	bl	8012a0e <atoi>
 80016ec:	4603      	mov	r3, r0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 80016f4:	e02b      	b.n	800174e <ParseCommand+0x4b2>
            else if (strncmp(token, "light_min=", 10) == 0)
 80016f6:	220a      	movs	r2, #10
 80016f8:	494b      	ldr	r1, [pc, #300]	@ (8001828 <ParseCommand+0x58c>)
 80016fa:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80016fe:	f013 f88d 	bl	801481c <strncmp>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10a      	bne.n	800171e <ParseCommand+0x482>
                newConfig.light_min = atoi(token + 10);
 8001708:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800170c:	330a      	adds	r3, #10
 800170e:	4618      	mov	r0, r3
 8001710:	f011 f97d 	bl	8012a0e <atoi>
 8001714:	4603      	mov	r3, r0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 800171c:	e017      	b.n	800174e <ParseCommand+0x4b2>
            else if (strncmp(token, "voltage_min=", 12) == 0)
 800171e:	220c      	movs	r2, #12
 8001720:	4942      	ldr	r1, [pc, #264]	@ (800182c <ParseCommand+0x590>)
 8001722:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8001726:	f013 f879 	bl	801481c <strncmp>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10e      	bne.n	800174e <ParseCommand+0x4b2>
                newConfig.voltage_min = atof(token + 12);
 8001730:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001734:	330c      	adds	r3, #12
 8001736:	4618      	mov	r0, r3
 8001738:	f011 f966 	bl	8012a08 <atof>
 800173c:	ec53 2b10 	vmov	r2, r3, d0
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa60 	bl	8000c08 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

            token = strtok(NULL, " ");
 800174e:	4931      	ldr	r1, [pc, #196]	@ (8001814 <ParseCommand+0x578>)
 8001750:	2000      	movs	r0, #0
 8001752:	f013 f889 	bl	8014868 <strtok>
 8001756:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
        while (token != NULL) {
 800175a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800175e:	2b00      	cmp	r3, #0
 8001760:	d18d      	bne.n	800167e <ParseCommand+0x3e2>
        }

        Config_Set(newConfig);
 8001762:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001766:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800176a:	f000 f8e7 	bl	800193c <Config_Set>
        FlashConfig_Save(&newConfig);
 800176e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fc38 	bl	8001fe8 <FlashConfig_Save>

        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
               newConfig.temp_min, newConfig.temp_max,
 8001778:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 800177c:	461d      	mov	r5, r3
               newConfig.temp_min, newConfig.temp_max,
 800177e:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 8001782:	461e      	mov	r6, r3
               newConfig.humidity_min, newConfig.light_min, newConfig.voltage_min);
 8001784:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 8001788:	4698      	mov	r8, r3
               newConfig.humidity_min, newConfig.light_min, newConfig.voltage_min);
 800178a:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 800178e:	461c      	mov	r4, r3
               newConfig.humidity_min, newConfig.light_min, newConfig.voltage_min);
 8001790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
        printf("Config updated: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fee7 	bl	8000568 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017a2:	9400      	str	r4, [sp, #0]
 80017a4:	4643      	mov	r3, r8
 80017a6:	4632      	mov	r2, r6
 80017a8:	4629      	mov	r1, r5
 80017aa:	4821      	ldr	r0, [pc, #132]	@ (8001830 <ParseCommand+0x594>)
 80017ac:	f012 ffbe 	bl	801472c <iprintf>

        SystemEvent event = {
 80017b0:	2301      	movs	r3, #1
 80017b2:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
            .type = EVENT_CONFIG_UPDATED,
            .date = g_dt->date,
 80017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001834 <ParseCommand+0x598>)
 80017c4:	681a      	ldr	r2, [r3, #0]
        SystemEvent event = {
 80017c6:	f107 039f 	add.w	r3, r7, #159	@ 0x9f
 80017ca:	3204      	adds	r2, #4
 80017cc:	8811      	ldrh	r1, [r2, #0]
 80017ce:	7892      	ldrb	r2, [r2, #2]
 80017d0:	8019      	strh	r1, [r3, #0]
 80017d2:	709a      	strb	r2, [r3, #2]
            .time = g_dt->time,
 80017d4:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <ParseCommand+0x598>)
 80017d6:	681a      	ldr	r2, [r3, #0]
        SystemEvent event = {
 80017d8:	f107 03a2 	add.w	r3, r7, #162	@ 0xa2
 80017dc:	3207      	adds	r2, #7
 80017de:	8811      	ldrh	r1, [r2, #0]
 80017e0:	7892      	ldrb	r2, [r2, #2]
 80017e2:	8019      	strh	r1, [r3, #0]
 80017e4:	709a      	strb	r2, [r3, #2]
            .old_mode = 0,
            .new_mode = 0
        };
        osMessageQueuePut(eventQueueHandle, &event, 0, 0);
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <ParseCommand+0x59c>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 80017ee:	2300      	movs	r3, #0
 80017f0:	2200      	movs	r2, #0
 80017f2:	f00d fa0d 	bl	800ec10 <osMessageQueuePut>
 80017f6:	e004      	b.n	8001802 <ParseCommand+0x566>
    }


    else
    {
        printf("Unknown command.\r\n");
 80017f8:	4810      	ldr	r0, [pc, #64]	@ (800183c <ParseCommand+0x5a0>)
 80017fa:	f012 ffff 	bl	80147fc <puts>
 80017fe:	e000      	b.n	8001802 <ParseCommand+0x566>
		return;
 8001800:	bf00      	nop
    }
}
 8001802:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001806:	46bd      	mov	sp, r7
 8001808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800180c:	08017d28 	.word	0x08017d28
 8001810:	deadbeef 	.word	0xdeadbeef
 8001814:	08017d34 	.word	0x08017d34
 8001818:	08017d38 	.word	0x08017d38
 800181c:	08017d5c 	.word	0x08017d5c
 8001820:	08017d68 	.word	0x08017d68
 8001824:	08017d74 	.word	0x08017d74
 8001828:	08017d84 	.word	0x08017d84
 800182c:	08017d90 	.word	0x08017d90
 8001830:	08017da0 	.word	0x08017da0
 8001834:	2000032c 	.word	0x2000032c
 8001838:	20000310 	.word	0x20000310
 800183c:	08017dd0 	.word	0x08017dd0

08001840 <Date_Compare>:

static int Date_Compare(Date* a, Date* b)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
    if (a->year != b->year)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	789a      	ldrb	r2, [r3, #2]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	789b      	ldrb	r3, [r3, #2]
 8001852:	429a      	cmp	r2, r3
 8001854:	d006      	beq.n	8001864 <Date_Compare+0x24>
        return a->year - b->year;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	789b      	ldrb	r3, [r3, #2]
 800185a:	461a      	mov	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	789b      	ldrb	r3, [r3, #2]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	e012      	b.n	800188a <Date_Compare+0x4a>
    if (a->month != b->month)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	785a      	ldrb	r2, [r3, #1]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	429a      	cmp	r2, r3
 800186e:	d006      	beq.n	800187e <Date_Compare+0x3e>
        return a->month - b->month;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	461a      	mov	r2, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	785b      	ldrb	r3, [r3, #1]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	e005      	b.n	800188a <Date_Compare+0x4a>
    return a->day - b->day;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	1ad3      	subs	r3, r2, r3
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <Config_Init>:
    .light_min = 20,
    .voltage_min = 4
};

void Config_Init(void)
{
 8001898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800189c:	b084      	sub	sp, #16
 800189e:	af04      	add	r7, sp, #16
    FlashConfig_Load(&config);
 80018a0:	481e      	ldr	r0, [pc, #120]	@ (800191c <Config_Init+0x84>)
 80018a2:	f000 fbe5 	bl	8002070 <FlashConfig_Load>

    if (config.magic != CONFIG_MAGIC)
 80018a6:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <Config_Init+0x84>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001920 <Config_Init+0x88>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d015      	beq.n	80018dc <Config_Init+0x44>
    {
        config.temp_min = 15;
 80018b0:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <Config_Init+0x84>)
 80018b2:	220f      	movs	r2, #15
 80018b4:	701a      	strb	r2, [r3, #0]
        config.temp_max = 35;
 80018b6:	4b19      	ldr	r3, [pc, #100]	@ (800191c <Config_Init+0x84>)
 80018b8:	2223      	movs	r2, #35	@ 0x23
 80018ba:	705a      	strb	r2, [r3, #1]
        config.humidity_min = 20;
 80018bc:	4b17      	ldr	r3, [pc, #92]	@ (800191c <Config_Init+0x84>)
 80018be:	2214      	movs	r2, #20
 80018c0:	709a      	strb	r2, [r3, #2]
        config.light_min = 20;
 80018c2:	4b16      	ldr	r3, [pc, #88]	@ (800191c <Config_Init+0x84>)
 80018c4:	2214      	movs	r2, #20
 80018c6:	70da      	strb	r2, [r3, #3]
        config.voltage_min = 4.0;
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <Config_Init+0x84>)
 80018ca:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80018ce:	605a      	str	r2, [r3, #4]
        config.magic = CONFIG_MAGIC;
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <Config_Init+0x84>)
 80018d2:	4a13      	ldr	r2, [pc, #76]	@ (8001920 <Config_Init+0x88>)
 80018d4:	609a      	str	r2, [r3, #8]

        FlashConfig_Save(&config);
 80018d6:	4811      	ldr	r0, [pc, #68]	@ (800191c <Config_Init+0x84>)
 80018d8:	f000 fb86 	bl	8001fe8 <FlashConfig_Save>
    }

    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
        config.temp_min, config.temp_max, config.humidity_min,
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <Config_Init+0x84>)
 80018de:	781b      	ldrb	r3, [r3, #0]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 80018e0:	461d      	mov	r5, r3
        config.temp_min, config.temp_max, config.humidity_min,
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <Config_Init+0x84>)
 80018e4:	785b      	ldrb	r3, [r3, #1]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 80018e6:	461e      	mov	r6, r3
        config.temp_min, config.temp_max, config.humidity_min,
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <Config_Init+0x84>)
 80018ea:	789b      	ldrb	r3, [r3, #2]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 80018ec:	4698      	mov	r8, r3
        config.light_min, config.voltage_min);
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <Config_Init+0x84>)
 80018f0:	78db      	ldrb	r3, [r3, #3]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 80018f2:	461c      	mov	r4, r3
        config.light_min, config.voltage_min);
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <Config_Init+0x84>)
 80018f6:	685b      	ldr	r3, [r3, #4]
    printf("Loaded config from Flash: T=%d–%d, H>%d, L>%d, V>%.2f\r\n",
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe35 	bl	8000568 <__aeabi_f2d>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001906:	9400      	str	r4, [sp, #0]
 8001908:	4643      	mov	r3, r8
 800190a:	4632      	mov	r2, r6
 800190c:	4629      	mov	r1, r5
 800190e:	4805      	ldr	r0, [pc, #20]	@ (8001924 <Config_Init+0x8c>)
 8001910:	f012 ff0c 	bl	801472c <iprintf>
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800191c:	20000000 	.word	0x20000000
 8001920:	deadbeef 	.word	0xdeadbeef
 8001924:	08017de4 	.word	0x08017de4

08001928 <Config_Get>:


SystemConfig* Config_Get(void) {
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
    return &config;
 800192c:	4b02      	ldr	r3, [pc, #8]	@ (8001938 <Config_Get+0x10>)
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20000000 	.word	0x20000000

0800193c <Config_Set>:

void Config_Set(SystemConfig newConfig) {
 800193c:	b490      	push	{r4, r7}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    config = newConfig;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <Config_Set+0x24>)
 800194a:	461c      	mov	r4, r3
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001952:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bc90      	pop	{r4, r7}
 800195e:	4770      	bx	lr
 8001960:	20000000 	.word	0x20000000

08001964 <DateTimeCreate>:
    31, 28, 31, 30, 31, 30,
    31, 31, 30, 31, 30, 31
};

DateTime* DateTimeCreate(RTC_HandleTypeDef *hrtc)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	if(dt.hrtc == NULL) {
 800196c:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <DateTimeCreate+0x30>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <DateTimeCreate+0x20>

		if(hrtc == NULL) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <DateTimeCreate+0x1a>
			return NULL;
 800197a:	2300      	movs	r3, #0
 800197c:	e003      	b.n	8001986 <DateTimeCreate+0x22>
		}

		dt.hrtc = hrtc;
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <DateTimeCreate+0x30>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6013      	str	r3, [r2, #0]

	}

	return &dt;
 8001984:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <DateTimeCreate+0x30>)
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200002ec 	.word	0x200002ec

08001998 <DateTimeGet>:

DateTimeStatus DateTimeGet(DateTime *dt)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	if(dt == NULL) {
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <DateTimeGet+0x12>
		return DateTime_INVALID;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e022      	b.n	80019f0 <DateTimeGet+0x58>
	}

	RTC_TimeTypeDef CurrentTime;
	RTC_DateTypeDef CurrentDate;

	if (HAL_RTC_GetTime(dt->hrtc, &CurrentTime, RTC_FORMAT_BCD) != HAL_OK) {
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f107 010c 	add.w	r1, r7, #12
 80019b2:	2201      	movs	r2, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f006 f888 	bl	8007aca <HAL_RTC_GetTime>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <DateTimeGet+0x2c>
		return DateTime_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e015      	b.n	80019f0 <DateTimeGet+0x58>
	}

	if (HAL_RTC_GetDate(dt->hrtc, &CurrentDate, RTC_FORMAT_BCD) != HAL_OK) {
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f107 0108 	add.w	r1, r7, #8
 80019cc:	2201      	movs	r2, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f006 f95e 	bl	8007c90 <HAL_RTC_GetDate>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <DateTimeGet+0x46>
		return DateTime_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e008      	b.n	80019f0 <DateTimeGet+0x58>
	}

	PopulateDateTime(dt, &CurrentTime, &CurrentDate);
 80019de:	f107 0208 	add.w	r2, r7, #8
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f882 	bl	8001af2 <PopulateDateTime>

	return DateTime_OK;
 80019ee:	2300      	movs	r3, #0

}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <DateTimeSetTime>:

DateTimeStatus DateTimeSetTime(DateTime *dt, uint8_t hours, uint8_t minutes, uint8_t seconds)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	4608      	mov	r0, r1
 8001a02:	4611      	mov	r1, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	70fb      	strb	r3, [r7, #3]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	70bb      	strb	r3, [r7, #2]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	707b      	strb	r3, [r7, #1]
	if(dt == NULL || hours >= 24 || minutes >= 60 || seconds >= 60) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <DateTimeSetTime+0x32>
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	2b17      	cmp	r3, #23
 8001a1c:	d805      	bhi.n	8001a2a <DateTimeSetTime+0x32>
 8001a1e:	78bb      	ldrb	r3, [r7, #2]
 8001a20:	2b3b      	cmp	r3, #59	@ 0x3b
 8001a22:	d802      	bhi.n	8001a2a <DateTimeSetTime+0x32>
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b3b      	cmp	r3, #59	@ 0x3b
 8001a28:	d901      	bls.n	8001a2e <DateTimeSetTime+0x36>
			return DateTime_INVALID;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e01f      	b.n	8001a6e <DateTimeSetTime+0x76>
	}

	RTC_TimeTypeDef time;

	time.Hours = ConvertDec2Bcd(hours);
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f8b7 	bl	8001ba4 <ConvertDec2Bcd>
 8001a36:	4603      	mov	r3, r0
 8001a38:	733b      	strb	r3, [r7, #12]
	time.Minutes = ConvertDec2Bcd(minutes);
 8001a3a:	78bb      	ldrb	r3, [r7, #2]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 f8b1 	bl	8001ba4 <ConvertDec2Bcd>
 8001a42:	4603      	mov	r3, r0
 8001a44:	737b      	strb	r3, [r7, #13]
	time.Seconds = ConvertDec2Bcd(seconds);
 8001a46:	787b      	ldrb	r3, [r7, #1]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f8ab 	bl	8001ba4 <ConvertDec2Bcd>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73bb      	strb	r3, [r7, #14]

	if (HAL_RTC_SetTime(dt->hrtc, &time, RTC_FORMAT_BCD) != HAL_OK) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f107 010c 	add.w	r1, r7, #12
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f005 ff97 	bl	8007990 <HAL_RTC_SetTime>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <DateTimeSetTime+0x74>
		return DateTime_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <DateTimeSetTime+0x76>
	}

	return DateTime_OK;
 8001a6c:	2300      	movs	r3, #0

}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <DateTimeSetDate>:

DateTimeStatus DateTimeSetDate(DateTime *dt, uint8_t year, uint8_t month, uint8_t day)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b084      	sub	sp, #16
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	4608      	mov	r0, r1
 8001a80:	4611      	mov	r1, r2
 8001a82:	461a      	mov	r2, r3
 8001a84:	4603      	mov	r3, r0
 8001a86:	70fb      	strb	r3, [r7, #3]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	70bb      	strb	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	707b      	strb	r3, [r7, #1]
	if(dt == NULL || month > 12 || day > 31) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <DateTimeSetDate+0x2c>
 8001a96:	78bb      	ldrb	r3, [r7, #2]
 8001a98:	2b0c      	cmp	r3, #12
 8001a9a:	d802      	bhi.n	8001aa2 <DateTimeSetDate+0x2c>
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b1f      	cmp	r3, #31
 8001aa0:	d901      	bls.n	8001aa6 <DateTimeSetDate+0x30>
			return DateTime_INVALID;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e021      	b.n	8001aea <DateTimeSetDate+0x74>
	}

	RTC_DateTypeDef date;

	date.Year = ConvertDec2Bcd(year);
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f87b 	bl	8001ba4 <ConvertDec2Bcd>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	73fb      	strb	r3, [r7, #15]
	date.Month = ConvertDec2Bcd(month);
 8001ab2:	78bb      	ldrb	r3, [r7, #2]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 f875 	bl	8001ba4 <ConvertDec2Bcd>
 8001aba:	4603      	mov	r3, r0
 8001abc:	737b      	strb	r3, [r7, #13]
	date.Date = ConvertDec2Bcd(day);
 8001abe:	787b      	ldrb	r3, [r7, #1]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f86f 	bl	8001ba4 <ConvertDec2Bcd>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	73bb      	strb	r3, [r7, #14]
	date.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001aca:	2302      	movs	r3, #2
 8001acc:	733b      	strb	r3, [r7, #12]

	if (HAL_RTC_SetDate(dt->hrtc, &date, RTC_FORMAT_BCD) != HAL_OK) {
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f107 010c 	add.w	r1, r7, #12
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f006 f852 	bl	8007b82 <HAL_RTC_SetDate>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <DateTimeSetDate+0x72>
		return DateTime_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <DateTimeSetDate+0x74>
	}

	return DateTime_OK;
 8001ae8:	2300      	movs	r3, #0

}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <PopulateDateTime>:

	return DateTime_OK;
}

static void PopulateDateTime(DateTime* dt, RTC_TimeTypeDef* CurrentTime, RTC_DateTypeDef* CurrentDate)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
	dt->time.hours = ConvertBcd2Dec(CurrentTime->Hours);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f835 	bl	8001b72 <ConvertBcd2Dec>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	71da      	strb	r2, [r3, #7]
	dt->time.minutes = ConvertBcd2Dec(CurrentTime->Minutes);
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f82c 	bl	8001b72 <ConvertBcd2Dec>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	721a      	strb	r2, [r3, #8]
	dt->time.seconds = ConvertBcd2Dec(CurrentTime->Seconds);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	789b      	ldrb	r3, [r3, #2]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f823 	bl	8001b72 <ConvertBcd2Dec>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	725a      	strb	r2, [r3, #9]

	dt->date.year  = ConvertBcd2Dec(CurrentDate->Year);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	78db      	ldrb	r3, [r3, #3]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f000 f81a 	bl	8001b72 <ConvertBcd2Dec>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	719a      	strb	r2, [r3, #6]
	dt->date.month = ConvertBcd2Dec(CurrentDate->Month);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	785b      	ldrb	r3, [r3, #1]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f811 	bl	8001b72 <ConvertBcd2Dec>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	715a      	strb	r2, [r3, #5]
	dt->date.day   = ConvertBcd2Dec(CurrentDate->Date);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	789b      	ldrb	r3, [r3, #2]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f808 	bl	8001b72 <ConvertBcd2Dec>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	711a      	strb	r2, [r3, #4]
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <ConvertBcd2Dec>:

static uint8_t ConvertBcd2Dec(uint8_t byte)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
	return ((byte >> 4) * 10) + (byte & 0x0F);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	091b      	lsrs	r3, r3, #4
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4413      	add	r3, r2
 8001b96:	b2db      	uxtb	r3, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <ConvertDec2Bcd>:

static uint8_t ConvertDec2Bcd(uint8_t byte)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	return ((byte / 10) << 4) | (byte % 10);
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8001bec <ConvertDec2Bcd+0x48>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	08db      	lsrs	r3, r3, #3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	b258      	sxtb	r0, r3
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <ConvertDec2Bcd+0x48>)
 8001bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8001bc8:	08d9      	lsrs	r1, r3, #3
 8001bca:	460b      	mov	r3, r1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	4303      	orrs	r3, r0
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	cccccccd 	.word	0xcccccccd

08001bf0 <DateTime_NextDay>:

void DateTime_NextDay(Date* date)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    if (!date) return;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d027      	beq.n	8001c4e <DateTime_NextDay+0x5e>

    date->day++;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	701a      	strb	r2, [r3, #0]

    uint8_t maxDay = daysInMonth[date->month - 1];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	785b      	ldrb	r3, [r3, #1]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	4a12      	ldr	r2, [pc, #72]	@ (8001c5c <DateTime_NextDay+0x6c>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	73fb      	strb	r3, [r7, #15]

    if (date->day > maxDay)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d217      	bcs.n	8001c50 <DateTime_NextDay+0x60>
    {
        date->day = 1;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	701a      	strb	r2, [r3, #0]
        date->month++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	785b      	ldrb	r3, [r3, #1]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	705a      	strb	r2, [r3, #1]

        if (date->month > 12)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	785b      	ldrb	r3, [r3, #1]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d90a      	bls.n	8001c50 <DateTime_NextDay+0x60>
        {
            date->month = 1;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	705a      	strb	r2, [r3, #1]
            date->year++;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	789b      	ldrb	r3, [r3, #2]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	709a      	strb	r2, [r3, #2]
 8001c4c:	e000      	b.n	8001c50 <DateTime_NextDay+0x60>
    if (!date) return;
 8001c4e:	bf00      	nop
        }
    }
}
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	080181c0 	.word	0x080181c0

08001c60 <DateTime_Compare>:

int DateTime_Compare(const DateTime* a, const DateTime* b)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
    if (a->date.year != b->date.year)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	799a      	ldrb	r2, [r3, #6]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	799b      	ldrb	r3, [r3, #6]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d006      	beq.n	8001c84 <DateTime_Compare+0x24>
        return a->date.year - b->date.year;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	799b      	ldrb	r3, [r3, #6]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	799b      	ldrb	r3, [r3, #6]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	e039      	b.n	8001cf8 <DateTime_Compare+0x98>
    if (a->date.month != b->date.month)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	795a      	ldrb	r2, [r3, #5]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d006      	beq.n	8001c9e <DateTime_Compare+0x3e>
        return a->date.month - b->date.month;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	795b      	ldrb	r3, [r3, #5]
 8001c94:	461a      	mov	r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	795b      	ldrb	r3, [r3, #5]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	e02c      	b.n	8001cf8 <DateTime_Compare+0x98>
    if (a->date.day != b->date.day)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	791a      	ldrb	r2, [r3, #4]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d006      	beq.n	8001cb8 <DateTime_Compare+0x58>
        return a->date.day - b->date.day;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	791b      	ldrb	r3, [r3, #4]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	e01f      	b.n	8001cf8 <DateTime_Compare+0x98>
    if (a->time.hours != b->time.hours)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	79da      	ldrb	r2, [r3, #7]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	79db      	ldrb	r3, [r3, #7]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d006      	beq.n	8001cd2 <DateTime_Compare+0x72>
        return a->time.hours - b->time.hours;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	79db      	ldrb	r3, [r3, #7]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	79db      	ldrb	r3, [r3, #7]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	e012      	b.n	8001cf8 <DateTime_Compare+0x98>
    if (a->time.minutes != b->time.minutes)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7a1a      	ldrb	r2, [r3, #8]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	7a1b      	ldrb	r3, [r3, #8]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d006      	beq.n	8001cec <DateTime_Compare+0x8c>
        return a->time.minutes - b->time.minutes;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7a1b      	ldrb	r3, [r3, #8]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	7a1b      	ldrb	r3, [r3, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	e005      	b.n	8001cf8 <DateTime_Compare+0x98>
    return a->time.seconds - b->time.seconds;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7a5b      	ldrb	r3, [r3, #9]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	7a5b      	ldrb	r3, [r3, #9]
 8001cf6:	1ad3      	subs	r3, r2, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <DHT_Init>:

DHT11 dht = {0};
DHT11_Data data = {0};

DHT11* DHT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_PIN, TIM_HandleTypeDef* _timer)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	817b      	strh	r3, [r7, #10]
	dht.port = GPIOx;
 8001d12:	4a08      	ldr	r2, [pc, #32]	@ (8001d34 <DHT_Init+0x30>)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6013      	str	r3, [r2, #0]
	dht.pin = GPIO_PIN;
 8001d18:	4a06      	ldr	r2, [pc, #24]	@ (8001d34 <DHT_Init+0x30>)
 8001d1a:	897b      	ldrh	r3, [r7, #10]
 8001d1c:	8093      	strh	r3, [r2, #4]
	dht._timer = _timer;
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <DHT_Init+0x30>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6093      	str	r3, [r2, #8]

	return &dht;
 8001d24:	4b03      	ldr	r3, [pc, #12]	@ (8001d34 <DHT_Init+0x30>)
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200002f8 	.word	0x200002f8

08001d38 <DHT11_SetAsInput>:

void DHT11_SetAsInput(DHT11* dht)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->pin;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	889b      	ldrh	r3, [r3, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f107 020c 	add.w	r2, r7, #12
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 f851 	bl	8005e10 <HAL_GPIO_Init>
}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <DHT11_SetAsOutput>:

void DHT11_SetAsOutput(DHT11* dht)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b088      	sub	sp, #32
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = dht->pin;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	889b      	ldrh	r3, [r3, #4]
 8001d92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f107 020c 	add.w	r2, r7, #12
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f004 f830 	bl	8005e10 <HAL_GPIO_Init>
}
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <DHT11_Starter>:

void DHT11_Starter(DHT11* dht)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	DHT11_SetAsOutput(dht);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffd8 	bl	8001d76 <DHT11_SetAsOutput>

	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	889b      	ldrh	r3, [r3, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f004 f9df 	bl	8006194 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(dht->_timer) < 18000);
 8001de0:	bf00      	nop
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	f244 624f 	movw	r2, #17999	@ 0x464f
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d9f7      	bls.n	8001de2 <DHT11_Starter+0x2a>

	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_SET);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	889b      	ldrh	r3, [r3, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f004 f9c9 	bl	8006194 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(dht->_timer) < 40);
 8001e0c:	bf00      	nop
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	2b27      	cmp	r3, #39	@ 0x27
 8001e18:	d9f9      	bls.n	8001e0e <DHT11_Starter+0x56>

	DHT11_SetAsInput(dht);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff8c 	bl	8001d38 <DHT11_SetAsInput>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <DHT11_ReadData>:

uint8_t DHT11_ReadData(DHT11 *dht, DHT11_Data *data)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
	uint8_t buffer[5] = {0};
 8001e32:	f107 0308 	add.w	r3, r7, #8
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	711a      	strb	r2, [r3, #4]

	DHT11_Starter(dht);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ffbb 	bl	8001db8 <DHT11_Starter>

	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)
 8001e4c:	e007      	b.n	8001e5e <DHT11_ReadData+0x36>
	{
		if (__HAL_TIM_GET_COUNTER(dht->_timer) > 100) return 3;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e56:	2b64      	cmp	r3, #100	@ 0x64
 8001e58:	d901      	bls.n	8001e5e <DHT11_ReadData+0x36>
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e071      	b.n	8001f42 <DHT11_ReadData+0x11a>
	while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	889b      	ldrh	r3, [r3, #4]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4610      	mov	r0, r2
 8001e6a:	f004 f97b 	bl	8006164 <HAL_GPIO_ReadPin>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ec      	beq.n	8001e4e <DHT11_ReadData+0x26>
	}

	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 8001e7e:	e007      	b.n	8001e90 <DHT11_ReadData+0x68>
	{
		if (__HAL_TIM_GET_COUNTER(dht->_timer) > 100) return 3;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	2b64      	cmp	r3, #100	@ 0x64
 8001e8a:	d901      	bls.n	8001e90 <DHT11_ReadData+0x68>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e058      	b.n	8001f42 <DHT11_ReadData+0x11a>
	while (HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	889b      	ldrh	r3, [r3, #4]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	f004 f962 	bl	8006164 <HAL_GPIO_ReadPin>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d0ec      	beq.n	8001e80 <DHT11_ReadData+0x58>
	}

	for (uint8_t i = 0; i < 40; i++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73fb      	strb	r3, [r7, #15]
 8001eaa:	e027      	b.n	8001efc <DHT11_ReadData+0xd4>
		buffer[i / 8] <<= 1;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	08db      	lsrs	r3, r3, #3
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	3310      	adds	r3, #16
 8001eb6:	443b      	add	r3, r7
 8001eb8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	f101 0310 	add.w	r3, r1, #16
 8001ec6:	443b      	add	r3, r7
 8001ec8:	f803 2c08 	strb.w	r2, [r3, #-8]
		buffer[i / 8] |= DHT11_ReadBit(dht);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f83c 	bl	8001f4a <DHT11_ReadBit>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	4613      	mov	r3, r2
 8001ede:	3310      	adds	r3, #16
 8001ee0:	443b      	add	r3, r7
 8001ee2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001ee6:	4611      	mov	r1, r2
 8001ee8:	4303      	orrs	r3, r0
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	f101 0310 	add.w	r3, r1, #16
 8001ef0:	443b      	add	r3, r7
 8001ef2:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t i = 0; i < 40; i++) {
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b27      	cmp	r3, #39	@ 0x27
 8001f00:	d9d4      	bls.n	8001eac <DHT11_ReadData+0x84>
	}

	data->humidity_int = buffer[0];
 8001f02:	7a3a      	ldrb	r2, [r7, #8]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	701a      	strb	r2, [r3, #0]
	data->humidity_dec = buffer[1];
 8001f08:	7a7a      	ldrb	r2, [r7, #9]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	705a      	strb	r2, [r3, #1]
	data->temperature_int = buffer[2];
 8001f0e:	7aba      	ldrb	r2, [r7, #10]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	709a      	strb	r2, [r3, #2]
	data->temperature_dec = buffer[3];
 8001f14:	7afa      	ldrb	r2, [r7, #11]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	70da      	strb	r2, [r3, #3]
	data->checksum = buffer[4];
 8001f1a:	7b3a      	ldrb	r2, [r7, #12]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	711a      	strb	r2, [r3, #4]


	uint8_t checksum = buffer[0] + buffer[1] + buffer[2] + buffer[3];
 8001f20:	7a3a      	ldrb	r2, [r7, #8]
 8001f22:	7a7b      	ldrb	r3, [r7, #9]
 8001f24:	4413      	add	r3, r2
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	7abb      	ldrb	r3, [r7, #10]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	4413      	add	r3, r2
 8001f32:	73bb      	strb	r3, [r7, #14]
	return (checksum == buffer[4]) ? 0 : 2;
 8001f34:	7b3b      	ldrb	r3, [r7, #12]
 8001f36:	7bba      	ldrb	r2, [r7, #14]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d101      	bne.n	8001f40 <DHT11_ReadData+0x118>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e000      	b.n	8001f42 <DHT11_ReadData+0x11a>
 8001f40:	2302      	movs	r3, #2
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <DHT11_ReadBit>:

uint8_t DHT11_ReadBit(DHT11 *dht)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b084      	sub	sp, #16
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET);
 8001f52:	bf00      	nop
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	889b      	ldrh	r3, [r3, #4]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4610      	mov	r0, r2
 8001f60:	f004 f900 	bl	8006164 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f4      	beq.n	8001f54 <DHT11_ReadBit+0xa>

	__HAL_TIM_SET_COUNTER(dht->_timer, 0);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET);
 8001f74:	bf00      	nop
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	889b      	ldrh	r3, [r3, #4]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4610      	mov	r0, r2
 8001f82:	f004 f8ef 	bl	8006164 <HAL_GPIO_ReadPin>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d0f4      	beq.n	8001f76 <DHT11_ReadBit+0x2c>
	uint32_t pulse_length = __HAL_TIM_GET_COUNTER(dht->_timer);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	60fb      	str	r3, [r7, #12]

	return (pulse_length > 50) ? 1 : 0;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b32      	cmp	r3, #50	@ 0x32
 8001f9a:	bf8c      	ite	hi
 8001f9c:	2301      	movhi	r3, #1
 8001f9e:	2300      	movls	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <MX_DMA_Init+0x38>)
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <MX_DMA_Init+0x38>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <MX_DMA_Init+0x38>)
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2105      	movs	r1, #5
 8001fce:	200b      	movs	r0, #11
 8001fd0:	f003 f9dd 	bl	800538e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fd4:	200b      	movs	r0, #11
 8001fd6:	f003 f9f6 	bl	80053c6 <HAL_NVIC_EnableIRQ>

}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000

08001fe8 <FlashConfig_Save>:
#include <string.h>

#define FLASH_CONFIG_START_ADDR  0x08080000

uint8_t FlashConfig_Save(SystemConfig* cfg)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b08b      	sub	sp, #44	@ 0x2c
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8001ff0:	f003 fce6 	bl	80059c0 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef eraseInit = {
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <FlashConfig_Save+0x84>)
 8001ff6:	f107 0410 	add.w	r4, r7, #16
 8001ffa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ffc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .NbPages = 1,
        .Banks = FLASH_BANK_2
    };

    uint32_t pageError;
    if (HAL_FLASHEx_Erase(&eraseInit, &pageError) != HAL_OK) {
 8002000:	f107 020c 	add.w	r2, r7, #12
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fdbc 	bl	8005b88 <HAL_FLASHEx_Erase>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <FlashConfig_Save+0x36>
        HAL_FLASH_Lock();
 8002016:	f003 fcf5 	bl	8005a04 <HAL_FLASH_Lock>
        return 0;
 800201a:	2300      	movs	r3, #0
 800201c:	e022      	b.n	8002064 <FlashConfig_Save+0x7c>
    }

    uint64_t* data = (uint64_t*)cfg;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
    for (size_t i = 0; i < sizeof(SystemConfig); i += 8) {
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
 8002026:	e017      	b.n	8002058 <FlashConfig_Save+0x70>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_CONFIG_START_ADDR + i, *data++) != HAL_OK) {
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 800202e:	f501 2100 	add.w	r1, r1, #524288	@ 0x80000
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	f103 0208 	add.w	r2, r3, #8
 8002038:	627a      	str	r2, [r7, #36]	@ 0x24
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	2000      	movs	r0, #0
 8002040:	f003 fc52 	bl	80058e8 <HAL_FLASH_Program>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <FlashConfig_Save+0x6a>
            HAL_FLASH_Lock();
 800204a:	f003 fcdb 	bl	8005a04 <HAL_FLASH_Lock>
            return 0;
 800204e:	2300      	movs	r3, #0
 8002050:	e008      	b.n	8002064 <FlashConfig_Save+0x7c>
    for (size_t i = 0; i < sizeof(SystemConfig); i += 8) {
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	3308      	adds	r3, #8
 8002056:	623b      	str	r3, [r7, #32]
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	2b0b      	cmp	r3, #11
 800205c:	d9e4      	bls.n	8002028 <FlashConfig_Save+0x40>
        }
    }

    HAL_FLASH_Lock();
 800205e:	f003 fcd1 	bl	8005a04 <HAL_FLASH_Lock>
    return 1;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	372c      	adds	r7, #44	@ 0x2c
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	08017e20 	.word	0x08017e20

08002070 <FlashConfig_Load>:

uint8_t FlashConfig_Load(SystemConfig* cfg)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    memcpy(cfg, (void*)FLASH_CONFIG_START_ADDR, sizeof(SystemConfig));
 8002078:	220c      	movs	r2, #12
 800207a:	4904      	ldr	r1, [pc, #16]	@ (800208c <FlashConfig_Load+0x1c>)
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f012 fccf 	bl	8014a20 <memcpy>

    // You can add a checksum or magic value check here later
    return 1;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	08080000 	.word	0x08080000

08002090 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	timID = osTimerNew(SampleData, osTimerPeriodic, NULL, NULL);
 8002094:	2300      	movs	r3, #0
 8002096:	2200      	movs	r2, #0
 8002098:	2101      	movs	r1, #1
 800209a:	483d      	ldr	r0, [pc, #244]	@ (8002190 <MX_FREERTOS_Init+0x100>)
 800209c:	f00c f92c 	bl	800e2f8 <osTimerNew>
 80020a0:	4603      	mov	r3, r0
 80020a2:	4a3c      	ldr	r2, [pc, #240]	@ (8002194 <MX_FREERTOS_Init+0x104>)
 80020a4:	6013      	str	r3, [r2, #0]
	osTimerStart(timID, delay);
 80020a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002194 <MX_FREERTOS_Init+0x104>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a3b      	ldr	r2, [pc, #236]	@ (8002198 <MX_FREERTOS_Init+0x108>)
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00c f99d 	bl	800e3f0 <osTimerStart>
	HAL_TIM_Base_Start(&htim6);
 80020b6:	4839      	ldr	r0, [pc, #228]	@ (800219c <MX_FREERTOS_Init+0x10c>)
 80020b8:	f006 fb86 	bl	80087c8 <HAL_TIM_Base_Start>
	DHT_Init(GPIOB, GPIO_PIN_5, &htim6);
 80020bc:	4a37      	ldr	r2, [pc, #220]	@ (800219c <MX_FREERTOS_Init+0x10c>)
 80020be:	2120      	movs	r1, #32
 80020c0:	4837      	ldr	r0, [pc, #220]	@ (80021a0 <MX_FREERTOS_Init+0x110>)
 80020c2:	f7ff fe1f 	bl	8001d04 <DHT_Init>
	SD_Init();
 80020c6:	f000 fd87 	bl	8002bd8 <SD_Init>
	g_dt = DateTimeCreate(&hrtc);
 80020ca:	4836      	ldr	r0, [pc, #216]	@ (80021a4 <MX_FREERTOS_Init+0x114>)
 80020cc:	f7ff fc4a 	bl	8001964 <DateTimeCreate>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4a35      	ldr	r2, [pc, #212]	@ (80021a8 <MX_FREERTOS_Init+0x118>)
 80020d4:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 80020d6:	2201      	movs	r2, #1
 80020d8:	4934      	ldr	r1, [pc, #208]	@ (80021ac <MX_FREERTOS_Init+0x11c>)
 80020da:	4835      	ldr	r0, [pc, #212]	@ (80021b0 <MX_FREERTOS_Init+0x120>)
 80020dc:	f007 fa24 	bl	8009528 <HAL_UART_Receive_IT>
	Config_Init();
 80020e0:	f7ff fbda 	bl	8001898 <Config_Init>
	messageQueueHandle = osMessageQueueNew(10, sizeof(MessageData), NULL);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2114      	movs	r1, #20
 80020e8:	200a      	movs	r0, #10
 80020ea:	f00c fd1d 	bl	800eb28 <osMessageQueueNew>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a30      	ldr	r2, [pc, #192]	@ (80021b4 <MX_FREERTOS_Init+0x124>)
 80020f2:	6013      	str	r3, [r2, #0]
	eventQueueHandle = osMessageQueueNew(10, sizeof(SystemEvent), NULL);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2109      	movs	r1, #9
 80020f8:	200a      	movs	r0, #10
 80020fa:	f00c fd15 	bl	800eb28 <osMessageQueueNew>
 80020fe:	4603      	mov	r3, r0
 8002100:	4a2d      	ldr	r2, [pc, #180]	@ (80021b8 <MX_FREERTOS_Init+0x128>)
 8002102:	6013      	str	r3, [r2, #0]
	commEventFlags = osEventFlagsNew(NULL);
 8002104:	2000      	movs	r0, #0
 8002106:	f00c f9d8 	bl	800e4ba <osEventFlagsNew>
 800210a:	4603      	mov	r3, r0
 800210c:	4a2b      	ldr	r2, [pc, #172]	@ (80021bc <MX_FREERTOS_Init+0x12c>)
 800210e:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	sdMutexHandle = osMutexNew(&sdMutex_attributes);
 8002110:	482b      	ldr	r0, [pc, #172]	@ (80021c0 <MX_FREERTOS_Init+0x130>)
 8002112:	f00c fab8 	bl	800e686 <osMutexNew>
 8002116:	4603      	mov	r3, r0
 8002118:	4a2a      	ldr	r2, [pc, #168]	@ (80021c4 <MX_FREERTOS_Init+0x134>)
 800211a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800211c:	4a2a      	ldr	r2, [pc, #168]	@ (80021c8 <MX_FREERTOS_Init+0x138>)
 800211e:	2100      	movs	r1, #0
 8002120:	482a      	ldr	r0, [pc, #168]	@ (80021cc <MX_FREERTOS_Init+0x13c>)
 8002122:	f00c f827 	bl	800e174 <osThreadNew>
 8002126:	4603      	mov	r3, r0
 8002128:	4a29      	ldr	r2, [pc, #164]	@ (80021d0 <MX_FREERTOS_Init+0x140>)
 800212a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  dhtTaskHandle = osThreadNew(DHT_Task, NULL, &dhtTask_attributes);
 800212c:	4a29      	ldr	r2, [pc, #164]	@ (80021d4 <MX_FREERTOS_Init+0x144>)
 800212e:	2100      	movs	r1, #0
 8002130:	4829      	ldr	r0, [pc, #164]	@ (80021d8 <MX_FREERTOS_Init+0x148>)
 8002132:	f00c f81f 	bl	800e174 <osThreadNew>
 8002136:	4603      	mov	r3, r0
 8002138:	4a28      	ldr	r2, [pc, #160]	@ (80021dc <MX_FREERTOS_Init+0x14c>)
 800213a:	6013      	str	r3, [r2, #0]
  controllerTaskHandle = osThreadNew(ControllerTask, NULL, &controllerTask_attributes);
 800213c:	4a28      	ldr	r2, [pc, #160]	@ (80021e0 <MX_FREERTOS_Init+0x150>)
 800213e:	2100      	movs	r1, #0
 8002140:	4828      	ldr	r0, [pc, #160]	@ (80021e4 <MX_FREERTOS_Init+0x154>)
 8002142:	f00c f817 	bl	800e174 <osThreadNew>
 8002146:	4603      	mov	r3, r0
 8002148:	4a27      	ldr	r2, [pc, #156]	@ (80021e8 <MX_FREERTOS_Init+0x158>)
 800214a:	6013      	str	r3, [r2, #0]
  loggerTaskHandle = osThreadNew(LoggerTask, NULL, &loggerTask_attributes);
 800214c:	4a27      	ldr	r2, [pc, #156]	@ (80021ec <MX_FREERTOS_Init+0x15c>)
 800214e:	2100      	movs	r1, #0
 8002150:	4827      	ldr	r0, [pc, #156]	@ (80021f0 <MX_FREERTOS_Init+0x160>)
 8002152:	f00c f80f 	bl	800e174 <osThreadNew>
 8002156:	4603      	mov	r3, r0
 8002158:	4a26      	ldr	r2, [pc, #152]	@ (80021f4 <MX_FREERTOS_Init+0x164>)
 800215a:	6013      	str	r3, [r2, #0]
  eventTaskHandle = osThreadNew(EventTask, NULL, &eventTask_attributes);
 800215c:	4a26      	ldr	r2, [pc, #152]	@ (80021f8 <MX_FREERTOS_Init+0x168>)
 800215e:	2100      	movs	r1, #0
 8002160:	4826      	ldr	r0, [pc, #152]	@ (80021fc <MX_FREERTOS_Init+0x16c>)
 8002162:	f00c f807 	bl	800e174 <osThreadNew>
 8002166:	4603      	mov	r3, r0
 8002168:	4a25      	ldr	r2, [pc, #148]	@ (8002200 <MX_FREERTOS_Init+0x170>)
 800216a:	6013      	str	r3, [r2, #0]
  commTaskHandle = osThreadNew(CommTask, NULL, &commTask_attributes);
 800216c:	4a25      	ldr	r2, [pc, #148]	@ (8002204 <MX_FREERTOS_Init+0x174>)
 800216e:	2100      	movs	r1, #0
 8002170:	4825      	ldr	r0, [pc, #148]	@ (8002208 <MX_FREERTOS_Init+0x178>)
 8002172:	f00b ffff 	bl	800e174 <osThreadNew>
 8002176:	4603      	mov	r3, r0
 8002178:	4a24      	ldr	r2, [pc, #144]	@ (800220c <MX_FREERTOS_Init+0x17c>)
 800217a:	6013      	str	r3, [r2, #0]
  keepAliveTaskHandle = osThreadNew(KeepAliveTask, NULL, &keepAliveTask_attributes);
 800217c:	4a24      	ldr	r2, [pc, #144]	@ (8002210 <MX_FREERTOS_Init+0x180>)
 800217e:	2100      	movs	r1, #0
 8002180:	4824      	ldr	r0, [pc, #144]	@ (8002214 <MX_FREERTOS_Init+0x184>)
 8002182:	f00b fff7 	bl	800e174 <osThreadNew>
 8002186:	4603      	mov	r3, r0
 8002188:	4a23      	ldr	r2, [pc, #140]	@ (8002218 <MX_FREERTOS_Init+0x188>)
 800218a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	0800222d 	.word	0x0800222d
 8002194:	200003f0 	.word	0x200003f0
 8002198:	20000010 	.word	0x20000010
 800219c:	20000954 	.word	0x20000954
 80021a0:	48000400 	.word	0x48000400
 80021a4:	20000414 	.word	0x20000414
 80021a8:	2000032c 	.word	0x2000032c
 80021ac:	20000a28 	.word	0x20000a28
 80021b0:	200009a0 	.word	0x200009a0
 80021b4:	2000030c 	.word	0x2000030c
 80021b8:	20000310 	.word	0x20000310
 80021bc:	20000314 	.word	0x20000314
 80021c0:	080181cc 	.word	0x080181cc
 80021c4:	200003f4 	.word	0x200003f4
 80021c8:	080182b4 	.word	0x080182b4
 80021cc:	0800221d 	.word	0x0800221d
 80021d0:	20000410 	.word	0x20000410
 80021d4:	080181dc 	.word	0x080181dc
 80021d8:	080022bd 	.word	0x080022bd
 80021dc:	200003f8 	.word	0x200003f8
 80021e0:	08018200 	.word	0x08018200
 80021e4:	08002389 	.word	0x08002389
 80021e8:	200003fc 	.word	0x200003fc
 80021ec:	08018224 	.word	0x08018224
 80021f0:	0800244d 	.word	0x0800244d
 80021f4:	20000400 	.word	0x20000400
 80021f8:	08018248 	.word	0x08018248
 80021fc:	080026bd 	.word	0x080026bd
 8002200:	20000404 	.word	0x20000404
 8002204:	0801826c 	.word	0x0801826c
 8002208:	08002765 	.word	0x08002765
 800220c:	20000408 	.word	0x20000408
 8002210:	08018290 	.word	0x08018290
 8002214:	08002819 	.word	0x08002819
 8002218:	2000040c 	.word	0x2000040c

0800221c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002224:	2001      	movs	r0, #1
 8002226:	f00c f837 	bl	800e298 <osDelay>
 800222a:	e7fb      	b.n	8002224 <StartDefaultTask+0x8>

0800222c <SampleData>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void SampleData()
{
 800222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222e:	b085      	sub	sp, #20
 8002230:	af04      	add	r7, sp, #16

	xTaskNotifyGive(dhtTaskHandle);
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <SampleData+0x74>)
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	2202      	movs	r2, #2
 800223a:	2100      	movs	r1, #0
 800223c:	f00f fa32 	bl	80116a4 <xTaskGenericNotify>

	HAL_ADC_Start_DMA(&hadc1, buffer, length);
 8002240:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <SampleData+0x78>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4918      	ldr	r1, [pc, #96]	@ (80022a8 <SampleData+0x7c>)
 8002248:	4818      	ldr	r0, [pc, #96]	@ (80022ac <SampleData+0x80>)
 800224a:	f001 ff95 	bl	8004178 <HAL_ADC_Start_DMA>

	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
									message.temperature_int,
 800224e:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <SampleData+0x84>)
 8002250:	781b      	ldrb	r3, [r3, #0]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 8002252:	461c      	mov	r4, r3
									message.temperature_dec,
 8002254:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <SampleData+0x84>)
 8002256:	785b      	ldrb	r3, [r3, #1]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 8002258:	461d      	mov	r5, r3
									message.humidity_int,
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <SampleData+0x84>)
 800225c:	789b      	ldrb	r3, [r3, #2]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 800225e:	461e      	mov	r6, r3
									message.humidity_dec,
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <SampleData+0x84>)
 8002262:	78db      	ldrb	r3, [r3, #3]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 8002264:	461a      	mov	r2, r3
									message.potent_int,
 8002266:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <SampleData+0x84>)
 8002268:	889b      	ldrh	r3, [r3, #4]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 800226a:	4619      	mov	r1, r3
									message.potent_dec,
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <SampleData+0x84>)
 800226e:	88db      	ldrh	r3, [r3, #6]
	printf("Temperature: %d.%d°C, Humidity: %d.%d%%, Potent: %d.%3dV, Light: %lu%%\r\n",
 8002270:	4618      	mov	r0, r3
 8002272:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <SampleData+0x84>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	9303      	str	r3, [sp, #12]
 8002278:	9002      	str	r0, [sp, #8]
 800227a:	9101      	str	r1, [sp, #4]
 800227c:	9200      	str	r2, [sp, #0]
 800227e:	4633      	mov	r3, r6
 8002280:	462a      	mov	r2, r5
 8002282:	4621      	mov	r1, r4
 8002284:	480b      	ldr	r0, [pc, #44]	@ (80022b4 <SampleData+0x88>)
 8002286:	f012 fa51 	bl	801472c <iprintf>
									message.light
									);

	xTaskNotifyGive(controllerTaskHandle);
 800228a:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <SampleData+0x8c>)
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	2300      	movs	r3, #0
 8002290:	2202      	movs	r2, #2
 8002292:	2100      	movs	r1, #0
 8002294:	f00f fa06 	bl	80116a4 <xTaskGenericNotify>
}
 8002298:	bf00      	nop
 800229a:	3704      	adds	r7, #4
 800229c:	46bd      	mov	sp, r7
 800229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a0:	200003f8 	.word	0x200003f8
 80022a4:	2000000c 	.word	0x2000000c
 80022a8:	20000330 	.word	0x20000330
 80022ac:	20000240 	.word	0x20000240
 80022b0:	20000318 	.word	0x20000318
 80022b4:	08017e90 	.word	0x08017e90
 80022b8:	200003fc 	.word	0x200003fc

080022bc <DHT_Task>:

void DHT_Task(void *argument)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022c8:	2001      	movs	r0, #1
 80022ca:	f00f f9a3 	bl	8011614 <ulTaskNotifyTake>
		if (DHT11_ReadData(&dht, &data) == 0)
 80022ce:	490c      	ldr	r1, [pc, #48]	@ (8002300 <DHT_Task+0x44>)
 80022d0:	480c      	ldr	r0, [pc, #48]	@ (8002304 <DHT_Task+0x48>)
 80022d2:	f7ff fda9 	bl	8001e28 <DHT11_ReadData>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f3      	bne.n	80022c4 <DHT_Task+0x8>
		{
			message.temperature_int = data.temperature_int;
 80022dc:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <DHT_Task+0x44>)
 80022de:	789a      	ldrb	r2, [r3, #2]
 80022e0:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <DHT_Task+0x4c>)
 80022e2:	701a      	strb	r2, [r3, #0]
			message.temperature_dec = data.temperature_dec;
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <DHT_Task+0x44>)
 80022e6:	78da      	ldrb	r2, [r3, #3]
 80022e8:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <DHT_Task+0x4c>)
 80022ea:	705a      	strb	r2, [r3, #1]
			message.humidity_int = data.humidity_int;
 80022ec:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <DHT_Task+0x44>)
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <DHT_Task+0x4c>)
 80022f2:	709a      	strb	r2, [r3, #2]
			message.humidity_dec = data.humidity_dec;
 80022f4:	4b02      	ldr	r3, [pc, #8]	@ (8002300 <DHT_Task+0x44>)
 80022f6:	785a      	ldrb	r2, [r3, #1]
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <DHT_Task+0x4c>)
 80022fa:	70da      	strb	r2, [r3, #3]
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80022fc:	e7e2      	b.n	80022c4 <DHT_Task+0x8>
 80022fe:	bf00      	nop
 8002300:	20000304 	.word	0x20000304
 8002304:	200002f8 	.word	0x200002f8
 8002308:	20000318 	.word	0x20000318

0800230c <HAL_ADC_ConvCpltCallback>:
		}
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a16      	ldr	r2, [pc, #88]	@ (8002374 <HAL_ADC_ConvCpltCallback+0x68>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d125      	bne.n	800236a <HAL_ADC_ConvCpltCallback+0x5e>
		HAL_ADC_Stop_DMA(&hadc1);
 800231e:	4816      	ldr	r0, [pc, #88]	@ (8002378 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002320:	f001 ffe6 	bl	80042f0 <HAL_ADC_Stop_DMA>

		uint16_t integral = buffer[0] / 1000;
 8002324:	4b15      	ldr	r3, [pc, #84]	@ (800237c <HAL_ADC_ConvCpltCallback+0x70>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a15      	ldr	r2, [pc, #84]	@ (8002380 <HAL_ADC_ConvCpltCallback+0x74>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	099b      	lsrs	r3, r3, #6
 8002330:	81fb      	strh	r3, [r7, #14]
		uint16_t fractional = buffer[0] % 1000;
 8002332:	4b12      	ldr	r3, [pc, #72]	@ (800237c <HAL_ADC_ConvCpltCallback+0x70>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b12      	ldr	r3, [pc, #72]	@ (8002380 <HAL_ADC_ConvCpltCallback+0x74>)
 8002338:	fba3 1302 	umull	r1, r3, r3, r2
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	81bb      	strh	r3, [r7, #12]
		uint32_t light_value = (buffer[1] * 100) / 4096;
 800234a:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <HAL_ADC_ConvCpltCallback+0x70>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2264      	movs	r2, #100	@ 0x64
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	0b1b      	lsrs	r3, r3, #12
 8002356:	60bb      	str	r3, [r7, #8]

		message.potent_int = integral;
 8002358:	4a0a      	ldr	r2, [pc, #40]	@ (8002384 <HAL_ADC_ConvCpltCallback+0x78>)
 800235a:	89fb      	ldrh	r3, [r7, #14]
 800235c:	8093      	strh	r3, [r2, #4]
		message.potent_dec = fractional;
 800235e:	4a09      	ldr	r2, [pc, #36]	@ (8002384 <HAL_ADC_ConvCpltCallback+0x78>)
 8002360:	89bb      	ldrh	r3, [r7, #12]
 8002362:	80d3      	strh	r3, [r2, #6]
		message.light = light_value;
 8002364:	4a07      	ldr	r2, [pc, #28]	@ (8002384 <HAL_ADC_ConvCpltCallback+0x78>)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6093      	str	r3, [r2, #8]
	}
}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	50040000 	.word	0x50040000
 8002378:	20000240 	.word	0x20000240
 800237c:	20000330 	.word	0x20000330
 8002380:	10624dd3 	.word	0x10624dd3
 8002384:	20000318 	.word	0x20000318

08002388 <ControllerTask>:

void ControllerTask(void* argument)
{
 8002388:	b5b0      	push	{r4, r5, r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	MessageData msgCopy;
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_2);
 8002390:	2104      	movs	r1, #4
 8002392:	4827      	ldr	r0, [pc, #156]	@ (8002430 <ControllerTask+0xa8>)
 8002394:	f003 ff16 	bl	80061c4 <HAL_GPIO_TogglePin>

	while(1)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002398:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800239c:	2001      	movs	r0, #1
 800239e:	f00f f939 	bl	8011614 <ulTaskNotifyTake>
		msgCopy = message;
 80023a2:	4b24      	ldr	r3, [pc, #144]	@ (8002434 <ControllerTask+0xac>)
 80023a4:	f107 0408 	add.w	r4, r7, #8
 80023a8:	461d      	mov	r5, r3
 80023aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ae:	682b      	ldr	r3, [r5, #0]
 80023b0:	6023      	str	r3, [r4, #0]

		DateTimeGet(g_dt);
 80023b2:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <ControllerTask+0xb0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff faee 	bl	8001998 <DateTimeGet>

		msgCopy.time = g_dt->time;
 80023bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002438 <ControllerTask+0xb0>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	3207      	adds	r2, #7
 80023c6:	8811      	ldrh	r1, [r2, #0]
 80023c8:	7892      	ldrb	r2, [r2, #2]
 80023ca:	8019      	strh	r1, [r3, #0]
 80023cc:	709a      	strb	r2, [r3, #2]
		msgCopy.date = g_dt->date;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <ControllerTask+0xb0>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f107 0317 	add.w	r3, r7, #23
 80023d6:	3204      	adds	r2, #4
 80023d8:	8811      	ldrh	r1, [r2, #0]
 80023da:	7892      	ldrb	r2, [r2, #2]
 80023dc:	8019      	strh	r1, [r3, #0]
 80023de:	709a      	strb	r2, [r3, #2]

		if (SystemState_Update(&msgCopy, Config_Get())) {
 80023e0:	f7ff faa2 	bl	8001928 <Config_Get>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 f807 	bl	8003400 <SystemState_Update>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <ControllerTask+0x76>

			printf("System mode changed!\r\n");
 80023f8:	4810      	ldr	r0, [pc, #64]	@ (800243c <ControllerTask+0xb4>)
 80023fa:	f012 f9ff 	bl	80147fc <puts>
		}

		osStatus_t status = osMessageQueuePut(messageQueueHandle, &msgCopy, 0, 0);
 80023fe:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <ControllerTask+0xb8>)
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	f107 0108 	add.w	r1, r7, #8
 8002406:	2300      	movs	r3, #0
 8002408:	2200      	movs	r2, #0
 800240a:	f00c fc01 	bl	800ec10 <osMessageQueuePut>
 800240e:	61f8      	str	r0, [r7, #28]
		if (status == osOK) {
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <ControllerTask+0x96>

		} else {
		    printf("FAILED to queue message! Code: %d\r\n", status);
 8002416:	69f9      	ldr	r1, [r7, #28]
 8002418:	480a      	ldr	r0, [pc, #40]	@ (8002444 <ControllerTask+0xbc>)
 800241a:	f012 f987 	bl	801472c <iprintf>
		}

		xTaskNotifyGive(loggerTaskHandle);
 800241e:	4b0a      	ldr	r3, [pc, #40]	@ (8002448 <ControllerTask+0xc0>)
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	2300      	movs	r3, #0
 8002424:	2202      	movs	r2, #2
 8002426:	2100      	movs	r1, #0
 8002428:	f00f f93c 	bl	80116a4 <xTaskGenericNotify>
	{
 800242c:	e7b4      	b.n	8002398 <ControllerTask+0x10>
 800242e:	bf00      	nop
 8002430:	48000800 	.word	0x48000800
 8002434:	20000318 	.word	0x20000318
 8002438:	2000032c 	.word	0x2000032c
 800243c:	08017edc 	.word	0x08017edc
 8002440:	2000030c 	.word	0x2000030c
 8002444:	08017ef4 	.word	0x08017ef4
 8002448:	20000400 	.word	0x20000400

0800244c <LoggerTask>:

	}
}

void LoggerTask(void *argument)
{
 800244c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002450:	b0c0      	sub	sp, #256	@ 0x100
 8002452:	af0c      	add	r7, sp, #48	@ 0x30
 8002454:	61f8      	str	r0, [r7, #28]
    MessageData receivedMsg;
    char buffer[128];

    while (1)
    {
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002456:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800245a:	2001      	movs	r0, #1
 800245c:	f00f f8da 	bl	8011614 <ulTaskNotifyTake>
        if (osMessageQueueGet(messageQueueHandle, &receivedMsg, NULL, osWaitForever) == osOK)
 8002460:	4b7d      	ldr	r3, [pc, #500]	@ (8002658 <LoggerTask+0x20c>)
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8002468:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800246c:	2200      	movs	r2, #0
 800246e:	f00c fc2f 	bl	800ecd0 <osMessageQueueGet>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ee      	bne.n	8002456 <LoggerTask+0xa>
        {
        	SystemConfig* cfg = Config_Get();
 8002478:	f7ff fa56 	bl	8001928 <Config_Get>
 800247c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8

        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
        	       cfg->temp_min,
 8002480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002484:	781b      	ldrb	r3, [r3, #0]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 8002486:	461d      	mov	r5, r3
        	       cfg->temp_max,
 8002488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800248c:	785b      	ldrb	r3, [r3, #1]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 800248e:	461e      	mov	r6, r3
        	       cfg->humidity_min,
 8002490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002494:	789b      	ldrb	r3, [r3, #2]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 8002496:	4698      	mov	r8, r3
        	       cfg->light_min,
 8002498:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800249c:	78db      	ldrb	r3, [r3, #3]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 800249e:	461c      	mov	r4, r3
        	       cfg->voltage_min);
 80024a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024a4:	685b      	ldr	r3, [r3, #4]
        	printf("Thresholds: Temp %d–%d, Humidity > %d, Light > %d, Voltage > %.2f\r\n",
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe f85e 	bl	8000568 <__aeabi_f2d>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024b4:	9400      	str	r4, [sp, #0]
 80024b6:	4643      	mov	r3, r8
 80024b8:	4632      	mov	r2, r6
 80024ba:	4629      	mov	r1, r5
 80024bc:	4867      	ldr	r0, [pc, #412]	@ (800265c <LoggerTask+0x210>)
 80024be:	f012 f935 	bl	801472c <iprintf>

            char filename[20];

            if (receivedMsg.date.year == 0 || receivedMsg.date.month == 0 || receivedMsg.date.day == 0)
 80024c2:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d007      	beq.n	80024da <LoggerTask+0x8e>
 80024ca:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <LoggerTask+0x8e>
 80024d2:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d108      	bne.n	80024ec <LoggerTask+0xa0>
            {
                strcpy(filename, "fallback.TXT");
 80024da:	f107 0320 	add.w	r3, r7, #32
 80024de:	4a60      	ldr	r2, [pc, #384]	@ (8002660 <LoggerTask+0x214>)
 80024e0:	461c      	mov	r4, r3
 80024e2:	4613      	mov	r3, r2
 80024e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024e6:	c407      	stmia	r4!, {r0, r1, r2}
 80024e8:	7023      	strb	r3, [r4, #0]
 80024ea:	e00f      	b.n	800250c <LoggerTask+0xc0>
            }
            else
            {
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
                         receivedMsg.date.year + 2000,
 80024ec:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
 80024f0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
                         receivedMsg.date.month,
 80024f4:	f897 20c4 	ldrb.w	r2, [r7, #196]	@ 0xc4
                         receivedMsg.date.day);
 80024f8:	f897 10c3 	ldrb.w	r1, [r7, #195]	@ 0xc3
                snprintf(filename, sizeof(filename), "%04d%02d%02d.TXT",
 80024fc:	f107 0020 	add.w	r0, r7, #32
 8002500:	9101      	str	r1, [sp, #4]
 8002502:	9200      	str	r2, [sp, #0]
 8002504:	4a57      	ldr	r2, [pc, #348]	@ (8002664 <LoggerTask+0x218>)
 8002506:	2114      	movs	r1, #20
 8002508:	f011 f8e8 	bl	80136dc <sniprintf>
            }

            if (strcmp(currentLogFile, filename) != 0)
 800250c:	f107 0320 	add.w	r3, r7, #32
 8002510:	4619      	mov	r1, r3
 8002512:	4855      	ldr	r0, [pc, #340]	@ (8002668 <LoggerTask+0x21c>)
 8002514:	f7fd fe5c 	bl	80001d0 <strcmp>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d04b      	beq.n	80025b6 <LoggerTask+0x16a>
            {
                strcpy(currentLogFile, filename);
 800251e:	f107 0320 	add.w	r3, r7, #32
 8002522:	4619      	mov	r1, r3
 8002524:	4850      	ldr	r0, [pc, #320]	@ (8002668 <LoggerTask+0x21c>)
 8002526:	f012 fa73 	bl	8014a10 <strcpy>

                if (logFileCount < MAX_LOG_DAYS)
 800252a:	4b50      	ldr	r3, [pc, #320]	@ (800266c <LoggerTask+0x220>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b07      	cmp	r3, #7
 8002530:	dc11      	bgt.n	8002556 <LoggerTask+0x10a>
                {
                    strcpy(logFiles[logFileCount++], filename);
 8002532:	4b4e      	ldr	r3, [pc, #312]	@ (800266c <LoggerTask+0x220>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	1c53      	adds	r3, r2, #1
 8002538:	494c      	ldr	r1, [pc, #304]	@ (800266c <LoggerTask+0x220>)
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4a4a      	ldr	r2, [pc, #296]	@ (8002670 <LoggerTask+0x224>)
 8002546:	4413      	add	r3, r2
 8002548:	f107 0220 	add.w	r2, r7, #32
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f012 fa5e 	bl	8014a10 <strcpy>
 8002554:	e029      	b.n	80025aa <LoggerTask+0x15e>
                }
                else
                {
                    f_unlink(logFiles[0]);
 8002556:	4846      	ldr	r0, [pc, #280]	@ (8002670 <LoggerTask+0x224>)
 8002558:	f00b fc39 	bl	800ddce <f_unlink>
                    for (int i = 1; i < MAX_LOG_DAYS; ++i)
 800255c:	2301      	movs	r3, #1
 800255e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002562:	e018      	b.n	8002596 <LoggerTask+0x14a>
                    {
                        strcpy(logFiles[i - 1], logFiles[i]);
 8002564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002568:	1e5a      	subs	r2, r3, #1
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4a3f      	ldr	r2, [pc, #252]	@ (8002670 <LoggerTask+0x224>)
 8002574:	1898      	adds	r0, r3, r2
 8002576:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4a3b      	ldr	r2, [pc, #236]	@ (8002670 <LoggerTask+0x224>)
 8002584:	4413      	add	r3, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f012 fa42 	bl	8014a10 <strcpy>
                    for (int i = 1; i < MAX_LOG_DAYS; ++i)
 800258c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002590:	3301      	adds	r3, #1
 8002592:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002596:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800259a:	2b07      	cmp	r3, #7
 800259c:	dde2      	ble.n	8002564 <LoggerTask+0x118>
                    }
                    strcpy(logFiles[MAX_LOG_DAYS - 1], filename);
 800259e:	f107 0320 	add.w	r3, r7, #32
 80025a2:	4619      	mov	r1, r3
 80025a4:	4833      	ldr	r0, [pc, #204]	@ (8002674 <LoggerTask+0x228>)
 80025a6:	f012 fa33 	bl	8014a10 <strcpy>
                }

                printf("New log file: %s\r\n", filename);
 80025aa:	f107 0320 	add.w	r3, r7, #32
 80025ae:	4619      	mov	r1, r3
 80025b0:	4831      	ldr	r0, [pc, #196]	@ (8002678 <LoggerTask+0x22c>)
 80025b2:	f012 f8bb 	bl	801472c <iprintf>
            }

            snprintf(buffer, sizeof(buffer),
                     "%02d-%02d-%02d %02d:%02d:%02d, %d.%d°C, %d.%d%%, %d.%03dV, %lu%%\r\n",
                     receivedMsg.date.year + 2000,
 80025b6:	f897 30c5 	ldrb.w	r3, [r7, #197]	@ 0xc5
            snprintf(buffer, sizeof(buffer),
 80025ba:	f503 62fa 	add.w	r2, r3, #2000	@ 0x7d0
                     receivedMsg.date.month,
 80025be:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
            snprintf(buffer, sizeof(buffer),
 80025c2:	4619      	mov	r1, r3
                     receivedMsg.date.day,
 80025c4:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
            snprintf(buffer, sizeof(buffer),
 80025c8:	461c      	mov	r4, r3
                     receivedMsg.time.hours,
 80025ca:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
            snprintf(buffer, sizeof(buffer),
 80025ce:	461d      	mov	r5, r3
                     receivedMsg.time.minutes,
 80025d0:	f897 30c1 	ldrb.w	r3, [r7, #193]	@ 0xc1
            snprintf(buffer, sizeof(buffer),
 80025d4:	461e      	mov	r6, r3
                     receivedMsg.time.seconds,
 80025d6:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
            snprintf(buffer, sizeof(buffer),
 80025da:	61bb      	str	r3, [r7, #24]
                     receivedMsg.temperature_int,
 80025dc:	f897 30b4 	ldrb.w	r3, [r7, #180]	@ 0xb4
            snprintf(buffer, sizeof(buffer),
 80025e0:	617b      	str	r3, [r7, #20]
                     receivedMsg.temperature_dec,
 80025e2:	f897 30b5 	ldrb.w	r3, [r7, #181]	@ 0xb5
            snprintf(buffer, sizeof(buffer),
 80025e6:	613b      	str	r3, [r7, #16]
                     receivedMsg.humidity_int,
 80025e8:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
            snprintf(buffer, sizeof(buffer),
 80025ec:	60fb      	str	r3, [r7, #12]
                     receivedMsg.humidity_dec,
 80025ee:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
            snprintf(buffer, sizeof(buffer),
 80025f2:	60bb      	str	r3, [r7, #8]
                     receivedMsg.potent_int,
 80025f4:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
            snprintf(buffer, sizeof(buffer),
 80025f8:	607b      	str	r3, [r7, #4]
                     receivedMsg.potent_dec,
 80025fa:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
            snprintf(buffer, sizeof(buffer),
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002604:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	930a      	str	r3, [sp, #40]	@ 0x28
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	9309      	str	r3, [sp, #36]	@ 0x24
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	9308      	str	r3, [sp, #32]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	9307      	str	r3, [sp, #28]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	9306      	str	r3, [sp, #24]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	9305      	str	r3, [sp, #20]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	9304      	str	r3, [sp, #16]
 8002626:	9603      	str	r6, [sp, #12]
 8002628:	9502      	str	r5, [sp, #8]
 800262a:	9401      	str	r4, [sp, #4]
 800262c:	9100      	str	r1, [sp, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	4a12      	ldr	r2, [pc, #72]	@ (800267c <LoggerTask+0x230>)
 8002632:	2180      	movs	r1, #128	@ 0x80
 8002634:	f011 f852 	bl	80136dc <sniprintf>
                     receivedMsg.light);

            SD_AppendToFile(filename, buffer);
 8002638:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800263c:	f107 0320 	add.w	r3, r7, #32
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fad6 	bl	8002bf4 <SD_AppendToFile>
            printf("LOGGED: %s", buffer);
 8002648:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800264c:	4619      	mov	r1, r3
 800264e:	480c      	ldr	r0, [pc, #48]	@ (8002680 <LoggerTask+0x234>)
 8002650:	f012 f86c 	bl	801472c <iprintf>
    	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002654:	e6ff      	b.n	8002456 <LoggerTask+0xa>
 8002656:	bf00      	nop
 8002658:	2000030c 	.word	0x2000030c
 800265c:	08017f18 	.word	0x08017f18
 8002660:	08017f60 	.word	0x08017f60
 8002664:	08017f70 	.word	0x08017f70
 8002668:	20000338 	.word	0x20000338
 800266c:	200003ec 	.word	0x200003ec
 8002670:	2000034c 	.word	0x2000034c
 8002674:	200003d8 	.word	0x200003d8
 8002678:	08017f84 	.word	0x08017f84
 800267c:	08017f98 	.word	0x08017f98
 8002680:	08017fdc 	.word	0x08017fdc

08002684 <EventTypeToString>:
        }
    }
}

const char* EventTypeToString(EventType type) {
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
    switch (type) {
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <EventTypeToString+0x16>
 8002694:	2b01      	cmp	r3, #1
 8002696:	d002      	beq.n	800269e <EventTypeToString+0x1a>
 8002698:	e003      	b.n	80026a2 <EventTypeToString+0x1e>
        case EVENT_MODE_CHANGED: return "Mode Changed";
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <EventTypeToString+0x2c>)
 800269c:	e002      	b.n	80026a4 <EventTypeToString+0x20>
        case EVENT_CONFIG_UPDATED: return "Config Updated";
 800269e:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <EventTypeToString+0x30>)
 80026a0:	e000      	b.n	80026a4 <EventTypeToString+0x20>
        default: return "Unknown Event";
 80026a2:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <EventTypeToString+0x34>)
    }
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	08017fe8 	.word	0x08017fe8
 80026b4:	08017ff8 	.word	0x08017ff8
 80026b8:	08018008 	.word	0x08018008

080026bc <EventTask>:

void EventTask(void *argument)
{
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026be:	b0b1      	sub	sp, #196	@ 0xc4
 80026c0:	af08      	add	r7, sp, #32
 80026c2:	60f8      	str	r0, [r7, #12]
    SystemEvent event;
    char buffer[128];

    while (1)
    {
        if (osMessageQueueGet(eventQueueHandle, &event, NULL, osWaitForever) == osOK)
 80026c4:	4b23      	ldr	r3, [pc, #140]	@ (8002754 <EventTask+0x98>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026d0:	2200      	movs	r2, #0
 80026d2:	f00c fafd 	bl	800ecd0 <osMessageQueueGet>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f3      	bne.n	80026c4 <EventTask+0x8>
        {
            snprintf(buffer, sizeof(buffer),
                     "%02d-%02d-%02d %02d:%02d:%02d - EVENT: %s (%d → %d)\r\n",
                     event.date.year + 2000,
 80026dc:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
            snprintf(buffer, sizeof(buffer),
 80026e0:	f503 64fa 	add.w	r4, r3, #2000	@ 0x7d0
                     event.date.month,
 80026e4:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
            snprintf(buffer, sizeof(buffer),
 80026e8:	461d      	mov	r5, r3
                     event.date.day,
 80026ea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
            snprintf(buffer, sizeof(buffer),
 80026ee:	461e      	mov	r6, r3
                     event.time.hours,
 80026f0:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
            snprintf(buffer, sizeof(buffer),
 80026f4:	60bb      	str	r3, [r7, #8]
                     event.time.minutes,
 80026f6:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
            snprintf(buffer, sizeof(buffer),
 80026fa:	607b      	str	r3, [r7, #4]
                     event.time.seconds,
 80026fc:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
            snprintf(buffer, sizeof(buffer),
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ffbc 	bl	8002684 <EventTypeToString>
 800270c:	4603      	mov	r3, r0
                     EventTypeToString(event.type),
                     event.old_mode,
 800270e:	f897 2095 	ldrb.w	r2, [r7, #149]	@ 0x95
                     event.new_mode);
 8002712:	f897 1096 	ldrb.w	r1, [r7, #150]	@ 0x96
            snprintf(buffer, sizeof(buffer),
 8002716:	f107 0014 	add.w	r0, r7, #20
 800271a:	9107      	str	r1, [sp, #28]
 800271c:	9206      	str	r2, [sp, #24]
 800271e:	9305      	str	r3, [sp, #20]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	9204      	str	r2, [sp, #16]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	9203      	str	r2, [sp, #12]
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	9302      	str	r3, [sp, #8]
 800272c:	9601      	str	r6, [sp, #4]
 800272e:	9500      	str	r5, [sp, #0]
 8002730:	4623      	mov	r3, r4
 8002732:	4a09      	ldr	r2, [pc, #36]	@ (8002758 <EventTask+0x9c>)
 8002734:	2180      	movs	r1, #128	@ 0x80
 8002736:	f010 ffd1 	bl	80136dc <sniprintf>

            SD_AppendToFile("events.TXT", buffer);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4806      	ldr	r0, [pc, #24]	@ (800275c <EventTask+0xa0>)
 8002742:	f000 fa57 	bl	8002bf4 <SD_AppendToFile>
            printf("LOGGED EVENT: %s", buffer);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	4804      	ldr	r0, [pc, #16]	@ (8002760 <EventTask+0xa4>)
 800274e:	f011 ffed 	bl	801472c <iprintf>
        if (osMessageQueueGet(eventQueueHandle, &event, NULL, osWaitForever) == osOK)
 8002752:	e7b7      	b.n	80026c4 <EventTask+0x8>
 8002754:	20000310 	.word	0x20000310
 8002758:	08018018 	.word	0x08018018
 800275c:	08018050 	.word	0x08018050
 8002760:	0801805c 	.word	0x0801805c

08002764 <CommTask>:
        }
    }
}

void CommTask(void *argument)
{
 8002764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002766:	b089      	sub	sp, #36	@ 0x24
 8002768:	af04      	add	r7, sp, #16
 800276a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        uint32_t flags = osEventFlagsWait(commEventFlags,
 800276c:	4b25      	ldr	r3, [pc, #148]	@ (8002804 <CommTask+0xa0>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002774:	2200      	movs	r2, #0
 8002776:	2103      	movs	r1, #3
 8002778:	f00b ff20 	bl	800e5bc <osEventFlagsWait>
 800277c:	60f8      	str	r0, [r7, #12]
                                          COMM_EVENT_RX_COMPLETE | COMM_EVENT_KEEP_ALIVE,
                                          osFlagsWaitAny,
                                          osWaitForever);

        if (flags & COMM_EVENT_RX_COMPLETE)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <CommTask+0x3a>
        {
        	ParseCommand(commandBuffer);
 8002788:	481f      	ldr	r0, [pc, #124]	@ (8002808 <CommTask+0xa4>)
 800278a:	f7fe fd87 	bl	800129c <ParseCommand>

            commandIndex = 0;
 800278e:	4b1f      	ldr	r3, [pc, #124]	@ (800280c <CommTask+0xa8>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
			memset(commandBuffer, 0, UART_COMMAND_BUFFER_SIZE);
 8002794:	2280      	movs	r2, #128	@ 0x80
 8002796:	2100      	movs	r1, #0
 8002798:	481b      	ldr	r0, [pc, #108]	@ (8002808 <CommTask+0xa4>)
 800279a:	f012 f837 	bl	801480c <memset>
        }

        if (flags & COMM_EVENT_KEEP_ALIVE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0e1      	beq.n	800276c <CommTask+0x8>
        {
            DateTimeGet(g_dt);
 80027a8:	4b19      	ldr	r3, [pc, #100]	@ (8002810 <CommTask+0xac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f8f3 	bl	8001998 <DateTimeGet>
            SystemMode mode = SystemState_Get();
 80027b2:	f000 fe19 	bl	80033e8 <SystemState_Get>
 80027b6:	4603      	mov	r3, r0
 80027b8:	72fb      	strb	r3, [r7, #11]

            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
                   g_dt->date.year + 2000,
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <CommTask+0xac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	799b      	ldrb	r3, [r3, #6]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80027c0:	f503 61fa 	add.w	r1, r3, #2000	@ 0x7d0
                   g_dt->date.month,
 80027c4:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <CommTask+0xac>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	795b      	ldrb	r3, [r3, #5]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80027ca:	461d      	mov	r5, r3
                   g_dt->date.day,
 80027cc:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <CommTask+0xac>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	791b      	ldrb	r3, [r3, #4]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80027d2:	461e      	mov	r6, r3
                   g_dt->time.hours,
 80027d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <CommTask+0xac>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	79db      	ldrb	r3, [r3, #7]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80027da:	461a      	mov	r2, r3
                   g_dt->time.minutes,
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <CommTask+0xac>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	7a1b      	ldrb	r3, [r3, #8]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80027e2:	4618      	mov	r0, r3
                   g_dt->time.seconds,
 80027e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <CommTask+0xac>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	7a5b      	ldrb	r3, [r3, #9]
            printf("KEEP ALIVE - %04d-%02d-%02d %02d:%02d:%02d | Mode: %d\r\n",
 80027ea:	461c      	mov	r4, r3
 80027ec:	7afb      	ldrb	r3, [r7, #11]
 80027ee:	9303      	str	r3, [sp, #12]
 80027f0:	9402      	str	r4, [sp, #8]
 80027f2:	9001      	str	r0, [sp, #4]
 80027f4:	9200      	str	r2, [sp, #0]
 80027f6:	4633      	mov	r3, r6
 80027f8:	462a      	mov	r2, r5
 80027fa:	4806      	ldr	r0, [pc, #24]	@ (8002814 <CommTask+0xb0>)
 80027fc:	f011 ff96 	bl	801472c <iprintf>
    {
 8002800:	e7b4      	b.n	800276c <CommTask+0x8>
 8002802:	bf00      	nop
 8002804:	20000314 	.word	0x20000314
 8002808:	20000a2c 	.word	0x20000a2c
 800280c:	20000aac 	.word	0x20000aac
 8002810:	2000032c 	.word	0x2000032c
 8002814:	08018070 	.word	0x08018070

08002818 <KeepAliveTask>:
    }
}


void KeepAliveTask(void *argument)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        osDelay(6000);
 8002820:	f241 7070 	movw	r0, #6000	@ 0x1770
 8002824:	f00b fd38 	bl	800e298 <osDelay>

        osEventFlagsSet(commEventFlags, COMM_EVENT_KEEP_ALIVE);
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <KeepAliveTask+0x20>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2102      	movs	r1, #2
 800282e:	4618      	mov	r0, r3
 8002830:	f00b fe82 	bl	800e538 <osEventFlagsSet>
        osDelay(6000);
 8002834:	bf00      	nop
 8002836:	e7f3      	b.n	8002820 <KeepAliveTask+0x8>
 8002838:	20000314 	.word	0x20000314

0800283c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	@ 0x28
 8002840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002852:	4b40      	ldr	r3, [pc, #256]	@ (8002954 <MX_GPIO_Init+0x118>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002856:	4a3f      	ldr	r2, [pc, #252]	@ (8002954 <MX_GPIO_Init+0x118>)
 8002858:	f043 0304 	orr.w	r3, r3, #4
 800285c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800285e:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <MX_GPIO_Init+0x118>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	f003 0304 	and.w	r3, r3, #4
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800286a:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <MX_GPIO_Init+0x118>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	4a39      	ldr	r2, [pc, #228]	@ (8002954 <MX_GPIO_Init+0x118>)
 8002870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002876:	4b37      	ldr	r3, [pc, #220]	@ (8002954 <MX_GPIO_Init+0x118>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002882:	4b34      	ldr	r3, [pc, #208]	@ (8002954 <MX_GPIO_Init+0x118>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002886:	4a33      	ldr	r2, [pc, #204]	@ (8002954 <MX_GPIO_Init+0x118>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800288e:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <MX_GPIO_Init+0x118>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800289a:	4b2e      	ldr	r3, [pc, #184]	@ (8002954 <MX_GPIO_Init+0x118>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	4a2d      	ldr	r2, [pc, #180]	@ (8002954 <MX_GPIO_Init+0x118>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <MX_GPIO_Init+0x118>)
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_1_Pin|RGB_2_Pin|DHT_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 80028b2:	2200      	movs	r2, #0
 80028b4:	f246 0160 	movw	r1, #24672	@ 0x6060
 80028b8:	4827      	ldr	r0, [pc, #156]	@ (8002958 <MX_GPIO_Init+0x11c>)
 80028ba:	f003 fc6b 	bl	8006194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_0_GPIO_Port, RGB_0_Pin, GPIO_PIN_RESET);
 80028be:	2200      	movs	r2, #0
 80028c0:	2180      	movs	r1, #128	@ 0x80
 80028c2:	4826      	ldr	r0, [pc, #152]	@ (800295c <MX_GPIO_Init+0x120>)
 80028c4:	f003 fc66 	bl	8006194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80028d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	4619      	mov	r1, r3
 80028de:	481f      	ldr	r0, [pc, #124]	@ (800295c <MX_GPIO_Init+0x120>)
 80028e0:	f003 fa96 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RGB_1_Pin RGB_2_Pin DHT_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = RGB_1_Pin|RGB_2_Pin|DHT_Pin|SD_CS_Pin;
 80028e4:	f246 0360 	movw	r3, #24672	@ 0x6060
 80028e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	4816      	ldr	r0, [pc, #88]	@ (8002958 <MX_GPIO_Init+0x11c>)
 80028fe:	f003 fa87 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_0_Pin */
  GPIO_InitStruct.Pin = RGB_0_Pin;
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RGB_0_GPIO_Port, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	4810      	ldr	r0, [pc, #64]	@ (800295c <MX_GPIO_Init+0x120>)
 800291a:	f003 fa79 	bl	8005e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800291e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002924:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	4619      	mov	r1, r3
 8002934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002938:	f003 fa6a 	bl	8005e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2105      	movs	r1, #5
 8002940:	2028      	movs	r0, #40	@ 0x28
 8002942:	f002 fd24 	bl	800538e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002946:	2028      	movs	r0, #40	@ 0x28
 8002948:	f002 fd3d 	bl	80053c6 <HAL_NVIC_EnableIRQ>

}
 800294c:	bf00      	nop
 800294e:	3728      	adds	r7, #40	@ 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	48000400 	.word	0x48000400
 800295c:	48000800 	.word	0x48000800

08002960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002964:	f001 f818 	bl	8003998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002968:	f000 f81a 	bl	80029a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800296c:	f7ff ff66 	bl	800283c <MX_GPIO_Init>
  MX_DMA_Init();
 8002970:	f7ff fb1c 	bl	8001fac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002974:	f000 fee8 	bl	8003748 <MX_USART2_UART_Init>
//  MX_IWDG_Init();
  MX_RTC_Init();
 8002978:	f000 f8a0 	bl	8002abc <MX_RTC_Init>
  MX_ADC1_Init();
 800297c:	f7fe fb60 	bl	8001040 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002980:	f000 fdd8 	bl	8003534 <MX_TIM3_Init>
  MX_TIM6_Init();
 8002984:	f000 fe32 	bl	80035ec <MX_TIM6_Init>
  MX_FATFS_Init();
 8002988:	f008 f8e0 	bl	800ab4c <MX_FATFS_Init>
  MX_SPI1_Init();
 800298c:	f000 fb72 	bl	8003074 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002990:	f00b fba6 	bl	800e0e0 <osKernelInitialize>
//  uint8_t test_buf[64];
//  HAL_UART_Receive(&huart2, test_buf, sizeof(test_buf), 5000);
//  printf("Received (poll): %s\r\n", test_buf);

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002994:	f7ff fb7c 	bl	8002090 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002998:	f00b fbc6 	bl	800e128 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800299c:	bf00      	nop
 800299e:	e7fd      	b.n	800299c <main+0x3c>

080029a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b096      	sub	sp, #88	@ 0x58
 80029a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	2244      	movs	r2, #68	@ 0x44
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f011 ff2c 	bl	801480c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b4:	463b      	mov	r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80029c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80029c6:	f003 fc49 	bl	800625c <HAL_PWREx_ControlVoltageScaling>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80029d0:	f000 f839 	bl	8002a46 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80029d4:	230a      	movs	r3, #10
 80029d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029de:	2310      	movs	r3, #16
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80029e2:	2301      	movs	r3, #1
 80029e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e6:	2302      	movs	r3, #2
 80029e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80029ea:	2302      	movs	r3, #2
 80029ec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80029ee:	2301      	movs	r3, #1
 80029f0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80029f2:	230a      	movs	r3, #10
 80029f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80029f6:	2307      	movs	r3, #7
 80029f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80029fa:	2302      	movs	r3, #2
 80029fc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80029fe:	2302      	movs	r3, #2
 8002a00:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 fc7e 	bl	8006308 <HAL_RCC_OscConfig>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002a12:	f000 f818 	bl	8002a46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a16:	230f      	movs	r3, #15
 8002a18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a2a:	463b      	mov	r3, r7
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 f846 	bl	8006ac0 <HAL_RCC_ClockConfig>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a3a:	f000 f804 	bl	8002a46 <Error_Handler>
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3758      	adds	r7, #88	@ 0x58
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a46:	b480      	push	{r7}
 8002a48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a4a:	b672      	cpsid	i
}
 8002a4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a4e:	bf00      	nop
 8002a50:	e7fd      	b.n	8002a4e <Error_Handler+0x8>
	...

08002a54 <RGB_SetColor>:
#include "config.h"



void RGB_SetColor(uint8_t _r, uint8_t _g, uint8_t _b)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	71bb      	strb	r3, [r7, #6]
 8002a62:	4613      	mov	r3, r2
 8002a64:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(RGB_RED_PORT, RGB_RED_PIN, _r ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	2180      	movs	r1, #128	@ 0x80
 8002a76:	480f      	ldr	r0, [pc, #60]	@ (8002ab4 <RGB_SetColor+0x60>)
 8002a78:	f003 fb8c 	bl	8006194 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB_GREEN_PORT, RGB_GREEN_PIN, _g ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002a7c:	79bb      	ldrb	r3, [r7, #6]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf0c      	ite	eq
 8002a82:	2301      	moveq	r3, #1
 8002a84:	2300      	movne	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	461a      	mov	r2, r3
 8002a8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a8e:	480a      	ldr	r0, [pc, #40]	@ (8002ab8 <RGB_SetColor+0x64>)
 8002a90:	f003 fb80 	bl	8006194 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RGB_BLUE_PORT, RGB_BLUE_PIN, _b ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002a94:	797b      	ldrb	r3, [r7, #5]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002aa6:	4804      	ldr	r0, [pc, #16]	@ (8002ab8 <RGB_SetColor+0x64>)
 8002aa8:	f003 fb74 	bl	8006194 <HAL_GPIO_WritePin>
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	48000800 	.word	0x48000800
 8002ab8:	48000400 	.word	0x48000400

08002abc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ad4:	4b25      	ldr	r3, [pc, #148]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002ad6:	4a26      	ldr	r2, [pc, #152]	@ (8002b70 <MX_RTC_Init+0xb4>)
 8002ad8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ada:	4b24      	ldr	r3, [pc, #144]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ae0:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002ae2:	227f      	movs	r2, #127	@ 0x7f
 8002ae4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ae6:	4b21      	ldr	r3, [pc, #132]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002ae8:	22ff      	movs	r2, #255	@ 0xff
 8002aea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002aec:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002af2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002af8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002afe:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b04:	4819      	ldr	r0, [pc, #100]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002b06:	f004 febb 	bl	8007880 <HAL_RTC_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002b10:	f7ff ff99 	bl	8002a46 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	480f      	ldr	r0, [pc, #60]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002b30:	f004 ff2e 	bl	8007990 <HAL_RTC_SetTime>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002b3a:	f7ff ff84 	bl	8002a46 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b42:	2301      	movs	r3, #1
 8002b44:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b4e:	463b      	mov	r3, r7
 8002b50:	2201      	movs	r2, #1
 8002b52:	4619      	mov	r1, r3
 8002b54:	4805      	ldr	r0, [pc, #20]	@ (8002b6c <MX_RTC_Init+0xb0>)
 8002b56:	f005 f814 	bl	8007b82 <HAL_RTC_SetDate>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002b60:	f7ff ff71 	bl	8002a46 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b64:	bf00      	nop
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000414 	.word	0x20000414
 8002b70:	40002800 	.word	0x40002800

08002b74 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b0a4      	sub	sp, #144	@ 0x90
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b7c:	f107 0308 	add.w	r3, r7, #8
 8002b80:	2288      	movs	r2, #136	@ 0x88
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f011 fe41 	bl	801480c <memset>
  if(rtcHandle->Instance==RTC)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a10      	ldr	r2, [pc, #64]	@ (8002bd0 <HAL_RTC_MspInit+0x5c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d118      	bne.n	8002bc6 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b98:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba2:	f107 0308 	add.w	r3, r7, #8
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 f9ae 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002bb2:	f7ff ff48 	bl	8002a46 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002bb6:	4b07      	ldr	r3, [pc, #28]	@ (8002bd4 <HAL_RTC_MspInit+0x60>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbc:	4a05      	ldr	r2, [pc, #20]	@ (8002bd4 <HAL_RTC_MspInit+0x60>)
 8002bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	3790      	adds	r7, #144	@ 0x90
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40002800 	.word	0x40002800
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <SD_Init>:

static FATFS fs;
static FIL fil;
extern osMutexId_t sdMutexHandle;

void SD_Init(void) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
    f_mount(&fs, "", 1);
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4903      	ldr	r1, [pc, #12]	@ (8002bec <SD_Init+0x14>)
 8002be0:	4803      	ldr	r0, [pc, #12]	@ (8002bf0 <SD_Init+0x18>)
 8002be2:	f00a fb05 	bl	800d1f0 <f_mount>
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	080180a8 	.word	0x080180a8
 8002bf0:	20000438 	.word	0x20000438

08002bf4 <SD_AppendToFile>:
}



void SD_AppendToFile(const char *filename, const char *content)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
    UINT bytesWritten;
    FRESULT res = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);
 8002bfe:	2232      	movs	r2, #50	@ 0x32
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4810      	ldr	r0, [pc, #64]	@ (8002c44 <SD_AppendToFile+0x50>)
 8002c04:	f00a fb58 	bl	800d2b8 <f_open>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	73fb      	strb	r3, [r7, #15]

    if (res == FR_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <SD_AppendToFile+0x3a>
    {
        f_write(&fil, content, strlen(content), &bytesWritten);
 8002c12:	6838      	ldr	r0, [r7, #0]
 8002c14:	f7fd fb3c 	bl	8000290 <strlen>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f107 0308 	add.w	r3, r7, #8
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	4808      	ldr	r0, [pc, #32]	@ (8002c44 <SD_AppendToFile+0x50>)
 8002c22:	f00a fe78 	bl	800d916 <f_write>
        f_close(&fil);
 8002c26:	4807      	ldr	r0, [pc, #28]	@ (8002c44 <SD_AppendToFile+0x50>)
 8002c28:	f00b f8a2 	bl	800dd70 <f_close>
    }
    else
    {
        printf("f_open failed for '%s'. Error code: %d\r\n", filename, res);
    }
}
 8002c2c:	e005      	b.n	8002c3a <SD_AppendToFile+0x46>
        printf("f_open failed for '%s'. Error code: %d\r\n", filename, res);
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	461a      	mov	r2, r3
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4804      	ldr	r0, [pc, #16]	@ (8002c48 <SD_AppendToFile+0x54>)
 8002c36:	f011 fd79 	bl	801472c <iprintf>
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000066c 	.word	0x2000066c
 8002c48:	080180fc 	.word	0x080180fc

08002c4c <SD_ReadFilePrintRange>:

void SD_ReadFilePrintRange(const char* filename, DateTime* start, DateTime* end)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	f5ad 7d5e 	sub.w	sp, sp, #888	@ 0x378
 8002c52:	af04      	add	r7, sp, #16
 8002c54:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002c58:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002c5c:	6018      	str	r0, [r3, #0]
 8002c5e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002c62:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002c66:	6019      	str	r1, [r3, #0]
 8002c68:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002c6c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8002c70:	601a      	str	r2, [r3, #0]
    FIL file;
    char buffer[64];
    char line[128] = {0};
 8002c72:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002c76:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2100      	movs	r1, #0
 8002c82:	f011 fdc3 	bl	801480c <memset>
    UINT bytesRead;
    int lineIndex = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

    osMutexAcquire(sdMutexHandle, osWaitForever);
 8002c8c:	4b7c      	ldr	r3, [pc, #496]	@ (8002e80 <SD_ReadFilePrintRange+0x234>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c94:	4618      	mov	r0, r3
 8002c96:	f00b fd7c 	bl	800e792 <osMutexAcquire>

    if (f_open(&file, filename, FA_READ) == FR_OK)
 8002c9a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002c9e:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002ca2:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	f00a fb05 	bl	800d2b8 <f_open>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 81c3 	bne.w	800303c <SD_ReadFilePrintRange+0x3f0>
    {
        printf("Reading %s:\r\n", filename);
 8002cb6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002cba:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002cbe:	6819      	ldr	r1, [r3, #0]
 8002cc0:	4870      	ldr	r0, [pc, #448]	@ (8002e84 <SD_ReadFilePrintRange+0x238>)
 8002cc2:	f011 fd33 	bl	801472c <iprintf>

        do {
            FRESULT readResult = f_read(&file, buffer, sizeof(buffer) - 1, &bytesRead);
 8002cc6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002cca:	f107 01dc 	add.w	r1, r7, #220	@ 0xdc
 8002cce:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8002cd2:	223f      	movs	r2, #63	@ 0x3f
 8002cd4:	f00a fcb1 	bl	800d63a <f_read>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f887 335f 	strb.w	r3, [r7, #863]	@ 0x35f
            if (readResult != FR_OK) {
 8002cde:	f897 335f 	ldrb.w	r3, [r7, #863]	@ 0x35f
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d006      	beq.n	8002cf4 <SD_ReadFilePrintRange+0xa8>
                printf("f_read error: %d\r\n", readResult);
 8002ce6:	f897 335f 	ldrb.w	r3, [r7, #863]	@ 0x35f
 8002cea:	4619      	mov	r1, r3
 8002cec:	4866      	ldr	r0, [pc, #408]	@ (8002e88 <SD_ReadFilePrintRange+0x23c>)
 8002cee:	f011 fd1d 	bl	801472c <iprintf>
                break;
 8002cf2:	e104      	b.n	8002efe <SD_ReadFilePrintRange+0x2b2>
            }

            buffer[bytesRead] = '\0';
 8002cf4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002cf8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8002d02:	f5a2 7223 	sub.w	r2, r2, #652	@ 0x28c
 8002d06:	2100      	movs	r1, #0
 8002d08:	54d1      	strb	r1, [r2, r3]

            for (UINT i = 0; i < bytesRead; ++i)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8002d10:	e0e3      	b.n	8002eda <SD_ReadFilePrintRange+0x28e>
            {
                if (buffer[i] == '\n' || lineIndex >= sizeof(line) - 2)
 8002d12:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002d16:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8002d1a:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8002d1e:	4413      	add	r3, r2
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b0a      	cmp	r3, #10
 8002d24:	d004      	beq.n	8002d30 <SD_ReadFilePrintRange+0xe4>
 8002d26:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002d2a:	2b7d      	cmp	r3, #125	@ 0x7d
 8002d2c:	f240 80b4 	bls.w	8002e98 <SD_ReadFilePrintRange+0x24c>
                {
                    line[lineIndex] = '\0';
 8002d30:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002d34:	f5a3 7243 	sub.w	r2, r3, #780	@ 0x30c
 8002d38:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002d3c:	4413      	add	r3, r2
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]

                    DateTime dt;
                    int full_year, month, day, hour, min, sec;

                    if (sscanf(line, "%d-%d-%d %d:%d:%d",
 8002d42:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002d46:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002d4a:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8002d4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d52:	9303      	str	r3, [sp, #12]
 8002d54:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	460b      	mov	r3, r1
 8002d68:	4948      	ldr	r1, [pc, #288]	@ (8002e8c <SD_ReadFilePrintRange+0x240>)
 8002d6a:	f010 fd0f 	bl	801378c <siscanf>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b06      	cmp	r3, #6
 8002d72:	f040 8081 	bne.w	8002e78 <SD_ReadFilePrintRange+0x22c>
                            &full_year, &month, &day, &hour, &min, &sec) == 6)
                    {
                        dt.date.year = full_year % 100;
 8002d76:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002d7a:	f5a3 7348 	sub.w	r3, r3, #800	@ 0x320
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a43      	ldr	r2, [pc, #268]	@ (8002e90 <SD_ReadFilePrintRange+0x244>)
 8002d82:	fb82 1203 	smull	r1, r2, r2, r3
 8002d86:	1151      	asrs	r1, r2, #5
 8002d88:	17da      	asrs	r2, r3, #31
 8002d8a:	1a8a      	subs	r2, r1, r2
 8002d8c:	2164      	movs	r1, #100	@ 0x64
 8002d8e:	fb01 f202 	mul.w	r2, r1, r2
 8002d92:	1a9a      	subs	r2, r3, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002d9a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002d9e:	719a      	strb	r2, [r3, #6]
                        dt.date.month = (uint8_t)month;
 8002da0:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002da4:	f5a3 7349 	sub.w	r3, r3, #804	@ 0x324
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002db0:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002db4:	715a      	strb	r2, [r3, #5]
                        dt.date.day = (uint8_t)day;
 8002db6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002dba:	f5a3 734a 	sub.w	r3, r3, #808	@ 0x328
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002dc6:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002dca:	711a      	strb	r2, [r3, #4]
                        dt.time.hours = (uint8_t)hour;
 8002dcc:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002dd0:	f5a3 734b 	sub.w	r3, r3, #812	@ 0x32c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ddc:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002de0:	71da      	strb	r2, [r3, #7]
                        dt.time.minutes = (uint8_t)min;
 8002de2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002de6:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002df2:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002df6:	721a      	strb	r2, [r3, #8]
                        dt.time.seconds = (uint8_t)sec;
 8002df8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002dfc:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002e08:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8002e0c:	725a      	strb	r2, [r3, #9]

                        int cmp_start = DateTime_Compare(&dt, start);
 8002e0e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002e12:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002e16:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002e1a:	6819      	ldr	r1, [r3, #0]
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f7fe ff1f 	bl	8001c60 <DateTime_Compare>
 8002e22:	f8c7 0358 	str.w	r0, [r7, #856]	@ 0x358
                        int cmp_end = DateTime_Compare(&dt, end);
 8002e26:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002e2a:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8002e2e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002e32:	6819      	ldr	r1, [r3, #0]
 8002e34:	4610      	mov	r0, r2
 8002e36:	f7fe ff13 	bl	8001c60 <DateTime_Compare>
 8002e3a:	f8c7 0354 	str.w	r0, [r7, #852]	@ 0x354

                        if (cmp_end > 0) {
 8002e3e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	dd0a      	ble.n	8002e5c <SD_ReadFilePrintRange+0x210>
                            // Reached past the end — break early
                            f_close(&file);
 8002e46:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f00a ff90 	bl	800dd70 <f_close>
                            osMutexRelease(sdMutexHandle);
 8002e50:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <SD_ReadFilePrintRange+0x234>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f00b fce7 	bl	800e828 <osMutexRelease>
 8002e5a:	e0fc      	b.n	8003056 <SD_ReadFilePrintRange+0x40a>
                            return;
                        }

                        if (cmp_start >= 0 && cmp_end <= 0) {
 8002e5c:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	db09      	blt.n	8002e78 <SD_ReadFilePrintRange+0x22c>
 8002e64:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	dc05      	bgt.n	8002e78 <SD_ReadFilePrintRange+0x22c>
                            printf("DATA: %s\r\n", line);
 8002e6c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e70:	4619      	mov	r1, r3
 8002e72:	4808      	ldr	r0, [pc, #32]	@ (8002e94 <SD_ReadFilePrintRange+0x248>)
 8002e74:	f011 fc5a 	bl	801472c <iprintf>
                        }
                    }

                    lineIndex = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
                {
 8002e7e:	e027      	b.n	8002ed0 <SD_ReadFilePrintRange+0x284>
 8002e80:	200003f4 	.word	0x200003f4
 8002e84:	080180ac 	.word	0x080180ac
 8002e88:	080180bc 	.word	0x080180bc
 8002e8c:	08018128 	.word	0x08018128
 8002e90:	51eb851f 	.word	0x51eb851f
 8002e94:	080180d0 	.word	0x080180d0
                }
                else if (buffer[i] != '\r')
 8002e98:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002e9c:	f5a3 7223 	sub.w	r2, r3, #652	@ 0x28c
 8002ea0:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8002ea4:	4413      	add	r3, r2
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b0d      	cmp	r3, #13
 8002eaa:	d011      	beq.n	8002ed0 <SD_ReadFilePrintRange+0x284>
                {
                    line[lineIndex++] = buffer[i];
 8002eac:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	f8c7 2364 	str.w	r2, [r7, #868]	@ 0x364
 8002eb6:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8002eba:	f5a2 7123 	sub.w	r1, r2, #652	@ 0x28c
 8002ebe:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8002ec2:	440a      	add	r2, r1
 8002ec4:	7811      	ldrb	r1, [r2, #0]
 8002ec6:	f507 725a 	add.w	r2, r7, #872	@ 0x368
 8002eca:	f5a2 7243 	sub.w	r2, r2, #780	@ 0x30c
 8002ece:	54d1      	strb	r1, [r2, r3]
            for (UINT i = 0; i < bytesRead; ++i)
 8002ed0:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8002eda:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ede:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	f4ff af12 	bcc.w	8002d12 <SD_ReadFilePrintRange+0xc6>
                }
            }

        } while (bytesRead > 0);
 8002eee:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002ef2:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f47f aee4 	bne.w	8002cc6 <SD_ReadFilePrintRange+0x7a>


        if (lineIndex > 0)
 8002efe:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f340 8094 	ble.w	8003030 <SD_ReadFilePrintRange+0x3e4>
        {
            line[lineIndex] = '\0';
 8002f08:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f0c:	f5a3 7243 	sub.w	r2, r3, #780	@ 0x30c
 8002f10:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8002f14:	4413      	add	r3, r2
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]

            DateTime dt;
            int full_year, month, day, hour, min, sec;

            if (sscanf(line, "%d-%d-%d %d:%d:%d",
 8002f1a:	f107 0120 	add.w	r1, r7, #32
 8002f1e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002f22:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 8002f26:	f107 0310 	add.w	r3, r7, #16
 8002f2a:	9303      	str	r3, [sp, #12]
 8002f2c:	f107 0314 	add.w	r3, r7, #20
 8002f30:	9302      	str	r3, [sp, #8]
 8002f32:	f107 0318 	add.w	r3, r7, #24
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4947      	ldr	r1, [pc, #284]	@ (8003060 <SD_ReadFilePrintRange+0x414>)
 8002f42:	f010 fc23 	bl	801378c <siscanf>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d171      	bne.n	8003030 <SD_ReadFilePrintRange+0x3e4>
                    &full_year, &month, &day, &hour, &min, &sec) == 6)
            {
                dt.date.year = full_year % 100;
 8002f4c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f50:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a43      	ldr	r2, [pc, #268]	@ (8003064 <SD_ReadFilePrintRange+0x418>)
 8002f58:	fb82 1203 	smull	r1, r2, r2, r3
 8002f5c:	1151      	asrs	r1, r2, #5
 8002f5e:	17da      	asrs	r2, r3, #31
 8002f60:	1a8a      	subs	r2, r1, r2
 8002f62:	2164      	movs	r1, #100	@ 0x64
 8002f64:	fb01 f202 	mul.w	r2, r1, r2
 8002f68:	1a9a      	subs	r2, r3, r2
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f70:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8002f74:	719a      	strb	r2, [r3, #6]
                dt.date.month = (uint8_t)month;
 8002f76:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f7a:	f5a3 7352 	sub.w	r3, r3, #840	@ 0x348
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f86:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8002f8a:	715a      	strb	r2, [r3, #5]
                dt.date.day = (uint8_t)day;
 8002f8c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f90:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002f9c:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8002fa0:	711a      	strb	r2, [r3, #4]
                dt.time.hours = (uint8_t)hour;
 8002fa2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002fa6:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002fb2:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8002fb6:	71da      	strb	r2, [r3, #7]
                dt.time.minutes = (uint8_t)min;
 8002fb8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002fbc:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002fc8:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8002fcc:	721a      	strb	r2, [r3, #8]
                dt.time.seconds = (uint8_t)sec;
 8002fce:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002fd2:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002fde:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8002fe2:	725a      	strb	r2, [r3, #9]

                int cmp_start = DateTime_Compare(&dt, start);
 8002fe4:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002fe8:	f5a3 7358 	sub.w	r3, r3, #864	@ 0x360
 8002fec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f7fe fe34 	bl	8001c60 <DateTime_Compare>
 8002ff8:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350
                int cmp_end = DateTime_Compare(&dt, end);
 8002ffc:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003000:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8003004:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	4610      	mov	r0, r2
 800300c:	f7fe fe28 	bl	8001c60 <DateTime_Compare>
 8003010:	f8c7 034c 	str.w	r0, [r7, #844]	@ 0x34c

                if (cmp_end <= 0 && cmp_start >= 0) {
 8003014:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8003018:	2b00      	cmp	r3, #0
 800301a:	dc09      	bgt.n	8003030 <SD_ReadFilePrintRange+0x3e4>
 800301c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8003020:	2b00      	cmp	r3, #0
 8003022:	db05      	blt.n	8003030 <SD_ReadFilePrintRange+0x3e4>
                    printf("DATA: %s\r\n", line);
 8003024:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003028:	4619      	mov	r1, r3
 800302a:	480f      	ldr	r0, [pc, #60]	@ (8003068 <SD_ReadFilePrintRange+0x41c>)
 800302c:	f011 fb7e 	bl	801472c <iprintf>
                }
            }
        }

        f_close(&file);
 8003030:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8003034:	4618      	mov	r0, r3
 8003036:	f00a fe9b 	bl	800dd70 <f_close>
 800303a:	e007      	b.n	800304c <SD_ReadFilePrintRange+0x400>
    }
    else
    {
        printf("Failed to open %s for reading\r\n", filename);
 800303c:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8003040:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	4809      	ldr	r0, [pc, #36]	@ (800306c <SD_ReadFilePrintRange+0x420>)
 8003048:	f011 fb70 	bl	801472c <iprintf>
    }

    osMutexRelease(sdMutexHandle);
 800304c:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <SD_ReadFilePrintRange+0x424>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f00b fbe9 	bl	800e828 <osMutexRelease>
}
 8003056:	f507 775a 	add.w	r7, r7, #872	@ 0x368
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	08018128 	.word	0x08018128
 8003064:	51eb851f 	.word	0x51eb851f
 8003068:	080180d0 	.word	0x080180d0
 800306c:	080180dc 	.word	0x080180dc
 8003070:	200003f4 	.word	0x200003f4

08003074 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003078:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <MX_SPI1_Init+0x74>)
 800307a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <MX_SPI1_Init+0x78>)
 800307c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800307e:	4b1a      	ldr	r3, [pc, #104]	@ (80030e8 <MX_SPI1_Init+0x74>)
 8003080:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003084:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003086:	4b18      	ldr	r3, [pc, #96]	@ (80030e8 <MX_SPI1_Init+0x74>)
 8003088:	2200      	movs	r2, #0
 800308a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800308c:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <MX_SPI1_Init+0x74>)
 800308e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003092:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003094:	4b14      	ldr	r3, [pc, #80]	@ (80030e8 <MX_SPI1_Init+0x74>)
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800309a:	4b13      	ldr	r3, [pc, #76]	@ (80030e8 <MX_SPI1_Init+0x74>)
 800309c:	2200      	movs	r2, #0
 800309e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030a0:	4b11      	ldr	r3, [pc, #68]	@ (80030e8 <MX_SPI1_Init+0x74>)
 80030a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80030a8:	4b0f      	ldr	r3, [pc, #60]	@ (80030e8 <MX_SPI1_Init+0x74>)
 80030aa:	2230      	movs	r2, #48	@ 0x30
 80030ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ae:	4b0e      	ldr	r3, [pc, #56]	@ (80030e8 <MX_SPI1_Init+0x74>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030b4:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <MX_SPI1_Init+0x74>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ba:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <MX_SPI1_Init+0x74>)
 80030bc:	2200      	movs	r2, #0
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030c0:	4b09      	ldr	r3, [pc, #36]	@ (80030e8 <MX_SPI1_Init+0x74>)
 80030c2:	2207      	movs	r2, #7
 80030c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030c6:	4b08      	ldr	r3, [pc, #32]	@ (80030e8 <MX_SPI1_Init+0x74>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030cc:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <MX_SPI1_Init+0x74>)
 80030ce:	2208      	movs	r2, #8
 80030d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030d2:	4805      	ldr	r0, [pc, #20]	@ (80030e8 <MX_SPI1_Init+0x74>)
 80030d4:	f004 fefa 	bl	8007ecc <HAL_SPI_Init>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030de:	f7ff fcb2 	bl	8002a46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	2000089c 	.word	0x2000089c
 80030ec:	40013000 	.word	0x40013000

080030f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	@ 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f8:	f107 0314 	add.w	r3, r7, #20
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a17      	ldr	r2, [pc, #92]	@ (800316c <HAL_SPI_MspInit+0x7c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d128      	bne.n	8003164 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003112:	4b17      	ldr	r3, [pc, #92]	@ (8003170 <HAL_SPI_MspInit+0x80>)
 8003114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003116:	4a16      	ldr	r2, [pc, #88]	@ (8003170 <HAL_SPI_MspInit+0x80>)
 8003118:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800311c:	6613      	str	r3, [r2, #96]	@ 0x60
 800311e:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <HAL_SPI_MspInit+0x80>)
 8003120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	4b11      	ldr	r3, [pc, #68]	@ (8003170 <HAL_SPI_MspInit+0x80>)
 800312c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800312e:	4a10      	ldr	r2, [pc, #64]	@ (8003170 <HAL_SPI_MspInit+0x80>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003136:	4b0e      	ldr	r3, [pc, #56]	@ (8003170 <HAL_SPI_MspInit+0x80>)
 8003138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003142:	23e0      	movs	r3, #224	@ 0xe0
 8003144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800314e:	2303      	movs	r3, #3
 8003150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003152:	2305      	movs	r3, #5
 8003154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 0314 	add.w	r3, r7, #20
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003160:	f002 fe56 	bl	8005e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003164:	bf00      	nop
 8003166:	3728      	adds	r7, #40	@ 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40013000 	.word	0x40013000
 8003170:	40021000 	.word	0x40021000

08003174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_MspInit+0x4c>)
 800317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317e:	4a10      	ldr	r2, [pc, #64]	@ (80031c0 <HAL_MspInit+0x4c>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6613      	str	r3, [r2, #96]	@ 0x60
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <HAL_MspInit+0x4c>)
 8003188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	4b0b      	ldr	r3, [pc, #44]	@ (80031c0 <HAL_MspInit+0x4c>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	4a0a      	ldr	r2, [pc, #40]	@ (80031c0 <HAL_MspInit+0x4c>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319c:	6593      	str	r3, [r2, #88]	@ 0x58
 800319e:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <HAL_MspInit+0x4c>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	210f      	movs	r1, #15
 80031ae:	f06f 0001 	mvn.w	r0, #1
 80031b2:	f002 f8ec 	bl	800538e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000

080031c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <NMI_Handler+0x4>

080031cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <HardFault_Handler+0x4>

080031d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d8:	bf00      	nop
 80031da:	e7fd      	b.n	80031d8 <MemManage_Handler+0x4>

080031dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <BusFault_Handler+0x4>

080031e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <UsageFault_Handler+0x4>

080031ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031fe:	f000 fc27 	bl	8003a50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003202:	f00e f861 	bl	80112c8 <xTaskGetSchedulerState>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800320c:	f00f f97c 	bl	8012508 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}

08003214 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003218:	4802      	ldr	r0, [pc, #8]	@ (8003224 <DMA1_Channel1_IRQHandler+0x10>)
 800321a:	f002 fa86 	bl	800572a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200002a4 	.word	0x200002a4

08003228 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800322c:	4802      	ldr	r0, [pc, #8]	@ (8003238 <USART2_IRQHandler+0x10>)
 800322e:	f006 f9c7 	bl	80095c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200009a0 	.word	0x200009a0

0800323c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8003240:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003244:	f002 ffd8 	bl	80061f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003248:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800324c:	f002 ffd4 	bl	80061f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003250:	bf00      	nop
 8003252:	bd80      	pop	{r7, pc}

08003254 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  return 1;
 8003258:	2301      	movs	r3, #1
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <_kill>:

int _kill(int pid, int sig)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800326e:	f011 fb8d 	bl	801498c <__errno>
 8003272:	4603      	mov	r3, r0
 8003274:	2216      	movs	r2, #22
 8003276:	601a      	str	r2, [r3, #0]
  return -1;
 8003278:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <_exit>:

void _exit (int status)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800328c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff ffe7 	bl	8003264 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003296:	bf00      	nop
 8003298:	e7fd      	b.n	8003296 <_exit+0x12>

0800329a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e00a      	b.n	80032c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032ac:	f3af 8000 	nop.w
 80032b0:	4601      	mov	r1, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	60ba      	str	r2, [r7, #8]
 80032b8:	b2ca      	uxtb	r2, r1
 80032ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	dbf0      	blt.n	80032ac <_read+0x12>
  }

  return len;
 80032ca:	687b      	ldr	r3, [r7, #4]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80032dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032fc:	605a      	str	r2, [r3, #4]
  return 0;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <_isatty>:

int _isatty(int file)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003314:	2301      	movs	r3, #1
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	60b9      	str	r1, [r7, #8]
 800332c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003344:	4a14      	ldr	r2, [pc, #80]	@ (8003398 <_sbrk+0x5c>)
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <_sbrk+0x60>)
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003350:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <_sbrk+0x64>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003358:	4b11      	ldr	r3, [pc, #68]	@ (80033a0 <_sbrk+0x64>)
 800335a:	4a12      	ldr	r2, [pc, #72]	@ (80033a4 <_sbrk+0x68>)
 800335c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800335e:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <_sbrk+0x64>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	429a      	cmp	r2, r3
 800336a:	d207      	bcs.n	800337c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800336c:	f011 fb0e 	bl	801498c <__errno>
 8003370:	4603      	mov	r3, r0
 8003372:	220c      	movs	r2, #12
 8003374:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003376:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800337a:	e009      	b.n	8003390 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800337c:	4b08      	ldr	r3, [pc, #32]	@ (80033a0 <_sbrk+0x64>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003382:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <_sbrk+0x64>)
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4413      	add	r3, r2
 800338a:	4a05      	ldr	r2, [pc, #20]	@ (80033a0 <_sbrk+0x64>)
 800338c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800338e:	68fb      	ldr	r3, [r7, #12]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20018000 	.word	0x20018000
 800339c:	00000400 	.word	0x00000400
 80033a0:	20000900 	.word	0x20000900
 80033a4:	200067b8 	.word	0x200067b8

080033a8 <UpdateSampleRateForMode>:
extern osMessageQueueId_t eventQueueHandle;
extern DateTime* g_dt;


void UpdateSampleRateForMode(SystemMode mode)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
    uint32_t newDelay = (mode == MODE_ERROR) ? SAMPLE_RATE_ERROR : SAMPLE_RATE_NORMAL;
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d102      	bne.n	80033be <UpdateSampleRateForMode+0x16>
 80033b8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80033bc:	e001      	b.n	80033c2 <UpdateSampleRateForMode+0x1a>
 80033be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80033c2:	60fb      	str	r3, [r7, #12]
    osTimerStop(timID);
 80033c4:	4b07      	ldr	r3, [pc, #28]	@ (80033e4 <UpdateSampleRateForMode+0x3c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f00b f83f 	bl	800e44c <osTimerStop>
    osTimerStart(timID, newDelay);
 80033ce:	4b05      	ldr	r3, [pc, #20]	@ (80033e4 <UpdateSampleRateForMode+0x3c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f00b f80b 	bl	800e3f0 <osTimerStart>
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	200003f0 	.word	0x200003f0

080033e8 <SystemState_Get>:

void SystemState_Init(void) {
    currentMode = MODE_NORMAL;
}

SystemMode SystemState_Get(void) {
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
    return currentMode;
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <SystemState_Get+0x14>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000904 	.word	0x20000904

08003400 <SystemState_Update>:

int SystemState_Update(MessageData* msg, SystemConfig* cfg) {
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
    SystemMode newMode = MODE_NORMAL;
 800340a:	2300      	movs	r3, #0
 800340c:	75fb      	strb	r3, [r7, #23]

    if (
        msg->potent_int < cfg->voltage_min ||
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	889b      	ldrh	r3, [r3, #4]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	edd3 7a01 	vldr	s15, [r3, #4]
    if (
 8003420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003428:	d417      	bmi.n	800345a <SystemState_Update+0x5a>
        msg->temperature_int < cfg->temp_min ||
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	781a      	ldrb	r2, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
        msg->potent_int < cfg->voltage_min ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d311      	bcc.n	800345a <SystemState_Update+0x5a>
        msg->temperature_int > cfg->temp_max ||
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	785b      	ldrb	r3, [r3, #1]
        msg->temperature_int < cfg->temp_min ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d80b      	bhi.n	800345a <SystemState_Update+0x5a>
        msg->humidity_int < cfg->humidity_min ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	789a      	ldrb	r2, [r3, #2]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	789b      	ldrb	r3, [r3, #2]
        msg->temperature_int > cfg->temp_max ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d305      	bcc.n	800345a <SystemState_Update+0x5a>
        msg->light < cfg->light_min
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	78d2      	ldrb	r2, [r2, #3]
        msg->humidity_int < cfg->humidity_min ||
 8003456:	4293      	cmp	r3, r2
 8003458:	d201      	bcs.n	800345e <SystemState_Update+0x5e>
    ) {
        newMode = MODE_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	75fb      	strb	r3, [r7, #23]
    }

    if (newMode != currentMode) {
 800345e:	4b28      	ldr	r3, [pc, #160]	@ (8003500 <SystemState_Update+0x100>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	7dfa      	ldrb	r2, [r7, #23]
 8003464:	429a      	cmp	r2, r3
 8003466:	d045      	beq.n	80034f4 <SystemState_Update+0xf4>
        printf("MODE CHANGED: %d → %d\r\n", currentMode, newMode);
 8003468:	4b25      	ldr	r3, [pc, #148]	@ (8003500 <SystemState_Update+0x100>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	4619      	mov	r1, r3
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	461a      	mov	r2, r3
 8003472:	4824      	ldr	r0, [pc, #144]	@ (8003504 <SystemState_Update+0x104>)
 8003474:	f011 f95a 	bl	801472c <iprintf>

        SystemEvent event = {
 8003478:	2300      	movs	r3, #0
 800347a:	733b      	strb	r3, [r7, #12]
 800347c:	4b20      	ldr	r3, [pc, #128]	@ (8003500 <SystemState_Update+0x100>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	737b      	strb	r3, [r7, #13]
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	73bb      	strb	r3, [r7, #14]
            .type = EVENT_MODE_CHANGED,
            .old_mode = currentMode,
            .new_mode = newMode,
            .date = g_dt->date,
 8003486:	4b20      	ldr	r3, [pc, #128]	@ (8003508 <SystemState_Update+0x108>)
 8003488:	681a      	ldr	r2, [r3, #0]
        SystemEvent event = {
 800348a:	f107 030f 	add.w	r3, r7, #15
 800348e:	3204      	adds	r2, #4
 8003490:	8811      	ldrh	r1, [r2, #0]
 8003492:	7892      	ldrb	r2, [r2, #2]
 8003494:	8019      	strh	r1, [r3, #0]
 8003496:	709a      	strb	r2, [r3, #2]
            .time = g_dt->time
 8003498:	4b1b      	ldr	r3, [pc, #108]	@ (8003508 <SystemState_Update+0x108>)
 800349a:	681a      	ldr	r2, [r3, #0]
        SystemEvent event = {
 800349c:	f107 0312 	add.w	r3, r7, #18
 80034a0:	3207      	adds	r2, #7
 80034a2:	8811      	ldrh	r1, [r2, #0]
 80034a4:	7892      	ldrb	r2, [r2, #2]
 80034a6:	8019      	strh	r1, [r3, #0]
 80034a8:	709a      	strb	r2, [r3, #2]
        };

        osMessageQueuePut(eventQueueHandle, &event, 0, 0);
 80034aa:	4b18      	ldr	r3, [pc, #96]	@ (800350c <SystemState_Update+0x10c>)
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	f107 010c 	add.w	r1, r7, #12
 80034b2:	2300      	movs	r3, #0
 80034b4:	2200      	movs	r2, #0
 80034b6:	f00b fbab 	bl	800ec10 <osMessageQueuePut>
        currentMode = newMode;
 80034ba:	4a11      	ldr	r2, [pc, #68]	@ (8003500 <SystemState_Update+0x100>)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	7013      	strb	r3, [r2, #0]
        UpdateSampleRateForMode(currentMode);
 80034c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003500 <SystemState_Update+0x100>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff6f 	bl	80033a8 <UpdateSampleRateForMode>

        switch (currentMode) {
 80034ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003500 <SystemState_Update+0x100>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <SystemState_Update+0xd8>
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d006      	beq.n	80034e4 <SystemState_Update+0xe4>
 80034d6:	e00b      	b.n	80034f0 <SystemState_Update+0xf0>
            case MODE_NORMAL:
                RGB_SetColor(1, 0, 0); // Green
 80034d8:	2200      	movs	r2, #0
 80034da:	2100      	movs	r1, #0
 80034dc:	2001      	movs	r0, #1
 80034de:	f7ff fab9 	bl	8002a54 <RGB_SetColor>
                break;
 80034e2:	e005      	b.n	80034f0 <SystemState_Update+0xf0>
            case MODE_ERROR:
                RGB_SetColor(0, 0, 1); // Red
 80034e4:	2201      	movs	r2, #1
 80034e6:	2100      	movs	r1, #0
 80034e8:	2000      	movs	r0, #0
 80034ea:	f7ff fab3 	bl	8002a54 <RGB_SetColor>
                break;
 80034ee:	bf00      	nop
        }

        return 1;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e000      	b.n	80034f6 <SystemState_Update+0xf6>
    }

    return 0;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000904 	.word	0x20000904
 8003504:	0801813c 	.word	0x0801813c
 8003508:	2000032c 	.word	0x2000032c
 800350c:	20000310 	.word	0x20000310

08003510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003514:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <SystemInit+0x20>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351a:	4a05      	ldr	r2, [pc, #20]	@ (8003530 <SystemInit+0x20>)
 800351c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	@ 0x28
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800353a:	f107 031c 	add.w	r3, r7, #28
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003546:	463b      	mov	r3, r7
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	611a      	str	r2, [r3, #16]
 8003554:	615a      	str	r2, [r3, #20]
 8003556:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003558:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 800355a:	4a23      	ldr	r2, [pc, #140]	@ (80035e8 <MX_TIM3_Init+0xb4>)
 800355c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800355e:	4b21      	ldr	r3, [pc, #132]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 8003560:	224f      	movs	r2, #79	@ 0x4f
 8003562:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003564:	4b1f      	ldr	r3, [pc, #124]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3815;
 800356a:	4b1e      	ldr	r3, [pc, #120]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 800356c:	f640 62e7 	movw	r2, #3815	@ 0xee7
 8003570:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003572:	4b1c      	ldr	r3, [pc, #112]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 8003574:	2200      	movs	r2, #0
 8003576:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003578:	4b1a      	ldr	r3, [pc, #104]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 800357a:	2200      	movs	r2, #0
 800357c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800357e:	4819      	ldr	r0, [pc, #100]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 8003580:	f005 f98a 	bl	8008898 <HAL_TIM_PWM_Init>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800358a:	f7ff fa5c 	bl	8002a46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003592:	2300      	movs	r3, #0
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003596:	f107 031c 	add.w	r3, r7, #28
 800359a:	4619      	mov	r1, r3
 800359c:	4811      	ldr	r0, [pc, #68]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 800359e:	f005 fe63 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80035a8:	f7ff fa4d 	bl	8002a46 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ac:	2360      	movs	r3, #96	@ 0x60
 80035ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1907;
 80035b0:	f240 7373 	movw	r3, #1907	@ 0x773
 80035b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035be:	463b      	mov	r3, r7
 80035c0:	2200      	movs	r2, #0
 80035c2:	4619      	mov	r1, r3
 80035c4:	4807      	ldr	r0, [pc, #28]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 80035c6:	f005 f9bf 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80035d0:	f7ff fa39 	bl	8002a46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80035d4:	4803      	ldr	r0, [pc, #12]	@ (80035e4 <MX_TIM3_Init+0xb0>)
 80035d6:	f000 f87f 	bl	80036d8 <HAL_TIM_MspPostInit>

}
 80035da:	bf00      	nop
 80035dc:	3728      	adds	r7, #40	@ 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20000908 	.word	0x20000908
 80035e8:	40000400 	.word	0x40000400

080035ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80035fc:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <MX_TIM6_Init+0x64>)
 80035fe:	4a15      	ldr	r2, [pc, #84]	@ (8003654 <MX_TIM6_Init+0x68>)
 8003600:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 8003602:	4b13      	ldr	r3, [pc, #76]	@ (8003650 <MX_TIM6_Init+0x64>)
 8003604:	224f      	movs	r2, #79	@ 0x4f
 8003606:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <MX_TIM6_Init+0x64>)
 800360a:	2200      	movs	r2, #0
 800360c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 800360e:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <MX_TIM6_Init+0x64>)
 8003610:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003614:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003616:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <MX_TIM6_Init+0x64>)
 8003618:	2200      	movs	r2, #0
 800361a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800361c:	480c      	ldr	r0, [pc, #48]	@ (8003650 <MX_TIM6_Init+0x64>)
 800361e:	f005 f87b 	bl	8008718 <HAL_TIM_Base_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003628:	f7ff fa0d 	bl	8002a46 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800362c:	2300      	movs	r3, #0
 800362e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4805      	ldr	r0, [pc, #20]	@ (8003650 <MX_TIM6_Init+0x64>)
 800363a:	f005 fe15 	bl	8009268 <HAL_TIMEx_MasterConfigSynchronization>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003644:	f7ff f9ff 	bl	8002a46 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000954 	.word	0x20000954
 8003654:	40001000 	.word	0x40001000

08003658 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0a      	ldr	r2, [pc, #40]	@ (8003690 <HAL_TIM_PWM_MspInit+0x38>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10b      	bne.n	8003682 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800366a:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <HAL_TIM_PWM_MspInit+0x3c>)
 800366c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366e:	4a09      	ldr	r2, [pc, #36]	@ (8003694 <HAL_TIM_PWM_MspInit+0x3c>)
 8003670:	f043 0302 	orr.w	r3, r3, #2
 8003674:	6593      	str	r3, [r2, #88]	@ 0x58
 8003676:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <HAL_TIM_PWM_MspInit+0x3c>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40000400 	.word	0x40000400
 8003694:	40021000 	.word	0x40021000

08003698 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a0a      	ldr	r2, [pc, #40]	@ (80036d0 <HAL_TIM_Base_MspInit+0x38>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d10b      	bne.n	80036c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80036aa:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <HAL_TIM_Base_MspInit+0x3c>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	4a09      	ldr	r2, [pc, #36]	@ (80036d4 <HAL_TIM_Base_MspInit+0x3c>)
 80036b0:	f043 0310 	orr.w	r3, r3, #16
 80036b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b6:	4b07      	ldr	r3, [pc, #28]	@ (80036d4 <HAL_TIM_Base_MspInit+0x3c>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40001000 	.word	0x40001000
 80036d4:	40021000 	.word	0x40021000

080036d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 030c 	add.w	r3, r7, #12
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a11      	ldr	r2, [pc, #68]	@ (800373c <HAL_TIM_MspPostInit+0x64>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d11b      	bne.n	8003732 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036fa:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <HAL_TIM_MspPostInit+0x68>)
 80036fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036fe:	4a10      	ldr	r2, [pc, #64]	@ (8003740 <HAL_TIM_MspPostInit+0x68>)
 8003700:	f043 0302 	orr.w	r3, r3, #2
 8003704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003706:	4b0e      	ldr	r3, [pc, #56]	@ (8003740 <HAL_TIM_MspPostInit+0x68>)
 8003708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003712:	2310      	movs	r3, #16
 8003714:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003716:	2302      	movs	r3, #2
 8003718:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003722:	2302      	movs	r3, #2
 8003724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003726:	f107 030c 	add.w	r3, r7, #12
 800372a:	4619      	mov	r1, r3
 800372c:	4805      	ldr	r0, [pc, #20]	@ (8003744 <HAL_TIM_MspPostInit+0x6c>)
 800372e:	f002 fb6f 	bl	8005e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003732:	bf00      	nop
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40000400 	.word	0x40000400
 8003740:	40021000 	.word	0x40021000
 8003744:	48000400 	.word	0x48000400

08003748 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800374c:	4b14      	ldr	r3, [pc, #80]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 800374e:	4a15      	ldr	r2, [pc, #84]	@ (80037a4 <MX_USART2_UART_Init+0x5c>)
 8003750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003752:	4b13      	ldr	r3, [pc, #76]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 8003754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800375a:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 800376e:	220c      	movs	r2, #12
 8003770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003772:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003778:	4b09      	ldr	r3, [pc, #36]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800377e:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 8003780:	2200      	movs	r2, #0
 8003782:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 8003786:	2200      	movs	r2, #0
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800378a:	4805      	ldr	r0, [pc, #20]	@ (80037a0 <MX_USART2_UART_Init+0x58>)
 800378c:	f005 fdf4 	bl	8009378 <HAL_UART_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003796:	f7ff f956 	bl	8002a46 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200009a0 	.word	0x200009a0
 80037a4:	40004400 	.word	0x40004400

080037a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b0ac      	sub	sp, #176	@ 0xb0
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	60da      	str	r2, [r3, #12]
 80037be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2288      	movs	r2, #136	@ 0x88
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f011 f81f 	bl	801480c <memset>
  if(uartHandle->Instance==USART2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a25      	ldr	r2, [pc, #148]	@ (8003868 <HAL_UART_MspInit+0xc0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d143      	bne.n	8003860 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80037d8:	2302      	movs	r3, #2
 80037da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037dc:	2300      	movs	r3, #0
 80037de:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	4618      	mov	r0, r3
 80037e6:	f003 fb8f 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037f0:	f7ff f929 	bl	8002a46 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037f4:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_UART_MspInit+0xc4>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f8:	4a1c      	ldr	r2, [pc, #112]	@ (800386c <HAL_UART_MspInit+0xc4>)
 80037fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <HAL_UART_MspInit+0xc4>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380c:	4b17      	ldr	r3, [pc, #92]	@ (800386c <HAL_UART_MspInit+0xc4>)
 800380e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003810:	4a16      	ldr	r2, [pc, #88]	@ (800386c <HAL_UART_MspInit+0xc4>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003818:	4b14      	ldr	r3, [pc, #80]	@ (800386c <HAL_UART_MspInit+0xc4>)
 800381a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003824:	230c      	movs	r3, #12
 8003826:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003836:	2303      	movs	r3, #3
 8003838:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800383c:	2307      	movs	r3, #7
 800383e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003842:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003846:	4619      	mov	r1, r3
 8003848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800384c:	f002 fae0 	bl	8005e10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003850:	2200      	movs	r2, #0
 8003852:	2105      	movs	r1, #5
 8003854:	2026      	movs	r0, #38	@ 0x26
 8003856:	f001 fd9a 	bl	800538e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800385a:	2026      	movs	r0, #38	@ 0x26
 800385c:	f001 fdb3 	bl	80053c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003860:	bf00      	nop
 8003862:	37b0      	adds	r7, #176	@ 0xb0
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40004400 	.word	0x40004400
 800386c:	40021000 	.word	0x40021000

08003870 <_write>:
uint8_t uartRxBuffer[1];
char commandBuffer[UART_COMMAND_BUFFER_SIZE];
volatile uint8_t commandIndex = 0;

int _write(int file, char *ptr, int len)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	b29a      	uxth	r2, r3
 8003880:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4804      	ldr	r0, [pc, #16]	@ (8003898 <_write+0x28>)
 8003888:	f005 fdc4 	bl	8009414 <HAL_UART_Transmit>
    return len;
 800388c:	687b      	ldr	r3, [r7, #4]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200009a0 	.word	0x200009a0

0800389c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a20      	ldr	r2, [pc, #128]	@ (800392c <HAL_UART_RxCpltCallback+0x90>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d13a      	bne.n	8003924 <HAL_UART_RxCpltCallback+0x88>
    {
        char receivedChar = uartRxBuffer[0];
 80038ae:	4b20      	ldr	r3, [pc, #128]	@ (8003930 <HAL_UART_RxCpltCallback+0x94>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	73fb      	strb	r3, [r7, #15]

        if (receivedChar == '\r' || receivedChar == '\n')
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b0d      	cmp	r3, #13
 80038b8:	d002      	beq.n	80038c0 <HAL_UART_RxCpltCallback+0x24>
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b0a      	cmp	r3, #10
 80038be:	d112      	bne.n	80038e6 <HAL_UART_RxCpltCallback+0x4a>
        {
            if (commandIndex > 0)
 80038c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003934 <HAL_UART_RxCpltCallback+0x98>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d027      	beq.n	800391a <HAL_UART_RxCpltCallback+0x7e>
            {
                commandBuffer[commandIndex] = '\0';
 80038ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003934 <HAL_UART_RxCpltCallback+0x98>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_UART_RxCpltCallback+0x9c>)
 80038d4:	2100      	movs	r1, #0
 80038d6:	5499      	strb	r1, [r3, r2]
                osEventFlagsSet(commEventFlags, 0x01);
 80038d8:	4b18      	ldr	r3, [pc, #96]	@ (800393c <HAL_UART_RxCpltCallback+0xa0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2101      	movs	r1, #1
 80038de:	4618      	mov	r0, r3
 80038e0:	f00a fe2a 	bl	800e538 <osEventFlagsSet>
            if (commandIndex > 0)
 80038e4:	e019      	b.n	800391a <HAL_UART_RxCpltCallback+0x7e>
            }
        }
        else
        {
        	if (commandIndex == 0)
 80038e6:	4b13      	ldr	r3, [pc, #76]	@ (8003934 <HAL_UART_RxCpltCallback+0x98>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d104      	bne.n	80038fa <HAL_UART_RxCpltCallback+0x5e>
			{
				memset(commandBuffer, 0, UART_COMMAND_BUFFER_SIZE);
 80038f0:	2280      	movs	r2, #128	@ 0x80
 80038f2:	2100      	movs	r1, #0
 80038f4:	4810      	ldr	r0, [pc, #64]	@ (8003938 <HAL_UART_RxCpltCallback+0x9c>)
 80038f6:	f010 ff89 	bl	801480c <memset>
			}

            if (commandIndex < UART_COMMAND_BUFFER_SIZE - 1)
 80038fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <HAL_UART_RxCpltCallback+0x98>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b7e      	cmp	r3, #126	@ 0x7e
 8003902:	d80a      	bhi.n	800391a <HAL_UART_RxCpltCallback+0x7e>
            {
                commandBuffer[commandIndex++] = receivedChar;
 8003904:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <HAL_UART_RxCpltCallback+0x98>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	b2d1      	uxtb	r1, r2
 800390e:	4a09      	ldr	r2, [pc, #36]	@ (8003934 <HAL_UART_RxCpltCallback+0x98>)
 8003910:	7011      	strb	r1, [r2, #0]
 8003912:	4619      	mov	r1, r3
 8003914:	4a08      	ldr	r2, [pc, #32]	@ (8003938 <HAL_UART_RxCpltCallback+0x9c>)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	5453      	strb	r3, [r2, r1]
            }
        }

        HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 800391a:	2201      	movs	r2, #1
 800391c:	4904      	ldr	r1, [pc, #16]	@ (8003930 <HAL_UART_RxCpltCallback+0x94>)
 800391e:	4808      	ldr	r0, [pc, #32]	@ (8003940 <HAL_UART_RxCpltCallback+0xa4>)
 8003920:	f005 fe02 	bl	8009528 <HAL_UART_Receive_IT>
    }
}
 8003924:	bf00      	nop
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40004400 	.word	0x40004400
 8003930:	20000a28 	.word	0x20000a28
 8003934:	20000aac 	.word	0x20000aac
 8003938:	20000a2c 	.word	0x20000a2c
 800393c:	20000314 	.word	0x20000314
 8003940:	200009a0 	.word	0x200009a0

08003944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800397c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003948:	f7ff fde2 	bl	8003510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800394c:	480c      	ldr	r0, [pc, #48]	@ (8003980 <LoopForever+0x6>)
  ldr r1, =_edata
 800394e:	490d      	ldr	r1, [pc, #52]	@ (8003984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003950:	4a0d      	ldr	r2, [pc, #52]	@ (8003988 <LoopForever+0xe>)
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003954:	e002      	b.n	800395c <LoopCopyDataInit>

08003956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395a:	3304      	adds	r3, #4

0800395c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800395c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800395e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003960:	d3f9      	bcc.n	8003956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003962:	4a0a      	ldr	r2, [pc, #40]	@ (800398c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003964:	4c0a      	ldr	r4, [pc, #40]	@ (8003990 <LoopForever+0x16>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003968:	e001      	b.n	800396e <LoopFillZerobss>

0800396a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800396c:	3204      	adds	r2, #4

0800396e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800396e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003970:	d3fb      	bcc.n	800396a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003972:	f011 f811 	bl	8014998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003976:	f7fe fff3 	bl	8002960 <main>

0800397a <LoopForever>:

LoopForever:
    b LoopForever
 800397a:	e7fe      	b.n	800397a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800397c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003984:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8003988:	08018850 	.word	0x08018850
  ldr r2, =_sbss
 800398c:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8003990:	200067b8 	.word	0x200067b8

08003994 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003994:	e7fe      	b.n	8003994 <ADC1_2_IRQHandler>
	...

08003998 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a2:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <HAL_Init+0x3c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a0b      	ldr	r2, [pc, #44]	@ (80039d4 <HAL_Init+0x3c>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ae:	2003      	movs	r0, #3
 80039b0:	f001 fce2 	bl	8005378 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039b4:	200f      	movs	r0, #15
 80039b6:	f000 f80f 	bl	80039d8 <HAL_InitTick>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	71fb      	strb	r3, [r7, #7]
 80039c4:	e001      	b.n	80039ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80039c6:	f7ff fbd5 	bl	8003174 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80039ca:	79fb      	ldrb	r3, [r7, #7]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40022000 	.word	0x40022000

080039d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039e4:	4b17      	ldr	r3, [pc, #92]	@ (8003a44 <HAL_InitTick+0x6c>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d023      	beq.n	8003a34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039ec:	4b16      	ldr	r3, [pc, #88]	@ (8003a48 <HAL_InitTick+0x70>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <HAL_InitTick+0x6c>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4619      	mov	r1, r3
 80039f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80039fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fced 	bl	80053e2 <HAL_SYSTICK_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10f      	bne.n	8003a2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b0f      	cmp	r3, #15
 8003a12:	d809      	bhi.n	8003a28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a14:	2200      	movs	r2, #0
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a1c:	f001 fcb7 	bl	800538e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a20:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <HAL_InitTick+0x74>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e007      	b.n	8003a38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	73fb      	strb	r3, [r7, #15]
 8003a2c:	e004      	b.n	8003a38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	73fb      	strb	r3, [r7, #15]
 8003a32:	e001      	b.n	8003a38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2000001c 	.word	0x2000001c
 8003a48:	20000014 	.word	0x20000014
 8003a4c:	20000018 	.word	0x20000018

08003a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_IncTick+0x20>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <HAL_IncTick+0x24>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	4a04      	ldr	r2, [pc, #16]	@ (8003a74 <HAL_IncTick+0x24>)
 8003a62:	6013      	str	r3, [r2, #0]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	2000001c 	.word	0x2000001c
 8003a74:	20000ab0 	.word	0x20000ab0

08003a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	@ (8003a8c <HAL_GetTick+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000ab0 	.word	0x20000ab0

08003a90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	609a      	str	r2, [r3, #8]
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	609a      	str	r2, [r3, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3360      	adds	r3, #96	@ 0x60
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	4b08      	ldr	r3, [pc, #32]	@ (8003b3c <LL_ADC_SetOffset+0x44>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	03fff000 	.word	0x03fff000

08003b40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3360      	adds	r3, #96	@ 0x60
 8003b4e:	461a      	mov	r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3360      	adds	r3, #96	@ 0x60
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3330      	adds	r3, #48	@ 0x30
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	4413      	add	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	211f      	movs	r1, #31
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	0e9b      	lsrs	r3, r3, #26
 8003c00:	f003 011f 	and.w	r1, r3, #31
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	461a      	mov	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	0e5b      	lsrs	r3, r3, #25
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	4413      	add	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	0d1b      	lsrs	r3, r3, #20
 8003c48:	f003 031f 	and.w	r3, r3, #31
 8003c4c:	2107      	movs	r1, #7
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	401a      	ands	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	0d1b      	lsrs	r3, r3, #20
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	431a      	orrs	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c90:	43db      	mvns	r3, r3
 8003c92:	401a      	ands	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0318 	and.w	r3, r3, #24
 8003c9a:	4908      	ldr	r1, [pc, #32]	@ (8003cbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c9c:	40d9      	lsrs	r1, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	400b      	ands	r3, r1
 8003ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	0007ffff 	.word	0x0007ffff

08003cc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003cec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6093      	str	r3, [r2, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d14:	d101      	bne.n	8003d1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003d38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d3c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d64:	d101      	bne.n	8003d6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d8c:	f043 0201 	orr.w	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003db0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003db4:	f043 0202 	orr.w	r2, r3, #2
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <LL_ADC_IsEnabled+0x18>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e000      	b.n	8003de2 <LL_ADC_IsEnabled+0x1a>
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d101      	bne.n	8003e06 <LL_ADC_IsDisableOngoing+0x18>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <LL_ADC_IsDisableOngoing+0x1a>
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e28:	f043 0204 	orr.w	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e50:	f043 0210 	orr.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d101      	bne.n	8003e7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d101      	bne.n	8003eca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b089      	sub	sp, #36	@ 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e130      	b.n	8004154 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fd f92b 	bl	800115c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fef1 	bl	8003d00 <LL_ADC_IsDeepPowerDownEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff fed7 	bl	8003cdc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff0c 	bl	8003d50 <LL_ADC_IsInternalRegulatorEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d115      	bne.n	8003f6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fef0 	bl	8003d28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f48:	4b84      	ldr	r3, [pc, #528]	@ (800415c <HAL_ADC_Init+0x284>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	4a84      	ldr	r2, [pc, #528]	@ (8004160 <HAL_ADC_Init+0x288>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	099b      	lsrs	r3, r3, #6
 8003f56:	3301      	adds	r3, #1
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f5c:	e002      	b.n	8003f64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f9      	bne.n	8003f5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff feee 	bl	8003d50 <LL_ADC_IsInternalRegulatorEnabled>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	f043 0210 	orr.w	r2, r3, #16
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	f043 0201 	orr.w	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff62 	bl	8003e64 <LL_ADC_REG_IsConversionOngoing>
 8003fa0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f040 80c9 	bne.w	8004142 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f040 80c5 	bne.w	8004142 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003fc0:	f043 0202 	orr.w	r2, r3, #2
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff fefb 	bl	8003dc8 <LL_ADC_IsEnabled>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d115      	bne.n	8004004 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd8:	4862      	ldr	r0, [pc, #392]	@ (8004164 <HAL_ADC_Init+0x28c>)
 8003fda:	f7ff fef5 	bl	8003dc8 <LL_ADC_IsEnabled>
 8003fde:	4604      	mov	r4, r0
 8003fe0:	4861      	ldr	r0, [pc, #388]	@ (8004168 <HAL_ADC_Init+0x290>)
 8003fe2:	f7ff fef1 	bl	8003dc8 <LL_ADC_IsEnabled>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	431c      	orrs	r4, r3
 8003fea:	4860      	ldr	r0, [pc, #384]	@ (800416c <HAL_ADC_Init+0x294>)
 8003fec:	f7ff feec 	bl	8003dc8 <LL_ADC_IsEnabled>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	4323      	orrs	r3, r4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	485c      	ldr	r0, [pc, #368]	@ (8004170 <HAL_ADC_Init+0x298>)
 8004000:	f7ff fd46 	bl	8003a90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	7e5b      	ldrb	r3, [r3, #25]
 8004008:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800400e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004014:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800401a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004022:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004024:	4313      	orrs	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d106      	bne.n	8004040 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	3b01      	subs	r3, #1
 8004038:	045b      	lsls	r3, r3, #17
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	4b44      	ldr	r3, [pc, #272]	@ (8004174 <HAL_ADC_Init+0x29c>)
 8004064:	4013      	ands	r3, r2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	69b9      	ldr	r1, [r7, #24]
 800406c:	430b      	orrs	r3, r1
 800406e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff1c 	bl	8003eb2 <LL_ADC_INJ_IsConversionOngoing>
 800407a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d13d      	bne.n	80040fe <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d13a      	bne.n	80040fe <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800408c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004094:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040a4:	f023 0302 	bic.w	r3, r3, #2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	69b9      	ldr	r1, [r7, #24]
 80040ae:	430b      	orrs	r3, r1
 80040b0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d118      	bne.n	80040ee <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80040c6:	f023 0304 	bic.w	r3, r3, #4
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040d2:	4311      	orrs	r1, r2
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80040d8:	4311      	orrs	r1, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040de:	430a      	orrs	r2, r1
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	611a      	str	r2, [r3, #16]
 80040ec:	e007      	b.n	80040fe <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d10c      	bne.n	8004120 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410c:	f023 010f 	bic.w	r1, r3, #15
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	1e5a      	subs	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	631a      	str	r2, [r3, #48]	@ 0x30
 800411e:	e007      	b.n	8004130 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 020f 	bic.w	r2, r2, #15
 800412e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	f043 0201 	orr.w	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004140:	e007      	b.n	8004152 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004152:	7ffb      	ldrb	r3, [r7, #31]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3724      	adds	r7, #36	@ 0x24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd90      	pop	{r4, r7, pc}
 800415c:	20000014 	.word	0x20000014
 8004160:	053e2d63 	.word	0x053e2d63
 8004164:	50040000 	.word	0x50040000
 8004168:	50040100 	.word	0x50040100
 800416c:	50040200 	.word	0x50040200
 8004170:	50040300 	.word	0x50040300
 8004174:	fff0c007 	.word	0xfff0c007

08004178 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004184:	4853      	ldr	r0, [pc, #332]	@ (80042d4 <HAL_ADC_Start_DMA+0x15c>)
 8004186:	f7ff fd9b 	bl	8003cc0 <LL_ADC_GetMultimode>
 800418a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fe67 	bl	8003e64 <LL_ADC_REG_IsConversionOngoing>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8093 	bne.w	80042c4 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_Start_DMA+0x34>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e08e      	b.n	80042ca <HAL_ADC_Start_DMA+0x152>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a47      	ldr	r2, [pc, #284]	@ (80042d8 <HAL_ADC_Start_DMA+0x160>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d008      	beq.n	80041d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b05      	cmp	r3, #5
 80041c8:	d002      	beq.n	80041d0 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b09      	cmp	r3, #9
 80041ce:	d172      	bne.n	80042b6 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fdb1 	bl	8004d38 <ADC_Enable>
 80041d6:	4603      	mov	r3, r0
 80041d8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80041da:	7dfb      	ldrb	r3, [r7, #23]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d165      	bne.n	80042ac <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a38      	ldr	r2, [pc, #224]	@ (80042dc <HAL_ADC_Start_DMA+0x164>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d002      	beq.n	8004204 <HAL_ADC_Start_DMA+0x8c>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	e000      	b.n	8004206 <HAL_ADC_Start_DMA+0x8e>
 8004204:	4b36      	ldr	r3, [pc, #216]	@ (80042e0 <HAL_ADC_Start_DMA+0x168>)
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	4293      	cmp	r3, r2
 800420c:	d002      	beq.n	8004214 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d105      	bne.n	8004220 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004218:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d006      	beq.n	800423a <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004230:	f023 0206 	bic.w	r2, r3, #6
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	659a      	str	r2, [r3, #88]	@ 0x58
 8004238:	e002      	b.n	8004240 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004244:	4a27      	ldr	r2, [pc, #156]	@ (80042e4 <HAL_ADC_Start_DMA+0x16c>)
 8004246:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424c:	4a26      	ldr	r2, [pc, #152]	@ (80042e8 <HAL_ADC_Start_DMA+0x170>)
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004254:	4a25      	ldr	r2, [pc, #148]	@ (80042ec <HAL_ADC_Start_DMA+0x174>)
 8004256:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	221c      	movs	r2, #28
 800425e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0210 	orr.w	r2, r2, #16
 8004276:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3340      	adds	r3, #64	@ 0x40
 8004292:	4619      	mov	r1, r3
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f001 f968 	bl	800556c <HAL_DMA_Start_IT>
 800429c:	4603      	mov	r3, r0
 800429e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff fdb5 	bl	8003e14 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80042aa:	e00d      	b.n	80042c8 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80042b4:	e008      	b.n	80042c8 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80042c2:	e001      	b.n	80042c8 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042c4:	2302      	movs	r3, #2
 80042c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80042c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	50040300 	.word	0x50040300
 80042d8:	50040200 	.word	0x50040200
 80042dc:	50040100 	.word	0x50040100
 80042e0:	50040000 	.word	0x50040000
 80042e4:	08004f03 	.word	0x08004f03
 80042e8:	08004fdb 	.word	0x08004fdb
 80042ec:	08004ff7 	.word	0x08004ff7

080042f0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_ADC_Stop_DMA+0x16>
 8004302:	2302      	movs	r3, #2
 8004304:	e051      	b.n	80043aa <HAL_ADC_Stop_DMA+0xba>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800430e:	2103      	movs	r1, #3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fc55 	bl	8004bc0 <ADC_ConversionStop>
 8004316:	4603      	mov	r3, r0
 8004318:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d13f      	bne.n	80043a0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004334:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d10f      	bne.n	800435e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004342:	4618      	mov	r0, r3
 8004344:	f001 f972 	bl	800562c <HAL_DMA_Abort>
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004356:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0210 	bic.w	r2, r2, #16
 800436c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fd65 	bl	8004e44 <ADC_Disable>
 800437a:	4603      	mov	r3, r0
 800437c:	73fb      	strb	r3, [r7, #15]
 800437e:	e002      	b.n	8004386 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fd5f 	bl	8004e44 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d109      	bne.n	80043a0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004390:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b0b6      	sub	sp, #216	@ 0xd8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x22>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e3c9      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x7b6>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fd2a 	bl	8003e64 <LL_ADC_REG_IsConversionOngoing>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	f040 83aa 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b05      	cmp	r3, #5
 8004426:	d824      	bhi.n	8004472 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	3b02      	subs	r3, #2
 800442e:	2b03      	cmp	r3, #3
 8004430:	d81b      	bhi.n	800446a <HAL_ADC_ConfigChannel+0x8e>
 8004432:	a201      	add	r2, pc, #4	@ (adr r2, 8004438 <HAL_ADC_ConfigChannel+0x5c>)
 8004434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004438:	08004449 	.word	0x08004449
 800443c:	08004451 	.word	0x08004451
 8004440:	08004459 	.word	0x08004459
 8004444:	08004461 	.word	0x08004461
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004448:	230c      	movs	r3, #12
 800444a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800444e:	e010      	b.n	8004472 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004450:	2312      	movs	r3, #18
 8004452:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004456:	e00c      	b.n	8004472 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004458:	2318      	movs	r3, #24
 800445a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800445e:	e008      	b.n	8004472 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004468:	e003      	b.n	8004472 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800446a:	2306      	movs	r3, #6
 800446c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004470:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004480:	f7ff fba2 	bl	8003bc8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff fceb 	bl	8003e64 <LL_ADC_REG_IsConversionOngoing>
 800448e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fd0b 	bl	8003eb2 <LL_ADC_INJ_IsConversionOngoing>
 800449c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 81a4 	bne.w	80047f2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f040 819f 	bne.w	80047f2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6818      	ldr	r0, [r3, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	461a      	mov	r2, r3
 80044c2:	f7ff fbad 	bl	8003c20 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	08db      	lsrs	r3, r3, #3
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d00a      	beq.n	80044fe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6919      	ldr	r1, [r3, #16]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80044f8:	f7ff fafe 	bl	8003af8 <LL_ADC_SetOffset>
 80044fc:	e179      	b.n	80047f2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fb1b 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 800450a:	4603      	mov	r3, r0
 800450c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <HAL_ADC_ConfigChannel+0x14e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fb10 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 8004520:	4603      	mov	r3, r0
 8004522:	0e9b      	lsrs	r3, r3, #26
 8004524:	f003 021f 	and.w	r2, r3, #31
 8004528:	e01e      	b.n	8004568 <HAL_ADC_ConfigChannel+0x18c>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff fb05 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 8004536:	4603      	mov	r3, r0
 8004538:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004548:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800454c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004558:	2320      	movs	r3, #32
 800455a:	e004      	b.n	8004566 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800455c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004560:	fab3 f383 	clz	r3, r3
 8004564:	b2db      	uxtb	r3, r3
 8004566:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004570:	2b00      	cmp	r3, #0
 8004572:	d105      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x1a4>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	0e9b      	lsrs	r3, r3, #26
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	e018      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x1d6>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004588:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800458c:	fa93 f3a3 	rbit	r3, r3
 8004590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800459c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80045a4:	2320      	movs	r3, #32
 80045a6:	e004      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80045a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80045ac:	fab3 f383 	clz	r3, r3
 80045b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d106      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2200      	movs	r2, #0
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fad4 	bl	8003b6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2101      	movs	r1, #1
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fab8 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x214>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2101      	movs	r1, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff faad 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 80045e6:	4603      	mov	r3, r0
 80045e8:	0e9b      	lsrs	r3, r3, #26
 80045ea:	f003 021f 	and.w	r2, r3, #31
 80045ee:	e01e      	b.n	800462e <HAL_ADC_ConfigChannel+0x252>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2101      	movs	r1, #1
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff faa2 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800460e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004612:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800461e:	2320      	movs	r3, #32
 8004620:	e004      	b.n	800462c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004636:	2b00      	cmp	r3, #0
 8004638:	d105      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x26a>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	0e9b      	lsrs	r3, r3, #26
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	e018      	b.n	8004678 <HAL_ADC_ConfigChannel+0x29c>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800465a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800465e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004662:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800466a:	2320      	movs	r3, #32
 800466c:	e004      	b.n	8004678 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800466e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004672:	fab3 f383 	clz	r3, r3
 8004676:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004678:	429a      	cmp	r2, r3
 800467a:	d106      	bne.n	800468a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2200      	movs	r2, #0
 8004682:	2101      	movs	r1, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fa71 	bl	8003b6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2102      	movs	r1, #2
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fa55 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 8004696:	4603      	mov	r3, r0
 8004698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x2da>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2102      	movs	r1, #2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff fa4a 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 80046ac:	4603      	mov	r3, r0
 80046ae:	0e9b      	lsrs	r3, r3, #26
 80046b0:	f003 021f 	and.w	r2, r3, #31
 80046b4:	e01e      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x318>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2102      	movs	r1, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fa3f 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046cc:	fa93 f3a3 	rbit	r3, r3
 80046d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80046d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80046dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80046e4:	2320      	movs	r3, #32
 80046e6:	e004      	b.n	80046f2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80046e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046ec:	fab3 f383 	clz	r3, r3
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d105      	bne.n	800470c <HAL_ADC_ConfigChannel+0x330>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	0e9b      	lsrs	r3, r3, #26
 8004706:	f003 031f 	and.w	r3, r3, #31
 800470a:	e014      	b.n	8004736 <HAL_ADC_ConfigChannel+0x35a>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004714:	fa93 f3a3 	rbit	r3, r3
 8004718:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800471a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800471c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004720:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004728:	2320      	movs	r3, #32
 800472a:	e004      	b.n	8004736 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800472c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004730:	fab3 f383 	clz	r3, r3
 8004734:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004736:	429a      	cmp	r2, r3
 8004738:	d106      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2200      	movs	r2, #0
 8004740:	2102      	movs	r1, #2
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fa12 	bl	8003b6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2103      	movs	r1, #3
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff f9f6 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 8004754:	4603      	mov	r3, r0
 8004756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <HAL_ADC_ConfigChannel+0x398>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2103      	movs	r1, #3
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff f9eb 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 800476a:	4603      	mov	r3, r0
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	f003 021f 	and.w	r2, r3, #31
 8004772:	e017      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x3c8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2103      	movs	r1, #3
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff f9e0 	bl	8003b40 <LL_ADC_GetOffsetChannel>
 8004780:	4603      	mov	r3, r0
 8004782:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004784:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004786:	fa93 f3a3 	rbit	r3, r3
 800478a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800478c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800478e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004790:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004796:	2320      	movs	r3, #32
 8004798:	e003      	b.n	80047a2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800479a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d105      	bne.n	80047bc <HAL_ADC_ConfigChannel+0x3e0>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	0e9b      	lsrs	r3, r3, #26
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	e011      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x404>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047c4:	fa93 f3a3 	rbit	r3, r3
 80047c8:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80047ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80047ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80047d4:	2320      	movs	r3, #32
 80047d6:	e003      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80047d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047da:	fab3 f383 	clz	r3, r3
 80047de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d106      	bne.n	80047f2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2200      	movs	r2, #0
 80047ea:	2103      	movs	r1, #3
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff f9bd 	bl	8003b6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fae6 	bl	8003dc8 <LL_ADC_IsEnabled>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 8140 	bne.w	8004a84 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	6819      	ldr	r1, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	461a      	mov	r2, r3
 8004812:	f7ff fa31 	bl	8003c78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	4a8f      	ldr	r2, [pc, #572]	@ (8004a58 <HAL_ADC_ConfigChannel+0x67c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	f040 8131 	bne.w	8004a84 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <HAL_ADC_ConfigChannel+0x46e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	0e9b      	lsrs	r3, r3, #26
 8004838:	3301      	adds	r3, #1
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	2b09      	cmp	r3, #9
 8004840:	bf94      	ite	ls
 8004842:	2301      	movls	r3, #1
 8004844:	2300      	movhi	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	e019      	b.n	800487e <HAL_ADC_ConfigChannel+0x4a2>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004850:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004852:	fa93 f3a3 	rbit	r3, r3
 8004856:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800485a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800485c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004862:	2320      	movs	r3, #32
 8004864:	e003      	b.n	800486e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	3301      	adds	r3, #1
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2b09      	cmp	r3, #9
 8004876:	bf94      	ite	ls
 8004878:	2301      	movls	r3, #1
 800487a:	2300      	movhi	r3, #0
 800487c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800487e:	2b00      	cmp	r3, #0
 8004880:	d079      	beq.n	8004976 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <HAL_ADC_ConfigChannel+0x4c2>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	0e9b      	lsrs	r3, r3, #26
 8004894:	3301      	adds	r3, #1
 8004896:	069b      	lsls	r3, r3, #26
 8004898:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800489c:	e015      	b.n	80048ca <HAL_ADC_ConfigChannel+0x4ee>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048a6:	fa93 f3a3 	rbit	r3, r3
 80048aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80048ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80048b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80048b6:	2320      	movs	r3, #32
 80048b8:	e003      	b.n	80048c2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80048ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	3301      	adds	r3, #1
 80048c4:	069b      	lsls	r3, r3, #26
 80048c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x50e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	0e9b      	lsrs	r3, r3, #26
 80048dc:	3301      	adds	r3, #1
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	2101      	movs	r1, #1
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	e017      	b.n	800491a <HAL_ADC_ConfigChannel+0x53e>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80048f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048fa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80048fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004902:	2320      	movs	r3, #32
 8004904:	e003      	b.n	800490e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004908:	fab3 f383 	clz	r3, r3
 800490c:	b2db      	uxtb	r3, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f003 031f 	and.w	r3, r3, #31
 8004914:	2101      	movs	r1, #1
 8004916:	fa01 f303 	lsl.w	r3, r1, r3
 800491a:	ea42 0103 	orr.w	r1, r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x564>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	0e9b      	lsrs	r3, r3, #26
 8004930:	3301      	adds	r3, #1
 8004932:	f003 021f 	and.w	r2, r3, #31
 8004936:	4613      	mov	r3, r2
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	4413      	add	r3, r2
 800493c:	051b      	lsls	r3, r3, #20
 800493e:	e018      	b.n	8004972 <HAL_ADC_ConfigChannel+0x596>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800494e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004950:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004958:	2320      	movs	r3, #32
 800495a:	e003      	b.n	8004964 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800495c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	3301      	adds	r3, #1
 8004966:	f003 021f 	and.w	r2, r3, #31
 800496a:	4613      	mov	r3, r2
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	4413      	add	r3, r2
 8004970:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004972:	430b      	orrs	r3, r1
 8004974:	e081      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x5b6>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	0e9b      	lsrs	r3, r3, #26
 8004988:	3301      	adds	r3, #1
 800498a:	069b      	lsls	r3, r3, #26
 800498c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004990:	e015      	b.n	80049be <HAL_ADC_ConfigChannel+0x5e2>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80049a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80049aa:	2320      	movs	r3, #32
 80049ac:	e003      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80049ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	3301      	adds	r3, #1
 80049b8:	069b      	lsls	r3, r3, #26
 80049ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d109      	bne.n	80049de <HAL_ADC_ConfigChannel+0x602>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	0e9b      	lsrs	r3, r3, #26
 80049d0:	3301      	adds	r3, #1
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2101      	movs	r1, #1
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	e017      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x632>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	61bb      	str	r3, [r7, #24]
  return result;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80049f6:	2320      	movs	r3, #32
 80049f8:	e003      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	3301      	adds	r3, #1
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2101      	movs	r1, #1
 8004a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0e:	ea42 0103 	orr.w	r1, r2, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10d      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0x65e>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	0e9b      	lsrs	r3, r3, #26
 8004a24:	3301      	adds	r3, #1
 8004a26:	f003 021f 	and.w	r2, r3, #31
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	3b1e      	subs	r3, #30
 8004a32:	051b      	lsls	r3, r3, #20
 8004a34:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a38:	e01e      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x69c>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	fa93 f3a3 	rbit	r3, r3
 8004a46:	60fb      	str	r3, [r7, #12]
  return result;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004a52:	2320      	movs	r3, #32
 8004a54:	e006      	b.n	8004a64 <HAL_ADC_ConfigChannel+0x688>
 8004a56:	bf00      	nop
 8004a58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	fab3 f383 	clz	r3, r3
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	3301      	adds	r3, #1
 8004a66:	f003 021f 	and.w	r2, r3, #31
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	3b1e      	subs	r3, #30
 8004a72:	051b      	lsls	r3, r3, #20
 8004a74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a78:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f7ff f8ce 	bl	8003c20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b44      	ldr	r3, [pc, #272]	@ (8004b9c <HAL_ADC_ConfigChannel+0x7c0>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d07a      	beq.n	8004b86 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a90:	4843      	ldr	r0, [pc, #268]	@ (8004ba0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004a92:	f7ff f823 	bl	8003adc <LL_ADC_GetCommonPathInternalCh>
 8004a96:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a41      	ldr	r2, [pc, #260]	@ (8004ba4 <HAL_ADC_ConfigChannel+0x7c8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d12c      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004aa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004aa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d126      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_ADC_ConfigChannel+0x6e8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a3b      	ldr	r2, [pc, #236]	@ (8004bac <HAL_ADC_ConfigChannel+0x7d0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d15d      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ac4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ac8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004acc:	4619      	mov	r1, r3
 8004ace:	4834      	ldr	r0, [pc, #208]	@ (8004ba0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004ad0:	f7fe fff1 	bl	8003ab6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ad4:	4b36      	ldr	r3, [pc, #216]	@ (8004bb0 <HAL_ADC_ConfigChannel+0x7d4>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	4a36      	ldr	r2, [pc, #216]	@ (8004bb4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004adc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae0:	099b      	lsrs	r3, r3, #6
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004aee:	e002      	b.n	8004af6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f9      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004afc:	e040      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d118      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d112      	bne.n	8004b3a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a23      	ldr	r2, [pc, #140]	@ (8004ba8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_ADC_ConfigChannel+0x74c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a22      	ldr	r2, [pc, #136]	@ (8004bac <HAL_ADC_ConfigChannel+0x7d0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d12d      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b30:	4619      	mov	r1, r3
 8004b32:	481b      	ldr	r0, [pc, #108]	@ (8004ba0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004b34:	f7fe ffbf 	bl	8003ab6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b38:	e024      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bbc <HAL_ADC_ConfigChannel+0x7e0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d120      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d11a      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a14      	ldr	r2, [pc, #80]	@ (8004ba8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d115      	bne.n	8004b86 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b62:	4619      	mov	r1, r3
 8004b64:	480e      	ldr	r0, [pc, #56]	@ (8004ba0 <HAL_ADC_ConfigChannel+0x7c4>)
 8004b66:	f7fe ffa6 	bl	8003ab6 <LL_ADC_SetCommonPathInternalCh>
 8004b6a:	e00c      	b.n	8004b86 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b70:	f043 0220 	orr.w	r2, r3, #32
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b7e:	e002      	b.n	8004b86 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b80:	bf00      	nop
 8004b82:	e000      	b.n	8004b86 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b84:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b8e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	37d8      	adds	r7, #216	@ 0xd8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	80080000 	.word	0x80080000
 8004ba0:	50040300 	.word	0x50040300
 8004ba4:	c7520000 	.word	0xc7520000
 8004ba8:	50040000 	.word	0x50040000
 8004bac:	50040200 	.word	0x50040200
 8004bb0:	20000014 	.word	0x20000014
 8004bb4:	053e2d63 	.word	0x053e2d63
 8004bb8:	cb840000 	.word	0xcb840000
 8004bbc:	80000001 	.word	0x80000001

08004bc0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f944 	bl	8003e64 <LL_ADC_REG_IsConversionOngoing>
 8004bdc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff f965 	bl	8003eb2 <LL_ADC_INJ_IsConversionOngoing>
 8004be8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8098 	beq.w	8004d28 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d02a      	beq.n	8004c5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7e5b      	ldrb	r3, [r3, #25]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d126      	bne.n	8004c5c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7e1b      	ldrb	r3, [r3, #24]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d122      	bne.n	8004c5c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004c16:	2301      	movs	r3, #1
 8004c18:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c1a:	e014      	b.n	8004c46 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4a45      	ldr	r2, [pc, #276]	@ (8004d34 <ADC_ConversionStop+0x174>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d90d      	bls.n	8004c40 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c28:	f043 0210 	orr.w	r2, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c34:	f043 0201 	orr.w	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e074      	b.n	8004d2a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3301      	adds	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c50:	2b40      	cmp	r3, #64	@ 0x40
 8004c52:	d1e3      	bne.n	8004c1c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2240      	movs	r2, #64	@ 0x40
 8004c5a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d014      	beq.n	8004c8c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff f8fc 	bl	8003e64 <LL_ADC_REG_IsConversionOngoing>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff f8b9 	bl	8003dee <LL_ADC_IsDisableOngoing>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7ff f8d8 	bl	8003e3c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d014      	beq.n	8004cbc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff f90b 	bl	8003eb2 <LL_ADC_INJ_IsConversionOngoing>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff f8a1 	bl	8003dee <LL_ADC_IsDisableOngoing>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff f8e7 	bl	8003e8a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d005      	beq.n	8004cce <ADC_ConversionStop+0x10e>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d105      	bne.n	8004cd4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004cc8:	230c      	movs	r3, #12
 8004cca:	617b      	str	r3, [r7, #20]
        break;
 8004ccc:	e005      	b.n	8004cda <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004cce:	2308      	movs	r3, #8
 8004cd0:	617b      	str	r3, [r7, #20]
        break;
 8004cd2:	e002      	b.n	8004cda <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004cd4:	2304      	movs	r3, #4
 8004cd6:	617b      	str	r3, [r7, #20]
        break;
 8004cd8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004cda:	f7fe fecd 	bl	8003a78 <HAL_GetTick>
 8004cde:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004ce0:	e01b      	b.n	8004d1a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ce2:	f7fe fec9 	bl	8003a78 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d914      	bls.n	8004d1a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d02:	f043 0210 	orr.w	r2, r3, #16
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0e:	f043 0201 	orr.w	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e007      	b.n	8004d2a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1dc      	bne.n	8004ce2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	a33fffff 	.word	0xa33fffff

08004d38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff f83d 	bl	8003dc8 <LL_ADC_IsEnabled>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d169      	bne.n	8004e28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	4b36      	ldr	r3, [pc, #216]	@ (8004e34 <ADC_Enable+0xfc>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d66:	f043 0210 	orr.w	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	f043 0201 	orr.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e055      	b.n	8004e2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fff8 	bl	8003d78 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d88:	482b      	ldr	r0, [pc, #172]	@ (8004e38 <ADC_Enable+0x100>)
 8004d8a:	f7fe fea7 	bl	8003adc <LL_ADC_GetCommonPathInternalCh>
 8004d8e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004d90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d98:	4b28      	ldr	r3, [pc, #160]	@ (8004e3c <ADC_Enable+0x104>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	099b      	lsrs	r3, r3, #6
 8004d9e:	4a28      	ldr	r2, [pc, #160]	@ (8004e40 <ADC_Enable+0x108>)
 8004da0:	fba2 2303 	umull	r2, r3, r2, r3
 8004da4:	099b      	lsrs	r3, r3, #6
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	4613      	mov	r3, r2
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004db2:	e002      	b.n	8004dba <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f9      	bne.n	8004db4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004dc0:	f7fe fe5a 	bl	8003a78 <HAL_GetTick>
 8004dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dc6:	e028      	b.n	8004e1a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fe fffb 	bl	8003dc8 <LL_ADC_IsEnabled>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d104      	bne.n	8004de2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe ffcb 	bl	8003d78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004de2:	f7fe fe49 	bl	8003a78 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d914      	bls.n	8004e1a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d00d      	beq.n	8004e1a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e02:	f043 0210 	orr.w	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0e:	f043 0201 	orr.w	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e007      	b.n	8004e2a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d1cf      	bne.n	8004dc8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	8000003f 	.word	0x8000003f
 8004e38:	50040300 	.word	0x50040300
 8004e3c:	20000014 	.word	0x20000014
 8004e40:	053e2d63 	.word	0x053e2d63

08004e44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe ffcc 	bl	8003dee <LL_ADC_IsDisableOngoing>
 8004e56:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe ffb3 	bl	8003dc8 <LL_ADC_IsEnabled>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d047      	beq.n	8004ef8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d144      	bne.n	8004ef8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 030d 	and.w	r3, r3, #13
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d10c      	bne.n	8004e96 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe ff8d 	bl	8003da0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e8e:	f7fe fdf3 	bl	8003a78 <HAL_GetTick>
 8004e92:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e94:	e029      	b.n	8004eea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e9a:	f043 0210 	orr.w	r2, r3, #16
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea6:	f043 0201 	orr.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e023      	b.n	8004efa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004eb2:	f7fe fde1 	bl	8003a78 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d914      	bls.n	8004eea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00d      	beq.n	8004eea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ed2:	f043 0210 	orr.w	r2, r3, #16
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ede:	f043 0201 	orr.w	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e007      	b.n	8004efa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1dc      	bne.n	8004eb2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d14b      	bne.n	8004fb4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d021      	beq.n	8004f7a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe fe31 	bl	8003ba2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d032      	beq.n	8004fac <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d12b      	bne.n	8004fac <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d11f      	bne.n	8004fac <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f70:	f043 0201 	orr.w	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f78:	e018      	b.n	8004fac <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d111      	bne.n	8004fac <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d105      	bne.n	8004fac <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa4:	f043 0201 	orr.w	r2, r3, #1
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7fd f9ad 	bl	800230c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fb2:	e00e      	b.n	8004fd2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7ff fa00 	bl	80043c6 <HAL_ADC_ErrorCallback>
}
 8004fc6:	e004      	b.n	8004fd2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4798      	blx	r3
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b084      	sub	sp, #16
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff f9e2 	bl	80043b2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005002:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005008:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005014:	f043 0204 	orr.w	r2, r3, #4
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff f9d2 	bl	80043c6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <LL_ADC_IsEnabled>:
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <LL_ADC_IsEnabled+0x18>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <LL_ADC_IsEnabled+0x1a>
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_ADC_REG_IsConversionOngoing>:
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d101      	bne.n	8005068 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b09f      	sub	sp, #124	@ 0x7c
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005092:	2302      	movs	r3, #2
 8005094:	e093      	b.n	80051be <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800509e:	2300      	movs	r3, #0
 80050a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80050a2:	2300      	movs	r3, #0
 80050a4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a47      	ldr	r2, [pc, #284]	@ (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d102      	bne.n	80050b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80050b0:	4b46      	ldr	r3, [pc, #280]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	e001      	b.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e072      	b.n	80051be <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff ffb8 	bl	8005050 <LL_ADC_REG_IsConversionOngoing>
 80050e0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff ffb2 	bl	8005050 <LL_ADC_REG_IsConversionOngoing>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d154      	bne.n	800519c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80050f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d151      	bne.n	800519c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050f8:	4b35      	ldr	r3, [pc, #212]	@ (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80050fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d02c      	beq.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6859      	ldr	r1, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005116:	035b      	lsls	r3, r3, #13
 8005118:	430b      	orrs	r3, r1
 800511a:	431a      	orrs	r2, r3
 800511c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800511e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005120:	4829      	ldr	r0, [pc, #164]	@ (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8005122:	f7ff ff82 	bl	800502a <LL_ADC_IsEnabled>
 8005126:	4604      	mov	r4, r0
 8005128:	4828      	ldr	r0, [pc, #160]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800512a:	f7ff ff7e 	bl	800502a <LL_ADC_IsEnabled>
 800512e:	4603      	mov	r3, r0
 8005130:	431c      	orrs	r4, r3
 8005132:	4828      	ldr	r0, [pc, #160]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8005134:	f7ff ff79 	bl	800502a <LL_ADC_IsEnabled>
 8005138:	4603      	mov	r3, r0
 800513a:	4323      	orrs	r3, r4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d137      	bne.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005148:	f023 030f 	bic.w	r3, r3, #15
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	6811      	ldr	r1, [r2, #0]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	6892      	ldr	r2, [r2, #8]
 8005154:	430a      	orrs	r2, r1
 8005156:	431a      	orrs	r2, r3
 8005158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800515a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800515c:	e028      	b.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800515e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005168:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800516a:	4817      	ldr	r0, [pc, #92]	@ (80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800516c:	f7ff ff5d 	bl	800502a <LL_ADC_IsEnabled>
 8005170:	4604      	mov	r4, r0
 8005172:	4816      	ldr	r0, [pc, #88]	@ (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005174:	f7ff ff59 	bl	800502a <LL_ADC_IsEnabled>
 8005178:	4603      	mov	r3, r0
 800517a:	431c      	orrs	r4, r3
 800517c:	4815      	ldr	r0, [pc, #84]	@ (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800517e:	f7ff ff54 	bl	800502a <LL_ADC_IsEnabled>
 8005182:	4603      	mov	r3, r0
 8005184:	4323      	orrs	r3, r4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d112      	bne.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800518a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005192:	f023 030f 	bic.w	r3, r3, #15
 8005196:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005198:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800519a:	e009      	b.n	80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80051ae:	e000      	b.n	80051b2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80051b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80051ba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80051be:	4618      	mov	r0, r3
 80051c0:	377c      	adds	r7, #124	@ 0x7c
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	50040000 	.word	0x50040000
 80051cc:	50040100 	.word	0x50040100
 80051d0:	50040300 	.word	0x50040300
 80051d4:	50040200 	.word	0x50040200

080051d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051e8:	4b0c      	ldr	r3, [pc, #48]	@ (800521c <__NVIC_SetPriorityGrouping+0x44>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80051f4:	4013      	ands	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800520a:	4a04      	ldr	r2, [pc, #16]	@ (800521c <__NVIC_SetPriorityGrouping+0x44>)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	60d3      	str	r3, [r2, #12]
}
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	e000ed00 	.word	0xe000ed00

08005220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005224:	4b04      	ldr	r3, [pc, #16]	@ (8005238 <__NVIC_GetPriorityGrouping+0x18>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	0a1b      	lsrs	r3, r3, #8
 800522a:	f003 0307 	and.w	r3, r3, #7
}
 800522e:	4618      	mov	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	e000ed00 	.word	0xe000ed00

0800523c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800524a:	2b00      	cmp	r3, #0
 800524c:	db0b      	blt.n	8005266 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800524e:	79fb      	ldrb	r3, [r7, #7]
 8005250:	f003 021f 	and.w	r2, r3, #31
 8005254:	4907      	ldr	r1, [pc, #28]	@ (8005274 <__NVIC_EnableIRQ+0x38>)
 8005256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800525a:	095b      	lsrs	r3, r3, #5
 800525c:	2001      	movs	r0, #1
 800525e:	fa00 f202 	lsl.w	r2, r0, r2
 8005262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	e000e100 	.word	0xe000e100

08005278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	6039      	str	r1, [r7, #0]
 8005282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005288:	2b00      	cmp	r3, #0
 800528a:	db0a      	blt.n	80052a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	b2da      	uxtb	r2, r3
 8005290:	490c      	ldr	r1, [pc, #48]	@ (80052c4 <__NVIC_SetPriority+0x4c>)
 8005292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005296:	0112      	lsls	r2, r2, #4
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	440b      	add	r3, r1
 800529c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052a0:	e00a      	b.n	80052b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	4908      	ldr	r1, [pc, #32]	@ (80052c8 <__NVIC_SetPriority+0x50>)
 80052a8:	79fb      	ldrb	r3, [r7, #7]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	3b04      	subs	r3, #4
 80052b0:	0112      	lsls	r2, r2, #4
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	440b      	add	r3, r1
 80052b6:	761a      	strb	r2, [r3, #24]
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	e000e100 	.word	0xe000e100
 80052c8:	e000ed00 	.word	0xe000ed00

080052cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b089      	sub	sp, #36	@ 0x24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	f1c3 0307 	rsb	r3, r3, #7
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	bf28      	it	cs
 80052ea:	2304      	movcs	r3, #4
 80052ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	3304      	adds	r3, #4
 80052f2:	2b06      	cmp	r3, #6
 80052f4:	d902      	bls.n	80052fc <NVIC_EncodePriority+0x30>
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	3b03      	subs	r3, #3
 80052fa:	e000      	b.n	80052fe <NVIC_EncodePriority+0x32>
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	43da      	mvns	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	401a      	ands	r2, r3
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005314:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	fa01 f303 	lsl.w	r3, r1, r3
 800531e:	43d9      	mvns	r1, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005324:	4313      	orrs	r3, r2
         );
}
 8005326:	4618      	mov	r0, r3
 8005328:	3724      	adds	r7, #36	@ 0x24
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3b01      	subs	r3, #1
 8005340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005344:	d301      	bcc.n	800534a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005346:	2301      	movs	r3, #1
 8005348:	e00f      	b.n	800536a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800534a:	4a0a      	ldr	r2, [pc, #40]	@ (8005374 <SysTick_Config+0x40>)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3b01      	subs	r3, #1
 8005350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005352:	210f      	movs	r1, #15
 8005354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005358:	f7ff ff8e 	bl	8005278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800535c:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <SysTick_Config+0x40>)
 800535e:	2200      	movs	r2, #0
 8005360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005362:	4b04      	ldr	r3, [pc, #16]	@ (8005374 <SysTick_Config+0x40>)
 8005364:	2207      	movs	r2, #7
 8005366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	e000e010 	.word	0xe000e010

08005378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff ff29 	bl	80051d8 <__NVIC_SetPriorityGrouping>
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b086      	sub	sp, #24
 8005392:	af00      	add	r7, sp, #0
 8005394:	4603      	mov	r3, r0
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053a0:	f7ff ff3e 	bl	8005220 <__NVIC_GetPriorityGrouping>
 80053a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f7ff ff8e 	bl	80052cc <NVIC_EncodePriority>
 80053b0:	4602      	mov	r2, r0
 80053b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053b6:	4611      	mov	r1, r2
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff ff5d 	bl	8005278 <__NVIC_SetPriority>
}
 80053be:	bf00      	nop
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	4603      	mov	r3, r0
 80053ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff ff31 	bl	800523c <__NVIC_EnableIRQ>
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff ffa2 	bl	8005334 <SysTick_Config>
 80053f0:	4603      	mov	r3, r0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e098      	b.n	8005540 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	4b4d      	ldr	r3, [pc, #308]	@ (800554c <HAL_DMA_Init+0x150>)
 8005416:	429a      	cmp	r2, r3
 8005418:	d80f      	bhi.n	800543a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	4b4b      	ldr	r3, [pc, #300]	@ (8005550 <HAL_DMA_Init+0x154>)
 8005422:	4413      	add	r3, r2
 8005424:	4a4b      	ldr	r2, [pc, #300]	@ (8005554 <HAL_DMA_Init+0x158>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	009a      	lsls	r2, r3, #2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a48      	ldr	r2, [pc, #288]	@ (8005558 <HAL_DMA_Init+0x15c>)
 8005436:	641a      	str	r2, [r3, #64]	@ 0x40
 8005438:	e00e      	b.n	8005458 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	4b46      	ldr	r3, [pc, #280]	@ (800555c <HAL_DMA_Init+0x160>)
 8005442:	4413      	add	r3, r2
 8005444:	4a43      	ldr	r2, [pc, #268]	@ (8005554 <HAL_DMA_Init+0x158>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	091b      	lsrs	r3, r3, #4
 800544c:	009a      	lsls	r2, r3, #2
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a42      	ldr	r2, [pc, #264]	@ (8005560 <HAL_DMA_Init+0x164>)
 8005456:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800546e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005472:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800547c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4313      	orrs	r3, r2
 80054a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054b2:	d039      	beq.n	8005528 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b8:	4a27      	ldr	r2, [pc, #156]	@ (8005558 <HAL_DMA_Init+0x15c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d11a      	bne.n	80054f4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80054be:	4b29      	ldr	r3, [pc, #164]	@ (8005564 <HAL_DMA_Init+0x168>)
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f003 031c 	and.w	r3, r3, #28
 80054ca:	210f      	movs	r1, #15
 80054cc:	fa01 f303 	lsl.w	r3, r1, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	4924      	ldr	r1, [pc, #144]	@ (8005564 <HAL_DMA_Init+0x168>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80054d8:	4b22      	ldr	r3, [pc, #136]	@ (8005564 <HAL_DMA_Init+0x168>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6859      	ldr	r1, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e4:	f003 031c 	and.w	r3, r3, #28
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	491d      	ldr	r1, [pc, #116]	@ (8005564 <HAL_DMA_Init+0x168>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]
 80054f2:	e019      	b.n	8005528 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80054f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005568 <HAL_DMA_Init+0x16c>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fc:	f003 031c 	and.w	r3, r3, #28
 8005500:	210f      	movs	r1, #15
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	4917      	ldr	r1, [pc, #92]	@ (8005568 <HAL_DMA_Init+0x16c>)
 800550a:	4013      	ands	r3, r2
 800550c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800550e:	4b16      	ldr	r3, [pc, #88]	@ (8005568 <HAL_DMA_Init+0x16c>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6859      	ldr	r1, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551a:	f003 031c 	and.w	r3, r3, #28
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	4911      	ldr	r1, [pc, #68]	@ (8005568 <HAL_DMA_Init+0x16c>)
 8005524:	4313      	orrs	r3, r2
 8005526:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	40020407 	.word	0x40020407
 8005550:	bffdfff8 	.word	0xbffdfff8
 8005554:	cccccccd 	.word	0xcccccccd
 8005558:	40020000 	.word	0x40020000
 800555c:	bffdfbf8 	.word	0xbffdfbf8
 8005560:	40020400 	.word	0x40020400
 8005564:	400200a8 	.word	0x400200a8
 8005568:	400204a8 	.word	0x400204a8

0800556c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_DMA_Start_IT+0x20>
 8005588:	2302      	movs	r3, #2
 800558a:	e04b      	b.n	8005624 <HAL_DMA_Start_IT+0xb8>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d13a      	bne.n	8005616 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f95f 	bl	8005888 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d008      	beq.n	80055e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f042 020e 	orr.w	r2, r2, #14
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e00f      	b.n	8005604 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 020a 	orr.w	r2, r2, #10
 8005602:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e005      	b.n	8005622 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005622:	7dfb      	ldrb	r3, [r7, #23]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d008      	beq.n	8005656 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2204      	movs	r2, #4
 8005648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e022      	b.n	800569c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 020e 	bic.w	r2, r2, #14
 8005664:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f003 021c 	and.w	r2, r3, #28
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f202 	lsl.w	r2, r1, r2
 8005688:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800569a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d005      	beq.n	80056cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2204      	movs	r2, #4
 80056c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
 80056ca:	e029      	b.n	8005720 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 020e 	bic.w	r2, r2, #14
 80056da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	f003 021c 	and.w	r2, r3, #28
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	2101      	movs	r1, #1
 80056fa:	fa01 f202 	lsl.w	r2, r1, r2
 80056fe:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	4798      	blx	r3
    }
  }
  return status;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005746:	f003 031c 	and.w	r3, r3, #28
 800574a:	2204      	movs	r2, #4
 800574c:	409a      	lsls	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d026      	beq.n	80057a4 <HAL_DMA_IRQHandler+0x7a>
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f003 0304 	and.w	r3, r3, #4
 800575c:	2b00      	cmp	r3, #0
 800575e:	d021      	beq.n	80057a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d107      	bne.n	800577e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0204 	bic.w	r2, r2, #4
 800577c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	f003 021c 	and.w	r2, r3, #28
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	2104      	movs	r1, #4
 800578c:	fa01 f202 	lsl.w	r2, r1, r2
 8005790:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005796:	2b00      	cmp	r3, #0
 8005798:	d071      	beq.n	800587e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80057a2:	e06c      	b.n	800587e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a8:	f003 031c 	and.w	r3, r3, #28
 80057ac:	2202      	movs	r2, #2
 80057ae:	409a      	lsls	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d02e      	beq.n	8005816 <HAL_DMA_IRQHandler+0xec>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d029      	beq.n	8005816 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10b      	bne.n	80057e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 020a 	bic.w	r2, r2, #10
 80057de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ec:	f003 021c 	and.w	r2, r3, #28
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	2102      	movs	r1, #2
 80057f6:	fa01 f202 	lsl.w	r2, r1, r2
 80057fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d038      	beq.n	800587e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005814:	e033      	b.n	800587e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f003 031c 	and.w	r3, r3, #28
 800581e:	2208      	movs	r2, #8
 8005820:	409a      	lsls	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4013      	ands	r3, r2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d02a      	beq.n	8005880 <HAL_DMA_IRQHandler+0x156>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b00      	cmp	r3, #0
 8005832:	d025      	beq.n	8005880 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 020e 	bic.w	r2, r2, #14
 8005842:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005848:	f003 021c 	and.w	r2, r3, #28
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	2101      	movs	r1, #1
 8005852:	fa01 f202 	lsl.w	r2, r1, r2
 8005856:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800587e:	bf00      	nop
 8005880:	bf00      	nop
}
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589a:	f003 021c 	and.w	r2, r3, #28
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a2:	2101      	movs	r1, #1
 80058a4:	fa01 f202 	lsl.w	r2, r1, r2
 80058a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b10      	cmp	r3, #16
 80058b8:	d108      	bne.n	80058cc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80058ca:	e007      	b.n	80058dc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	60da      	str	r2, [r3, #12]
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80058fa:	4b2f      	ldr	r3, [pc, #188]	@ (80059b8 <HAL_FLASH_Program+0xd0>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_FLASH_Program+0x1e>
 8005902:	2302      	movs	r3, #2
 8005904:	e053      	b.n	80059ae <HAL_FLASH_Program+0xc6>
 8005906:	4b2c      	ldr	r3, [pc, #176]	@ (80059b8 <HAL_FLASH_Program+0xd0>)
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800590c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005910:	f000 f888 	bl	8005a24 <FLASH_WaitForLastOperation>
 8005914:	4603      	mov	r3, r0
 8005916:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d143      	bne.n	80059a6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800591e:	4b26      	ldr	r3, [pc, #152]	@ (80059b8 <HAL_FLASH_Program+0xd0>)
 8005920:	2200      	movs	r2, #0
 8005922:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005924:	4b25      	ldr	r3, [pc, #148]	@ (80059bc <HAL_FLASH_Program+0xd4>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800592c:	2b00      	cmp	r3, #0
 800592e:	d009      	beq.n	8005944 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005930:	4b22      	ldr	r3, [pc, #136]	@ (80059bc <HAL_FLASH_Program+0xd4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a21      	ldr	r2, [pc, #132]	@ (80059bc <HAL_FLASH_Program+0xd4>)
 8005936:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800593a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800593c:	4b1e      	ldr	r3, [pc, #120]	@ (80059b8 <HAL_FLASH_Program+0xd0>)
 800593e:	2202      	movs	r2, #2
 8005940:	771a      	strb	r2, [r3, #28]
 8005942:	e002      	b.n	800594a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005944:	4b1c      	ldr	r3, [pc, #112]	@ (80059b8 <HAL_FLASH_Program+0xd0>)
 8005946:	2200      	movs	r2, #0
 8005948:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005954:	68b8      	ldr	r0, [r7, #8]
 8005956:	f000 f8bb 	bl	8005ad0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800595a:	2301      	movs	r3, #1
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e010      	b.n	8005982 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d002      	beq.n	800596c <HAL_FLASH_Program+0x84>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d10a      	bne.n	8005982 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	f000 f8d3 	bl	8005b1c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d102      	bne.n	8005982 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800597c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005980:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005982:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005986:	f000 f84d 	bl	8005a24 <FLASH_WaitForLastOperation>
 800598a:	4603      	mov	r3, r0
 800598c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005994:	4b09      	ldr	r3, [pc, #36]	@ (80059bc <HAL_FLASH_Program+0xd4>)
 8005996:	695a      	ldr	r2, [r3, #20]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	43db      	mvns	r3, r3
 800599c:	4907      	ldr	r1, [pc, #28]	@ (80059bc <HAL_FLASH_Program+0xd4>)
 800599e:	4013      	ands	r3, r2
 80059a0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80059a2:	f000 f9eb 	bl	8005d7c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059a6:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <HAL_FLASH_Program+0xd0>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]

  return status;
 80059ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000020 	.word	0x20000020
 80059bc:	40022000 	.word	0x40022000

080059c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80059ca:	4b0b      	ldr	r3, [pc, #44]	@ (80059f8 <HAL_FLASH_Unlock+0x38>)
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	da0b      	bge.n	80059ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80059d2:	4b09      	ldr	r3, [pc, #36]	@ (80059f8 <HAL_FLASH_Unlock+0x38>)
 80059d4:	4a09      	ldr	r2, [pc, #36]	@ (80059fc <HAL_FLASH_Unlock+0x3c>)
 80059d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80059d8:	4b07      	ldr	r3, [pc, #28]	@ (80059f8 <HAL_FLASH_Unlock+0x38>)
 80059da:	4a09      	ldr	r2, [pc, #36]	@ (8005a00 <HAL_FLASH_Unlock+0x40>)
 80059dc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <HAL_FLASH_Unlock+0x38>)
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	da01      	bge.n	80059ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80059ea:	79fb      	ldrb	r3, [r7, #7]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40022000 	.word	0x40022000
 80059fc:	45670123 	.word	0x45670123
 8005a00:	cdef89ab 	.word	0xcdef89ab

08005a04 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005a08:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <HAL_FLASH_Lock+0x1c>)
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	4a04      	ldr	r2, [pc, #16]	@ (8005a20 <HAL_FLASH_Lock+0x1c>)
 8005a0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005a12:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40022000 	.word	0x40022000

08005a24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005a2c:	f7fe f824 	bl	8003a78 <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005a32:	e00d      	b.n	8005a50 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a3a:	d009      	beq.n	8005a50 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005a3c:	f7fe f81c 	bl	8003a78 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d801      	bhi.n	8005a50 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e036      	b.n	8005abe <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005a50:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac8 <FLASH_WaitForLastOperation+0xa4>)
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1eb      	bne.n	8005a34 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac8 <FLASH_WaitForLastOperation+0xa4>)
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8005a64:	4013      	ands	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01d      	beq.n	8005aaa <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005a6e:	4b17      	ldr	r3, [pc, #92]	@ (8005acc <FLASH_WaitForLastOperation+0xa8>)
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	4a15      	ldr	r2, [pc, #84]	@ (8005acc <FLASH_WaitForLastOperation+0xa8>)
 8005a78:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a80:	d307      	bcc.n	8005a92 <FLASH_WaitForLastOperation+0x6e>
 8005a82:	4b11      	ldr	r3, [pc, #68]	@ (8005ac8 <FLASH_WaitForLastOperation+0xa4>)
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005a8c:	490e      	ldr	r1, [pc, #56]	@ (8005ac8 <FLASH_WaitForLastOperation+0xa4>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	618b      	str	r3, [r1, #24]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <FLASH_WaitForLastOperation+0x82>
 8005a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac8 <FLASH_WaitForLastOperation+0xa4>)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005aa4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e009      	b.n	8005abe <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005aaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <FLASH_WaitForLastOperation+0xa4>)
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005ab6:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <FLASH_WaitForLastOperation+0xa4>)
 8005ab8:	2201      	movs	r2, #1
 8005aba:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40022000 	.word	0x40022000
 8005acc:	20000020 	.word	0x20000020

08005ad0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005adc:	4b0e      	ldr	r3, [pc, #56]	@ (8005b18 <FLASH_Program_DoubleWord+0x48>)
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8005b18 <FLASH_Program_DoubleWord+0x48>)
 8005ae2:	f043 0301 	orr.w	r3, r3, #1
 8005ae6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005aee:	f3bf 8f6f 	isb	sy
}
 8005af2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005af4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	000a      	movs	r2, r1
 8005b02:	2300      	movs	r3, #0
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	3104      	adds	r1, #4
 8005b08:	4613      	mov	r3, r2
 8005b0a:	600b      	str	r3, [r1, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40022000 	.word	0x40022000

08005b1c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	@ 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005b26:	2340      	movs	r3, #64	@ 0x40
 8005b28:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005b32:	4b14      	ldr	r3, [pc, #80]	@ (8005b84 <FLASH_Program_Fast+0x68>)
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	4a13      	ldr	r2, [pc, #76]	@ (8005b84 <FLASH_Program_Fast+0x68>)
 8005b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b42:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b44:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b48:	b672      	cpsid	i
}
 8005b4a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	3304      	adds	r3, #4
 8005b58:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	617b      	str	r3, [r7, #20]
    row_index--;
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
 8005b62:	3b01      	subs	r3, #1
 8005b64:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005b66:	7ffb      	ldrb	r3, [r7, #31]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ef      	bne.n	8005b4c <FLASH_Program_Fast+0x30>
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f383 8810 	msr	PRIMASK, r3
}
 8005b76:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005b78:	bf00      	nop
 8005b7a:	3724      	adds	r7, #36	@ 0x24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40022000 	.word	0x40022000

08005b88 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b92:	4b49      	ldr	r3, [pc, #292]	@ (8005cb8 <HAL_FLASHEx_Erase+0x130>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_FLASHEx_Erase+0x16>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e087      	b.n	8005cae <HAL_FLASHEx_Erase+0x126>
 8005b9e:	4b46      	ldr	r3, [pc, #280]	@ (8005cb8 <HAL_FLASHEx_Erase+0x130>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ba4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ba8:	f7ff ff3c 	bl	8005a24 <FLASH_WaitForLastOperation>
 8005bac:	4603      	mov	r3, r0
 8005bae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d177      	bne.n	8005ca6 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005bb6:	4b40      	ldr	r3, [pc, #256]	@ (8005cb8 <HAL_FLASHEx_Erase+0x130>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005bc8:	4b3c      	ldr	r3, [pc, #240]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d009      	beq.n	8005be8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005bd4:	4b39      	ldr	r3, [pc, #228]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a38      	ldr	r2, [pc, #224]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005bda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bde:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005be0:	4b35      	ldr	r3, [pc, #212]	@ (8005cb8 <HAL_FLASHEx_Erase+0x130>)
 8005be2:	2203      	movs	r2, #3
 8005be4:	771a      	strb	r2, [r3, #28]
 8005be6:	e016      	b.n	8005c16 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005be8:	4b33      	ldr	r3, [pc, #204]	@ (8005cb8 <HAL_FLASHEx_Erase+0x130>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	771a      	strb	r2, [r3, #28]
 8005bee:	e012      	b.n	8005c16 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005bf0:	4b32      	ldr	r3, [pc, #200]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a2e      	ldr	r2, [pc, #184]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005c02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c06:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005c08:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb8 <HAL_FLASHEx_Erase+0x130>)
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	771a      	strb	r2, [r3, #28]
 8005c0e:	e002      	b.n	8005c16 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005c10:	4b29      	ldr	r3, [pc, #164]	@ (8005cb8 <HAL_FLASHEx_Erase+0x130>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d113      	bne.n	8005c46 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 f84c 	bl	8005cc0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005c2c:	f7ff fefa 	bl	8005a24 <FLASH_WaitForLastOperation>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005c34:	4b21      	ldr	r3, [pc, #132]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	4a20      	ldr	r2, [pc, #128]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005c3a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c3e:	f023 0304 	bic.w	r3, r3, #4
 8005c42:	6153      	str	r3, [r2, #20]
 8005c44:	e02d      	b.n	8005ca2 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c4c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	e01d      	b.n	8005c92 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	68b8      	ldr	r0, [r7, #8]
 8005c5e:	f000 f857 	bl	8005d10 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005c62:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005c66:	f7ff fedd 	bl	8005a24 <FLASH_WaitForLastOperation>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005c6e:	4b13      	ldr	r3, [pc, #76]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	4a12      	ldr	r2, [pc, #72]	@ (8005cbc <HAL_FLASHEx_Erase+0x134>)
 8005c74:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005c78:	f023 0302 	bic.w	r3, r3, #2
 8005c7c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005c7e:	7bfb      	ldrb	r3, [r7, #15]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	601a      	str	r2, [r3, #0]
          break;
 8005c8a:	e00a      	b.n	8005ca2 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d3d9      	bcc.n	8005c56 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005ca2:	f000 f86b 	bl	8005d7c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ca6:	4b04      	ldr	r3, [pc, #16]	@ (8005cb8 <HAL_FLASHEx_Erase+0x130>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	701a      	strb	r2, [r3, #0]

  return status;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000020 	.word	0x20000020
 8005cbc:	40022000 	.word	0x40022000

08005cc0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8005d0c <FLASH_MassErase+0x4c>)
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005d0c <FLASH_MassErase+0x4c>)
 8005cd8:	f043 0304 	orr.w	r3, r3, #4
 8005cdc:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8005ce8:	4b08      	ldr	r3, [pc, #32]	@ (8005d0c <FLASH_MassErase+0x4c>)
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	4a07      	ldr	r2, [pc, #28]	@ (8005d0c <FLASH_MassErase+0x4c>)
 8005cee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cf2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005cf4:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <FLASH_MassErase+0x4c>)
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	4a04      	ldr	r2, [pc, #16]	@ (8005d0c <FLASH_MassErase+0x4c>)
 8005cfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cfe:	6153      	str	r3, [r2, #20]
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40022000 	.word	0x40022000

08005d10 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d006      	beq.n	8005d32 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005d24:	4b14      	ldr	r3, [pc, #80]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d26:	695b      	ldr	r3, [r3, #20]
 8005d28:	4a13      	ldr	r2, [pc, #76]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d2e:	6153      	str	r3, [r2, #20]
 8005d30:	e005      	b.n	8005d3e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8005d32:	4b11      	ldr	r3, [pc, #68]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	4a10      	ldr	r2, [pc, #64]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005d3c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	00db      	lsls	r3, r3, #3
 8005d4a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8005d4e:	490a      	ldr	r1, [pc, #40]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005d54:	4b08      	ldr	r3, [pc, #32]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	4a07      	ldr	r2, [pc, #28]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d5a:	f043 0302 	orr.w	r3, r3, #2
 8005d5e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005d60:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	4a04      	ldr	r2, [pc, #16]	@ (8005d78 <FLASH_PageErase+0x68>)
 8005d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d6a:	6153      	str	r3, [r2, #20]
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	40022000 	.word	0x40022000

08005d7c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005d82:	4b21      	ldr	r3, [pc, #132]	@ (8005e08 <FLASH_FlushCaches+0x8c>)
 8005d84:	7f1b      	ldrb	r3, [r3, #28]
 8005d86:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d002      	beq.n	8005d94 <FLASH_FlushCaches+0x18>
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d117      	bne.n	8005dc4 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005d94:	4b1d      	ldr	r3, [pc, #116]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a1c      	ldr	r2, [pc, #112]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005d9a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d9e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005da0:	4b1a      	ldr	r3, [pc, #104]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a19      	ldr	r2, [pc, #100]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005da6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b17      	ldr	r3, [pc, #92]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a16      	ldr	r2, [pc, #88]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005db2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005db6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005db8:	4b14      	ldr	r3, [pc, #80]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a13      	ldr	r2, [pc, #76]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005dc2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d002      	beq.n	8005dd0 <FLASH_FlushCaches+0x54>
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d111      	bne.n	8005df4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005dd6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005de2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005de6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005de8:	4b08      	ldr	r3, [pc, #32]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a07      	ldr	r2, [pc, #28]	@ (8005e0c <FLASH_FlushCaches+0x90>)
 8005dee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005df2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005df4:	4b04      	ldr	r3, [pc, #16]	@ (8005e08 <FLASH_FlushCaches+0x8c>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	771a      	strb	r2, [r3, #28]
}
 8005dfa:	bf00      	nop
 8005dfc:	370c      	adds	r7, #12
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	20000020 	.word	0x20000020
 8005e0c:	40022000 	.word	0x40022000

08005e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e1e:	e17f      	b.n	8006120 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	2101      	movs	r1, #1
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8171 	beq.w	800611a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d005      	beq.n	8005e50 <HAL_GPIO_Init+0x40>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f003 0303 	and.w	r3, r3, #3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d130      	bne.n	8005eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4013      	ands	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e86:	2201      	movs	r2, #1
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	091b      	lsrs	r3, r3, #4
 8005e9c:	f003 0201 	and.w	r2, r3, #1
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d118      	bne.n	8005ef0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	08db      	lsrs	r3, r3, #3
 8005eda:	f003 0201 	and.w	r2, r3, #1
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d017      	beq.n	8005f2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	2203      	movs	r2, #3
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	4013      	ands	r3, r2
 8005f12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d123      	bne.n	8005f80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	08da      	lsrs	r2, r3, #3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3208      	adds	r2, #8
 8005f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	220f      	movs	r2, #15
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	43db      	mvns	r3, r3
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	08da      	lsrs	r2, r3, #3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3208      	adds	r2, #8
 8005f7a:	6939      	ldr	r1, [r7, #16]
 8005f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4013      	ands	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f003 0203 	and.w	r2, r3, #3
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 80ac 	beq.w	800611a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8006140 <HAL_GPIO_Init+0x330>)
 8005fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8006140 <HAL_GPIO_Init+0x330>)
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8005fce:	4b5c      	ldr	r3, [pc, #368]	@ (8006140 <HAL_GPIO_Init+0x330>)
 8005fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	60bb      	str	r3, [r7, #8]
 8005fd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005fda:	4a5a      	ldr	r2, [pc, #360]	@ (8006144 <HAL_GPIO_Init+0x334>)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	089b      	lsrs	r3, r3, #2
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	220f      	movs	r2, #15
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006004:	d025      	beq.n	8006052 <HAL_GPIO_Init+0x242>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a4f      	ldr	r2, [pc, #316]	@ (8006148 <HAL_GPIO_Init+0x338>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01f      	beq.n	800604e <HAL_GPIO_Init+0x23e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a4e      	ldr	r2, [pc, #312]	@ (800614c <HAL_GPIO_Init+0x33c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d019      	beq.n	800604a <HAL_GPIO_Init+0x23a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a4d      	ldr	r2, [pc, #308]	@ (8006150 <HAL_GPIO_Init+0x340>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_GPIO_Init+0x236>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a4c      	ldr	r2, [pc, #304]	@ (8006154 <HAL_GPIO_Init+0x344>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00d      	beq.n	8006042 <HAL_GPIO_Init+0x232>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a4b      	ldr	r2, [pc, #300]	@ (8006158 <HAL_GPIO_Init+0x348>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d007      	beq.n	800603e <HAL_GPIO_Init+0x22e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a4a      	ldr	r2, [pc, #296]	@ (800615c <HAL_GPIO_Init+0x34c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d101      	bne.n	800603a <HAL_GPIO_Init+0x22a>
 8006036:	2306      	movs	r3, #6
 8006038:	e00c      	b.n	8006054 <HAL_GPIO_Init+0x244>
 800603a:	2307      	movs	r3, #7
 800603c:	e00a      	b.n	8006054 <HAL_GPIO_Init+0x244>
 800603e:	2305      	movs	r3, #5
 8006040:	e008      	b.n	8006054 <HAL_GPIO_Init+0x244>
 8006042:	2304      	movs	r3, #4
 8006044:	e006      	b.n	8006054 <HAL_GPIO_Init+0x244>
 8006046:	2303      	movs	r3, #3
 8006048:	e004      	b.n	8006054 <HAL_GPIO_Init+0x244>
 800604a:	2302      	movs	r3, #2
 800604c:	e002      	b.n	8006054 <HAL_GPIO_Init+0x244>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <HAL_GPIO_Init+0x244>
 8006052:	2300      	movs	r3, #0
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	f002 0203 	and.w	r2, r2, #3
 800605a:	0092      	lsls	r2, r2, #2
 800605c:	4093      	lsls	r3, r2
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006064:	4937      	ldr	r1, [pc, #220]	@ (8006144 <HAL_GPIO_Init+0x334>)
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	089b      	lsrs	r3, r3, #2
 800606a:	3302      	adds	r3, #2
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006072:	4b3b      	ldr	r3, [pc, #236]	@ (8006160 <HAL_GPIO_Init+0x350>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	43db      	mvns	r3, r3
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4013      	ands	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006096:	4a32      	ldr	r2, [pc, #200]	@ (8006160 <HAL_GPIO_Init+0x350>)
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800609c:	4b30      	ldr	r3, [pc, #192]	@ (8006160 <HAL_GPIO_Init+0x350>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	43db      	mvns	r3, r3
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	4013      	ands	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80060c0:	4a27      	ldr	r2, [pc, #156]	@ (8006160 <HAL_GPIO_Init+0x350>)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80060c6:	4b26      	ldr	r3, [pc, #152]	@ (8006160 <HAL_GPIO_Init+0x350>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4013      	ands	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80060ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006160 <HAL_GPIO_Init+0x350>)
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80060f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006160 <HAL_GPIO_Init+0x350>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	43db      	mvns	r3, r3
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4013      	ands	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006114:	4a12      	ldr	r2, [pc, #72]	@ (8006160 <HAL_GPIO_Init+0x350>)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	3301      	adds	r3, #1
 800611e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	fa22 f303 	lsr.w	r3, r2, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	f47f ae78 	bne.w	8005e20 <HAL_GPIO_Init+0x10>
  }
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40021000 	.word	0x40021000
 8006144:	40010000 	.word	0x40010000
 8006148:	48000400 	.word	0x48000400
 800614c:	48000800 	.word	0x48000800
 8006150:	48000c00 	.word	0x48000c00
 8006154:	48001000 	.word	0x48001000
 8006158:	48001400 	.word	0x48001400
 800615c:	48001800 	.word	0x48001800
 8006160:	40010400 	.word	0x40010400

08006164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	887b      	ldrh	r3, [r7, #2]
 8006176:	4013      	ands	r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800617c:	2301      	movs	r3, #1
 800617e:	73fb      	strb	r3, [r7, #15]
 8006180:	e001      	b.n	8006186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006186:	7bfb      	ldrb	r3, [r7, #15]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	807b      	strh	r3, [r7, #2]
 80061a0:	4613      	mov	r3, r2
 80061a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061a4:	787b      	ldrb	r3, [r7, #1]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80061aa:	887a      	ldrh	r2, [r7, #2]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80061b0:	e002      	b.n	80061b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80061b2:	887a      	ldrh	r2, [r7, #2]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4013      	ands	r3, r2
 80061dc:	041a      	lsls	r2, r3, #16
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	43d9      	mvns	r1, r3
 80061e2:	887b      	ldrh	r3, [r7, #2]
 80061e4:	400b      	ands	r3, r1
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	619a      	str	r2, [r3, #24]
}
 80061ec:	bf00      	nop
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006202:	4b08      	ldr	r3, [pc, #32]	@ (8006224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	88fb      	ldrh	r3, [r7, #6]
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d006      	beq.n	800621c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800620e:	4a05      	ldr	r2, [pc, #20]	@ (8006224 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f806 	bl	8006228 <HAL_GPIO_EXTI_Callback>
  }
}
 800621c:	bf00      	nop
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	40010400 	.word	0x40010400

08006228 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
	...

08006240 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006244:	4b04      	ldr	r3, [pc, #16]	@ (8006258 <HAL_PWREx_GetVoltageRange+0x18>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800624c:	4618      	mov	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40007000 	.word	0x40007000

0800625c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626a:	d130      	bne.n	80062ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800626c:	4b23      	ldr	r3, [pc, #140]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006278:	d038      	beq.n	80062ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800627a:	4b20      	ldr	r3, [pc, #128]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006282:	4a1e      	ldr	r2, [pc, #120]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006284:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006288:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800628a:	4b1d      	ldr	r3, [pc, #116]	@ (8006300 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2232      	movs	r2, #50	@ 0x32
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	4a1b      	ldr	r2, [pc, #108]	@ (8006304 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006296:	fba2 2303 	umull	r2, r3, r2, r3
 800629a:	0c9b      	lsrs	r3, r3, #18
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062a0:	e002      	b.n	80062a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80062a8:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b4:	d102      	bne.n	80062bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1f2      	bne.n	80062a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80062bc:	4b0f      	ldr	r3, [pc, #60]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062c8:	d110      	bne.n	80062ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e00f      	b.n	80062ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80062ce:	4b0b      	ldr	r3, [pc, #44]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062da:	d007      	beq.n	80062ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80062dc:	4b07      	ldr	r3, [pc, #28]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80062e4:	4a05      	ldr	r2, [pc, #20]	@ (80062fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80062ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40007000 	.word	0x40007000
 8006300:	20000014 	.word	0x20000014
 8006304:	431bde83 	.word	0x431bde83

08006308 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e3ca      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800631a:	4b97      	ldr	r3, [pc, #604]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 030c 	and.w	r3, r3, #12
 8006322:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006324:	4b94      	ldr	r3, [pc, #592]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80e4 	beq.w	8006504 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <HAL_RCC_OscConfig+0x4a>
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b0c      	cmp	r3, #12
 8006346:	f040 808b 	bne.w	8006460 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b01      	cmp	r3, #1
 800634e:	f040 8087 	bne.w	8006460 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006352:	4b89      	ldr	r3, [pc, #548]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <HAL_RCC_OscConfig+0x62>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e3a2      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1a      	ldr	r2, [r3, #32]
 800636e:	4b82      	ldr	r3, [pc, #520]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <HAL_RCC_OscConfig+0x7c>
 800637a:	4b7f      	ldr	r3, [pc, #508]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006382:	e005      	b.n	8006390 <HAL_RCC_OscConfig+0x88>
 8006384:	4b7c      	ldr	r3, [pc, #496]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 8006386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800638a:	091b      	lsrs	r3, r3, #4
 800638c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006390:	4293      	cmp	r3, r2
 8006392:	d223      	bcs.n	80063dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fd55 	bl	8006e48 <RCC_SetFlashLatencyFromMSIRange>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e383      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063a8:	4b73      	ldr	r3, [pc, #460]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a72      	ldr	r2, [pc, #456]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063ae:	f043 0308 	orr.w	r3, r3, #8
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b70      	ldr	r3, [pc, #448]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	496d      	ldr	r1, [pc, #436]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	4968      	ldr	r1, [pc, #416]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	604b      	str	r3, [r1, #4]
 80063da:	e025      	b.n	8006428 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063dc:	4b66      	ldr	r3, [pc, #408]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a65      	ldr	r2, [pc, #404]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063e2:	f043 0308 	orr.w	r3, r3, #8
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	4b63      	ldr	r3, [pc, #396]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	4960      	ldr	r1, [pc, #384]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	495b      	ldr	r1, [pc, #364]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800640a:	4313      	orrs	r3, r2
 800640c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fd15 	bl	8006e48 <RCC_SetFlashLatencyFromMSIRange>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e343      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006428:	f000 fc4a 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 800642c:	4602      	mov	r2, r0
 800642e:	4b52      	ldr	r3, [pc, #328]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	4950      	ldr	r1, [pc, #320]	@ (800657c <HAL_RCC_OscConfig+0x274>)
 800643a:	5ccb      	ldrb	r3, [r1, r3]
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
 8006444:	4a4e      	ldr	r2, [pc, #312]	@ (8006580 <HAL_RCC_OscConfig+0x278>)
 8006446:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006448:	4b4e      	ldr	r3, [pc, #312]	@ (8006584 <HAL_RCC_OscConfig+0x27c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4618      	mov	r0, r3
 800644e:	f7fd fac3 	bl	80039d8 <HAL_InitTick>
 8006452:	4603      	mov	r3, r0
 8006454:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d052      	beq.n	8006502 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	e327      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d032      	beq.n	80064ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006468:	4b43      	ldr	r3, [pc, #268]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a42      	ldr	r2, [pc, #264]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006474:	f7fd fb00 	bl	8003a78 <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800647c:	f7fd fafc 	bl	8003a78 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e310      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800648e:	4b3a      	ldr	r3, [pc, #232]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0f0      	beq.n	800647c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800649a:	4b37      	ldr	r3, [pc, #220]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a36      	ldr	r2, [pc, #216]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80064a0:	f043 0308 	orr.w	r3, r3, #8
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b34      	ldr	r3, [pc, #208]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	4931      	ldr	r1, [pc, #196]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	492c      	ldr	r1, [pc, #176]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	604b      	str	r3, [r1, #4]
 80064cc:	e01a      	b.n	8006504 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80064ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a29      	ldr	r2, [pc, #164]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064da:	f7fd facd 	bl	8003a78 <HAL_GetTick>
 80064de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064e2:	f7fd fac9 	bl	8003a78 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e2dd      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80064f4:	4b20      	ldr	r3, [pc, #128]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1f0      	bne.n	80064e2 <HAL_RCC_OscConfig+0x1da>
 8006500:	e000      	b.n	8006504 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006502:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d074      	beq.n	80065fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b08      	cmp	r3, #8
 8006514:	d005      	beq.n	8006522 <HAL_RCC_OscConfig+0x21a>
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	2b0c      	cmp	r3, #12
 800651a:	d10e      	bne.n	800653a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	2b03      	cmp	r3, #3
 8006520:	d10b      	bne.n	800653a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006522:	4b15      	ldr	r3, [pc, #84]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652a:	2b00      	cmp	r3, #0
 800652c:	d064      	beq.n	80065f8 <HAL_RCC_OscConfig+0x2f0>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d160      	bne.n	80065f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e2ba      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006542:	d106      	bne.n	8006552 <HAL_RCC_OscConfig+0x24a>
 8006544:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a0b      	ldr	r2, [pc, #44]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800654a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	e026      	b.n	80065a0 <HAL_RCC_OscConfig+0x298>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800655a:	d115      	bne.n	8006588 <HAL_RCC_OscConfig+0x280>
 800655c:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a05      	ldr	r2, [pc, #20]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 8006562:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	4b03      	ldr	r3, [pc, #12]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a02      	ldr	r2, [pc, #8]	@ (8006578 <HAL_RCC_OscConfig+0x270>)
 800656e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	e014      	b.n	80065a0 <HAL_RCC_OscConfig+0x298>
 8006576:	bf00      	nop
 8006578:	40021000 	.word	0x40021000
 800657c:	080182d8 	.word	0x080182d8
 8006580:	20000014 	.word	0x20000014
 8006584:	20000018 	.word	0x20000018
 8006588:	4ba0      	ldr	r3, [pc, #640]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a9f      	ldr	r2, [pc, #636]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 800658e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006592:	6013      	str	r3, [r2, #0]
 8006594:	4b9d      	ldr	r3, [pc, #628]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a9c      	ldr	r2, [pc, #624]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 800659a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800659e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d013      	beq.n	80065d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fd fa66 	bl	8003a78 <HAL_GetTick>
 80065ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065b0:	f7fd fa62 	bl	8003a78 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b64      	cmp	r3, #100	@ 0x64
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e276      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065c2:	4b92      	ldr	r3, [pc, #584]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x2a8>
 80065ce:	e014      	b.n	80065fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d0:	f7fd fa52 	bl	8003a78 <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d8:	f7fd fa4e 	bl	8003a78 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b64      	cmp	r3, #100	@ 0x64
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e262      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065ea:	4b88      	ldr	r3, [pc, #544]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1f0      	bne.n	80065d8 <HAL_RCC_OscConfig+0x2d0>
 80065f6:	e000      	b.n	80065fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d060      	beq.n	80066c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d005      	beq.n	8006618 <HAL_RCC_OscConfig+0x310>
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b0c      	cmp	r3, #12
 8006610:	d119      	bne.n	8006646 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d116      	bne.n	8006646 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006618:	4b7c      	ldr	r3, [pc, #496]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006620:	2b00      	cmp	r3, #0
 8006622:	d005      	beq.n	8006630 <HAL_RCC_OscConfig+0x328>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d101      	bne.n	8006630 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e23f      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006630:	4b76      	ldr	r3, [pc, #472]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	061b      	lsls	r3, r3, #24
 800663e:	4973      	ldr	r1, [pc, #460]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006640:	4313      	orrs	r3, r2
 8006642:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006644:	e040      	b.n	80066c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d023      	beq.n	8006696 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800664e:	4b6f      	ldr	r3, [pc, #444]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a6e      	ldr	r2, [pc, #440]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665a:	f7fd fa0d 	bl	8003a78 <HAL_GetTick>
 800665e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006662:	f7fd fa09 	bl	8003a78 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e21d      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006674:	4b65      	ldr	r3, [pc, #404]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0f0      	beq.n	8006662 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006680:	4b62      	ldr	r3, [pc, #392]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	495f      	ldr	r1, [pc, #380]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006690:	4313      	orrs	r3, r2
 8006692:	604b      	str	r3, [r1, #4]
 8006694:	e018      	b.n	80066c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006696:	4b5d      	ldr	r3, [pc, #372]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a5c      	ldr	r2, [pc, #368]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 800669c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a2:	f7fd f9e9 	bl	8003a78 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066aa:	f7fd f9e5 	bl	8003a78 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e1f9      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066bc:	4b53      	ldr	r3, [pc, #332]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1f0      	bne.n	80066aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d03c      	beq.n	800674e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01c      	beq.n	8006716 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066dc:	4b4b      	ldr	r3, [pc, #300]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80066de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066e2:	4a4a      	ldr	r2, [pc, #296]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ec:	f7fd f9c4 	bl	8003a78 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066f4:	f7fd f9c0 	bl	8003a78 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e1d4      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006706:	4b41      	ldr	r3, [pc, #260]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0ef      	beq.n	80066f4 <HAL_RCC_OscConfig+0x3ec>
 8006714:	e01b      	b.n	800674e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006716:	4b3d      	ldr	r3, [pc, #244]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800671c:	4a3b      	ldr	r2, [pc, #236]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 800671e:	f023 0301 	bic.w	r3, r3, #1
 8006722:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006726:	f7fd f9a7 	bl	8003a78 <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800672c:	e008      	b.n	8006740 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800672e:	f7fd f9a3 	bl	8003a78 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e1b7      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006740:	4b32      	ldr	r3, [pc, #200]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1ef      	bne.n	800672e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 80a6 	beq.w	80068a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800675c:	2300      	movs	r3, #0
 800675e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006760:	4b2a      	ldr	r3, [pc, #168]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10d      	bne.n	8006788 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800676c:	4b27      	ldr	r3, [pc, #156]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 800676e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006770:	4a26      	ldr	r2, [pc, #152]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006776:	6593      	str	r3, [r2, #88]	@ 0x58
 8006778:	4b24      	ldr	r3, [pc, #144]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 800677a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006784:	2301      	movs	r3, #1
 8006786:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006788:	4b21      	ldr	r3, [pc, #132]	@ (8006810 <HAL_RCC_OscConfig+0x508>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006790:	2b00      	cmp	r3, #0
 8006792:	d118      	bne.n	80067c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006794:	4b1e      	ldr	r3, [pc, #120]	@ (8006810 <HAL_RCC_OscConfig+0x508>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a1d      	ldr	r2, [pc, #116]	@ (8006810 <HAL_RCC_OscConfig+0x508>)
 800679a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067a0:	f7fd f96a 	bl	8003a78 <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a8:	f7fd f966 	bl	8003a78 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e17a      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ba:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <HAL_RCC_OscConfig+0x508>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f0      	beq.n	80067a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d108      	bne.n	80067e0 <HAL_RCC_OscConfig+0x4d8>
 80067ce:	4b0f      	ldr	r3, [pc, #60]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80067d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d4:	4a0d      	ldr	r2, [pc, #52]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067de:	e029      	b.n	8006834 <HAL_RCC_OscConfig+0x52c>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b05      	cmp	r3, #5
 80067e6:	d115      	bne.n	8006814 <HAL_RCC_OscConfig+0x50c>
 80067e8:	4b08      	ldr	r3, [pc, #32]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ee:	4a07      	ldr	r2, [pc, #28]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80067f0:	f043 0304 	orr.w	r3, r3, #4
 80067f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067f8:	4b04      	ldr	r3, [pc, #16]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 80067fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fe:	4a03      	ldr	r2, [pc, #12]	@ (800680c <HAL_RCC_OscConfig+0x504>)
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006808:	e014      	b.n	8006834 <HAL_RCC_OscConfig+0x52c>
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	40007000 	.word	0x40007000
 8006814:	4b9c      	ldr	r3, [pc, #624]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681a:	4a9b      	ldr	r2, [pc, #620]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006824:	4b98      	ldr	r3, [pc, #608]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682a:	4a97      	ldr	r2, [pc, #604]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 800682c:	f023 0304 	bic.w	r3, r3, #4
 8006830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d016      	beq.n	800686a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fd f91c 	bl	8003a78 <HAL_GetTick>
 8006840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006842:	e00a      	b.n	800685a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006844:	f7fd f918 	bl	8003a78 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e12a      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800685a:	4b8b      	ldr	r3, [pc, #556]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 800685c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d0ed      	beq.n	8006844 <HAL_RCC_OscConfig+0x53c>
 8006868:	e015      	b.n	8006896 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686a:	f7fd f905 	bl	8003a78 <HAL_GetTick>
 800686e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006870:	e00a      	b.n	8006888 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006872:	f7fd f901 	bl	8003a78 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006880:	4293      	cmp	r3, r2
 8006882:	d901      	bls.n	8006888 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	e113      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006888:	4b7f      	ldr	r3, [pc, #508]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 800688a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1ed      	bne.n	8006872 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006896:	7ffb      	ldrb	r3, [r7, #31]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d105      	bne.n	80068a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800689c:	4b7a      	ldr	r3, [pc, #488]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a0:	4a79      	ldr	r2, [pc, #484]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 80068a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068a6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 80fe 	beq.w	8006aae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	f040 80d0 	bne.w	8006a5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068bc:	4b72      	ldr	r3, [pc, #456]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f003 0203 	and.w	r2, r3, #3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d130      	bne.n	8006932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068da:	3b01      	subs	r3, #1
 80068dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068de:	429a      	cmp	r2, r3
 80068e0:	d127      	bne.n	8006932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d11f      	bne.n	8006932 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80068fc:	2a07      	cmp	r2, #7
 80068fe:	bf14      	ite	ne
 8006900:	2201      	movne	r2, #1
 8006902:	2200      	moveq	r2, #0
 8006904:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006906:	4293      	cmp	r3, r2
 8006908:	d113      	bne.n	8006932 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	3b01      	subs	r3, #1
 8006918:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800691a:	429a      	cmp	r2, r3
 800691c:	d109      	bne.n	8006932 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	085b      	lsrs	r3, r3, #1
 800692a:	3b01      	subs	r3, #1
 800692c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800692e:	429a      	cmp	r2, r3
 8006930:	d06e      	beq.n	8006a10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b0c      	cmp	r3, #12
 8006936:	d069      	beq.n	8006a0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006938:	4b53      	ldr	r3, [pc, #332]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d105      	bne.n	8006950 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006944:	4b50      	ldr	r3, [pc, #320]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e0ad      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006954:	4b4c      	ldr	r3, [pc, #304]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a4b      	ldr	r2, [pc, #300]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 800695a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800695e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006960:	f7fd f88a 	bl	8003a78 <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006968:	f7fd f886 	bl	8003a78 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e09a      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800697a:	4b43      	ldr	r3, [pc, #268]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f0      	bne.n	8006968 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006986:	4b40      	ldr	r3, [pc, #256]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	4b40      	ldr	r3, [pc, #256]	@ (8006a8c <HAL_RCC_OscConfig+0x784>)
 800698c:	4013      	ands	r3, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006996:	3a01      	subs	r2, #1
 8006998:	0112      	lsls	r2, r2, #4
 800699a:	4311      	orrs	r1, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069a0:	0212      	lsls	r2, r2, #8
 80069a2:	4311      	orrs	r1, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80069a8:	0852      	lsrs	r2, r2, #1
 80069aa:	3a01      	subs	r2, #1
 80069ac:	0552      	lsls	r2, r2, #21
 80069ae:	4311      	orrs	r1, r2
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80069b4:	0852      	lsrs	r2, r2, #1
 80069b6:	3a01      	subs	r2, #1
 80069b8:	0652      	lsls	r2, r2, #25
 80069ba:	4311      	orrs	r1, r2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80069c0:	0912      	lsrs	r2, r2, #4
 80069c2:	0452      	lsls	r2, r2, #17
 80069c4:	430a      	orrs	r2, r1
 80069c6:	4930      	ldr	r1, [pc, #192]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069cc:	4b2e      	ldr	r3, [pc, #184]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 80069d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 80069de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069e4:	f7fd f848 	bl	8003a78 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ea:	e008      	b.n	80069fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ec:	f7fd f844 	bl	8003a78 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e058      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069fe:	4b22      	ldr	r3, [pc, #136]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d0f0      	beq.n	80069ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a0a:	e050      	b.n	8006aae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e04f      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a10:	4b1d      	ldr	r3, [pc, #116]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d148      	bne.n	8006aae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a19      	ldr	r2, [pc, #100]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a28:	4b17      	ldr	r3, [pc, #92]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4a16      	ldr	r2, [pc, #88]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006a2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a34:	f7fd f820 	bl	8003a78 <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a3a:	e008      	b.n	8006a4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a3c:	f7fd f81c 	bl	8003a78 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d901      	bls.n	8006a4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	e030      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0f0      	beq.n	8006a3c <HAL_RCC_OscConfig+0x734>
 8006a5a:	e028      	b.n	8006aae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	2b0c      	cmp	r3, #12
 8006a60:	d023      	beq.n	8006aaa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a62:	4b09      	ldr	r3, [pc, #36]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a08      	ldr	r2, [pc, #32]	@ (8006a88 <HAL_RCC_OscConfig+0x780>)
 8006a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6e:	f7fd f803 	bl	8003a78 <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a74:	e00c      	b.n	8006a90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a76:	f7fc ffff 	bl	8003a78 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d905      	bls.n	8006a90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e013      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a90:	4b09      	ldr	r3, [pc, #36]	@ (8006ab8 <HAL_RCC_OscConfig+0x7b0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1ec      	bne.n	8006a76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006a9c:	4b06      	ldr	r3, [pc, #24]	@ (8006ab8 <HAL_RCC_OscConfig+0x7b0>)
 8006a9e:	68da      	ldr	r2, [r3, #12]
 8006aa0:	4905      	ldr	r1, [pc, #20]	@ (8006ab8 <HAL_RCC_OscConfig+0x7b0>)
 8006aa2:	4b06      	ldr	r3, [pc, #24]	@ (8006abc <HAL_RCC_OscConfig+0x7b4>)
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	60cb      	str	r3, [r1, #12]
 8006aa8:	e001      	b.n	8006aae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	feeefffc 	.word	0xfeeefffc

08006ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0e7      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ad4:	4b75      	ldr	r3, [pc, #468]	@ (8006cac <HAL_RCC_ClockConfig+0x1ec>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d910      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ae2:	4b72      	ldr	r3, [pc, #456]	@ (8006cac <HAL_RCC_ClockConfig+0x1ec>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f023 0207 	bic.w	r2, r3, #7
 8006aea:	4970      	ldr	r1, [pc, #448]	@ (8006cac <HAL_RCC_ClockConfig+0x1ec>)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006af2:	4b6e      	ldr	r3, [pc, #440]	@ (8006cac <HAL_RCC_ClockConfig+0x1ec>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d001      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e0cf      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0302 	and.w	r3, r3, #2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d010      	beq.n	8006b32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	4b66      	ldr	r3, [pc, #408]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d908      	bls.n	8006b32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b20:	4b63      	ldr	r3, [pc, #396]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4960      	ldr	r1, [pc, #384]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d04c      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d107      	bne.n	8006b56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b46:	4b5a      	ldr	r3, [pc, #360]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d121      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e0a6      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b5e:	4b54      	ldr	r3, [pc, #336]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d115      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e09a      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d107      	bne.n	8006b86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b76:	4b4e      	ldr	r3, [pc, #312]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0302 	and.w	r3, r3, #2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e08e      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b86:	4b4a      	ldr	r3, [pc, #296]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e086      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b96:	4b46      	ldr	r3, [pc, #280]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f023 0203 	bic.w	r2, r3, #3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	4943      	ldr	r1, [pc, #268]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba8:	f7fc ff66 	bl	8003a78 <HAL_GetTick>
 8006bac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bae:	e00a      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bb0:	f7fc ff62 	bl	8003a78 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e06e      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 020c 	and.w	r2, r3, #12
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d1eb      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689a      	ldr	r2, [r3, #8]
 8006be8:	4b31      	ldr	r3, [pc, #196]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d208      	bcs.n	8006c06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	492b      	ldr	r1, [pc, #172]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c06:	4b29      	ldr	r3, [pc, #164]	@ (8006cac <HAL_RCC_ClockConfig+0x1ec>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d210      	bcs.n	8006c36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c14:	4b25      	ldr	r3, [pc, #148]	@ (8006cac <HAL_RCC_ClockConfig+0x1ec>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f023 0207 	bic.w	r2, r3, #7
 8006c1c:	4923      	ldr	r1, [pc, #140]	@ (8006cac <HAL_RCC_ClockConfig+0x1ec>)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c24:	4b21      	ldr	r3, [pc, #132]	@ (8006cac <HAL_RCC_ClockConfig+0x1ec>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d001      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e036      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0304 	and.w	r3, r3, #4
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c42:	4b1b      	ldr	r3, [pc, #108]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	4918      	ldr	r1, [pc, #96]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d009      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c60:	4b13      	ldr	r3, [pc, #76]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	00db      	lsls	r3, r3, #3
 8006c6e:	4910      	ldr	r1, [pc, #64]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c74:	f000 f824 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1f0>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	091b      	lsrs	r3, r3, #4
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	490b      	ldr	r1, [pc, #44]	@ (8006cb4 <HAL_RCC_ClockConfig+0x1f4>)
 8006c86:	5ccb      	ldrb	r3, [r1, r3]
 8006c88:	f003 031f 	and.w	r3, r3, #31
 8006c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c90:	4a09      	ldr	r2, [pc, #36]	@ (8006cb8 <HAL_RCC_ClockConfig+0x1f8>)
 8006c92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006c94:	4b09      	ldr	r3, [pc, #36]	@ (8006cbc <HAL_RCC_ClockConfig+0x1fc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fc fe9d 	bl	80039d8 <HAL_InitTick>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	72fb      	strb	r3, [r7, #11]

  return status;
 8006ca2:	7afb      	ldrb	r3, [r7, #11]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40022000 	.word	0x40022000
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	080182d8 	.word	0x080182d8
 8006cb8:	20000014 	.word	0x20000014
 8006cbc:	20000018 	.word	0x20000018

08006cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b089      	sub	sp, #36	@ 0x24
 8006cc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61fb      	str	r3, [r7, #28]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cce:	4b3e      	ldr	r3, [pc, #248]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 030c 	and.w	r3, r3, #12
 8006cd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	2b0c      	cmp	r3, #12
 8006cec:	d121      	bne.n	8006d32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d11e      	bne.n	8006d32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006cf4:	4b34      	ldr	r3, [pc, #208]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0308 	and.w	r3, r3, #8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d107      	bne.n	8006d10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d00:	4b31      	ldr	r3, [pc, #196]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d06:	0a1b      	lsrs	r3, r3, #8
 8006d08:	f003 030f 	and.w	r3, r3, #15
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	e005      	b.n	8006d1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d10:	4b2d      	ldr	r3, [pc, #180]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	f003 030f 	and.w	r3, r3, #15
 8006d1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8006dcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10d      	bne.n	8006d48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d30:	e00a      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	d102      	bne.n	8006d3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d38:	4b25      	ldr	r3, [pc, #148]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	e004      	b.n	8006d48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d101      	bne.n	8006d48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d44:	4b23      	ldr	r3, [pc, #140]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2b0c      	cmp	r3, #12
 8006d4c:	d134      	bne.n	8006db8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d003      	beq.n	8006d66 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d003      	beq.n	8006d6c <HAL_RCC_GetSysClockFreq+0xac>
 8006d64:	e005      	b.n	8006d72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d66:	4b1a      	ldr	r3, [pc, #104]	@ (8006dd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d68:	617b      	str	r3, [r7, #20]
      break;
 8006d6a:	e005      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d6c:	4b19      	ldr	r3, [pc, #100]	@ (8006dd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d6e:	617b      	str	r3, [r7, #20]
      break;
 8006d70:	e002      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	617b      	str	r3, [r7, #20]
      break;
 8006d76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d78:	4b13      	ldr	r3, [pc, #76]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	091b      	lsrs	r3, r3, #4
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	3301      	adds	r3, #1
 8006d84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d86:	4b10      	ldr	r3, [pc, #64]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	fb03 f202 	mul.w	r2, r3, r2
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	0e5b      	lsrs	r3, r3, #25
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	3301      	adds	r3, #1
 8006daa:	005b      	lsls	r3, r3, #1
 8006dac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006db8:	69bb      	ldr	r3, [r7, #24]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3724      	adds	r7, #36	@ 0x24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40021000 	.word	0x40021000
 8006dcc:	080182f0 	.word	0x080182f0
 8006dd0:	00f42400 	.word	0x00f42400
 8006dd4:	007a1200 	.word	0x007a1200

08006dd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ddc:	4b03      	ldr	r3, [pc, #12]	@ (8006dec <HAL_RCC_GetHCLKFreq+0x14>)
 8006dde:	681b      	ldr	r3, [r3, #0]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000014 	.word	0x20000014

08006df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006df4:	f7ff fff0 	bl	8006dd8 <HAL_RCC_GetHCLKFreq>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	4b06      	ldr	r3, [pc, #24]	@ (8006e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	4904      	ldr	r1, [pc, #16]	@ (8006e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e06:	5ccb      	ldrb	r3, [r1, r3]
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40021000 	.word	0x40021000
 8006e18:	080182e8 	.word	0x080182e8

08006e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e20:	f7ff ffda 	bl	8006dd8 <HAL_RCC_GetHCLKFreq>
 8006e24:	4602      	mov	r2, r0
 8006e26:	4b06      	ldr	r3, [pc, #24]	@ (8006e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	0adb      	lsrs	r3, r3, #11
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	4904      	ldr	r1, [pc, #16]	@ (8006e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e32:	5ccb      	ldrb	r3, [r1, r3]
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	40021000 	.word	0x40021000
 8006e44:	080182e8 	.word	0x080182e8

08006e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e50:	2300      	movs	r3, #0
 8006e52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e54:	4b2a      	ldr	r3, [pc, #168]	@ (8006f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e60:	f7ff f9ee 	bl	8006240 <HAL_PWREx_GetVoltageRange>
 8006e64:	6178      	str	r0, [r7, #20]
 8006e66:	e014      	b.n	8006e92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e68:	4b25      	ldr	r3, [pc, #148]	@ (8006f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e6c:	4a24      	ldr	r2, [pc, #144]	@ (8006f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e74:	4b22      	ldr	r3, [pc, #136]	@ (8006f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e80:	f7ff f9de 	bl	8006240 <HAL_PWREx_GetVoltageRange>
 8006e84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e86:	4b1e      	ldr	r3, [pc, #120]	@ (8006f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8006f00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e90:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e98:	d10b      	bne.n	8006eb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b80      	cmp	r3, #128	@ 0x80
 8006e9e:	d919      	bls.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2ba0      	cmp	r3, #160	@ 0xa0
 8006ea4:	d902      	bls.n	8006eac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	613b      	str	r3, [r7, #16]
 8006eaa:	e013      	b.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006eac:	2301      	movs	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	e010      	b.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b80      	cmp	r3, #128	@ 0x80
 8006eb6:	d902      	bls.n	8006ebe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006eb8:	2303      	movs	r3, #3
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	e00a      	b.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b80      	cmp	r3, #128	@ 0x80
 8006ec2:	d102      	bne.n	8006eca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	e004      	b.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b70      	cmp	r3, #112	@ 0x70
 8006ece:	d101      	bne.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f023 0207 	bic.w	r2, r3, #7
 8006edc:	4909      	ldr	r1, [pc, #36]	@ (8006f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ee4:	4b07      	ldr	r3, [pc, #28]	@ (8006f04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d001      	beq.n	8006ef6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40021000 	.word	0x40021000
 8006f04:	40022000 	.word	0x40022000

08006f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f10:	2300      	movs	r3, #0
 8006f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f14:	2300      	movs	r3, #0
 8006f16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d041      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006f2c:	d02a      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006f32:	d824      	bhi.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f38:	d008      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f3e:	d81e      	bhi.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00a      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f48:	d010      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f4a:	e018      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f4c:	4b86      	ldr	r3, [pc, #536]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	4a85      	ldr	r2, [pc, #532]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f58:	e015      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	2100      	movs	r1, #0
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fabb 	bl	80074dc <RCCEx_PLLSAI1_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f6a:	e00c      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3320      	adds	r3, #32
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 fba6 	bl	80076c4 <RCCEx_PLLSAI2_Config>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f7c:	e003      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	74fb      	strb	r3, [r7, #19]
      break;
 8006f82:	e000      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f86:	7cfb      	ldrb	r3, [r7, #19]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10b      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f8c:	4b76      	ldr	r3, [pc, #472]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f9a:	4973      	ldr	r1, [pc, #460]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006fa2:	e001      	b.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa4:	7cfb      	ldrb	r3, [r7, #19]
 8006fa6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d041      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fbc:	d02a      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006fbe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fc2:	d824      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006fc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fc8:	d008      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006fca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fce:	d81e      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fd8:	d010      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006fda:	e018      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006fdc:	4b62      	ldr	r3, [pc, #392]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	4a61      	ldr	r2, [pc, #388]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fe6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006fe8:	e015      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3304      	adds	r3, #4
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fa73 	bl	80074dc <RCCEx_PLLSAI1_Config>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006ffa:	e00c      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3320      	adds	r3, #32
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fb5e 	bl	80076c4 <RCCEx_PLLSAI2_Config>
 8007008:	4603      	mov	r3, r0
 800700a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800700c:	e003      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	74fb      	strb	r3, [r7, #19]
      break;
 8007012:	e000      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007016:	7cfb      	ldrb	r3, [r7, #19]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800701c:	4b52      	ldr	r3, [pc, #328]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800701e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007022:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800702a:	494f      	ldr	r1, [pc, #316]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007032:	e001      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007034:	7cfb      	ldrb	r3, [r7, #19]
 8007036:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80a0 	beq.w	8007186 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007046:	2300      	movs	r3, #0
 8007048:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800704a:	4b47      	ldr	r3, [pc, #284]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800704c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800705a:	2300      	movs	r3, #0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00d      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007060:	4b41      	ldr	r3, [pc, #260]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007064:	4a40      	ldr	r2, [pc, #256]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800706a:	6593      	str	r3, [r2, #88]	@ 0x58
 800706c:	4b3e      	ldr	r3, [pc, #248]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800706e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007074:	60bb      	str	r3, [r7, #8]
 8007076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007078:	2301      	movs	r3, #1
 800707a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800707c:	4b3b      	ldr	r3, [pc, #236]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a3a      	ldr	r2, [pc, #232]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007086:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007088:	f7fc fcf6 	bl	8003a78 <HAL_GetTick>
 800708c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800708e:	e009      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007090:	f7fc fcf2 	bl	8003a78 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d902      	bls.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	74fb      	strb	r3, [r7, #19]
        break;
 80070a2:	e005      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070a4:	4b31      	ldr	r3, [pc, #196]	@ (800716c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0ef      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80070b0:	7cfb      	ldrb	r3, [r7, #19]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d15c      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070b6:	4b2c      	ldr	r3, [pc, #176]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01f      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d019      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070d4:	4b24      	ldr	r3, [pc, #144]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070e0:	4b21      	ldr	r3, [pc, #132]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e6:	4a20      	ldr	r2, [pc, #128]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007100:	4a19      	ldr	r2, [pc, #100]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d016      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007112:	f7fc fcb1 	bl	8003a78 <HAL_GetTick>
 8007116:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007118:	e00b      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800711a:	f7fc fcad 	bl	8003a78 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007128:	4293      	cmp	r3, r2
 800712a:	d902      	bls.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	74fb      	strb	r3, [r7, #19]
            break;
 8007130:	e006      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007132:	4b0d      	ldr	r3, [pc, #52]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007138:	f003 0302 	and.w	r3, r3, #2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0ec      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007140:	7cfb      	ldrb	r3, [r7, #19]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10c      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007146:	4b08      	ldr	r3, [pc, #32]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007156:	4904      	ldr	r1, [pc, #16]	@ (8007168 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800715e:	e009      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007160:	7cfb      	ldrb	r3, [r7, #19]
 8007162:	74bb      	strb	r3, [r7, #18]
 8007164:	e006      	b.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007166:	bf00      	nop
 8007168:	40021000 	.word	0x40021000
 800716c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007170:	7cfb      	ldrb	r3, [r7, #19]
 8007172:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007174:	7c7b      	ldrb	r3, [r7, #17]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d105      	bne.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800717a:	4b9e      	ldr	r3, [pc, #632]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	4a9d      	ldr	r2, [pc, #628]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007184:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00a      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007192:	4b98      	ldr	r3, [pc, #608]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007198:	f023 0203 	bic.w	r2, r3, #3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a0:	4994      	ldr	r1, [pc, #592]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071b4:	4b8f      	ldr	r3, [pc, #572]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ba:	f023 020c 	bic.w	r2, r3, #12
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c2:	498c      	ldr	r1, [pc, #560]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071d6:	4b87      	ldr	r3, [pc, #540]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e4:	4983      	ldr	r1, [pc, #524]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071f8:	4b7e      	ldr	r3, [pc, #504]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007206:	497b      	ldr	r1, [pc, #492]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0310 	and.w	r3, r3, #16
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800721a:	4b76      	ldr	r3, [pc, #472]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800721c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007220:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007228:	4972      	ldr	r1, [pc, #456]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800723c:	4b6d      	ldr	r3, [pc, #436]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007242:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800724a:	496a      	ldr	r1, [pc, #424]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800724c:	4313      	orrs	r3, r2
 800724e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800725e:	4b65      	ldr	r3, [pc, #404]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007264:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800726c:	4961      	ldr	r1, [pc, #388]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007280:	4b5c      	ldr	r3, [pc, #368]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800728e:	4959      	ldr	r1, [pc, #356]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007290:	4313      	orrs	r3, r2
 8007292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072a2:	4b54      	ldr	r3, [pc, #336]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072b0:	4950      	ldr	r1, [pc, #320]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072c4:	4b4b      	ldr	r3, [pc, #300]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d2:	4948      	ldr	r1, [pc, #288]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072e6:	4b43      	ldr	r3, [pc, #268]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072f4:	493f      	ldr	r1, [pc, #252]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d028      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007308:	4b3a      	ldr	r3, [pc, #232]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800730a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007316:	4937      	ldr	r1, [pc, #220]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007318:	4313      	orrs	r3, r2
 800731a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007326:	d106      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007328:	4b32      	ldr	r3, [pc, #200]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	4a31      	ldr	r2, [pc, #196]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800732e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007332:	60d3      	str	r3, [r2, #12]
 8007334:	e011      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800733a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800733e:	d10c      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3304      	adds	r3, #4
 8007344:	2101      	movs	r1, #1
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f8c8 	bl	80074dc <RCCEx_PLLSAI1_Config>
 800734c:	4603      	mov	r3, r0
 800734e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007350:	7cfb      	ldrb	r3, [r7, #19]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007356:	7cfb      	ldrb	r3, [r7, #19]
 8007358:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d028      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007366:	4b23      	ldr	r3, [pc, #140]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007374:	491f      	ldr	r1, [pc, #124]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007380:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007384:	d106      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007386:	4b1b      	ldr	r3, [pc, #108]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	4a1a      	ldr	r2, [pc, #104]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800738c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007390:	60d3      	str	r3, [r2, #12]
 8007392:	e011      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007398:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800739c:	d10c      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3304      	adds	r3, #4
 80073a2:	2101      	movs	r1, #1
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 f899 	bl	80074dc <RCCEx_PLLSAI1_Config>
 80073aa:	4603      	mov	r3, r0
 80073ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073ae:	7cfb      	ldrb	r3, [r7, #19]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80073b4:	7cfb      	ldrb	r3, [r7, #19]
 80073b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d02b      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073c4:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073d2:	4908      	ldr	r1, [pc, #32]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073e2:	d109      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073e4:	4b03      	ldr	r3, [pc, #12]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	4a02      	ldr	r2, [pc, #8]	@ (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073ee:	60d3      	str	r3, [r2, #12]
 80073f0:	e014      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80073f2:	bf00      	nop
 80073f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007400:	d10c      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	2101      	movs	r1, #1
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f867 	bl	80074dc <RCCEx_PLLSAI1_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007412:	7cfb      	ldrb	r3, [r7, #19]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007418:	7cfb      	ldrb	r3, [r7, #19]
 800741a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d02f      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007428:	4b2b      	ldr	r3, [pc, #172]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007436:	4928      	ldr	r1, [pc, #160]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007442:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007446:	d10d      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3304      	adds	r3, #4
 800744c:	2102      	movs	r1, #2
 800744e:	4618      	mov	r0, r3
 8007450:	f000 f844 	bl	80074dc <RCCEx_PLLSAI1_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007458:	7cfb      	ldrb	r3, [r7, #19]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d014      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800745e:	7cfb      	ldrb	r3, [r7, #19]
 8007460:	74bb      	strb	r3, [r7, #18]
 8007462:	e011      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800746c:	d10c      	bne.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3320      	adds	r3, #32
 8007472:	2102      	movs	r1, #2
 8007474:	4618      	mov	r0, r3
 8007476:	f000 f925 	bl	80076c4 <RCCEx_PLLSAI2_Config>
 800747a:	4603      	mov	r3, r0
 800747c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800747e:	7cfb      	ldrb	r3, [r7, #19]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007484:	7cfb      	ldrb	r3, [r7, #19]
 8007486:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007494:	4b10      	ldr	r3, [pc, #64]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074a2:	490d      	ldr	r1, [pc, #52]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00b      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074b6:	4b08      	ldr	r3, [pc, #32]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074c6:	4904      	ldr	r1, [pc, #16]	@ (80074d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80074ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	40021000 	.word	0x40021000

080074dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80074ea:	4b75      	ldr	r3, [pc, #468]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d018      	beq.n	8007528 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80074f6:	4b72      	ldr	r3, [pc, #456]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f003 0203 	and.w	r2, r3, #3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d10d      	bne.n	8007522 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
       ||
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800750e:	4b6c      	ldr	r3, [pc, #432]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	091b      	lsrs	r3, r3, #4
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
       ||
 800751e:	429a      	cmp	r2, r3
 8007520:	d047      	beq.n	80075b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]
 8007526:	e044      	b.n	80075b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b03      	cmp	r3, #3
 800752e:	d018      	beq.n	8007562 <RCCEx_PLLSAI1_Config+0x86>
 8007530:	2b03      	cmp	r3, #3
 8007532:	d825      	bhi.n	8007580 <RCCEx_PLLSAI1_Config+0xa4>
 8007534:	2b01      	cmp	r3, #1
 8007536:	d002      	beq.n	800753e <RCCEx_PLLSAI1_Config+0x62>
 8007538:	2b02      	cmp	r3, #2
 800753a:	d009      	beq.n	8007550 <RCCEx_PLLSAI1_Config+0x74>
 800753c:	e020      	b.n	8007580 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800753e:	4b60      	ldr	r3, [pc, #384]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d11d      	bne.n	8007586 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800754e:	e01a      	b.n	8007586 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007550:	4b5b      	ldr	r3, [pc, #364]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007558:	2b00      	cmp	r3, #0
 800755a:	d116      	bne.n	800758a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007560:	e013      	b.n	800758a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007562:	4b57      	ldr	r3, [pc, #348]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10f      	bne.n	800758e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800756e:	4b54      	ldr	r3, [pc, #336]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800757e:	e006      	b.n	800758e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	73fb      	strb	r3, [r7, #15]
      break;
 8007584:	e004      	b.n	8007590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007586:	bf00      	nop
 8007588:	e002      	b.n	8007590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800758a:	bf00      	nop
 800758c:	e000      	b.n	8007590 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800758e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10d      	bne.n	80075b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007596:	4b4a      	ldr	r3, [pc, #296]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6819      	ldr	r1, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	430b      	orrs	r3, r1
 80075ac:	4944      	ldr	r1, [pc, #272]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d17d      	bne.n	80076b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80075b8:	4b41      	ldr	r3, [pc, #260]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a40      	ldr	r2, [pc, #256]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075c4:	f7fc fa58 	bl	8003a78 <HAL_GetTick>
 80075c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075ca:	e009      	b.n	80075e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075cc:	f7fc fa54 	bl	8003a78 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d902      	bls.n	80075e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	73fb      	strb	r3, [r7, #15]
        break;
 80075de:	e005      	b.n	80075ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075e0:	4b37      	ldr	r3, [pc, #220]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1ef      	bne.n	80075cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d160      	bne.n	80076b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d111      	bne.n	800761c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075f8:	4b31      	ldr	r3, [pc, #196]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	6892      	ldr	r2, [r2, #8]
 8007608:	0211      	lsls	r1, r2, #8
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	68d2      	ldr	r2, [r2, #12]
 800760e:	0912      	lsrs	r2, r2, #4
 8007610:	0452      	lsls	r2, r2, #17
 8007612:	430a      	orrs	r2, r1
 8007614:	492a      	ldr	r1, [pc, #168]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007616:	4313      	orrs	r3, r2
 8007618:	610b      	str	r3, [r1, #16]
 800761a:	e027      	b.n	800766c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d112      	bne.n	8007648 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007622:	4b27      	ldr	r3, [pc, #156]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800762a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6892      	ldr	r2, [r2, #8]
 8007632:	0211      	lsls	r1, r2, #8
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6912      	ldr	r2, [r2, #16]
 8007638:	0852      	lsrs	r2, r2, #1
 800763a:	3a01      	subs	r2, #1
 800763c:	0552      	lsls	r2, r2, #21
 800763e:	430a      	orrs	r2, r1
 8007640:	491f      	ldr	r1, [pc, #124]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007642:	4313      	orrs	r3, r2
 8007644:	610b      	str	r3, [r1, #16]
 8007646:	e011      	b.n	800766c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007648:	4b1d      	ldr	r3, [pc, #116]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007650:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	6892      	ldr	r2, [r2, #8]
 8007658:	0211      	lsls	r1, r2, #8
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6952      	ldr	r2, [r2, #20]
 800765e:	0852      	lsrs	r2, r2, #1
 8007660:	3a01      	subs	r2, #1
 8007662:	0652      	lsls	r2, r2, #25
 8007664:	430a      	orrs	r2, r1
 8007666:	4916      	ldr	r1, [pc, #88]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007668:	4313      	orrs	r3, r2
 800766a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800766c:	4b14      	ldr	r3, [pc, #80]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a13      	ldr	r2, [pc, #76]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007672:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007676:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007678:	f7fc f9fe 	bl	8003a78 <HAL_GetTick>
 800767c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800767e:	e009      	b.n	8007694 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007680:	f7fc f9fa 	bl	8003a78 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	2b02      	cmp	r3, #2
 800768c:	d902      	bls.n	8007694 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	73fb      	strb	r3, [r7, #15]
          break;
 8007692:	e005      	b.n	80076a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007694:	4b0a      	ldr	r3, [pc, #40]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0ef      	beq.n	8007680 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80076a6:	4b06      	ldr	r3, [pc, #24]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	4904      	ldr	r1, [pc, #16]	@ (80076c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40021000 	.word	0x40021000

080076c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80076d2:	4b6a      	ldr	r3, [pc, #424]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	f003 0303 	and.w	r3, r3, #3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d018      	beq.n	8007710 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80076de:	4b67      	ldr	r3, [pc, #412]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f003 0203 	and.w	r2, r3, #3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d10d      	bne.n	800770a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
       ||
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80076f6:	4b61      	ldr	r3, [pc, #388]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	091b      	lsrs	r3, r3, #4
 80076fc:	f003 0307 	and.w	r3, r3, #7
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
       ||
 8007706:	429a      	cmp	r2, r3
 8007708:	d047      	beq.n	800779a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	73fb      	strb	r3, [r7, #15]
 800770e:	e044      	b.n	800779a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b03      	cmp	r3, #3
 8007716:	d018      	beq.n	800774a <RCCEx_PLLSAI2_Config+0x86>
 8007718:	2b03      	cmp	r3, #3
 800771a:	d825      	bhi.n	8007768 <RCCEx_PLLSAI2_Config+0xa4>
 800771c:	2b01      	cmp	r3, #1
 800771e:	d002      	beq.n	8007726 <RCCEx_PLLSAI2_Config+0x62>
 8007720:	2b02      	cmp	r3, #2
 8007722:	d009      	beq.n	8007738 <RCCEx_PLLSAI2_Config+0x74>
 8007724:	e020      	b.n	8007768 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007726:	4b55      	ldr	r3, [pc, #340]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0302 	and.w	r3, r3, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	d11d      	bne.n	800776e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007736:	e01a      	b.n	800776e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007738:	4b50      	ldr	r3, [pc, #320]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007740:	2b00      	cmp	r3, #0
 8007742:	d116      	bne.n	8007772 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007748:	e013      	b.n	8007772 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800774a:	4b4c      	ldr	r3, [pc, #304]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10f      	bne.n	8007776 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007756:	4b49      	ldr	r3, [pc, #292]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d109      	bne.n	8007776 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007766:	e006      	b.n	8007776 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
      break;
 800776c:	e004      	b.n	8007778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800776e:	bf00      	nop
 8007770:	e002      	b.n	8007778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007772:	bf00      	nop
 8007774:	e000      	b.n	8007778 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007776:	bf00      	nop
    }

    if(status == HAL_OK)
 8007778:	7bfb      	ldrb	r3, [r7, #15]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10d      	bne.n	800779a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800777e:	4b3f      	ldr	r3, [pc, #252]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6819      	ldr	r1, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	3b01      	subs	r3, #1
 8007790:	011b      	lsls	r3, r3, #4
 8007792:	430b      	orrs	r3, r1
 8007794:	4939      	ldr	r1, [pc, #228]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007796:	4313      	orrs	r3, r2
 8007798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d167      	bne.n	8007870 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80077a0:	4b36      	ldr	r3, [pc, #216]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a35      	ldr	r2, [pc, #212]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 80077a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ac:	f7fc f964 	bl	8003a78 <HAL_GetTick>
 80077b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80077b2:	e009      	b.n	80077c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80077b4:	f7fc f960 	bl	8003a78 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d902      	bls.n	80077c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	73fb      	strb	r3, [r7, #15]
        break;
 80077c6:	e005      	b.n	80077d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80077c8:	4b2c      	ldr	r3, [pc, #176]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1ef      	bne.n	80077b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d14a      	bne.n	8007870 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d111      	bne.n	8007804 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80077e0:	4b26      	ldr	r3, [pc, #152]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80077e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	6892      	ldr	r2, [r2, #8]
 80077f0:	0211      	lsls	r1, r2, #8
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	68d2      	ldr	r2, [r2, #12]
 80077f6:	0912      	lsrs	r2, r2, #4
 80077f8:	0452      	lsls	r2, r2, #17
 80077fa:	430a      	orrs	r2, r1
 80077fc:	491f      	ldr	r1, [pc, #124]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	614b      	str	r3, [r1, #20]
 8007802:	e011      	b.n	8007828 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007804:	4b1d      	ldr	r3, [pc, #116]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800780c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6892      	ldr	r2, [r2, #8]
 8007814:	0211      	lsls	r1, r2, #8
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	6912      	ldr	r2, [r2, #16]
 800781a:	0852      	lsrs	r2, r2, #1
 800781c:	3a01      	subs	r2, #1
 800781e:	0652      	lsls	r2, r2, #25
 8007820:	430a      	orrs	r2, r1
 8007822:	4916      	ldr	r1, [pc, #88]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007824:	4313      	orrs	r3, r2
 8007826:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007828:	4b14      	ldr	r3, [pc, #80]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a13      	ldr	r2, [pc, #76]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 800782e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007832:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007834:	f7fc f920 	bl	8003a78 <HAL_GetTick>
 8007838:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800783a:	e009      	b.n	8007850 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800783c:	f7fc f91c 	bl	8003a78 <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	2b02      	cmp	r3, #2
 8007848:	d902      	bls.n	8007850 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	73fb      	strb	r3, [r7, #15]
          break;
 800784e:	e005      	b.n	800785c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007850:	4b0a      	ldr	r3, [pc, #40]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0ef      	beq.n	800783c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007862:	4b06      	ldr	r3, [pc, #24]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 8007864:	695a      	ldr	r2, [r3, #20]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	4904      	ldr	r1, [pc, #16]	@ (800787c <RCCEx_PLLSAI2_Config+0x1b8>)
 800786c:	4313      	orrs	r3, r2
 800786e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	40021000 	.word	0x40021000

08007880 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d079      	beq.n	8007986 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fb f964 	bl	8002b74 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b10      	cmp	r3, #16
 80078c0:	d058      	beq.n	8007974 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	22ca      	movs	r2, #202	@ 0xca
 80078c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2253      	movs	r2, #83	@ 0x53
 80078d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa4e 	bl	8007d74 <RTC_EnterInitMode>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d127      	bne.n	8007932 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6812      	ldr	r2, [r2, #0]
 80078ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80078f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078f4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6899      	ldr	r1, [r3, #8]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	431a      	orrs	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	431a      	orrs	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	430a      	orrs	r2, r1
 8007912:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	68d2      	ldr	r2, [r2, #12]
 800791c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6919      	ldr	r1, [r3, #16]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	041a      	lsls	r2, r3, #16
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fa52 	bl	8007ddc <RTC_ExitInitMode>
 8007938:	4603      	mov	r3, r0
 800793a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800793c:	7bfb      	ldrb	r3, [r7, #15]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d113      	bne.n	800796a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0203 	bic.w	r2, r2, #3
 8007950:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	69da      	ldr	r2, [r3, #28]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	695b      	ldr	r3, [r3, #20]
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	22ff      	movs	r2, #255	@ 0xff
 8007970:	625a      	str	r2, [r3, #36]	@ 0x24
 8007972:	e001      	b.n	8007978 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d103      	bne.n	8007986 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007990:	b590      	push	{r4, r7, lr}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	60b9      	str	r1, [r7, #8]
 800799a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_RTC_SetTime+0x1a>
 80079a6:	2302      	movs	r3, #2
 80079a8:	e08b      	b.n	8007ac2 <HAL_RTC_SetTime+0x132>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	22ca      	movs	r2, #202	@ 0xca
 80079c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2253      	movs	r2, #83	@ 0x53
 80079c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079ca:	68f8      	ldr	r0, [r7, #12]
 80079cc:	f000 f9d2 	bl	8007d74 <RTC_EnterInitMode>
 80079d0:	4603      	mov	r3, r0
 80079d2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80079d4:	7cfb      	ldrb	r3, [r7, #19]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d163      	bne.n	8007aa2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d126      	bne.n	8007a2e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d102      	bne.n	80079f4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2200      	movs	r2, #0
 80079f2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fa2d 	bl	8007e58 <RTC_ByteToBcd2>
 80079fe:	4603      	mov	r3, r0
 8007a00:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fa26 	bl	8007e58 <RTC_ByteToBcd2>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a10:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	789b      	ldrb	r3, [r3, #2]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 fa1e 	bl	8007e58 <RTC_ByteToBcd2>
 8007a1c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a1e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	78db      	ldrb	r3, [r3, #3]
 8007a26:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	e018      	b.n	8007a60 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d102      	bne.n	8007a42 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	785b      	ldrb	r3, [r3, #1]
 8007a4c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a4e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007a54:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	78db      	ldrb	r3, [r3, #3]
 8007a5a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007a6a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007a6e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007a7e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6899      	ldr	r1, [r3, #8]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f000 f99f 	bl	8007ddc <RTC_ExitInitMode>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	22ff      	movs	r2, #255	@ 0xff
 8007aa8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007aaa:	7cfb      	ldrb	r3, [r7, #19]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d103      	bne.n	8007ab8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007ac0:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd90      	pop	{r4, r7, pc}

08007aca <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b086      	sub	sp, #24
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007af8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007afc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	0c1b      	lsrs	r3, r3, #16
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	0a1b      	lsrs	r3, r3, #8
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	0d9b      	lsrs	r3, r3, #22
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	f003 0301 	and.w	r3, r3, #1
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d11a      	bne.n	8007b78 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f9a6 	bl	8007e98 <RTC_Bcd2ToByte>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	461a      	mov	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	785b      	ldrb	r3, [r3, #1]
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 f99d 	bl	8007e98 <RTC_Bcd2ToByte>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	461a      	mov	r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	789b      	ldrb	r3, [r3, #2]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 f994 	bl	8007e98 <RTC_Bcd2ToByte>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b82:	b590      	push	{r4, r7, lr}
 8007b84:	b087      	sub	sp, #28
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d101      	bne.n	8007b9c <HAL_RTC_SetDate+0x1a>
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e075      	b.n	8007c88 <HAL_RTC_SetDate+0x106>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10e      	bne.n	8007bd0 <HAL_RTC_SetDate+0x4e>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	f003 0310 	and.w	r3, r3, #16
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d008      	beq.n	8007bd0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	785b      	ldrb	r3, [r3, #1]
 8007bc2:	f023 0310 	bic.w	r3, r3, #16
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	330a      	adds	r3, #10
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d11c      	bne.n	8007c10 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	78db      	ldrb	r3, [r3, #3]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 f93c 	bl	8007e58 <RTC_ByteToBcd2>
 8007be0:	4603      	mov	r3, r0
 8007be2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 f935 	bl	8007e58 <RTC_ByteToBcd2>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007bf2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	789b      	ldrb	r3, [r3, #2]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 f92d 	bl	8007e58 <RTC_ByteToBcd2>
 8007bfe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007c00:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	e00e      	b.n	8007c2e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	78db      	ldrb	r3, [r3, #3]
 8007c14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	785b      	ldrb	r3, [r3, #1]
 8007c1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007c1c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007c22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	22ca      	movs	r2, #202	@ 0xca
 8007c34:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2253      	movs	r2, #83	@ 0x53
 8007c3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f000 f898 	bl	8007d74 <RTC_EnterInitMode>
 8007c44:	4603      	mov	r3, r0
 8007c46:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007c48:	7cfb      	ldrb	r3, [r7, #19]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10c      	bne.n	8007c68 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007c58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007c5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 f8bc 	bl	8007ddc <RTC_ExitInitMode>
 8007c64:	4603      	mov	r3, r0
 8007c66:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	22ff      	movs	r2, #255	@ 0xff
 8007c6e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8007c70:	7cfb      	ldrb	r3, [r7, #19]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007c86:	7cfb      	ldrb	r3, [r7, #19]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	371c      	adds	r7, #28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd90      	pop	{r4, r7, pc}

08007c90 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007ca6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007caa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	0c1b      	lsrs	r3, r3, #16
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	0a1b      	lsrs	r3, r3, #8
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	0b5b      	lsrs	r3, r3, #13
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d11a      	bne.n	8007d20 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	78db      	ldrb	r3, [r3, #3]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f8d2 	bl	8007e98 <RTC_Bcd2ToByte>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	785b      	ldrb	r3, [r3, #1]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 f8c9 	bl	8007e98 <RTC_Bcd2ToByte>
 8007d06:	4603      	mov	r3, r0
 8007d08:	461a      	mov	r2, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	789b      	ldrb	r3, [r3, #2]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 f8c0 	bl	8007e98 <RTC_Bcd2ToByte>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a0d      	ldr	r2, [pc, #52]	@ (8007d70 <HAL_RTC_WaitForSynchro+0x44>)
 8007d3a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007d3c:	f7fb fe9c 	bl	8003a78 <HAL_GetTick>
 8007d40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d42:	e009      	b.n	8007d58 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d44:	f7fb fe98 	bl	8003a78 <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d52:	d901      	bls.n	8007d58 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e007      	b.n	8007d68 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f003 0320 	and.w	r3, r3, #32
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d0ee      	beq.n	8007d44 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	0003ff5f 	.word	0x0003ff5f

08007d74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d120      	bne.n	8007dd0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d98:	f7fb fe6e 	bl	8003a78 <HAL_GetTick>
 8007d9c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007d9e:	e00d      	b.n	8007dbc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007da0:	f7fb fe6a 	bl	8003a78 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dae:	d905      	bls.n	8007dbc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2203      	movs	r2, #3
 8007db8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d102      	bne.n	8007dd0 <RTC_EnterInitMode+0x5c>
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d1e7      	bne.n	8007da0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007de8:	4b1a      	ldr	r3, [pc, #104]	@ (8007e54 <RTC_ExitInitMode+0x78>)
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	4a19      	ldr	r2, [pc, #100]	@ (8007e54 <RTC_ExitInitMode+0x78>)
 8007dee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007df2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007df4:	4b17      	ldr	r3, [pc, #92]	@ (8007e54 <RTC_ExitInitMode+0x78>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10c      	bne.n	8007e1a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7ff ff93 	bl	8007d2c <HAL_RTC_WaitForSynchro>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01e      	beq.n	8007e4a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2203      	movs	r2, #3
 8007e10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	e017      	b.n	8007e4a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007e54 <RTC_ExitInitMode+0x78>)
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	4a0d      	ldr	r2, [pc, #52]	@ (8007e54 <RTC_ExitInitMode+0x78>)
 8007e20:	f023 0320 	bic.w	r3, r3, #32
 8007e24:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff ff80 	bl	8007d2c <HAL_RTC_WaitForSynchro>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2203      	movs	r2, #3
 8007e36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e3e:	4b05      	ldr	r3, [pc, #20]	@ (8007e54 <RTC_ExitInitMode+0x78>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	4a04      	ldr	r2, [pc, #16]	@ (8007e54 <RTC_ExitInitMode+0x78>)
 8007e44:	f043 0320 	orr.w	r3, r3, #32
 8007e48:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40002800 	.word	0x40002800

08007e58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007e6a:	e005      	b.n	8007e78 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007e72:	7afb      	ldrb	r3, [r7, #11]
 8007e74:	3b0a      	subs	r3, #10
 8007e76:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d8f6      	bhi.n	8007e6c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	7afb      	ldrb	r3, [r7, #11]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	b2db      	uxtb	r3, r3
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	091b      	lsrs	r3, r3, #4
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	0092      	lsls	r2, r2, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	f003 030f 	and.w	r3, r3, #15
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	b2db      	uxtb	r3, r3
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e095      	b.n	800800a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d108      	bne.n	8007ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007eee:	d009      	beq.n	8007f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	61da      	str	r2, [r3, #28]
 8007ef6:	e005      	b.n	8007f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d106      	bne.n	8007f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f7fb f8e6 	bl	80030f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f44:	d902      	bls.n	8007f4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	e002      	b.n	8007f52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007f50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007f5a:	d007      	beq.n	8007f6c <HAL_SPI_Init+0xa0>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f64:	d002      	beq.n	8007f6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0302 	and.w	r3, r3, #2
 8007f86:	431a      	orrs	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fae:	ea42 0103 	orr.w	r1, r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	0c1b      	lsrs	r3, r3, #16
 8007fc8:	f003 0204 	and.w	r2, r3, #4
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fda:	f003 0308 	and.w	r3, r3, #8
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007fe8:	ea42 0103 	orr.w	r1, r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b08a      	sub	sp, #40	@ 0x28
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
 800801e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008020:	2301      	movs	r3, #1
 8008022:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008024:	f7fb fd28 	bl	8003a78 <HAL_GetTick>
 8008028:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008030:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008038:	887b      	ldrh	r3, [r7, #2]
 800803a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800803c:	887b      	ldrh	r3, [r7, #2]
 800803e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008040:	7ffb      	ldrb	r3, [r7, #31]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d00c      	beq.n	8008060 <HAL_SPI_TransmitReceive+0x4e>
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800804c:	d106      	bne.n	800805c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <HAL_SPI_TransmitReceive+0x4a>
 8008056:	7ffb      	ldrb	r3, [r7, #31]
 8008058:	2b04      	cmp	r3, #4
 800805a:	d001      	beq.n	8008060 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800805c:	2302      	movs	r3, #2
 800805e:	e1f3      	b.n	8008448 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <HAL_SPI_TransmitReceive+0x60>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <HAL_SPI_TransmitReceive+0x60>
 800806c:	887b      	ldrh	r3, [r7, #2]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d101      	bne.n	8008076 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e1e8      	b.n	8008448 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_SPI_TransmitReceive+0x72>
 8008080:	2302      	movs	r3, #2
 8008082:	e1e1      	b.n	8008448 <HAL_SPI_TransmitReceive+0x436>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b04      	cmp	r3, #4
 8008096:	d003      	beq.n	80080a0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2205      	movs	r2, #5
 800809c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	887a      	ldrh	r2, [r7, #2]
 80080b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	887a      	ldrh	r2, [r7, #2]
 80080b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	887a      	ldrh	r2, [r7, #2]
 80080c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	887a      	ldrh	r2, [r7, #2]
 80080cc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80080e2:	d802      	bhi.n	80080ea <HAL_SPI_TransmitReceive+0xd8>
 80080e4:	8abb      	ldrh	r3, [r7, #20]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d908      	bls.n	80080fc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80080f8:	605a      	str	r2, [r3, #4]
 80080fa:	e007      	b.n	800810c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800810a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008116:	2b40      	cmp	r3, #64	@ 0x40
 8008118:	d007      	beq.n	800812a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008132:	f240 8083 	bls.w	800823c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <HAL_SPI_TransmitReceive+0x132>
 800813e:	8afb      	ldrh	r3, [r7, #22]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d16f      	bne.n	8008224 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008148:	881a      	ldrh	r2, [r3, #0]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008154:	1c9a      	adds	r2, r3, #2
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008168:	e05c      	b.n	8008224 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b02      	cmp	r3, #2
 8008176:	d11b      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x19e>
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800817c:	b29b      	uxth	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d016      	beq.n	80081b0 <HAL_SPI_TransmitReceive+0x19e>
 8008182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008184:	2b01      	cmp	r3, #1
 8008186:	d113      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818c:	881a      	ldrh	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008198:	1c9a      	adds	r2, r3, #2
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f003 0301 	and.w	r3, r3, #1
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d11c      	bne.n	80081f8 <HAL_SPI_TransmitReceive+0x1e6>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d016      	beq.n	80081f8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68da      	ldr	r2, [r3, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d4:	b292      	uxth	r2, r2
 80081d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081dc:	1c9a      	adds	r2, r3, #2
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081f4:	2301      	movs	r3, #1
 80081f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80081f8:	f7fb fc3e 	bl	8003a78 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008204:	429a      	cmp	r2, r3
 8008206:	d80d      	bhi.n	8008224 <HAL_SPI_TransmitReceive+0x212>
 8008208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800820e:	d009      	beq.n	8008224 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e111      	b.n	8008448 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d19d      	bne.n	800816a <HAL_SPI_TransmitReceive+0x158>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008234:	b29b      	uxth	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d197      	bne.n	800816a <HAL_SPI_TransmitReceive+0x158>
 800823a:	e0e5      	b.n	8008408 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <HAL_SPI_TransmitReceive+0x23a>
 8008244:	8afb      	ldrh	r3, [r7, #22]
 8008246:	2b01      	cmp	r3, #1
 8008248:	f040 80d1 	bne.w	80083ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008250:	b29b      	uxth	r3, r3
 8008252:	2b01      	cmp	r3, #1
 8008254:	d912      	bls.n	800827c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008266:	1c9a      	adds	r2, r3, #2
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b02      	subs	r3, #2
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800827a:	e0b8      	b.n	80083ee <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	7812      	ldrb	r2, [r2, #0]
 8008288:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008298:	b29b      	uxth	r3, r3
 800829a:	3b01      	subs	r3, #1
 800829c:	b29a      	uxth	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082a2:	e0a4      	b.n	80083ee <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d134      	bne.n	800831c <HAL_SPI_TransmitReceive+0x30a>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d02f      	beq.n	800831c <HAL_SPI_TransmitReceive+0x30a>
 80082bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d12c      	bne.n	800831c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d912      	bls.n	80082f2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d0:	881a      	ldrh	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082dc:	1c9a      	adds	r2, r3, #2
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	3b02      	subs	r3, #2
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80082f0:	e012      	b.n	8008318 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	330c      	adds	r3, #12
 80082fc:	7812      	ldrb	r2, [r2, #0]
 80082fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800830e:	b29b      	uxth	r3, r3
 8008310:	3b01      	subs	r3, #1
 8008312:	b29a      	uxth	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	2b01      	cmp	r3, #1
 8008328:	d148      	bne.n	80083bc <HAL_SPI_TransmitReceive+0x3aa>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008330:	b29b      	uxth	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	d042      	beq.n	80083bc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800833c:	b29b      	uxth	r3, r3
 800833e:	2b01      	cmp	r3, #1
 8008340:	d923      	bls.n	800838a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	68da      	ldr	r2, [r3, #12]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834c:	b292      	uxth	r2, r2
 800834e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008354:	1c9a      	adds	r2, r3, #2
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008360:	b29b      	uxth	r3, r3
 8008362:	3b02      	subs	r3, #2
 8008364:	b29a      	uxth	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008372:	b29b      	uxth	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	d81f      	bhi.n	80083b8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008386:	605a      	str	r2, [r3, #4]
 8008388:	e016      	b.n	80083b8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f103 020c 	add.w	r2, r3, #12
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008396:	7812      	ldrb	r2, [r2, #0]
 8008398:	b2d2      	uxtb	r2, r2
 800839a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083b8:	2301      	movs	r3, #1
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083bc:	f7fb fb5c 	bl	8003a78 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d803      	bhi.n	80083d4 <HAL_SPI_TransmitReceive+0x3c2>
 80083cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083d2:	d102      	bne.n	80083da <HAL_SPI_TransmitReceive+0x3c8>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d109      	bne.n	80083ee <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e02c      	b.n	8008448 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f47f af55 	bne.w	80082a4 <HAL_SPI_TransmitReceive+0x292>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	f47f af4e 	bne.w	80082a4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008408:	6a3a      	ldr	r2, [r7, #32]
 800840a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f93d 	bl	800868c <SPI_EndRxTxTransaction>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d008      	beq.n	800842a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2220      	movs	r2, #32
 800841c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e00e      	b.n	8008448 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e000      	b.n	8008448 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8008446:	2300      	movs	r3, #0
  }
}
 8008448:	4618      	mov	r0, r3
 800844a:	3728      	adds	r7, #40	@ 0x28
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	603b      	str	r3, [r7, #0]
 800845c:	4613      	mov	r3, r2
 800845e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008460:	f7fb fb0a 	bl	8003a78 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008468:	1a9b      	subs	r3, r3, r2
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	4413      	add	r3, r2
 800846e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008470:	f7fb fb02 	bl	8003a78 <HAL_GetTick>
 8008474:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008476:	4b39      	ldr	r3, [pc, #228]	@ (800855c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	015b      	lsls	r3, r3, #5
 800847c:	0d1b      	lsrs	r3, r3, #20
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	fb02 f303 	mul.w	r3, r2, r3
 8008484:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008486:	e054      	b.n	8008532 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800848e:	d050      	beq.n	8008532 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008490:	f7fb faf2 	bl	8003a78 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	429a      	cmp	r2, r3
 800849e:	d902      	bls.n	80084a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d13d      	bne.n	8008522 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084be:	d111      	bne.n	80084e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084c8:	d004      	beq.n	80084d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084d2:	d107      	bne.n	80084e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ec:	d10f      	bne.n	800850e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800850c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e017      	b.n	8008552 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	3b01      	subs	r3, #1
 8008530:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	4013      	ands	r3, r2
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	429a      	cmp	r2, r3
 8008540:	bf0c      	ite	eq
 8008542:	2301      	moveq	r3, #1
 8008544:	2300      	movne	r3, #0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	461a      	mov	r2, r3
 800854a:	79fb      	ldrb	r3, [r7, #7]
 800854c:	429a      	cmp	r2, r3
 800854e:	d19b      	bne.n	8008488 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3720      	adds	r7, #32
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20000014 	.word	0x20000014

08008560 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b08a      	sub	sp, #40	@ 0x28
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
 800856c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008572:	f7fb fa81 	bl	8003a78 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	1a9b      	subs	r3, r3, r2
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	4413      	add	r3, r2
 8008580:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008582:	f7fb fa79 	bl	8003a78 <HAL_GetTick>
 8008586:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	330c      	adds	r3, #12
 800858e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008590:	4b3d      	ldr	r3, [pc, #244]	@ (8008688 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	4613      	mov	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	00da      	lsls	r2, r3, #3
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	0d1b      	lsrs	r3, r3, #20
 80085a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a2:	fb02 f303 	mul.w	r3, r2, r3
 80085a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80085a8:	e060      	b.n	800866c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80085b0:	d107      	bne.n	80085c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085c8:	d050      	beq.n	800866c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085ca:	f7fb fa55 	bl	8003a78 <HAL_GetTick>
 80085ce:	4602      	mov	r2, r0
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	1ad3      	subs	r3, r2, r3
 80085d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d902      	bls.n	80085e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80085da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d13d      	bne.n	800865c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80085ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085f8:	d111      	bne.n	800861e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008602:	d004      	beq.n	800860e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800860c:	d107      	bne.n	800861e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800861c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008626:	d10f      	bne.n	8008648 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008646:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e010      	b.n	800867e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	3b01      	subs	r3, #1
 800866a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	4013      	ands	r3, r2
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	429a      	cmp	r2, r3
 800867a:	d196      	bne.n	80085aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3728      	adds	r7, #40	@ 0x28
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20000014 	.word	0x20000014

0800868c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af02      	add	r7, sp, #8
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7ff ff5b 	bl	8008560 <SPI_WaitFifoStateUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086b4:	f043 0220 	orr.w	r2, r3, #32
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e027      	b.n	8008710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	2180      	movs	r1, #128	@ 0x80
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff fec0 	bl	8008450 <SPI_WaitFlagStateUntilTimeout>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086da:	f043 0220 	orr.w	r2, r3, #32
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e014      	b.n	8008710 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f7ff ff34 	bl	8008560 <SPI_WaitFifoStateUntilTimeout>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008702:	f043 0220 	orr.w	r2, r3, #32
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e000      	b.n	8008710 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e049      	b.n	80087be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d106      	bne.n	8008744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7fa ffaa 	bl	8003698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f000 fa0a 	bl	8008b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d001      	beq.n	80087e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e047      	b.n	8008870 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a23      	ldr	r2, [pc, #140]	@ (800887c <HAL_TIM_Base_Start+0xb4>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01d      	beq.n	800882e <HAL_TIM_Base_Start+0x66>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fa:	d018      	beq.n	800882e <HAL_TIM_Base_Start+0x66>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a1f      	ldr	r2, [pc, #124]	@ (8008880 <HAL_TIM_Base_Start+0xb8>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d013      	beq.n	800882e <HAL_TIM_Base_Start+0x66>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a1e      	ldr	r2, [pc, #120]	@ (8008884 <HAL_TIM_Base_Start+0xbc>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d00e      	beq.n	800882e <HAL_TIM_Base_Start+0x66>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1c      	ldr	r2, [pc, #112]	@ (8008888 <HAL_TIM_Base_Start+0xc0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d009      	beq.n	800882e <HAL_TIM_Base_Start+0x66>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a1b      	ldr	r2, [pc, #108]	@ (800888c <HAL_TIM_Base_Start+0xc4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d004      	beq.n	800882e <HAL_TIM_Base_Start+0x66>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a19      	ldr	r2, [pc, #100]	@ (8008890 <HAL_TIM_Base_Start+0xc8>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d115      	bne.n	800885a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	4b17      	ldr	r3, [pc, #92]	@ (8008894 <HAL_TIM_Base_Start+0xcc>)
 8008836:	4013      	ands	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2b06      	cmp	r3, #6
 800883e:	d015      	beq.n	800886c <HAL_TIM_Base_Start+0xa4>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008846:	d011      	beq.n	800886c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0201 	orr.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008858:	e008      	b.n	800886c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0201 	orr.w	r2, r2, #1
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	e000      	b.n	800886e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	40012c00 	.word	0x40012c00
 8008880:	40000400 	.word	0x40000400
 8008884:	40000800 	.word	0x40000800
 8008888:	40000c00 	.word	0x40000c00
 800888c:	40013400 	.word	0x40013400
 8008890:	40014000 	.word	0x40014000
 8008894:	00010007 	.word	0x00010007

08008898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e049      	b.n	800893e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fa feca 	bl	8003658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4619      	mov	r1, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	f000 f94a 	bl	8008b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008962:	2302      	movs	r3, #2
 8008964:	e0ff      	b.n	8008b66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b14      	cmp	r3, #20
 8008972:	f200 80f0 	bhi.w	8008b56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008976:	a201      	add	r2, pc, #4	@ (adr r2, 800897c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	080089d1 	.word	0x080089d1
 8008980:	08008b57 	.word	0x08008b57
 8008984:	08008b57 	.word	0x08008b57
 8008988:	08008b57 	.word	0x08008b57
 800898c:	08008a11 	.word	0x08008a11
 8008990:	08008b57 	.word	0x08008b57
 8008994:	08008b57 	.word	0x08008b57
 8008998:	08008b57 	.word	0x08008b57
 800899c:	08008a53 	.word	0x08008a53
 80089a0:	08008b57 	.word	0x08008b57
 80089a4:	08008b57 	.word	0x08008b57
 80089a8:	08008b57 	.word	0x08008b57
 80089ac:	08008a93 	.word	0x08008a93
 80089b0:	08008b57 	.word	0x08008b57
 80089b4:	08008b57 	.word	0x08008b57
 80089b8:	08008b57 	.word	0x08008b57
 80089bc:	08008ad5 	.word	0x08008ad5
 80089c0:	08008b57 	.word	0x08008b57
 80089c4:	08008b57 	.word	0x08008b57
 80089c8:	08008b57 	.word	0x08008b57
 80089cc:	08008b15 	.word	0x08008b15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 f970 	bl	8008cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	699a      	ldr	r2, [r3, #24]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0208 	orr.w	r2, r2, #8
 80089ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0204 	bic.w	r2, r2, #4
 80089fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6999      	ldr	r1, [r3, #24]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	691a      	ldr	r2, [r3, #16]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	619a      	str	r2, [r3, #24]
      break;
 8008a0e:	e0a5      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68b9      	ldr	r1, [r7, #8]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f9e0 	bl	8008ddc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	699a      	ldr	r2, [r3, #24]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6999      	ldr	r1, [r3, #24]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	021a      	lsls	r2, r3, #8
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	619a      	str	r2, [r3, #24]
      break;
 8008a50:	e084      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68b9      	ldr	r1, [r7, #8]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fa49 	bl	8008ef0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69da      	ldr	r2, [r3, #28]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 0208 	orr.w	r2, r2, #8
 8008a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69da      	ldr	r2, [r3, #28]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0204 	bic.w	r2, r2, #4
 8008a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69d9      	ldr	r1, [r3, #28]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	61da      	str	r2, [r3, #28]
      break;
 8008a90:	e064      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fab1 	bl	8009000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69da      	ldr	r2, [r3, #28]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69da      	ldr	r2, [r3, #28]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69d9      	ldr	r1, [r3, #28]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	021a      	lsls	r2, r3, #8
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	61da      	str	r2, [r3, #28]
      break;
 8008ad2:	e043      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fafa 	bl	80090d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f042 0208 	orr.w	r2, r2, #8
 8008aee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0204 	bic.w	r2, r2, #4
 8008afe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008b12:	e023      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 fb3e 	bl	800919c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	021a      	lsls	r2, r3, #8
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008b54:	e002      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	75fb      	strb	r3, [r7, #23]
      break;
 8008b5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop

08008b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a46      	ldr	r2, [pc, #280]	@ (8008c9c <TIM_Base_SetConfig+0x12c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d013      	beq.n	8008bb0 <TIM_Base_SetConfig+0x40>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b8e:	d00f      	beq.n	8008bb0 <TIM_Base_SetConfig+0x40>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a43      	ldr	r2, [pc, #268]	@ (8008ca0 <TIM_Base_SetConfig+0x130>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d00b      	beq.n	8008bb0 <TIM_Base_SetConfig+0x40>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a42      	ldr	r2, [pc, #264]	@ (8008ca4 <TIM_Base_SetConfig+0x134>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d007      	beq.n	8008bb0 <TIM_Base_SetConfig+0x40>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a41      	ldr	r2, [pc, #260]	@ (8008ca8 <TIM_Base_SetConfig+0x138>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d003      	beq.n	8008bb0 <TIM_Base_SetConfig+0x40>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4a40      	ldr	r2, [pc, #256]	@ (8008cac <TIM_Base_SetConfig+0x13c>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d108      	bne.n	8008bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a35      	ldr	r2, [pc, #212]	@ (8008c9c <TIM_Base_SetConfig+0x12c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d01f      	beq.n	8008c0a <TIM_Base_SetConfig+0x9a>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd0:	d01b      	beq.n	8008c0a <TIM_Base_SetConfig+0x9a>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a32      	ldr	r2, [pc, #200]	@ (8008ca0 <TIM_Base_SetConfig+0x130>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d017      	beq.n	8008c0a <TIM_Base_SetConfig+0x9a>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a31      	ldr	r2, [pc, #196]	@ (8008ca4 <TIM_Base_SetConfig+0x134>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d013      	beq.n	8008c0a <TIM_Base_SetConfig+0x9a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a30      	ldr	r2, [pc, #192]	@ (8008ca8 <TIM_Base_SetConfig+0x138>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d00f      	beq.n	8008c0a <TIM_Base_SetConfig+0x9a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a2f      	ldr	r2, [pc, #188]	@ (8008cac <TIM_Base_SetConfig+0x13c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d00b      	beq.n	8008c0a <TIM_Base_SetConfig+0x9a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a2e      	ldr	r2, [pc, #184]	@ (8008cb0 <TIM_Base_SetConfig+0x140>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d007      	beq.n	8008c0a <TIM_Base_SetConfig+0x9a>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8008cb4 <TIM_Base_SetConfig+0x144>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d003      	beq.n	8008c0a <TIM_Base_SetConfig+0x9a>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a2c      	ldr	r2, [pc, #176]	@ (8008cb8 <TIM_Base_SetConfig+0x148>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d108      	bne.n	8008c1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a16      	ldr	r2, [pc, #88]	@ (8008c9c <TIM_Base_SetConfig+0x12c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00f      	beq.n	8008c68 <TIM_Base_SetConfig+0xf8>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a18      	ldr	r2, [pc, #96]	@ (8008cac <TIM_Base_SetConfig+0x13c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d00b      	beq.n	8008c68 <TIM_Base_SetConfig+0xf8>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a17      	ldr	r2, [pc, #92]	@ (8008cb0 <TIM_Base_SetConfig+0x140>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d007      	beq.n	8008c68 <TIM_Base_SetConfig+0xf8>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a16      	ldr	r2, [pc, #88]	@ (8008cb4 <TIM_Base_SetConfig+0x144>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d003      	beq.n	8008c68 <TIM_Base_SetConfig+0xf8>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a15      	ldr	r2, [pc, #84]	@ (8008cb8 <TIM_Base_SetConfig+0x148>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d103      	bne.n	8008c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	691a      	ldr	r2, [r3, #16]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d105      	bne.n	8008c8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	f023 0201 	bic.w	r2, r3, #1
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	611a      	str	r2, [r3, #16]
  }
}
 8008c8e:	bf00      	nop
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	40012c00 	.word	0x40012c00
 8008ca0:	40000400 	.word	0x40000400
 8008ca4:	40000800 	.word	0x40000800
 8008ca8:	40000c00 	.word	0x40000c00
 8008cac:	40013400 	.word	0x40013400
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	40014400 	.word	0x40014400
 8008cb8:	40014800 	.word	0x40014800

08008cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	f023 0201 	bic.w	r2, r3, #1
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0303 	bic.w	r3, r3, #3
 8008cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f023 0302 	bic.w	r3, r3, #2
 8008d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a2c      	ldr	r2, [pc, #176]	@ (8008dc8 <TIM_OC1_SetConfig+0x10c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00f      	beq.n	8008d3c <TIM_OC1_SetConfig+0x80>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a2b      	ldr	r2, [pc, #172]	@ (8008dcc <TIM_OC1_SetConfig+0x110>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d00b      	beq.n	8008d3c <TIM_OC1_SetConfig+0x80>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a2a      	ldr	r2, [pc, #168]	@ (8008dd0 <TIM_OC1_SetConfig+0x114>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d007      	beq.n	8008d3c <TIM_OC1_SetConfig+0x80>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a29      	ldr	r2, [pc, #164]	@ (8008dd4 <TIM_OC1_SetConfig+0x118>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d003      	beq.n	8008d3c <TIM_OC1_SetConfig+0x80>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a28      	ldr	r2, [pc, #160]	@ (8008dd8 <TIM_OC1_SetConfig+0x11c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d10c      	bne.n	8008d56 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f023 0308 	bic.w	r3, r3, #8
 8008d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f023 0304 	bic.w	r3, r3, #4
 8008d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc8 <TIM_OC1_SetConfig+0x10c>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d00f      	beq.n	8008d7e <TIM_OC1_SetConfig+0xc2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1a      	ldr	r2, [pc, #104]	@ (8008dcc <TIM_OC1_SetConfig+0x110>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00b      	beq.n	8008d7e <TIM_OC1_SetConfig+0xc2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a19      	ldr	r2, [pc, #100]	@ (8008dd0 <TIM_OC1_SetConfig+0x114>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d007      	beq.n	8008d7e <TIM_OC1_SetConfig+0xc2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a18      	ldr	r2, [pc, #96]	@ (8008dd4 <TIM_OC1_SetConfig+0x118>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d003      	beq.n	8008d7e <TIM_OC1_SetConfig+0xc2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a17      	ldr	r2, [pc, #92]	@ (8008dd8 <TIM_OC1_SetConfig+0x11c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d111      	bne.n	8008da2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	693a      	ldr	r2, [r7, #16]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	621a      	str	r2, [r3, #32]
}
 8008dbc:	bf00      	nop
 8008dbe:	371c      	adds	r7, #28
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	40012c00 	.word	0x40012c00
 8008dcc:	40013400 	.word	0x40013400
 8008dd0:	40014000 	.word	0x40014000
 8008dd4:	40014400 	.word	0x40014400
 8008dd8:	40014800 	.word	0x40014800

08008ddc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b087      	sub	sp, #28
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	f023 0210 	bic.w	r2, r3, #16
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	021b      	lsls	r3, r3, #8
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f023 0320 	bic.w	r3, r3, #32
 8008e2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a28      	ldr	r2, [pc, #160]	@ (8008edc <TIM_OC2_SetConfig+0x100>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d003      	beq.n	8008e48 <TIM_OC2_SetConfig+0x6c>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a27      	ldr	r2, [pc, #156]	@ (8008ee0 <TIM_OC2_SetConfig+0x104>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d10d      	bne.n	8008e64 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	011b      	lsls	r3, r3, #4
 8008e56:	697a      	ldr	r2, [r7, #20]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a1d      	ldr	r2, [pc, #116]	@ (8008edc <TIM_OC2_SetConfig+0x100>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00f      	beq.n	8008e8c <TIM_OC2_SetConfig+0xb0>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ee0 <TIM_OC2_SetConfig+0x104>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d00b      	beq.n	8008e8c <TIM_OC2_SetConfig+0xb0>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a1b      	ldr	r2, [pc, #108]	@ (8008ee4 <TIM_OC2_SetConfig+0x108>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d007      	beq.n	8008e8c <TIM_OC2_SetConfig+0xb0>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ee8 <TIM_OC2_SetConfig+0x10c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d003      	beq.n	8008e8c <TIM_OC2_SetConfig+0xb0>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a19      	ldr	r2, [pc, #100]	@ (8008eec <TIM_OC2_SetConfig+0x110>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d113      	bne.n	8008eb4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	621a      	str	r2, [r3, #32]
}
 8008ece:	bf00      	nop
 8008ed0:	371c      	adds	r7, #28
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
 8008eda:	bf00      	nop
 8008edc:	40012c00 	.word	0x40012c00
 8008ee0:	40013400 	.word	0x40013400
 8008ee4:	40014000 	.word	0x40014000
 8008ee8:	40014400 	.word	0x40014400
 8008eec:	40014800 	.word	0x40014800

08008ef0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b087      	sub	sp, #28
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a1b      	ldr	r3, [r3, #32]
 8008efe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 0303 	bic.w	r3, r3, #3
 8008f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	021b      	lsls	r3, r3, #8
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a27      	ldr	r2, [pc, #156]	@ (8008fec <TIM_OC3_SetConfig+0xfc>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d003      	beq.n	8008f5a <TIM_OC3_SetConfig+0x6a>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a26      	ldr	r2, [pc, #152]	@ (8008ff0 <TIM_OC3_SetConfig+0x100>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d10d      	bne.n	8008f76 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a1c      	ldr	r2, [pc, #112]	@ (8008fec <TIM_OC3_SetConfig+0xfc>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d00f      	beq.n	8008f9e <TIM_OC3_SetConfig+0xae>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a1b      	ldr	r2, [pc, #108]	@ (8008ff0 <TIM_OC3_SetConfig+0x100>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00b      	beq.n	8008f9e <TIM_OC3_SetConfig+0xae>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a1a      	ldr	r2, [pc, #104]	@ (8008ff4 <TIM_OC3_SetConfig+0x104>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d007      	beq.n	8008f9e <TIM_OC3_SetConfig+0xae>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a19      	ldr	r2, [pc, #100]	@ (8008ff8 <TIM_OC3_SetConfig+0x108>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d003      	beq.n	8008f9e <TIM_OC3_SetConfig+0xae>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a18      	ldr	r2, [pc, #96]	@ (8008ffc <TIM_OC3_SetConfig+0x10c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d113      	bne.n	8008fc6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	621a      	str	r2, [r3, #32]
}
 8008fe0:	bf00      	nop
 8008fe2:	371c      	adds	r7, #28
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	40012c00 	.word	0x40012c00
 8008ff0:	40013400 	.word	0x40013400
 8008ff4:	40014000 	.word	0x40014000
 8008ff8:	40014400 	.word	0x40014400
 8008ffc:	40014800 	.word	0x40014800

08009000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800902e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800903a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	021b      	lsls	r3, r3, #8
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	4313      	orrs	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800904e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	031b      	lsls	r3, r3, #12
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	4313      	orrs	r3, r2
 800905a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a18      	ldr	r2, [pc, #96]	@ (80090c0 <TIM_OC4_SetConfig+0xc0>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d00f      	beq.n	8009084 <TIM_OC4_SetConfig+0x84>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a17      	ldr	r2, [pc, #92]	@ (80090c4 <TIM_OC4_SetConfig+0xc4>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d00b      	beq.n	8009084 <TIM_OC4_SetConfig+0x84>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a16      	ldr	r2, [pc, #88]	@ (80090c8 <TIM_OC4_SetConfig+0xc8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d007      	beq.n	8009084 <TIM_OC4_SetConfig+0x84>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a15      	ldr	r2, [pc, #84]	@ (80090cc <TIM_OC4_SetConfig+0xcc>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d003      	beq.n	8009084 <TIM_OC4_SetConfig+0x84>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a14      	ldr	r2, [pc, #80]	@ (80090d0 <TIM_OC4_SetConfig+0xd0>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d109      	bne.n	8009098 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800908a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	019b      	lsls	r3, r3, #6
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	685a      	ldr	r2, [r3, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	621a      	str	r2, [r3, #32]
}
 80090b2:	bf00      	nop
 80090b4:	371c      	adds	r7, #28
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40012c00 	.word	0x40012c00
 80090c4:	40013400 	.word	0x40013400
 80090c8:	40014000 	.word	0x40014000
 80090cc:	40014400 	.word	0x40014400
 80090d0:	40014800 	.word	0x40014800

080090d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b087      	sub	sp, #28
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a1b      	ldr	r3, [r3, #32]
 80090e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	4313      	orrs	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009118:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	041b      	lsls	r3, r3, #16
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	4313      	orrs	r3, r2
 8009124:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a17      	ldr	r2, [pc, #92]	@ (8009188 <TIM_OC5_SetConfig+0xb4>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d00f      	beq.n	800914e <TIM_OC5_SetConfig+0x7a>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a16      	ldr	r2, [pc, #88]	@ (800918c <TIM_OC5_SetConfig+0xb8>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d00b      	beq.n	800914e <TIM_OC5_SetConfig+0x7a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a15      	ldr	r2, [pc, #84]	@ (8009190 <TIM_OC5_SetConfig+0xbc>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d007      	beq.n	800914e <TIM_OC5_SetConfig+0x7a>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a14      	ldr	r2, [pc, #80]	@ (8009194 <TIM_OC5_SetConfig+0xc0>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d003      	beq.n	800914e <TIM_OC5_SetConfig+0x7a>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a13      	ldr	r2, [pc, #76]	@ (8009198 <TIM_OC5_SetConfig+0xc4>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d109      	bne.n	8009162 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009154:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	4313      	orrs	r3, r2
 8009160:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	697a      	ldr	r2, [r7, #20]
 8009166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	621a      	str	r2, [r3, #32]
}
 800917c:	bf00      	nop
 800917e:	371c      	adds	r7, #28
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	40012c00 	.word	0x40012c00
 800918c:	40013400 	.word	0x40013400
 8009190:	40014000 	.word	0x40014000
 8009194:	40014400 	.word	0x40014400
 8009198:	40014800 	.word	0x40014800

0800919c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	4313      	orrs	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	051b      	lsls	r3, r3, #20
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a18      	ldr	r2, [pc, #96]	@ (8009254 <TIM_OC6_SetConfig+0xb8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d00f      	beq.n	8009218 <TIM_OC6_SetConfig+0x7c>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a17      	ldr	r2, [pc, #92]	@ (8009258 <TIM_OC6_SetConfig+0xbc>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00b      	beq.n	8009218 <TIM_OC6_SetConfig+0x7c>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a16      	ldr	r2, [pc, #88]	@ (800925c <TIM_OC6_SetConfig+0xc0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d007      	beq.n	8009218 <TIM_OC6_SetConfig+0x7c>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a15      	ldr	r2, [pc, #84]	@ (8009260 <TIM_OC6_SetConfig+0xc4>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d003      	beq.n	8009218 <TIM_OC6_SetConfig+0x7c>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a14      	ldr	r2, [pc, #80]	@ (8009264 <TIM_OC6_SetConfig+0xc8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d109      	bne.n	800922c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800921e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	029b      	lsls	r3, r3, #10
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	4313      	orrs	r3, r2
 800922a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	697a      	ldr	r2, [r7, #20]
 8009230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	621a      	str	r2, [r3, #32]
}
 8009246:	bf00      	nop
 8009248:	371c      	adds	r7, #28
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	40012c00 	.word	0x40012c00
 8009258:	40013400 	.word	0x40013400
 800925c:	40014000 	.word	0x40014000
 8009260:	40014400 	.word	0x40014400
 8009264:	40014800 	.word	0x40014800

08009268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800927c:	2302      	movs	r3, #2
 800927e:	e068      	b.n	8009352 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a2e      	ldr	r2, [pc, #184]	@ (8009360 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d004      	beq.n	80092b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a2d      	ldr	r2, [pc, #180]	@ (8009364 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d108      	bne.n	80092c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80092ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a1e      	ldr	r2, [pc, #120]	@ (8009360 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d01d      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092f2:	d018      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d013      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a1a      	ldr	r2, [pc, #104]	@ (800936c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d00e      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a18      	ldr	r2, [pc, #96]	@ (8009370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d009      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a13      	ldr	r2, [pc, #76]	@ (8009364 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d004      	beq.n	8009326 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a14      	ldr	r2, [pc, #80]	@ (8009374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d10c      	bne.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800932c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	4313      	orrs	r3, r2
 8009336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	40012c00 	.word	0x40012c00
 8009364:	40013400 	.word	0x40013400
 8009368:	40000400 	.word	0x40000400
 800936c:	40000800 	.word	0x40000800
 8009370:	40000c00 	.word	0x40000c00
 8009374:	40014000 	.word	0x40014000

08009378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e040      	b.n	800940c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7fa fa04 	bl	80037a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2224      	movs	r2, #36	@ 0x24
 80093a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 0201 	bic.w	r2, r2, #1
 80093b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d002      	beq.n	80093c4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fedc 	bl	800a17c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fc21 	bl	8009c0c <UART_SetConfig>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d101      	bne.n	80093d4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	e01b      	b.n	800940c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 ff5b 	bl	800a2c0 <UART_CheckIdleState>
 800940a:	4603      	mov	r3, r0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08a      	sub	sp, #40	@ 0x28
 8009418:	af02      	add	r7, sp, #8
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	4613      	mov	r3, r2
 8009422:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009428:	2b20      	cmp	r3, #32
 800942a:	d177      	bne.n	800951c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d002      	beq.n	8009438 <HAL_UART_Transmit+0x24>
 8009432:	88fb      	ldrh	r3, [r7, #6]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	e070      	b.n	800951e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2221      	movs	r2, #33	@ 0x21
 8009448:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800944a:	f7fa fb15 	bl	8003a78 <HAL_GetTick>
 800944e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	88fa      	ldrh	r2, [r7, #6]
 8009454:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	88fa      	ldrh	r2, [r7, #6]
 800945c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009468:	d108      	bne.n	800947c <HAL_UART_Transmit+0x68>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d104      	bne.n	800947c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009472:	2300      	movs	r3, #0
 8009474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	61bb      	str	r3, [r7, #24]
 800947a:	e003      	b.n	8009484 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009480:	2300      	movs	r3, #0
 8009482:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009484:	e02f      	b.n	80094e6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2200      	movs	r2, #0
 800948e:	2180      	movs	r1, #128	@ 0x80
 8009490:	68f8      	ldr	r0, [r7, #12]
 8009492:	f000 ffbd 	bl	800a410 <UART_WaitOnFlagUntilTimeout>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d004      	beq.n	80094a6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2220      	movs	r2, #32
 80094a0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e03b      	b.n	800951e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d10b      	bne.n	80094c4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	881a      	ldrh	r2, [r3, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094b8:	b292      	uxth	r2, r2
 80094ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	3302      	adds	r3, #2
 80094c0:	61bb      	str	r3, [r7, #24]
 80094c2:	e007      	b.n	80094d4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	781a      	ldrb	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	3301      	adds	r3, #1
 80094d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80094da:	b29b      	uxth	r3, r3
 80094dc:	3b01      	subs	r3, #1
 80094de:	b29a      	uxth	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1c9      	bne.n	8009486 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2200      	movs	r2, #0
 80094fa:	2140      	movs	r1, #64	@ 0x40
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 ff87 	bl	800a410 <UART_WaitOnFlagUntilTimeout>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2220      	movs	r2, #32
 800950c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e005      	b.n	800951e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2220      	movs	r2, #32
 8009516:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	e000      	b.n	800951e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800951c:	2302      	movs	r3, #2
  }
}
 800951e:	4618      	mov	r0, r3
 8009520:	3720      	adds	r7, #32
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
	...

08009528 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08a      	sub	sp, #40	@ 0x28
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	4613      	mov	r3, r2
 8009534:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800953c:	2b20      	cmp	r3, #32
 800953e:	d137      	bne.n	80095b0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d002      	beq.n	800954c <HAL_UART_Receive_IT+0x24>
 8009546:	88fb      	ldrh	r3, [r7, #6]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e030      	b.n	80095b2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a18      	ldr	r2, [pc, #96]	@ (80095bc <HAL_UART_Receive_IT+0x94>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d01f      	beq.n	80095a0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d018      	beq.n	80095a0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	613b      	str	r3, [r7, #16]
   return(result);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009582:	627b      	str	r3, [r7, #36]	@ 0x24
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958c:	623b      	str	r3, [r7, #32]
 800958e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	69f9      	ldr	r1, [r7, #28]
 8009592:	6a3a      	ldr	r2, [r7, #32]
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	61bb      	str	r3, [r7, #24]
   return(result);
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e6      	bne.n	800956e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80095a0:	88fb      	ldrh	r3, [r7, #6]
 80095a2:	461a      	mov	r2, r3
 80095a4:	68b9      	ldr	r1, [r7, #8]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 ffa0 	bl	800a4ec <UART_Start_Receive_IT>
 80095ac:	4603      	mov	r3, r0
 80095ae:	e000      	b.n	80095b2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80095b0:	2302      	movs	r3, #2
  }
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3728      	adds	r7, #40	@ 0x28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	40008000 	.word	0x40008000

080095c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b0ba      	sub	sp, #232	@ 0xe8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80095e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80095ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80095ee:	4013      	ands	r3, r2
 80095f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80095f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d115      	bne.n	8009628 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80095fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009600:	f003 0320 	and.w	r3, r3, #32
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00f      	beq.n	8009628 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800960c:	f003 0320 	and.w	r3, r3, #32
 8009610:	2b00      	cmp	r3, #0
 8009612:	d009      	beq.n	8009628 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 82ca 	beq.w	8009bb2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
      }
      return;
 8009626:	e2c4      	b.n	8009bb2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 8117 	beq.w	8009860 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800963e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009642:	4b85      	ldr	r3, [pc, #532]	@ (8009858 <HAL_UART_IRQHandler+0x298>)
 8009644:	4013      	ands	r3, r2
 8009646:	2b00      	cmp	r3, #0
 8009648:	f000 810a 	beq.w	8009860 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800964c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	d011      	beq.n	800967c <HAL_UART_IRQHandler+0xbc>
 8009658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800965c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2201      	movs	r2, #1
 800966a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009672:	f043 0201 	orr.w	r2, r3, #1
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800967c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b00      	cmp	r3, #0
 8009686:	d011      	beq.n	80096ac <HAL_UART_IRQHandler+0xec>
 8009688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00b      	beq.n	80096ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2202      	movs	r2, #2
 800969a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096a2:	f043 0204 	orr.w	r2, r3, #4
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d011      	beq.n	80096dc <HAL_UART_IRQHandler+0x11c>
 80096b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00b      	beq.n	80096dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2204      	movs	r2, #4
 80096ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096d2:	f043 0202 	orr.w	r2, r3, #2
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096e0:	f003 0308 	and.w	r3, r3, #8
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d017      	beq.n	8009718 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80096e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096ec:	f003 0320 	and.w	r3, r3, #32
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d105      	bne.n	8009700 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80096f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d00b      	beq.n	8009718 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2208      	movs	r2, #8
 8009706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800970e:	f043 0208 	orr.w	r2, r3, #8
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800971c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009720:	2b00      	cmp	r3, #0
 8009722:	d012      	beq.n	800974a <HAL_UART_IRQHandler+0x18a>
 8009724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009728:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00c      	beq.n	800974a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009738:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009740:	f043 0220 	orr.w	r2, r3, #32
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 8230 	beq.w	8009bb6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800975a:	f003 0320 	and.w	r3, r3, #32
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00d      	beq.n	800977e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009766:	f003 0320 	and.w	r3, r3, #32
 800976a:	2b00      	cmp	r3, #0
 800976c:	d007      	beq.n	800977e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009784:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009792:	2b40      	cmp	r3, #64	@ 0x40
 8009794:	d005      	beq.n	80097a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800979a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d04f      	beq.n	8009842 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 ff68 	bl	800a678 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b2:	2b40      	cmp	r3, #64	@ 0x40
 80097b4:	d141      	bne.n	800983a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3308      	adds	r3, #8
 80097bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80097cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3308      	adds	r3, #8
 80097de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80097e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80097e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80097ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80097f2:	e841 2300 	strex	r3, r2, [r1]
 80097f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80097fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1d9      	bne.n	80097b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009806:	2b00      	cmp	r3, #0
 8009808:	d013      	beq.n	8009832 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800980e:	4a13      	ldr	r2, [pc, #76]	@ (800985c <HAL_UART_IRQHandler+0x29c>)
 8009810:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009816:	4618      	mov	r0, r3
 8009818:	f7fb ff46 	bl	80056a8 <HAL_DMA_Abort_IT>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d017      	beq.n	8009852 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800982c:	4610      	mov	r0, r2
 800982e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009830:	e00f      	b.n	8009852 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f9d4 	bl	8009be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009838:	e00b      	b.n	8009852 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f9d0 	bl	8009be0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009840:	e007      	b.n	8009852 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f9cc 	bl	8009be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009850:	e1b1      	b.n	8009bb6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009852:	bf00      	nop
    return;
 8009854:	e1af      	b.n	8009bb6 <HAL_UART_IRQHandler+0x5f6>
 8009856:	bf00      	nop
 8009858:	04000120 	.word	0x04000120
 800985c:	0800a741 	.word	0x0800a741

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009864:	2b01      	cmp	r3, #1
 8009866:	f040 816a 	bne.w	8009b3e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800986a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800986e:	f003 0310 	and.w	r3, r3, #16
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 8163 	beq.w	8009b3e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800987c:	f003 0310 	and.w	r3, r3, #16
 8009880:	2b00      	cmp	r3, #0
 8009882:	f000 815c 	beq.w	8009b3e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2210      	movs	r2, #16
 800988c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009898:	2b40      	cmp	r3, #64	@ 0x40
 800989a:	f040 80d4 	bne.w	8009a46 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 80ad 	beq.w	8009a0e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80098ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098be:	429a      	cmp	r2, r3
 80098c0:	f080 80a5 	bcs.w	8009a0e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0320 	and.w	r3, r3, #32
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f040 8086 	bne.w	80099ec <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80098f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800990a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800990e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009912:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009916:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1da      	bne.n	80098e0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3308      	adds	r3, #8
 8009930:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800993a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800993c:	f023 0301 	bic.w	r3, r3, #1
 8009940:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	3308      	adds	r3, #8
 800994a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800994e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009952:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009954:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009956:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e1      	bne.n	800992a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3308      	adds	r3, #8
 800996c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800997c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800998a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800998c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009990:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009992:	e841 2300 	strex	r3, r2, [r1]
 8009996:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e3      	bne.n	8009966 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2220      	movs	r2, #32
 80099a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099b4:	e853 3f00 	ldrex	r3, [r3]
 80099b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099bc:	f023 0310 	bic.w	r3, r3, #16
 80099c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	461a      	mov	r2, r3
 80099ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80099ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80099d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80099d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099d6:	e841 2300 	strex	r3, r2, [r1]
 80099da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80099dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1e4      	bne.n	80099ac <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fb fe20 	bl	800562c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2202      	movs	r2, #2
 80099f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f8f4 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009a0c:	e0d5      	b.n	8009bba <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	f040 80ce 	bne.w	8009bba <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b20      	cmp	r3, #32
 8009a2c:	f040 80c5 	bne.w	8009bba <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2202      	movs	r2, #2
 8009a34:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f8d8 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
      return;
 8009a44:	e0b9      	b.n	8009bba <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 80ab 	beq.w	8009bbe <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8009a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 80a6 	beq.w	8009bbe <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7a:	e853 3f00 	ldrex	r3, [r3]
 8009a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a9c:	e841 2300 	strex	r3, r2, [r1]
 8009aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1e4      	bne.n	8009a72 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	3308      	adds	r3, #8
 8009aae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab2:	e853 3f00 	ldrex	r3, [r3]
 8009ab6:	623b      	str	r3, [r7, #32]
   return(result);
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	f023 0301 	bic.w	r3, r3, #1
 8009abe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009acc:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ad4:	e841 2300 	strex	r3, r2, [r1]
 8009ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1e3      	bne.n	8009aa8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2220      	movs	r2, #32
 8009ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	e853 3f00 	ldrex	r3, [r3]
 8009b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f023 0310 	bic.w	r3, r3, #16
 8009b08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b16:	61fb      	str	r3, [r7, #28]
 8009b18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	69b9      	ldr	r1, [r7, #24]
 8009b1c:	69fa      	ldr	r2, [r7, #28]
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	617b      	str	r3, [r7, #20]
   return(result);
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e4      	bne.n	8009af4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f85c 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b3c:	e03f      	b.n	8009bbe <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00e      	beq.n	8009b68 <HAL_UART_IRQHandler+0x5a8>
 8009b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d008      	beq.n	8009b68 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 ffe9 	bl	800ab38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009b66:	e02d      	b.n	8009bc4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00e      	beq.n	8009b92 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d008      	beq.n	8009b92 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01c      	beq.n	8009bc2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	4798      	blx	r3
    }
    return;
 8009b90:	e017      	b.n	8009bc2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d012      	beq.n	8009bc4 <HAL_UART_IRQHandler+0x604>
 8009b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00c      	beq.n	8009bc4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fdde 	bl	800a76c <UART_EndTransmit_IT>
    return;
 8009bb0:	e008      	b.n	8009bc4 <HAL_UART_IRQHandler+0x604>
      return;
 8009bb2:	bf00      	nop
 8009bb4:	e006      	b.n	8009bc4 <HAL_UART_IRQHandler+0x604>
    return;
 8009bb6:	bf00      	nop
 8009bb8:	e004      	b.n	8009bc4 <HAL_UART_IRQHandler+0x604>
      return;
 8009bba:	bf00      	nop
 8009bbc:	e002      	b.n	8009bc4 <HAL_UART_IRQHandler+0x604>
      return;
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <HAL_UART_IRQHandler+0x604>
    return;
 8009bc2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009bc4:	37e8      	adds	r7, #232	@ 0xe8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop

08009bcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c00:	bf00      	nop
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr

08009c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c10:	b08a      	sub	sp, #40	@ 0x28
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	431a      	orrs	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	431a      	orrs	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	69db      	ldr	r3, [r3, #28]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	4ba4      	ldr	r3, [pc, #656]	@ (8009ecc <UART_SetConfig+0x2c0>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	6812      	ldr	r2, [r2, #0]
 8009c42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c44:	430b      	orrs	r3, r1
 8009c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a99      	ldr	r2, [pc, #612]	@ (8009ed0 <UART_SetConfig+0x2c4>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d004      	beq.n	8009c78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a1b      	ldr	r3, [r3, #32]
 8009c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c74:	4313      	orrs	r3, r2
 8009c76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a90      	ldr	r2, [pc, #576]	@ (8009ed4 <UART_SetConfig+0x2c8>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d126      	bne.n	8009ce4 <UART_SetConfig+0xd8>
 8009c96:	4b90      	ldr	r3, [pc, #576]	@ (8009ed8 <UART_SetConfig+0x2cc>)
 8009c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d81b      	bhi.n	8009cdc <UART_SetConfig+0xd0>
 8009ca4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cac <UART_SetConfig+0xa0>)
 8009ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009caa:	bf00      	nop
 8009cac:	08009cbd 	.word	0x08009cbd
 8009cb0:	08009ccd 	.word	0x08009ccd
 8009cb4:	08009cc5 	.word	0x08009cc5
 8009cb8:	08009cd5 	.word	0x08009cd5
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cc2:	e116      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cca:	e112      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009ccc:	2304      	movs	r3, #4
 8009cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cd2:	e10e      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cda:	e10a      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009cdc:	2310      	movs	r3, #16
 8009cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ce2:	e106      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a7c      	ldr	r2, [pc, #496]	@ (8009edc <UART_SetConfig+0x2d0>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d138      	bne.n	8009d60 <UART_SetConfig+0x154>
 8009cee:	4b7a      	ldr	r3, [pc, #488]	@ (8009ed8 <UART_SetConfig+0x2cc>)
 8009cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cf4:	f003 030c 	and.w	r3, r3, #12
 8009cf8:	2b0c      	cmp	r3, #12
 8009cfa:	d82d      	bhi.n	8009d58 <UART_SetConfig+0x14c>
 8009cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8009d04 <UART_SetConfig+0xf8>)
 8009cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d02:	bf00      	nop
 8009d04:	08009d39 	.word	0x08009d39
 8009d08:	08009d59 	.word	0x08009d59
 8009d0c:	08009d59 	.word	0x08009d59
 8009d10:	08009d59 	.word	0x08009d59
 8009d14:	08009d49 	.word	0x08009d49
 8009d18:	08009d59 	.word	0x08009d59
 8009d1c:	08009d59 	.word	0x08009d59
 8009d20:	08009d59 	.word	0x08009d59
 8009d24:	08009d41 	.word	0x08009d41
 8009d28:	08009d59 	.word	0x08009d59
 8009d2c:	08009d59 	.word	0x08009d59
 8009d30:	08009d59 	.word	0x08009d59
 8009d34:	08009d51 	.word	0x08009d51
 8009d38:	2300      	movs	r3, #0
 8009d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d3e:	e0d8      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009d40:	2302      	movs	r3, #2
 8009d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d46:	e0d4      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009d48:	2304      	movs	r3, #4
 8009d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d4e:	e0d0      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009d50:	2308      	movs	r3, #8
 8009d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d56:	e0cc      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009d58:	2310      	movs	r3, #16
 8009d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d5e:	e0c8      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a5e      	ldr	r2, [pc, #376]	@ (8009ee0 <UART_SetConfig+0x2d4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d125      	bne.n	8009db6 <UART_SetConfig+0x1aa>
 8009d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8009ed8 <UART_SetConfig+0x2cc>)
 8009d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d74:	2b30      	cmp	r3, #48	@ 0x30
 8009d76:	d016      	beq.n	8009da6 <UART_SetConfig+0x19a>
 8009d78:	2b30      	cmp	r3, #48	@ 0x30
 8009d7a:	d818      	bhi.n	8009dae <UART_SetConfig+0x1a2>
 8009d7c:	2b20      	cmp	r3, #32
 8009d7e:	d00a      	beq.n	8009d96 <UART_SetConfig+0x18a>
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d814      	bhi.n	8009dae <UART_SetConfig+0x1a2>
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <UART_SetConfig+0x182>
 8009d88:	2b10      	cmp	r3, #16
 8009d8a:	d008      	beq.n	8009d9e <UART_SetConfig+0x192>
 8009d8c:	e00f      	b.n	8009dae <UART_SetConfig+0x1a2>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d94:	e0ad      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009d96:	2302      	movs	r3, #2
 8009d98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d9c:	e0a9      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009d9e:	2304      	movs	r3, #4
 8009da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009da4:	e0a5      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009da6:	2308      	movs	r3, #8
 8009da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dac:	e0a1      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009dae:	2310      	movs	r3, #16
 8009db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009db4:	e09d      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a4a      	ldr	r2, [pc, #296]	@ (8009ee4 <UART_SetConfig+0x2d8>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d125      	bne.n	8009e0c <UART_SetConfig+0x200>
 8009dc0:	4b45      	ldr	r3, [pc, #276]	@ (8009ed8 <UART_SetConfig+0x2cc>)
 8009dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009dca:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dcc:	d016      	beq.n	8009dfc <UART_SetConfig+0x1f0>
 8009dce:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dd0:	d818      	bhi.n	8009e04 <UART_SetConfig+0x1f8>
 8009dd2:	2b80      	cmp	r3, #128	@ 0x80
 8009dd4:	d00a      	beq.n	8009dec <UART_SetConfig+0x1e0>
 8009dd6:	2b80      	cmp	r3, #128	@ 0x80
 8009dd8:	d814      	bhi.n	8009e04 <UART_SetConfig+0x1f8>
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <UART_SetConfig+0x1d8>
 8009dde:	2b40      	cmp	r3, #64	@ 0x40
 8009de0:	d008      	beq.n	8009df4 <UART_SetConfig+0x1e8>
 8009de2:	e00f      	b.n	8009e04 <UART_SetConfig+0x1f8>
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dea:	e082      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009dec:	2302      	movs	r3, #2
 8009dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009df2:	e07e      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009df4:	2304      	movs	r3, #4
 8009df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dfa:	e07a      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009dfc:	2308      	movs	r3, #8
 8009dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e02:	e076      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009e04:	2310      	movs	r3, #16
 8009e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e0a:	e072      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a35      	ldr	r2, [pc, #212]	@ (8009ee8 <UART_SetConfig+0x2dc>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d12a      	bne.n	8009e6c <UART_SetConfig+0x260>
 8009e16:	4b30      	ldr	r3, [pc, #192]	@ (8009ed8 <UART_SetConfig+0x2cc>)
 8009e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e24:	d01a      	beq.n	8009e5c <UART_SetConfig+0x250>
 8009e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e2a:	d81b      	bhi.n	8009e64 <UART_SetConfig+0x258>
 8009e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e30:	d00c      	beq.n	8009e4c <UART_SetConfig+0x240>
 8009e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e36:	d815      	bhi.n	8009e64 <UART_SetConfig+0x258>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <UART_SetConfig+0x238>
 8009e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e40:	d008      	beq.n	8009e54 <UART_SetConfig+0x248>
 8009e42:	e00f      	b.n	8009e64 <UART_SetConfig+0x258>
 8009e44:	2300      	movs	r3, #0
 8009e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e4a:	e052      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e52:	e04e      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009e54:	2304      	movs	r3, #4
 8009e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e5a:	e04a      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009e5c:	2308      	movs	r3, #8
 8009e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e62:	e046      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009e64:	2310      	movs	r3, #16
 8009e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e6a:	e042      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a17      	ldr	r2, [pc, #92]	@ (8009ed0 <UART_SetConfig+0x2c4>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d13a      	bne.n	8009eec <UART_SetConfig+0x2e0>
 8009e76:	4b18      	ldr	r3, [pc, #96]	@ (8009ed8 <UART_SetConfig+0x2cc>)
 8009e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e84:	d01a      	beq.n	8009ebc <UART_SetConfig+0x2b0>
 8009e86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e8a:	d81b      	bhi.n	8009ec4 <UART_SetConfig+0x2b8>
 8009e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e90:	d00c      	beq.n	8009eac <UART_SetConfig+0x2a0>
 8009e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e96:	d815      	bhi.n	8009ec4 <UART_SetConfig+0x2b8>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d003      	beq.n	8009ea4 <UART_SetConfig+0x298>
 8009e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ea0:	d008      	beq.n	8009eb4 <UART_SetConfig+0x2a8>
 8009ea2:	e00f      	b.n	8009ec4 <UART_SetConfig+0x2b8>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eaa:	e022      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009eac:	2302      	movs	r3, #2
 8009eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eb2:	e01e      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009eb4:	2304      	movs	r3, #4
 8009eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eba:	e01a      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009ebc:	2308      	movs	r3, #8
 8009ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ec2:	e016      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eca:	e012      	b.n	8009ef2 <UART_SetConfig+0x2e6>
 8009ecc:	efff69f3 	.word	0xefff69f3
 8009ed0:	40008000 	.word	0x40008000
 8009ed4:	40013800 	.word	0x40013800
 8009ed8:	40021000 	.word	0x40021000
 8009edc:	40004400 	.word	0x40004400
 8009ee0:	40004800 	.word	0x40004800
 8009ee4:	40004c00 	.word	0x40004c00
 8009ee8:	40005000 	.word	0x40005000
 8009eec:	2310      	movs	r3, #16
 8009eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a9f      	ldr	r2, [pc, #636]	@ (800a174 <UART_SetConfig+0x568>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d17a      	bne.n	8009ff2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009efc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d824      	bhi.n	8009f4e <UART_SetConfig+0x342>
 8009f04:	a201      	add	r2, pc, #4	@ (adr r2, 8009f0c <UART_SetConfig+0x300>)
 8009f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0a:	bf00      	nop
 8009f0c:	08009f31 	.word	0x08009f31
 8009f10:	08009f4f 	.word	0x08009f4f
 8009f14:	08009f39 	.word	0x08009f39
 8009f18:	08009f4f 	.word	0x08009f4f
 8009f1c:	08009f3f 	.word	0x08009f3f
 8009f20:	08009f4f 	.word	0x08009f4f
 8009f24:	08009f4f 	.word	0x08009f4f
 8009f28:	08009f4f 	.word	0x08009f4f
 8009f2c:	08009f47 	.word	0x08009f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f30:	f7fc ff5e 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 8009f34:	61f8      	str	r0, [r7, #28]
        break;
 8009f36:	e010      	b.n	8009f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f38:	4b8f      	ldr	r3, [pc, #572]	@ (800a178 <UART_SetConfig+0x56c>)
 8009f3a:	61fb      	str	r3, [r7, #28]
        break;
 8009f3c:	e00d      	b.n	8009f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f3e:	f7fc febf 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 8009f42:	61f8      	str	r0, [r7, #28]
        break;
 8009f44:	e009      	b.n	8009f5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f4a:	61fb      	str	r3, [r7, #28]
        break;
 8009f4c:	e005      	b.n	8009f5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009f58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f000 80fb 	beq.w	800a158 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	4613      	mov	r3, r2
 8009f68:	005b      	lsls	r3, r3, #1
 8009f6a:	4413      	add	r3, r2
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d305      	bcc.n	8009f7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d903      	bls.n	8009f86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009f84:	e0e8      	b.n	800a158 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	461c      	mov	r4, r3
 8009f8c:	4615      	mov	r5, r2
 8009f8e:	f04f 0200 	mov.w	r2, #0
 8009f92:	f04f 0300 	mov.w	r3, #0
 8009f96:	022b      	lsls	r3, r5, #8
 8009f98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009f9c:	0222      	lsls	r2, r4, #8
 8009f9e:	68f9      	ldr	r1, [r7, #12]
 8009fa0:	6849      	ldr	r1, [r1, #4]
 8009fa2:	0849      	lsrs	r1, r1, #1
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	4688      	mov	r8, r1
 8009fa8:	4681      	mov	r9, r0
 8009faa:	eb12 0a08 	adds.w	sl, r2, r8
 8009fae:	eb43 0b09 	adc.w	fp, r3, r9
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	603b      	str	r3, [r7, #0]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	4659      	mov	r1, fp
 8009fc4:	f7f6 fe70 	bl	8000ca8 <__aeabi_uldivmod>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4613      	mov	r3, r2
 8009fce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fd6:	d308      	bcc.n	8009fea <UART_SetConfig+0x3de>
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fde:	d204      	bcs.n	8009fea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	69ba      	ldr	r2, [r7, #24]
 8009fe6:	60da      	str	r2, [r3, #12]
 8009fe8:	e0b6      	b.n	800a158 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009ff0:	e0b2      	b.n	800a158 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	69db      	ldr	r3, [r3, #28]
 8009ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ffa:	d15e      	bne.n	800a0ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a000:	2b08      	cmp	r3, #8
 800a002:	d828      	bhi.n	800a056 <UART_SetConfig+0x44a>
 800a004:	a201      	add	r2, pc, #4	@ (adr r2, 800a00c <UART_SetConfig+0x400>)
 800a006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00a:	bf00      	nop
 800a00c:	0800a031 	.word	0x0800a031
 800a010:	0800a039 	.word	0x0800a039
 800a014:	0800a041 	.word	0x0800a041
 800a018:	0800a057 	.word	0x0800a057
 800a01c:	0800a047 	.word	0x0800a047
 800a020:	0800a057 	.word	0x0800a057
 800a024:	0800a057 	.word	0x0800a057
 800a028:	0800a057 	.word	0x0800a057
 800a02c:	0800a04f 	.word	0x0800a04f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a030:	f7fc fede 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 800a034:	61f8      	str	r0, [r7, #28]
        break;
 800a036:	e014      	b.n	800a062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a038:	f7fc fef0 	bl	8006e1c <HAL_RCC_GetPCLK2Freq>
 800a03c:	61f8      	str	r0, [r7, #28]
        break;
 800a03e:	e010      	b.n	800a062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a040:	4b4d      	ldr	r3, [pc, #308]	@ (800a178 <UART_SetConfig+0x56c>)
 800a042:	61fb      	str	r3, [r7, #28]
        break;
 800a044:	e00d      	b.n	800a062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a046:	f7fc fe3b 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 800a04a:	61f8      	str	r0, [r7, #28]
        break;
 800a04c:	e009      	b.n	800a062 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a04e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a052:	61fb      	str	r3, [r7, #28]
        break;
 800a054:	e005      	b.n	800a062 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a056:	2300      	movs	r3, #0
 800a058:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d077      	beq.n	800a158 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	005a      	lsls	r2, r3, #1
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	085b      	lsrs	r3, r3, #1
 800a072:	441a      	add	r2, r3
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	fbb2 f3f3 	udiv	r3, r2, r3
 800a07c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	2b0f      	cmp	r3, #15
 800a082:	d916      	bls.n	800a0b2 <UART_SetConfig+0x4a6>
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a08a:	d212      	bcs.n	800a0b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a08c:	69bb      	ldr	r3, [r7, #24]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	f023 030f 	bic.w	r3, r3, #15
 800a094:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	085b      	lsrs	r3, r3, #1
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	f003 0307 	and.w	r3, r3, #7
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	8afb      	ldrh	r3, [r7, #22]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	8afa      	ldrh	r2, [r7, #22]
 800a0ae:	60da      	str	r2, [r3, #12]
 800a0b0:	e052      	b.n	800a158 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a0b8:	e04e      	b.n	800a158 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a0be:	2b08      	cmp	r3, #8
 800a0c0:	d827      	bhi.n	800a112 <UART_SetConfig+0x506>
 800a0c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c8 <UART_SetConfig+0x4bc>)
 800a0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c8:	0800a0ed 	.word	0x0800a0ed
 800a0cc:	0800a0f5 	.word	0x0800a0f5
 800a0d0:	0800a0fd 	.word	0x0800a0fd
 800a0d4:	0800a113 	.word	0x0800a113
 800a0d8:	0800a103 	.word	0x0800a103
 800a0dc:	0800a113 	.word	0x0800a113
 800a0e0:	0800a113 	.word	0x0800a113
 800a0e4:	0800a113 	.word	0x0800a113
 800a0e8:	0800a10b 	.word	0x0800a10b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0ec:	f7fc fe80 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 800a0f0:	61f8      	str	r0, [r7, #28]
        break;
 800a0f2:	e014      	b.n	800a11e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0f4:	f7fc fe92 	bl	8006e1c <HAL_RCC_GetPCLK2Freq>
 800a0f8:	61f8      	str	r0, [r7, #28]
        break;
 800a0fa:	e010      	b.n	800a11e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0fc:	4b1e      	ldr	r3, [pc, #120]	@ (800a178 <UART_SetConfig+0x56c>)
 800a0fe:	61fb      	str	r3, [r7, #28]
        break;
 800a100:	e00d      	b.n	800a11e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a102:	f7fc fddd 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 800a106:	61f8      	str	r0, [r7, #28]
        break;
 800a108:	e009      	b.n	800a11e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a10a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a10e:	61fb      	str	r3, [r7, #28]
        break;
 800a110:	e005      	b.n	800a11e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a112:	2300      	movs	r3, #0
 800a114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a11c:	bf00      	nop
    }

    if (pclk != 0U)
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d019      	beq.n	800a158 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	085a      	lsrs	r2, r3, #1
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	441a      	add	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	fbb2 f3f3 	udiv	r3, r2, r3
 800a136:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	2b0f      	cmp	r3, #15
 800a13c:	d909      	bls.n	800a152 <UART_SetConfig+0x546>
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a144:	d205      	bcs.n	800a152 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	b29a      	uxth	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60da      	str	r2, [r3, #12]
 800a150:	e002      	b.n	800a158 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a164:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3728      	adds	r7, #40	@ 0x28
 800a16c:	46bd      	mov	sp, r7
 800a16e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a172:	bf00      	nop
 800a174:	40008000 	.word	0x40008000
 800a178:	00f42400 	.word	0x00f42400

0800a17c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a188:	f003 0308 	and.w	r3, r3, #8
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00a      	beq.n	800a1a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00a      	beq.n	800a1c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	430a      	orrs	r2, r1
 800a1c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1cc:	f003 0302 	and.w	r3, r3, #2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00a      	beq.n	800a1ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ee:	f003 0304 	and.w	r3, r3, #4
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	430a      	orrs	r2, r1
 800a20a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a210:	f003 0310 	and.w	r3, r3, #16
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00a      	beq.n	800a22e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00a      	beq.n	800a250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	430a      	orrs	r2, r1
 800a24e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d01a      	beq.n	800a292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a27a:	d10a      	bne.n	800a292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	430a      	orrs	r2, r1
 800a290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00a      	beq.n	800a2b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	430a      	orrs	r2, r1
 800a2b2:	605a      	str	r2, [r3, #4]
  }
}
 800a2b4:	bf00      	nop
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b098      	sub	sp, #96	@ 0x60
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2d0:	f7f9 fbd2 	bl	8003a78 <HAL_GetTick>
 800a2d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0308 	and.w	r3, r3, #8
 800a2e0:	2b08      	cmp	r3, #8
 800a2e2:	d12e      	bne.n	800a342 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 f88c 	bl	800a410 <UART_WaitOnFlagUntilTimeout>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d021      	beq.n	800a342 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a30e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a312:	653b      	str	r3, [r7, #80]	@ 0x50
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	461a      	mov	r2, r3
 800a31a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a31c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a31e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e6      	bne.n	800a2fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2220      	movs	r2, #32
 800a334:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e062      	b.n	800a408 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	d149      	bne.n	800a3e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a350:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a354:	9300      	str	r3, [sp, #0]
 800a356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a358:	2200      	movs	r2, #0
 800a35a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f856 	bl	800a410 <UART_WaitOnFlagUntilTimeout>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d03c      	beq.n	800a3e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a372:	e853 3f00 	ldrex	r3, [r3]
 800a376:	623b      	str	r3, [r7, #32]
   return(result);
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a37e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	461a      	mov	r2, r3
 800a386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a388:	633b      	str	r3, [r7, #48]	@ 0x30
 800a38a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a38e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a390:	e841 2300 	strex	r3, r2, [r1]
 800a394:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d1e6      	bne.n	800a36a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	3308      	adds	r3, #8
 800a3a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	e853 3f00 	ldrex	r3, [r3]
 800a3aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f023 0301 	bic.w	r3, r3, #1
 800a3b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3bc:	61fa      	str	r2, [r7, #28]
 800a3be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c0:	69b9      	ldr	r1, [r7, #24]
 800a3c2:	69fa      	ldr	r2, [r7, #28]
 800a3c4:	e841 2300 	strex	r3, r2, [r1]
 800a3c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e5      	bne.n	800a39c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	e011      	b.n	800a408 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3758      	adds	r7, #88	@ 0x58
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	603b      	str	r3, [r7, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a420:	e04f      	b.n	800a4c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a428:	d04b      	beq.n	800a4c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a42a:	f7f9 fb25 	bl	8003a78 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	429a      	cmp	r2, r3
 800a438:	d302      	bcc.n	800a440 <UART_WaitOnFlagUntilTimeout+0x30>
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a440:	2303      	movs	r3, #3
 800a442:	e04e      	b.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0304 	and.w	r3, r3, #4
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d037      	beq.n	800a4c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b80      	cmp	r3, #128	@ 0x80
 800a456:	d034      	beq.n	800a4c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b40      	cmp	r3, #64	@ 0x40
 800a45c:	d031      	beq.n	800a4c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	f003 0308 	and.w	r3, r3, #8
 800a468:	2b08      	cmp	r3, #8
 800a46a:	d110      	bne.n	800a48e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2208      	movs	r2, #8
 800a472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f000 f8ff 	bl	800a678 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2208      	movs	r2, #8
 800a47e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e029      	b.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69db      	ldr	r3, [r3, #28]
 800a494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a49c:	d111      	bne.n	800a4c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a4a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 f8e5 	bl	800a678 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	e00f      	b.n	800a4e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69da      	ldr	r2, [r3, #28]
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	bf0c      	ite	eq
 800a4d2:	2301      	moveq	r3, #1
 800a4d4:	2300      	movne	r3, #0
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	461a      	mov	r2, r3
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d0a0      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4e0:	2300      	movs	r3, #0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
	...

0800a4ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b097      	sub	sp, #92	@ 0x5c
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	88fa      	ldrh	r2, [r7, #6]
 800a504:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	88fa      	ldrh	r2, [r7, #6]
 800a50c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a51e:	d10e      	bne.n	800a53e <UART_Start_Receive_IT+0x52>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d105      	bne.n	800a534 <UART_Start_Receive_IT+0x48>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a52e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a532:	e02d      	b.n	800a590 <UART_Start_Receive_IT+0xa4>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	22ff      	movs	r2, #255	@ 0xff
 800a538:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a53c:	e028      	b.n	800a590 <UART_Start_Receive_IT+0xa4>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10d      	bne.n	800a562 <UART_Start_Receive_IT+0x76>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d104      	bne.n	800a558 <UART_Start_Receive_IT+0x6c>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	22ff      	movs	r2, #255	@ 0xff
 800a552:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a556:	e01b      	b.n	800a590 <UART_Start_Receive_IT+0xa4>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	227f      	movs	r2, #127	@ 0x7f
 800a55c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a560:	e016      	b.n	800a590 <UART_Start_Receive_IT+0xa4>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a56a:	d10d      	bne.n	800a588 <UART_Start_Receive_IT+0x9c>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d104      	bne.n	800a57e <UART_Start_Receive_IT+0x92>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	227f      	movs	r2, #127	@ 0x7f
 800a578:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a57c:	e008      	b.n	800a590 <UART_Start_Receive_IT+0xa4>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	223f      	movs	r2, #63	@ 0x3f
 800a582:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a586:	e003      	b.n	800a590 <UART_Start_Receive_IT+0xa4>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2222      	movs	r2, #34	@ 0x22
 800a59c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	3308      	adds	r3, #8
 800a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5aa:	e853 3f00 	ldrex	r3, [r3]
 800a5ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b2:	f043 0301 	orr.w	r3, r3, #1
 800a5b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3308      	adds	r3, #8
 800a5be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a5c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 800a5c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a5c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5c8:	e841 2300 	strex	r3, r2, [r1]
 800a5cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1e5      	bne.n	800a5a0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5dc:	d107      	bne.n	800a5ee <UART_Start_Receive_IT+0x102>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d103      	bne.n	800a5ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	4a21      	ldr	r2, [pc, #132]	@ (800a670 <UART_Start_Receive_IT+0x184>)
 800a5ea:	669a      	str	r2, [r3, #104]	@ 0x68
 800a5ec:	e002      	b.n	800a5f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	4a20      	ldr	r2, [pc, #128]	@ (800a674 <UART_Start_Receive_IT+0x188>)
 800a5f2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d019      	beq.n	800a630 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a604:	e853 3f00 	ldrex	r3, [r3]
 800a608:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800a610:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a61a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a61c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a622:	e841 2300 	strex	r3, r2, [r1]
 800a626:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1e6      	bne.n	800a5fc <UART_Start_Receive_IT+0x110>
 800a62e:	e018      	b.n	800a662 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	e853 3f00 	ldrex	r3, [r3]
 800a63c:	613b      	str	r3, [r7, #16]
   return(result);
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	f043 0320 	orr.w	r3, r3, #32
 800a644:	653b      	str	r3, [r7, #80]	@ 0x50
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a64e:	623b      	str	r3, [r7, #32]
 800a650:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a652:	69f9      	ldr	r1, [r7, #28]
 800a654:	6a3a      	ldr	r2, [r7, #32]
 800a656:	e841 2300 	strex	r3, r2, [r1]
 800a65a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1e6      	bne.n	800a630 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	375c      	adds	r7, #92	@ 0x5c
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	0800a97d 	.word	0x0800a97d
 800a674:	0800a7c1 	.word	0x0800a7c1

0800a678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a678:	b480      	push	{r7}
 800a67a:	b095      	sub	sp, #84	@ 0x54
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a688:	e853 3f00 	ldrex	r3, [r3]
 800a68c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a694:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	461a      	mov	r2, r3
 800a69c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a69e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6a6:	e841 2300 	strex	r3, r2, [r1]
 800a6aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d1e6      	bne.n	800a680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	e853 3f00 	ldrex	r3, [r3]
 800a6c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	f023 0301 	bic.w	r3, r3, #1
 800a6c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6da:	e841 2300 	strex	r3, r2, [r1]
 800a6de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1e5      	bne.n	800a6b2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d118      	bne.n	800a720 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	e853 3f00 	ldrex	r3, [r3]
 800a6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f023 0310 	bic.w	r3, r3, #16
 800a702:	647b      	str	r3, [r7, #68]	@ 0x44
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	461a      	mov	r2, r3
 800a70a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a70c:	61bb      	str	r3, [r7, #24]
 800a70e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	6979      	ldr	r1, [r7, #20]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	e841 2300 	strex	r3, r2, [r1]
 800a718:	613b      	str	r3, [r7, #16]
   return(result);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1e6      	bne.n	800a6ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a734:	bf00      	nop
 800a736:	3754      	adds	r7, #84	@ 0x54
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a74c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7ff fa3e 	bl	8009be0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a764:	bf00      	nop
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	e853 3f00 	ldrex	r3, [r3]
 800a780:	60bb      	str	r3, [r7, #8]
   return(result);
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a788:	61fb      	str	r3, [r7, #28]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	61bb      	str	r3, [r7, #24]
 800a794:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a796:	6979      	ldr	r1, [r7, #20]
 800a798:	69ba      	ldr	r2, [r7, #24]
 800a79a:	e841 2300 	strex	r3, r2, [r1]
 800a79e:	613b      	str	r3, [r7, #16]
   return(result);
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d1e6      	bne.n	800a774 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f7ff fa0a 	bl	8009bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7b8:	bf00      	nop
 800a7ba:	3720      	adds	r7, #32
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b09c      	sub	sp, #112	@ 0x70
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a7ce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7d8:	2b22      	cmp	r3, #34	@ 0x22
 800a7da:	f040 80be 	bne.w	800a95a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a7e4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a7e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a7ec:	b2d9      	uxtb	r1, r3
 800a7ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a7f2:	b2da      	uxtb	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7f8:	400a      	ands	r2, r1
 800a7fa:	b2d2      	uxtb	r2, r2
 800a7fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a802:	1c5a      	adds	r2, r3, #1
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a80e:	b29b      	uxth	r3, r3
 800a810:	3b01      	subs	r3, #1
 800a812:	b29a      	uxth	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a820:	b29b      	uxth	r3, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	f040 80a3 	bne.w	800a96e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a830:	e853 3f00 	ldrex	r3, [r3]
 800a834:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a83c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	461a      	mov	r2, r3
 800a844:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a846:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a848:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a84c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a84e:	e841 2300 	strex	r3, r2, [r1]
 800a852:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1e6      	bne.n	800a828 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	3308      	adds	r3, #8
 800a860:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a864:	e853 3f00 	ldrex	r3, [r3]
 800a868:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86c:	f023 0301 	bic.w	r3, r3, #1
 800a870:	667b      	str	r3, [r7, #100]	@ 0x64
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3308      	adds	r3, #8
 800a878:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a87a:	647a      	str	r2, [r7, #68]	@ 0x44
 800a87c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a880:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1e5      	bne.n	800a85a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2220      	movs	r2, #32
 800a892:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a34      	ldr	r2, [pc, #208]	@ (800a978 <UART_RxISR_8BIT+0x1b8>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d01f      	beq.n	800a8ec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d018      	beq.n	800a8ec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c2:	e853 3f00 	ldrex	r3, [r3]
 800a8c6:	623b      	str	r3, [r7, #32]
   return(result);
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8ce:	663b      	str	r3, [r7, #96]	@ 0x60
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8d8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e6      	bne.n	800a8ba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d12e      	bne.n	800a952 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	e853 3f00 	ldrex	r3, [r3]
 800a906:	60fb      	str	r3, [r7, #12]
   return(result);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0310 	bic.w	r3, r3, #16
 800a90e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	461a      	mov	r2, r3
 800a916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a918:	61fb      	str	r3, [r7, #28]
 800a91a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91c:	69b9      	ldr	r1, [r7, #24]
 800a91e:	69fa      	ldr	r2, [r7, #28]
 800a920:	e841 2300 	strex	r3, r2, [r1]
 800a924:	617b      	str	r3, [r7, #20]
   return(result);
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1e6      	bne.n	800a8fa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	f003 0310 	and.w	r3, r3, #16
 800a936:	2b10      	cmp	r3, #16
 800a938:	d103      	bne.n	800a942 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2210      	movs	r2, #16
 800a940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff f952 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a950:	e00d      	b.n	800a96e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7f8 ffa2 	bl	800389c <HAL_UART_RxCpltCallback>
}
 800a958:	e009      	b.n	800a96e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	8b1b      	ldrh	r3, [r3, #24]
 800a960:	b29a      	uxth	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f042 0208 	orr.w	r2, r2, #8
 800a96a:	b292      	uxth	r2, r2
 800a96c:	831a      	strh	r2, [r3, #24]
}
 800a96e:	bf00      	nop
 800a970:	3770      	adds	r7, #112	@ 0x70
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	40008000 	.word	0x40008000

0800a97c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b09c      	sub	sp, #112	@ 0x70
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a98a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a994:	2b22      	cmp	r3, #34	@ 0x22
 800a996:	f040 80be 	bne.w	800ab16 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a9a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a9aa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a9ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9b8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9be:	1c9a      	adds	r2, r3, #2
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f040 80a3 	bne.w	800ab2a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9ec:	e853 3f00 	ldrex	r3, [r3]
 800a9f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a9f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9f8:	667b      	str	r3, [r7, #100]	@ 0x64
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa02:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800aa08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800aa0a:	e841 2300 	strex	r3, r2, [r1]
 800aa0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800aa10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e6      	bne.n	800a9e4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa20:	e853 3f00 	ldrex	r3, [r3]
 800aa24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	f023 0301 	bic.w	r3, r3, #1
 800aa2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3308      	adds	r3, #8
 800aa34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aa36:	643a      	str	r2, [r7, #64]	@ 0x40
 800aa38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa3e:	e841 2300 	strex	r3, r2, [r1]
 800aa42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1e5      	bne.n	800aa16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2220      	movs	r2, #32
 800aa4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a34      	ldr	r2, [pc, #208]	@ (800ab34 <UART_RxISR_16BIT+0x1b8>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d01f      	beq.n	800aaa8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d018      	beq.n	800aaa8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	e853 3f00 	ldrex	r3, [r3]
 800aa82:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800aa8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa96:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa9c:	e841 2300 	strex	r3, r2, [r1]
 800aaa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e6      	bne.n	800aa76 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d12e      	bne.n	800ab0e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	e853 3f00 	ldrex	r3, [r3]
 800aac2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	f023 0310 	bic.w	r3, r3, #16
 800aaca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	461a      	mov	r2, r3
 800aad2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aad4:	61bb      	str	r3, [r7, #24]
 800aad6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad8:	6979      	ldr	r1, [r7, #20]
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	e841 2300 	strex	r3, r2, [r1]
 800aae0:	613b      	str	r3, [r7, #16]
   return(result);
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1e6      	bne.n	800aab6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	f003 0310 	and.w	r3, r3, #16
 800aaf2:	2b10      	cmp	r3, #16
 800aaf4:	d103      	bne.n	800aafe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2210      	movs	r2, #16
 800aafc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7ff f874 	bl	8009bf4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab0c:	e00d      	b.n	800ab2a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7f8 fec4 	bl	800389c <HAL_UART_RxCpltCallback>
}
 800ab14:	e009      	b.n	800ab2a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	8b1b      	ldrh	r3, [r3, #24]
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f042 0208 	orr.w	r2, r2, #8
 800ab26:	b292      	uxth	r2, r2
 800ab28:	831a      	strh	r2, [r3, #24]
}
 800ab2a:	bf00      	nop
 800ab2c:	3770      	adds	r7, #112	@ 0x70
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	40008000 	.word	0x40008000

0800ab38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ab50:	4904      	ldr	r1, [pc, #16]	@ (800ab64 <MX_FATFS_Init+0x18>)
 800ab52:	4805      	ldr	r0, [pc, #20]	@ (800ab68 <MX_FATFS_Init+0x1c>)
 800ab54:	f003 fa3a 	bl	800dfcc <FATFS_LinkDriver>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4b03      	ldr	r3, [pc, #12]	@ (800ab6c <MX_FATFS_Init+0x20>)
 800ab5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ab60:	bf00      	nop
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20000ab8 	.word	0x20000ab8
 800ab68:	20000040 	.word	0x20000040
 800ab6c:	20000ab4 	.word	0x20000ab4

0800ab70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ab70:	b480      	push	{r7}
 800ab72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ab74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	4603      	mov	r3, r0
 800ab88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 f9d9 	bl	800af44 <USER_SPI_initialize>
 800ab92:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800aba6:	79fb      	ldrb	r3, [r7, #7]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f000 fab7 	bl	800b11c <USER_SPI_status>
 800abae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60b9      	str	r1, [r7, #8]
 800abc0:	607a      	str	r2, [r7, #4]
 800abc2:	603b      	str	r3, [r7, #0]
 800abc4:	4603      	mov	r3, r0
 800abc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800abc8:	7bf8      	ldrb	r0, [r7, #15]
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	f000 faba 	bl	800b148 <USER_SPI_read>
 800abd4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	607a      	str	r2, [r7, #4]
 800abe8:	603b      	str	r3, [r7, #0]
 800abea:	4603      	mov	r3, r0
 800abec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800abee:	7bf8      	ldrb	r0, [r7, #15]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	68b9      	ldr	r1, [r7, #8]
 800abf6:	f000 fb0d 	bl	800b214 <USER_SPI_write>
 800abfa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	603a      	str	r2, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
 800ac10:	460b      	mov	r3, r1
 800ac12:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800ac14:	79b9      	ldrb	r1, [r7, #6]
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fb76 	bl	800b30c <USER_SPI_ioctl>
 800ac20:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <SPI_Timer_On>:
  BYTE CardType;			/* Card type flags */

  uint32_t spiTimerTickStart;
  uint32_t spiTimerTickDelay;

  void SPI_Timer_On(uint32_t waitTicks) {
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
      spiTimerTickStart = HAL_GetTick();
 800ac34:	f7f8 ff20 	bl	8003a78 <HAL_GetTick>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	4a04      	ldr	r2, [pc, #16]	@ (800ac4c <SPI_Timer_On+0x20>)
 800ac3c:	6013      	str	r3, [r2, #0]
      spiTimerTickDelay = waitTicks;
 800ac3e:	4a04      	ldr	r2, [pc, #16]	@ (800ac50 <SPI_Timer_On+0x24>)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6013      	str	r3, [r2, #0]
  }
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20000ac0 	.word	0x20000ac0
 800ac50:	20000ac4 	.word	0x20000ac4

0800ac54 <SPI_Timer_Status>:

  uint8_t SPI_Timer_Status() {
 800ac54:	b580      	push	{r7, lr}
 800ac56:	af00      	add	r7, sp, #0
      return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800ac58:	f7f8 ff0e 	bl	8003a78 <HAL_GetTick>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	4b06      	ldr	r3, [pc, #24]	@ (800ac78 <SPI_Timer_Status+0x24>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	1ad2      	subs	r2, r2, r3
 800ac64:	4b05      	ldr	r3, [pc, #20]	@ (800ac7c <SPI_Timer_Status+0x28>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	bf34      	ite	cc
 800ac6c:	2301      	movcc	r3, #1
 800ac6e:	2300      	movcs	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
  }
 800ac72:	4618      	mov	r0, r3
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	20000ac0 	.word	0x20000ac0
 800ac7c:	20000ac4 	.word	0x20000ac4

0800ac80 <xchg_spi>:
  /* Exchange a byte */
  static
  BYTE xchg_spi (
  	BYTE dat	/* Data to send */
  )
  {
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af02      	add	r7, sp, #8
 800ac86:	4603      	mov	r3, r0
 800ac88:	71fb      	strb	r3, [r7, #7]
  	BYTE rxDat;
      HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800ac8a:	f107 020f 	add.w	r2, r7, #15
 800ac8e:	1df9      	adds	r1, r7, #7
 800ac90:	2332      	movs	r3, #50	@ 0x32
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	2301      	movs	r3, #1
 800ac96:	4804      	ldr	r0, [pc, #16]	@ (800aca8 <xchg_spi+0x28>)
 800ac98:	f7fd f9bb 	bl	8008012 <HAL_SPI_TransmitReceive>
      return rxDat;
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
  }
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	2000089c 	.word	0x2000089c

0800acac <rcvr_spi_multi>:
  static
  void rcvr_spi_multi (
  	BYTE *buff,		/* Pointer to data buffer */
  	UINT btr		/* Number of bytes to receive (even number) */
  )
  {
 800acac:	b590      	push	{r4, r7, lr}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  	for(UINT i=0; i<btr; i++) {
 800acb6:	2300      	movs	r3, #0
 800acb8:	60fb      	str	r3, [r7, #12]
 800acba:	e00a      	b.n	800acd2 <rcvr_spi_multi+0x26>
  		*(buff+i) = xchg_spi(0xFF);
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	18d4      	adds	r4, r2, r3
 800acc2:	20ff      	movs	r0, #255	@ 0xff
 800acc4:	f7ff ffdc 	bl	800ac80 <xchg_spi>
 800acc8:	4603      	mov	r3, r0
 800acca:	7023      	strb	r3, [r4, #0]
  	for(UINT i=0; i<btr; i++) {
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	3301      	adds	r3, #1
 800acd0:	60fb      	str	r3, [r7, #12]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d3f0      	bcc.n	800acbc <rcvr_spi_multi+0x10>
  	}
  }
 800acda:	bf00      	nop
 800acdc:	bf00      	nop
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd90      	pop	{r4, r7, pc}

0800ace4 <xmit_spi_multi>:
  static
  void xmit_spi_multi (
  	const BYTE *buff,	/* Pointer to the data */
  	UINT btx			/* Number of bytes to send (even number) */
  )
  {
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  	for(UINT i=0; i<btx; i++) {
 800acee:	2300      	movs	r3, #0
 800acf0:	60fb      	str	r3, [r7, #12]
 800acf2:	e009      	b.n	800ad08 <xmit_spi_multi+0x24>
  		xchg_spi(*(buff+i));
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	4413      	add	r3, r2
 800acfa:	781b      	ldrb	r3, [r3, #0]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff ffbf 	bl	800ac80 <xchg_spi>
  	for(UINT i=0; i<btx; i++) {
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3301      	adds	r3, #1
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d3f1      	bcc.n	800acf4 <xmit_spi_multi+0x10>
  	}
  }
 800ad10:	bf00      	nop
 800ad12:	bf00      	nop
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <wait_ready>:

  static
  int wait_ready (	/* 1:Ready, 0:Timeout */
  	UINT wt			/* Timeout [ms] */
  )
  {
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b086      	sub	sp, #24
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
  	//wait_ready needs its own timer, unfortunately, so it can't use the
  	//spi_timer functions
  	uint32_t waitSpiTimerTickStart;
  	uint32_t waitSpiTimerTickDelay;

  	waitSpiTimerTickStart = HAL_GetTick();
 800ad22:	f7f8 fea9 	bl	8003a78 <HAL_GetTick>
 800ad26:	6178      	str	r0, [r7, #20]
  	waitSpiTimerTickDelay = (uint32_t)wt;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	613b      	str	r3, [r7, #16]
  	do {
  		d = xchg_spi(0xFF);
 800ad2c:	20ff      	movs	r0, #255	@ 0xff
 800ad2e:	f7ff ffa7 	bl	800ac80 <xchg_spi>
 800ad32:	4603      	mov	r3, r0
 800ad34:	73fb      	strb	r3, [r7, #15]
  		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
  	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	2bff      	cmp	r3, #255	@ 0xff
 800ad3a:	d007      	beq.n	800ad4c <wait_ready+0x32>
 800ad3c:	f7f8 fe9c 	bl	8003a78 <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d8ef      	bhi.n	800ad2c <wait_ready+0x12>

  	return (d == 0xFF) ? 1 : 0;
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
 800ad4e:	2bff      	cmp	r3, #255	@ 0xff
 800ad50:	bf0c      	ite	eq
 800ad52:	2301      	moveq	r3, #1
 800ad54:	2300      	movne	r3, #0
 800ad56:	b2db      	uxtb	r3, r3
  }
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <despiselect>:
  /* Despiselect card and release SPI                                         */
  /*-----------------------------------------------------------------------*/

  static
  void despiselect (void)
  {
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
  	CS_HIGH();		/* Set CS# high */
 800ad64:	2201      	movs	r2, #1
 800ad66:	2140      	movs	r1, #64	@ 0x40
 800ad68:	4803      	ldr	r0, [pc, #12]	@ (800ad78 <despiselect+0x18>)
 800ad6a:	f7fb fa13 	bl	8006194 <HAL_GPIO_WritePin>
  	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800ad6e:	20ff      	movs	r0, #255	@ 0xff
 800ad70:	f7ff ff86 	bl	800ac80 <xchg_spi>

  }
 800ad74:	bf00      	nop
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	48000400 	.word	0x48000400

0800ad7c <spiselect>:
  /* Select card and wait for ready                                        */
  /*-----------------------------------------------------------------------*/

  static
  int spiselect (void)	/* 1:OK, 0:Timeout */
  {
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	af00      	add	r7, sp, #0
  	CS_LOW();		/* Set CS# low */
 800ad80:	2200      	movs	r2, #0
 800ad82:	2140      	movs	r1, #64	@ 0x40
 800ad84:	4809      	ldr	r0, [pc, #36]	@ (800adac <spiselect+0x30>)
 800ad86:	f7fb fa05 	bl	8006194 <HAL_GPIO_WritePin>
  	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800ad8a:	20ff      	movs	r0, #255	@ 0xff
 800ad8c:	f7ff ff78 	bl	800ac80 <xchg_spi>
  	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800ad90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ad94:	f7ff ffc1 	bl	800ad1a <wait_ready>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <spiselect+0x26>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e002      	b.n	800ada8 <spiselect+0x2c>

  	despiselect();
 800ada2:	f7ff ffdd 	bl	800ad60 <despiselect>
  	return 0;	/* Timeout */
 800ada6:	2300      	movs	r3, #0
  }
 800ada8:	4618      	mov	r0, r3
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	48000400 	.word	0x48000400

0800adb0 <rcvr_datablock>:
  static
  int rcvr_datablock (	/* 1:OK, 0:Error */
  	BYTE *buff,			/* Data buffer */
  	UINT btr			/* Data block length (byte) */
  )
  {
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
  	BYTE token;


  	SPI_Timer_On(200);
 800adba:	20c8      	movs	r0, #200	@ 0xc8
 800adbc:	f7ff ff36 	bl	800ac2c <SPI_Timer_On>
  	do {							/* Wait for DataStart token in timeout of 200ms */
  		token = xchg_spi(0xFF);
 800adc0:	20ff      	movs	r0, #255	@ 0xff
 800adc2:	f7ff ff5d 	bl	800ac80 <xchg_spi>
 800adc6:	4603      	mov	r3, r0
 800adc8:	73fb      	strb	r3, [r7, #15]
  		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
  	} while ((token == 0xFF) && SPI_Timer_Status());
 800adca:	7bfb      	ldrb	r3, [r7, #15]
 800adcc:	2bff      	cmp	r3, #255	@ 0xff
 800adce:	d104      	bne.n	800adda <rcvr_datablock+0x2a>
 800add0:	f7ff ff40 	bl	800ac54 <SPI_Timer_Status>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1f2      	bne.n	800adc0 <rcvr_datablock+0x10>
  	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	2bfe      	cmp	r3, #254	@ 0xfe
 800adde:	d001      	beq.n	800ade4 <rcvr_datablock+0x34>
 800ade0:	2300      	movs	r3, #0
 800ade2:	e00a      	b.n	800adfa <rcvr_datablock+0x4a>

  	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f7ff ff60 	bl	800acac <rcvr_spi_multi>
  	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800adec:	20ff      	movs	r0, #255	@ 0xff
 800adee:	f7ff ff47 	bl	800ac80 <xchg_spi>
 800adf2:	20ff      	movs	r0, #255	@ 0xff
 800adf4:	f7ff ff44 	bl	800ac80 <xchg_spi>

  	return 1;						/* Function succeeded */
 800adf8:	2301      	movs	r3, #1
  }
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <xmit_datablock>:
  static
  int xmit_datablock (	/* 1:OK, 0:Failed */
  	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
  	BYTE token			/* Token */
  )
  {
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	70fb      	strb	r3, [r7, #3]
  	BYTE resp;


  	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800ae0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800ae12:	f7ff ff82 	bl	800ad1a <wait_ready>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <xmit_datablock+0x1e>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e01e      	b.n	800ae5e <xmit_datablock+0x5c>

  	xchg_spi(token);					/* Send token */
 800ae20:	78fb      	ldrb	r3, [r7, #3]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff ff2c 	bl	800ac80 <xchg_spi>
  	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800ae28:	78fb      	ldrb	r3, [r7, #3]
 800ae2a:	2bfd      	cmp	r3, #253	@ 0xfd
 800ae2c:	d016      	beq.n	800ae5c <xmit_datablock+0x5a>
  		xmit_spi_multi(buff, 512);		/* Data */
 800ae2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff ff56 	bl	800ace4 <xmit_spi_multi>
  		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800ae38:	20ff      	movs	r0, #255	@ 0xff
 800ae3a:	f7ff ff21 	bl	800ac80 <xchg_spi>
 800ae3e:	20ff      	movs	r0, #255	@ 0xff
 800ae40:	f7ff ff1e 	bl	800ac80 <xchg_spi>

  		resp = xchg_spi(0xFF);				/* Receive data resp */
 800ae44:	20ff      	movs	r0, #255	@ 0xff
 800ae46:	f7ff ff1b 	bl	800ac80 <xchg_spi>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	73fb      	strb	r3, [r7, #15]
  		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	f003 031f 	and.w	r3, r3, #31
 800ae54:	2b05      	cmp	r3, #5
 800ae56:	d001      	beq.n	800ae5c <xmit_datablock+0x5a>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	e000      	b.n	800ae5e <xmit_datablock+0x5c>
  	}
  	return 1;
 800ae5c:	2301      	movs	r3, #1
  }
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3710      	adds	r7, #16
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <send_cmd>:
  static
  BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
  	BYTE cmd,		/* Command index */
  	DWORD arg		/* Argument */
  )
  {
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b084      	sub	sp, #16
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	6039      	str	r1, [r7, #0]
 800ae70:	71fb      	strb	r3, [r7, #7]
  	BYTE n, res;


  	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800ae72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	da0e      	bge.n	800ae98 <send_cmd+0x32>
  		cmd &= 0x7F;
 800ae7a:	79fb      	ldrb	r3, [r7, #7]
 800ae7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae80:	71fb      	strb	r3, [r7, #7]
  		res = send_cmd(CMD55, 0);
 800ae82:	2100      	movs	r1, #0
 800ae84:	2037      	movs	r0, #55	@ 0x37
 800ae86:	f7ff ffee 	bl	800ae66 <send_cmd>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	73bb      	strb	r3, [r7, #14]
  		if (res > 1) return res;
 800ae8e:	7bbb      	ldrb	r3, [r7, #14]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d901      	bls.n	800ae98 <send_cmd+0x32>
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	e051      	b.n	800af3c <send_cmd+0xd6>
  	}

  	/* Select the card and wait for ready except to stop multiple block read */
  	if (cmd != CMD12) {
 800ae98:	79fb      	ldrb	r3, [r7, #7]
 800ae9a:	2b0c      	cmp	r3, #12
 800ae9c:	d008      	beq.n	800aeb0 <send_cmd+0x4a>
  		despiselect();
 800ae9e:	f7ff ff5f 	bl	800ad60 <despiselect>
  		if (!spiselect()) return 0xFF;
 800aea2:	f7ff ff6b 	bl	800ad7c <spiselect>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <send_cmd+0x4a>
 800aeac:	23ff      	movs	r3, #255	@ 0xff
 800aeae:	e045      	b.n	800af3c <send_cmd+0xd6>
  	}

  	/* Send command packet */
  	xchg_spi(0x40 | cmd);				/* Start + command index */
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
 800aeb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7ff fee1 	bl	800ac80 <xchg_spi>
  	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	0e1b      	lsrs	r3, r3, #24
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7ff fedb 	bl	800ac80 <xchg_spi>
  	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	0c1b      	lsrs	r3, r3, #16
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7ff fed5 	bl	800ac80 <xchg_spi>
  	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	0a1b      	lsrs	r3, r3, #8
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff fecf 	bl	800ac80 <xchg_spi>
  	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff feca 	bl	800ac80 <xchg_spi>
  	n = 0x01;							/* Dummy CRC + Stop */
 800aeec:	2301      	movs	r3, #1
 800aeee:	73fb      	strb	r3, [r7, #15]
  	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800aef0:	79fb      	ldrb	r3, [r7, #7]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d101      	bne.n	800aefa <send_cmd+0x94>
 800aef6:	2395      	movs	r3, #149	@ 0x95
 800aef8:	73fb      	strb	r3, [r7, #15]
  	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	2b08      	cmp	r3, #8
 800aefe:	d101      	bne.n	800af04 <send_cmd+0x9e>
 800af00:	2387      	movs	r3, #135	@ 0x87
 800af02:	73fb      	strb	r3, [r7, #15]
  	xchg_spi(n);
 800af04:	7bfb      	ldrb	r3, [r7, #15]
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff feba 	bl	800ac80 <xchg_spi>

  	/* Receive command resp */
  	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800af0c:	79fb      	ldrb	r3, [r7, #7]
 800af0e:	2b0c      	cmp	r3, #12
 800af10:	d102      	bne.n	800af18 <send_cmd+0xb2>
 800af12:	20ff      	movs	r0, #255	@ 0xff
 800af14:	f7ff feb4 	bl	800ac80 <xchg_spi>
  	n = 10;								/* Wait for response (10 bytes max) */
 800af18:	230a      	movs	r3, #10
 800af1a:	73fb      	strb	r3, [r7, #15]
  	do {
  		res = xchg_spi(0xFF);
 800af1c:	20ff      	movs	r0, #255	@ 0xff
 800af1e:	f7ff feaf 	bl	800ac80 <xchg_spi>
 800af22:	4603      	mov	r3, r0
 800af24:	73bb      	strb	r3, [r7, #14]
  	} while ((res & 0x80) && --n);
 800af26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	da05      	bge.n	800af3a <send_cmd+0xd4>
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	3b01      	subs	r3, #1
 800af32:	73fb      	strb	r3, [r7, #15]
 800af34:	7bfb      	ldrb	r3, [r7, #15]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1f0      	bne.n	800af1c <send_cmd+0xb6>

  	return res;							/* Return received response */
 800af3a:	7bbb      	ldrb	r3, [r7, #14]
  }
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USER_SPI_initialize>:
  /*-----------------------------------------------------------------------*/

  inline DSTATUS USER_SPI_initialize (
  	BYTE drv		/* Physical drive number (0) */
  )
  {
 800af44:	b590      	push	{r4, r7, lr}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	71fb      	strb	r3, [r7, #7]
  	BYTE n, cmd, ty, ocr[4];

  	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d001      	beq.n	800af58 <USER_SPI_initialize+0x14>
 800af54:	2301      	movs	r3, #1
 800af56:	e0d6      	b.n	800b106 <USER_SPI_initialize+0x1c2>
  	//assume SPI already init init_spi();	/* Initialize SPI */

  	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800af58:	4b6d      	ldr	r3, [pc, #436]	@ (800b110 <USER_SPI_initialize+0x1cc>)
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	f003 0302 	and.w	r3, r3, #2
 800af62:	2b00      	cmp	r3, #0
 800af64:	d003      	beq.n	800af6e <USER_SPI_initialize+0x2a>
 800af66:	4b6a      	ldr	r3, [pc, #424]	@ (800b110 <USER_SPI_initialize+0x1cc>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	e0cb      	b.n	800b106 <USER_SPI_initialize+0x1c2>

  	FCLK_SLOW();
 800af6e:	4b69      	ldr	r3, [pc, #420]	@ (800b114 <USER_SPI_initialize+0x1d0>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800af78:	4b66      	ldr	r3, [pc, #408]	@ (800b114 <USER_SPI_initialize+0x1d0>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800af80:	601a      	str	r2, [r3, #0]
  	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800af82:	230a      	movs	r3, #10
 800af84:	73fb      	strb	r3, [r7, #15]
 800af86:	e005      	b.n	800af94 <USER_SPI_initialize+0x50>
 800af88:	20ff      	movs	r0, #255	@ 0xff
 800af8a:	f7ff fe79 	bl	800ac80 <xchg_spi>
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
 800af90:	3b01      	subs	r3, #1
 800af92:	73fb      	strb	r3, [r7, #15]
 800af94:	7bfb      	ldrb	r3, [r7, #15]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1f6      	bne.n	800af88 <USER_SPI_initialize+0x44>

  	ty = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	737b      	strb	r3, [r7, #13]
  	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800af9e:	2100      	movs	r1, #0
 800afa0:	2000      	movs	r0, #0
 800afa2:	f7ff ff60 	bl	800ae66 <send_cmd>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	f040 808b 	bne.w	800b0c4 <USER_SPI_initialize+0x180>
  		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800afae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800afb2:	f7ff fe3b 	bl	800ac2c <SPI_Timer_On>
  		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800afb6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800afba:	2008      	movs	r0, #8
 800afbc:	f7ff ff53 	bl	800ae66 <send_cmd>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d151      	bne.n	800b06a <USER_SPI_initialize+0x126>
  			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800afc6:	2300      	movs	r3, #0
 800afc8:	73fb      	strb	r3, [r7, #15]
 800afca:	e00d      	b.n	800afe8 <USER_SPI_initialize+0xa4>
 800afcc:	7bfc      	ldrb	r4, [r7, #15]
 800afce:	20ff      	movs	r0, #255	@ 0xff
 800afd0:	f7ff fe56 	bl	800ac80 <xchg_spi>
 800afd4:	4603      	mov	r3, r0
 800afd6:	461a      	mov	r2, r3
 800afd8:	f104 0310 	add.w	r3, r4, #16
 800afdc:	443b      	add	r3, r7
 800afde:	f803 2c08 	strb.w	r2, [r3, #-8]
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	3301      	adds	r3, #1
 800afe6:	73fb      	strb	r3, [r7, #15]
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	2b03      	cmp	r3, #3
 800afec:	d9ee      	bls.n	800afcc <USER_SPI_initialize+0x88>
  			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800afee:	7abb      	ldrb	r3, [r7, #10]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d167      	bne.n	800b0c4 <USER_SPI_initialize+0x180>
 800aff4:	7afb      	ldrb	r3, [r7, #11]
 800aff6:	2baa      	cmp	r3, #170	@ 0xaa
 800aff8:	d164      	bne.n	800b0c4 <USER_SPI_initialize+0x180>
  				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800affa:	bf00      	nop
 800affc:	f7ff fe2a 	bl	800ac54 <SPI_Timer_Status>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d007      	beq.n	800b016 <USER_SPI_initialize+0xd2>
 800b006:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b00a:	20a9      	movs	r0, #169	@ 0xa9
 800b00c:	f7ff ff2b 	bl	800ae66 <send_cmd>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1f2      	bne.n	800affc <USER_SPI_initialize+0xb8>
  				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b016:	f7ff fe1d 	bl	800ac54 <SPI_Timer_Status>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d051      	beq.n	800b0c4 <USER_SPI_initialize+0x180>
 800b020:	2100      	movs	r1, #0
 800b022:	203a      	movs	r0, #58	@ 0x3a
 800b024:	f7ff ff1f 	bl	800ae66 <send_cmd>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d14a      	bne.n	800b0c4 <USER_SPI_initialize+0x180>
  					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b02e:	2300      	movs	r3, #0
 800b030:	73fb      	strb	r3, [r7, #15]
 800b032:	e00d      	b.n	800b050 <USER_SPI_initialize+0x10c>
 800b034:	7bfc      	ldrb	r4, [r7, #15]
 800b036:	20ff      	movs	r0, #255	@ 0xff
 800b038:	f7ff fe22 	bl	800ac80 <xchg_spi>
 800b03c:	4603      	mov	r3, r0
 800b03e:	461a      	mov	r2, r3
 800b040:	f104 0310 	add.w	r3, r4, #16
 800b044:	443b      	add	r3, r7
 800b046:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	3301      	adds	r3, #1
 800b04e:	73fb      	strb	r3, [r7, #15]
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	2b03      	cmp	r3, #3
 800b054:	d9ee      	bls.n	800b034 <USER_SPI_initialize+0xf0>
  					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b056:	7a3b      	ldrb	r3, [r7, #8]
 800b058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <USER_SPI_initialize+0x120>
 800b060:	230c      	movs	r3, #12
 800b062:	e000      	b.n	800b066 <USER_SPI_initialize+0x122>
 800b064:	2304      	movs	r3, #4
 800b066:	737b      	strb	r3, [r7, #13]
 800b068:	e02c      	b.n	800b0c4 <USER_SPI_initialize+0x180>
  				}
  			}
  		} else {	/* Not SDv2 card */
  			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b06a:	2100      	movs	r1, #0
 800b06c:	20a9      	movs	r0, #169	@ 0xa9
 800b06e:	f7ff fefa 	bl	800ae66 <send_cmd>
 800b072:	4603      	mov	r3, r0
 800b074:	2b01      	cmp	r3, #1
 800b076:	d804      	bhi.n	800b082 <USER_SPI_initialize+0x13e>
  				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b078:	2302      	movs	r3, #2
 800b07a:	737b      	strb	r3, [r7, #13]
 800b07c:	23a9      	movs	r3, #169	@ 0xa9
 800b07e:	73bb      	strb	r3, [r7, #14]
 800b080:	e003      	b.n	800b08a <USER_SPI_initialize+0x146>
  			} else {
  				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b082:	2301      	movs	r3, #1
 800b084:	737b      	strb	r3, [r7, #13]
 800b086:	2301      	movs	r3, #1
 800b088:	73bb      	strb	r3, [r7, #14]
  			}
  			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b08a:	bf00      	nop
 800b08c:	f7ff fde2 	bl	800ac54 <SPI_Timer_Status>
 800b090:	4603      	mov	r3, r0
 800b092:	2b00      	cmp	r3, #0
 800b094:	d007      	beq.n	800b0a6 <USER_SPI_initialize+0x162>
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	2100      	movs	r1, #0
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7ff fee3 	bl	800ae66 <send_cmd>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d1f2      	bne.n	800b08c <USER_SPI_initialize+0x148>
  			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b0a6:	f7ff fdd5 	bl	800ac54 <SPI_Timer_Status>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d007      	beq.n	800b0c0 <USER_SPI_initialize+0x17c>
 800b0b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b0b4:	2010      	movs	r0, #16
 800b0b6:	f7ff fed6 	bl	800ae66 <send_cmd>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <USER_SPI_initialize+0x180>
  				ty = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	737b      	strb	r3, [r7, #13]
  		}
  	}
  	CardType = ty;	/* Card type */
 800b0c4:	4a14      	ldr	r2, [pc, #80]	@ (800b118 <USER_SPI_initialize+0x1d4>)
 800b0c6:	7b7b      	ldrb	r3, [r7, #13]
 800b0c8:	7013      	strb	r3, [r2, #0]
  	despiselect();
 800b0ca:	f7ff fe49 	bl	800ad60 <despiselect>

  	if (ty) {			/* OK */
 800b0ce:	7b7b      	ldrb	r3, [r7, #13]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d012      	beq.n	800b0fa <USER_SPI_initialize+0x1b6>
  		FCLK_FAST();			/* Set fast clock */
 800b0d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b114 <USER_SPI_initialize+0x1d0>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800b0de:	4b0d      	ldr	r3, [pc, #52]	@ (800b114 <USER_SPI_initialize+0x1d0>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f042 0210 	orr.w	r2, r2, #16
 800b0e6:	601a      	str	r2, [r3, #0]
  		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b0e8:	4b09      	ldr	r3, [pc, #36]	@ (800b110 <USER_SPI_initialize+0x1cc>)
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	f023 0301 	bic.w	r3, r3, #1
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	4b06      	ldr	r3, [pc, #24]	@ (800b110 <USER_SPI_initialize+0x1cc>)
 800b0f6:	701a      	strb	r2, [r3, #0]
 800b0f8:	e002      	b.n	800b100 <USER_SPI_initialize+0x1bc>
  	} else {			/* Failed */
  		Stat = STA_NOINIT;
 800b0fa:	4b05      	ldr	r3, [pc, #20]	@ (800b110 <USER_SPI_initialize+0x1cc>)
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	701a      	strb	r2, [r3, #0]
  	}

  	return Stat;
 800b100:	4b03      	ldr	r3, [pc, #12]	@ (800b110 <USER_SPI_initialize+0x1cc>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	b2db      	uxtb	r3, r3
  }
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd90      	pop	{r4, r7, pc}
 800b10e:	bf00      	nop
 800b110:	20000054 	.word	0x20000054
 800b114:	2000089c 	.word	0x2000089c
 800b118:	20000abc 	.word	0x20000abc

0800b11c <USER_SPI_status>:
  /*-----------------------------------------------------------------------*/

  inline DSTATUS USER_SPI_status (
  	BYTE drv		/* Physical drive number (0) */
  )
  {
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	4603      	mov	r3, r0
 800b124:	71fb      	strb	r3, [r7, #7]
  	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b126:	79fb      	ldrb	r3, [r7, #7]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <USER_SPI_status+0x14>
 800b12c:	2301      	movs	r3, #1
 800b12e:	e002      	b.n	800b136 <USER_SPI_status+0x1a>

  	return Stat;	/* Return disk status */
 800b130:	4b04      	ldr	r3, [pc, #16]	@ (800b144 <USER_SPI_status+0x28>)
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	b2db      	uxtb	r3, r3
  }
 800b136:	4618      	mov	r0, r3
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	20000054 	.word	0x20000054

0800b148 <USER_SPI_read>:
  	BYTE drv,		/* Physical drive number (0) */
  	BYTE *buff,		/* Pointer to the data buffer to store read data */
  	DWORD sector,	/* Start sector number (LBA) */
  	UINT count		/* Number of sectors to read (1..128) */
  )
  {
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60b9      	str	r1, [r7, #8]
 800b150:	607a      	str	r2, [r7, #4]
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	4603      	mov	r3, r0
 800b156:	73fb      	strb	r3, [r7, #15]
  	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b158:	7bfb      	ldrb	r3, [r7, #15]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d102      	bne.n	800b164 <USER_SPI_read+0x1c>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d101      	bne.n	800b168 <USER_SPI_read+0x20>
 800b164:	2304      	movs	r3, #4
 800b166:	e04d      	b.n	800b204 <USER_SPI_read+0xbc>
  	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b168:	4b28      	ldr	r3, [pc, #160]	@ (800b20c <USER_SPI_read+0xc4>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <USER_SPI_read+0x32>
 800b176:	2303      	movs	r3, #3
 800b178:	e044      	b.n	800b204 <USER_SPI_read+0xbc>

  	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b17a:	4b25      	ldr	r3, [pc, #148]	@ (800b210 <USER_SPI_read+0xc8>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	f003 0308 	and.w	r3, r3, #8
 800b182:	2b00      	cmp	r3, #0
 800b184:	d102      	bne.n	800b18c <USER_SPI_read+0x44>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	025b      	lsls	r3, r3, #9
 800b18a:	607b      	str	r3, [r7, #4]

  	if (count == 1) {	/* Single sector read */
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d111      	bne.n	800b1b6 <USER_SPI_read+0x6e>
  		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b192:	6879      	ldr	r1, [r7, #4]
 800b194:	2011      	movs	r0, #17
 800b196:	f7ff fe66 	bl	800ae66 <send_cmd>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d129      	bne.n	800b1f4 <USER_SPI_read+0xac>
  			&& rcvr_datablock(buff, 512)) {
 800b1a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b1a4:	68b8      	ldr	r0, [r7, #8]
 800b1a6:	f7ff fe03 	bl	800adb0 <rcvr_datablock>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d021      	beq.n	800b1f4 <USER_SPI_read+0xac>
  			count = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	603b      	str	r3, [r7, #0]
 800b1b4:	e01e      	b.n	800b1f4 <USER_SPI_read+0xac>
  		}
  	}
  	else {				/* Multiple sector read */
  		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	2012      	movs	r0, #18
 800b1ba:	f7ff fe54 	bl	800ae66 <send_cmd>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d117      	bne.n	800b1f4 <USER_SPI_read+0xac>
  			do {
  				if (!rcvr_datablock(buff, 512)) break;
 800b1c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b1c8:	68b8      	ldr	r0, [r7, #8]
 800b1ca:	f7ff fdf1 	bl	800adb0 <rcvr_datablock>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d00a      	beq.n	800b1ea <USER_SPI_read+0xa2>
  				buff += 512;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b1da:	60bb      	str	r3, [r7, #8]
  			} while (--count);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	603b      	str	r3, [r7, #0]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1ed      	bne.n	800b1c4 <USER_SPI_read+0x7c>
 800b1e8:	e000      	b.n	800b1ec <USER_SPI_read+0xa4>
  				if (!rcvr_datablock(buff, 512)) break;
 800b1ea:	bf00      	nop
  			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	200c      	movs	r0, #12
 800b1f0:	f7ff fe39 	bl	800ae66 <send_cmd>
  		}
  	}
  	despiselect();
 800b1f4:	f7ff fdb4 	bl	800ad60 <despiselect>

  	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bf14      	ite	ne
 800b1fe:	2301      	movne	r3, #1
 800b200:	2300      	moveq	r3, #0
 800b202:	b2db      	uxtb	r3, r3
  }
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	20000054 	.word	0x20000054
 800b210:	20000abc 	.word	0x20000abc

0800b214 <USER_SPI_write>:
  	BYTE drv,			/* Physical drive number (0) */
  	const BYTE *buff,	/* Ponter to the data to write */
  	DWORD sector,		/* Start sector number (LBA) */
  	UINT count			/* Number of sectors to write (1..128) */
  )
  {
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60b9      	str	r1, [r7, #8]
 800b21c:	607a      	str	r2, [r7, #4]
 800b21e:	603b      	str	r3, [r7, #0]
 800b220:	4603      	mov	r3, r0
 800b222:	73fb      	strb	r3, [r7, #15]
  	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b224:	7bfb      	ldrb	r3, [r7, #15]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d102      	bne.n	800b230 <USER_SPI_write+0x1c>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <USER_SPI_write+0x20>
 800b230:	2304      	movs	r3, #4
 800b232:	e063      	b.n	800b2fc <USER_SPI_write+0xe8>
  	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b234:	4b33      	ldr	r3, [pc, #204]	@ (800b304 <USER_SPI_write+0xf0>)
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	f003 0301 	and.w	r3, r3, #1
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <USER_SPI_write+0x32>
 800b242:	2303      	movs	r3, #3
 800b244:	e05a      	b.n	800b2fc <USER_SPI_write+0xe8>
  	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b246:	4b2f      	ldr	r3, [pc, #188]	@ (800b304 <USER_SPI_write+0xf0>)
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	f003 0304 	and.w	r3, r3, #4
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <USER_SPI_write+0x44>
 800b254:	2302      	movs	r3, #2
 800b256:	e051      	b.n	800b2fc <USER_SPI_write+0xe8>

  	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b258:	4b2b      	ldr	r3, [pc, #172]	@ (800b308 <USER_SPI_write+0xf4>)
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	f003 0308 	and.w	r3, r3, #8
 800b260:	2b00      	cmp	r3, #0
 800b262:	d102      	bne.n	800b26a <USER_SPI_write+0x56>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	025b      	lsls	r3, r3, #9
 800b268:	607b      	str	r3, [r7, #4]

  	if (count == 1) {	/* Single sector write */
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	d110      	bne.n	800b292 <USER_SPI_write+0x7e>
  		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b270:	6879      	ldr	r1, [r7, #4]
 800b272:	2018      	movs	r0, #24
 800b274:	f7ff fdf7 	bl	800ae66 <send_cmd>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d136      	bne.n	800b2ec <USER_SPI_write+0xd8>
  			&& xmit_datablock(buff, 0xFE)) {
 800b27e:	21fe      	movs	r1, #254	@ 0xfe
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	f7ff fdbe 	bl	800ae02 <xmit_datablock>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d02f      	beq.n	800b2ec <USER_SPI_write+0xd8>
  			count = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	e02c      	b.n	800b2ec <USER_SPI_write+0xd8>
  		}
  	}
  	else {				/* Multiple sector write */
  		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b292:	4b1d      	ldr	r3, [pc, #116]	@ (800b308 <USER_SPI_write+0xf4>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	f003 0306 	and.w	r3, r3, #6
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <USER_SPI_write+0x92>
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	2097      	movs	r0, #151	@ 0x97
 800b2a2:	f7ff fde0 	bl	800ae66 <send_cmd>
  		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b2a6:	6879      	ldr	r1, [r7, #4]
 800b2a8:	2019      	movs	r0, #25
 800b2aa:	f7ff fddc 	bl	800ae66 <send_cmd>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d11b      	bne.n	800b2ec <USER_SPI_write+0xd8>
  			do {
  				if (!xmit_datablock(buff, 0xFC)) break;
 800b2b4:	21fc      	movs	r1, #252	@ 0xfc
 800b2b6:	68b8      	ldr	r0, [r7, #8]
 800b2b8:	f7ff fda3 	bl	800ae02 <xmit_datablock>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00a      	beq.n	800b2d8 <USER_SPI_write+0xc4>
  				buff += 512;
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800b2c8:	60bb      	str	r3, [r7, #8]
  			} while (--count);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	603b      	str	r3, [r7, #0]
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1ee      	bne.n	800b2b4 <USER_SPI_write+0xa0>
 800b2d6:	e000      	b.n	800b2da <USER_SPI_write+0xc6>
  				if (!xmit_datablock(buff, 0xFC)) break;
 800b2d8:	bf00      	nop
  			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b2da:	21fd      	movs	r1, #253	@ 0xfd
 800b2dc:	2000      	movs	r0, #0
 800b2de:	f7ff fd90 	bl	800ae02 <xmit_datablock>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <USER_SPI_write+0xd8>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	603b      	str	r3, [r7, #0]
  		}
  	}
  	despiselect();
 800b2ec:	f7ff fd38 	bl	800ad60 <despiselect>

  	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	bf14      	ite	ne
 800b2f6:	2301      	movne	r3, #1
 800b2f8:	2300      	moveq	r3, #0
 800b2fa:	b2db      	uxtb	r3, r3
  }
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	20000054 	.word	0x20000054
 800b308:	20000abc 	.word	0x20000abc

0800b30c <USER_SPI_ioctl>:
  inline DRESULT USER_SPI_ioctl (
  	BYTE drv,		/* Physical drive number (0) */
  	BYTE cmd,		/* Control command code */
  	void *buff		/* Pointer to the conrtol data */
  )
  {
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b08c      	sub	sp, #48	@ 0x30
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	603a      	str	r2, [r7, #0]
 800b316:	71fb      	strb	r3, [r7, #7]
 800b318:	460b      	mov	r3, r1
 800b31a:	71bb      	strb	r3, [r7, #6]
  	DRESULT res;
  	BYTE n, csd[16];
  	DWORD *dp, st, ed, csize;


  	if (drv) return RES_PARERR;					/* Check parameter */
 800b31c:	79fb      	ldrb	r3, [r7, #7]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <USER_SPI_ioctl+0x1a>
 800b322:	2304      	movs	r3, #4
 800b324:	e15a      	b.n	800b5dc <USER_SPI_ioctl+0x2d0>
  	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b326:	4baf      	ldr	r3, [pc, #700]	@ (800b5e4 <USER_SPI_ioctl+0x2d8>)
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	f003 0301 	and.w	r3, r3, #1
 800b330:	2b00      	cmp	r3, #0
 800b332:	d001      	beq.n	800b338 <USER_SPI_ioctl+0x2c>
 800b334:	2303      	movs	r3, #3
 800b336:	e151      	b.n	800b5dc <USER_SPI_ioctl+0x2d0>

  	res = RES_ERROR;
 800b338:	2301      	movs	r3, #1
 800b33a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  	switch (cmd) {
 800b33e:	79bb      	ldrb	r3, [r7, #6]
 800b340:	2b04      	cmp	r3, #4
 800b342:	f200 8136 	bhi.w	800b5b2 <USER_SPI_ioctl+0x2a6>
 800b346:	a201      	add	r2, pc, #4	@ (adr r2, 800b34c <USER_SPI_ioctl+0x40>)
 800b348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34c:	0800b361 	.word	0x0800b361
 800b350:	0800b375 	.word	0x0800b375
 800b354:	0800b5b3 	.word	0x0800b5b3
 800b358:	0800b421 	.word	0x0800b421
 800b35c:	0800b517 	.word	0x0800b517
  	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
  		if (spiselect()) res = RES_OK;
 800b360:	f7ff fd0c 	bl	800ad7c <spiselect>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 8127 	beq.w	800b5ba <USER_SPI_ioctl+0x2ae>
 800b36c:	2300      	movs	r3, #0
 800b36e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		break;
 800b372:	e122      	b.n	800b5ba <USER_SPI_ioctl+0x2ae>

  	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
  		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b374:	2100      	movs	r1, #0
 800b376:	2009      	movs	r0, #9
 800b378:	f7ff fd75 	bl	800ae66 <send_cmd>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f040 811d 	bne.w	800b5be <USER_SPI_ioctl+0x2b2>
 800b384:	f107 030c 	add.w	r3, r7, #12
 800b388:	2110      	movs	r1, #16
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff fd10 	bl	800adb0 <rcvr_datablock>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 8113 	beq.w	800b5be <USER_SPI_ioctl+0x2b2>
  			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b398:	7b3b      	ldrb	r3, [r7, #12]
 800b39a:	099b      	lsrs	r3, r3, #6
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d111      	bne.n	800b3c6 <USER_SPI_ioctl+0xba>
  				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b3a2:	7d7b      	ldrb	r3, [r7, #21]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	7d3b      	ldrb	r3, [r7, #20]
 800b3a8:	021b      	lsls	r3, r3, #8
 800b3aa:	4413      	add	r3, r2
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	7cfb      	ldrb	r3, [r7, #19]
 800b3b0:	041b      	lsls	r3, r3, #16
 800b3b2:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800b3b6:	4413      	add	r3, r2
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	61fb      	str	r3, [r7, #28]
  				*(DWORD*)buff = csize << 10;
 800b3bc:	69fb      	ldr	r3, [r7, #28]
 800b3be:	029a      	lsls	r2, r3, #10
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	e028      	b.n	800b418 <USER_SPI_ioctl+0x10c>
  			} else {					/* SDC ver 1.XX or MMC ver 3 */
  				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b3c6:	7c7b      	ldrb	r3, [r7, #17]
 800b3c8:	f003 030f 	and.w	r3, r3, #15
 800b3cc:	b2da      	uxtb	r2, r3
 800b3ce:	7dbb      	ldrb	r3, [r7, #22]
 800b3d0:	09db      	lsrs	r3, r3, #7
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	4413      	add	r3, r2
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	7d7b      	ldrb	r3, [r7, #21]
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	f003 0306 	and.w	r3, r3, #6
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	4413      	add	r3, r2
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	3302      	adds	r3, #2
 800b3ea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b3ee:	7d3b      	ldrb	r3, [r7, #20]
 800b3f0:	099b      	lsrs	r3, r3, #6
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	7cfb      	ldrb	r3, [r7, #19]
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	441a      	add	r2, r3
 800b3fc:	7cbb      	ldrb	r3, [r7, #18]
 800b3fe:	029b      	lsls	r3, r3, #10
 800b400:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b404:	4413      	add	r3, r2
 800b406:	3301      	adds	r3, #1
 800b408:	61fb      	str	r3, [r7, #28]
  				*(DWORD*)buff = csize << (n - 9);
 800b40a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b40e:	3b09      	subs	r3, #9
 800b410:	69fa      	ldr	r2, [r7, #28]
 800b412:	409a      	lsls	r2, r3
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	601a      	str	r2, [r3, #0]
  			}
  			res = RES_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		}
  		break;
 800b41e:	e0ce      	b.n	800b5be <USER_SPI_ioctl+0x2b2>

  	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
  		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b420:	4b71      	ldr	r3, [pc, #452]	@ (800b5e8 <USER_SPI_ioctl+0x2dc>)
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d031      	beq.n	800b490 <USER_SPI_ioctl+0x184>
  			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b42c:	2100      	movs	r1, #0
 800b42e:	208d      	movs	r0, #141	@ 0x8d
 800b430:	f7ff fd19 	bl	800ae66 <send_cmd>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	f040 80c3 	bne.w	800b5c2 <USER_SPI_ioctl+0x2b6>
  				xchg_spi(0xFF);
 800b43c:	20ff      	movs	r0, #255	@ 0xff
 800b43e:	f7ff fc1f 	bl	800ac80 <xchg_spi>
  				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b442:	f107 030c 	add.w	r3, r7, #12
 800b446:	2110      	movs	r1, #16
 800b448:	4618      	mov	r0, r3
 800b44a:	f7ff fcb1 	bl	800adb0 <rcvr_datablock>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	f000 80b6 	beq.w	800b5c2 <USER_SPI_ioctl+0x2b6>
  					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b456:	2330      	movs	r3, #48	@ 0x30
 800b458:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b45c:	e007      	b.n	800b46e <USER_SPI_ioctl+0x162>
 800b45e:	20ff      	movs	r0, #255	@ 0xff
 800b460:	f7ff fc0e 	bl	800ac80 <xchg_spi>
 800b464:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b468:	3b01      	subs	r3, #1
 800b46a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800b46e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b472:	2b00      	cmp	r3, #0
 800b474:	d1f3      	bne.n	800b45e <USER_SPI_ioctl+0x152>
  					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b476:	7dbb      	ldrb	r3, [r7, #22]
 800b478:	091b      	lsrs	r3, r3, #4
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	461a      	mov	r2, r3
 800b47e:	2310      	movs	r3, #16
 800b480:	fa03 f202 	lsl.w	r2, r3, r2
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	601a      	str	r2, [r3, #0]
  					res = RES_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
  				}
  				res = RES_OK;
  			}
  		}
  		break;
 800b48e:	e098      	b.n	800b5c2 <USER_SPI_ioctl+0x2b6>
  			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b490:	2100      	movs	r1, #0
 800b492:	2009      	movs	r0, #9
 800b494:	f7ff fce7 	bl	800ae66 <send_cmd>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f040 8091 	bne.w	800b5c2 <USER_SPI_ioctl+0x2b6>
 800b4a0:	f107 030c 	add.w	r3, r7, #12
 800b4a4:	2110      	movs	r1, #16
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7ff fc82 	bl	800adb0 <rcvr_datablock>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f000 8087 	beq.w	800b5c2 <USER_SPI_ioctl+0x2b6>
  				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b4b4:	4b4c      	ldr	r3, [pc, #304]	@ (800b5e8 <USER_SPI_ioctl+0x2dc>)
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d012      	beq.n	800b4e6 <USER_SPI_ioctl+0x1da>
  					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b4c0:	7dbb      	ldrb	r3, [r7, #22]
 800b4c2:	005b      	lsls	r3, r3, #1
 800b4c4:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800b4c8:	7dfa      	ldrb	r2, [r7, #23]
 800b4ca:	09d2      	lsrs	r2, r2, #7
 800b4cc:	b2d2      	uxtb	r2, r2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	1c5a      	adds	r2, r3, #1
 800b4d2:	7e7b      	ldrb	r3, [r7, #25]
 800b4d4:	099b      	lsrs	r3, r3, #6
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	fa02 f303 	lsl.w	r3, r2, r3
 800b4de:	461a      	mov	r2, r3
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	e013      	b.n	800b50e <USER_SPI_ioctl+0x202>
  					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b4e6:	7dbb      	ldrb	r3, [r7, #22]
 800b4e8:	109b      	asrs	r3, r3, #2
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	f003 031f 	and.w	r3, r3, #31
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	7dfa      	ldrb	r2, [r7, #23]
 800b4f4:	00d2      	lsls	r2, r2, #3
 800b4f6:	f002 0218 	and.w	r2, r2, #24
 800b4fa:	7df9      	ldrb	r1, [r7, #23]
 800b4fc:	0949      	lsrs	r1, r1, #5
 800b4fe:	b2c9      	uxtb	r1, r1
 800b500:	440a      	add	r2, r1
 800b502:	3201      	adds	r2, #1
 800b504:	fb02 f303 	mul.w	r3, r2, r3
 800b508:	461a      	mov	r2, r3
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	601a      	str	r2, [r3, #0]
  				res = RES_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		break;
 800b514:	e055      	b.n	800b5c2 <USER_SPI_ioctl+0x2b6>

  	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
  		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b516:	4b34      	ldr	r3, [pc, #208]	@ (800b5e8 <USER_SPI_ioctl+0x2dc>)
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	f003 0306 	and.w	r3, r3, #6
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d051      	beq.n	800b5c6 <USER_SPI_ioctl+0x2ba>
  		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b522:	f107 020c 	add.w	r2, r7, #12
 800b526:	79fb      	ldrb	r3, [r7, #7]
 800b528:	210b      	movs	r1, #11
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7ff feee 	bl	800b30c <USER_SPI_ioctl>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d149      	bne.n	800b5ca <USER_SPI_ioctl+0x2be>
  		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b536:	7b3b      	ldrb	r3, [r7, #12]
 800b538:	099b      	lsrs	r3, r3, #6
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d104      	bne.n	800b54a <USER_SPI_ioctl+0x23e>
 800b540:	7dbb      	ldrb	r3, [r7, #22]
 800b542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b546:	2b00      	cmp	r3, #0
 800b548:	d041      	beq.n	800b5ce <USER_SPI_ioctl+0x2c2>
  		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	623b      	str	r3, [r7, #32]
 800b54e:	6a3b      	ldr	r3, [r7, #32]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	627b      	str	r3, [r7, #36]	@ 0x24
  		if (!(CardType & CT_BLOCK)) {
 800b55a:	4b23      	ldr	r3, [pc, #140]	@ (800b5e8 <USER_SPI_ioctl+0x2dc>)
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	f003 0308 	and.w	r3, r3, #8
 800b562:	2b00      	cmp	r3, #0
 800b564:	d105      	bne.n	800b572 <USER_SPI_ioctl+0x266>
  			st *= 512; ed *= 512;
 800b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b568:	025b      	lsls	r3, r3, #9
 800b56a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b56e:	025b      	lsls	r3, r3, #9
 800b570:	627b      	str	r3, [r7, #36]	@ 0x24
  		}
  		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b572:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b574:	2020      	movs	r0, #32
 800b576:	f7ff fc76 	bl	800ae66 <send_cmd>
 800b57a:	4603      	mov	r3, r0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d128      	bne.n	800b5d2 <USER_SPI_ioctl+0x2c6>
 800b580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b582:	2021      	movs	r0, #33	@ 0x21
 800b584:	f7ff fc6f 	bl	800ae66 <send_cmd>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d121      	bne.n	800b5d2 <USER_SPI_ioctl+0x2c6>
 800b58e:	2100      	movs	r1, #0
 800b590:	2026      	movs	r0, #38	@ 0x26
 800b592:	f7ff fc68 	bl	800ae66 <send_cmd>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d11a      	bne.n	800b5d2 <USER_SPI_ioctl+0x2c6>
 800b59c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800b5a0:	f7ff fbbb 	bl	800ad1a <wait_ready>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d013      	beq.n	800b5d2 <USER_SPI_ioctl+0x2c6>
  			res = RES_OK;	/* FatFs does not check result of this command */
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		}
  		break;
 800b5b0:	e00f      	b.n	800b5d2 <USER_SPI_ioctl+0x2c6>

  	default:
  		res = RES_PARERR;
 800b5b2:	2304      	movs	r3, #4
 800b5b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b5b8:	e00c      	b.n	800b5d4 <USER_SPI_ioctl+0x2c8>
  		break;
 800b5ba:	bf00      	nop
 800b5bc:	e00a      	b.n	800b5d4 <USER_SPI_ioctl+0x2c8>
  		break;
 800b5be:	bf00      	nop
 800b5c0:	e008      	b.n	800b5d4 <USER_SPI_ioctl+0x2c8>
  		break;
 800b5c2:	bf00      	nop
 800b5c4:	e006      	b.n	800b5d4 <USER_SPI_ioctl+0x2c8>
  		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b5c6:	bf00      	nop
 800b5c8:	e004      	b.n	800b5d4 <USER_SPI_ioctl+0x2c8>
  		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b5ca:	bf00      	nop
 800b5cc:	e002      	b.n	800b5d4 <USER_SPI_ioctl+0x2c8>
  		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b5ce:	bf00      	nop
 800b5d0:	e000      	b.n	800b5d4 <USER_SPI_ioctl+0x2c8>
  		break;
 800b5d2:	bf00      	nop
  	}

  	despiselect();
 800b5d4:	f7ff fbc4 	bl	800ad60 <despiselect>

  	return res;
 800b5d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
  }
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3730      	adds	r7, #48	@ 0x30
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}
 800b5e4:	20000054 	.word	0x20000054
 800b5e8:	20000abc 	.word	0x20000abc

0800b5ec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b5f6:	79fb      	ldrb	r3, [r7, #7]
 800b5f8:	4a08      	ldr	r2, [pc, #32]	@ (800b61c <disk_status+0x30>)
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	4413      	add	r3, r2
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	79fa      	ldrb	r2, [r7, #7]
 800b604:	4905      	ldr	r1, [pc, #20]	@ (800b61c <disk_status+0x30>)
 800b606:	440a      	add	r2, r1
 800b608:	7a12      	ldrb	r2, [r2, #8]
 800b60a:	4610      	mov	r0, r2
 800b60c:	4798      	blx	r3
 800b60e:	4603      	mov	r3, r0
 800b610:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b612:	7bfb      	ldrb	r3, [r7, #15]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	20000af0 	.word	0x20000af0

0800b620 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b084      	sub	sp, #16
 800b624:	af00      	add	r7, sp, #0
 800b626:	4603      	mov	r3, r0
 800b628:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b62a:	2300      	movs	r3, #0
 800b62c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b62e:	79fb      	ldrb	r3, [r7, #7]
 800b630:	4a0d      	ldr	r2, [pc, #52]	@ (800b668 <disk_initialize+0x48>)
 800b632:	5cd3      	ldrb	r3, [r2, r3]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d111      	bne.n	800b65c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b638:	79fb      	ldrb	r3, [r7, #7]
 800b63a:	4a0b      	ldr	r2, [pc, #44]	@ (800b668 <disk_initialize+0x48>)
 800b63c:	2101      	movs	r1, #1
 800b63e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	4a09      	ldr	r2, [pc, #36]	@ (800b668 <disk_initialize+0x48>)
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	79fa      	ldrb	r2, [r7, #7]
 800b64e:	4906      	ldr	r1, [pc, #24]	@ (800b668 <disk_initialize+0x48>)
 800b650:	440a      	add	r2, r1
 800b652:	7a12      	ldrb	r2, [r2, #8]
 800b654:	4610      	mov	r0, r2
 800b656:	4798      	blx	r3
 800b658:	4603      	mov	r3, r0
 800b65a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20000af0 	.word	0x20000af0

0800b66c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b66c:	b590      	push	{r4, r7, lr}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	60b9      	str	r1, [r7, #8]
 800b674:	607a      	str	r2, [r7, #4]
 800b676:	603b      	str	r3, [r7, #0]
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	4a0a      	ldr	r2, [pc, #40]	@ (800b6a8 <disk_read+0x3c>)
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	689c      	ldr	r4, [r3, #8]
 800b688:	7bfb      	ldrb	r3, [r7, #15]
 800b68a:	4a07      	ldr	r2, [pc, #28]	@ (800b6a8 <disk_read+0x3c>)
 800b68c:	4413      	add	r3, r2
 800b68e:	7a18      	ldrb	r0, [r3, #8]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	68b9      	ldr	r1, [r7, #8]
 800b696:	47a0      	blx	r4
 800b698:	4603      	mov	r3, r0
 800b69a:	75fb      	strb	r3, [r7, #23]
  return res;
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	371c      	adds	r7, #28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd90      	pop	{r4, r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20000af0 	.word	0x20000af0

0800b6ac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b6ac:	b590      	push	{r4, r7, lr}
 800b6ae:	b087      	sub	sp, #28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60b9      	str	r1, [r7, #8]
 800b6b4:	607a      	str	r2, [r7, #4]
 800b6b6:	603b      	str	r3, [r7, #0]
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
 800b6be:	4a0a      	ldr	r2, [pc, #40]	@ (800b6e8 <disk_write+0x3c>)
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4413      	add	r3, r2
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	68dc      	ldr	r4, [r3, #12]
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	4a07      	ldr	r2, [pc, #28]	@ (800b6e8 <disk_write+0x3c>)
 800b6cc:	4413      	add	r3, r2
 800b6ce:	7a18      	ldrb	r0, [r3, #8]
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	68b9      	ldr	r1, [r7, #8]
 800b6d6:	47a0      	blx	r4
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75fb      	strb	r3, [r7, #23]
  return res;
 800b6dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	371c      	adds	r7, #28
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd90      	pop	{r4, r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20000af0 	.word	0x20000af0

0800b6ec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	603a      	str	r2, [r7, #0]
 800b6f6:	71fb      	strb	r3, [r7, #7]
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	4a09      	ldr	r2, [pc, #36]	@ (800b724 <disk_ioctl+0x38>)
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4413      	add	r3, r2
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	691b      	ldr	r3, [r3, #16]
 800b708:	79fa      	ldrb	r2, [r7, #7]
 800b70a:	4906      	ldr	r1, [pc, #24]	@ (800b724 <disk_ioctl+0x38>)
 800b70c:	440a      	add	r2, r1
 800b70e:	7a10      	ldrb	r0, [r2, #8]
 800b710:	79b9      	ldrb	r1, [r7, #6]
 800b712:	683a      	ldr	r2, [r7, #0]
 800b714:	4798      	blx	r3
 800b716:	4603      	mov	r3, r0
 800b718:	73fb      	strb	r3, [r7, #15]
  return res;
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	20000af0 	.word	0x20000af0

0800b728 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3301      	adds	r3, #1
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b73c:	021b      	lsls	r3, r3, #8
 800b73e:	b21a      	sxth	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	b21b      	sxth	r3, r3
 800b746:	4313      	orrs	r3, r2
 800b748:	b21b      	sxth	r3, r3
 800b74a:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b74c:	89fb      	ldrh	r3, [r7, #14]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b75a:	b480      	push	{r7}
 800b75c:	b085      	sub	sp, #20
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	3303      	adds	r3, #3
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	021b      	lsls	r3, r3, #8
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	3202      	adds	r2, #2
 800b772:	7812      	ldrb	r2, [r2, #0]
 800b774:	4313      	orrs	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	021b      	lsls	r3, r3, #8
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	3201      	adds	r2, #1
 800b780:	7812      	ldrb	r2, [r2, #0]
 800b782:	4313      	orrs	r3, r2
 800b784:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	021b      	lsls	r3, r3, #8
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	7812      	ldrb	r2, [r2, #0]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]
	return rv;
 800b792:	68fb      	ldr	r3, [r7, #12]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	1c5a      	adds	r2, r3, #1
 800b7b0:	607a      	str	r2, [r7, #4]
 800b7b2:	887a      	ldrh	r2, [r7, #2]
 800b7b4:	b2d2      	uxtb	r2, r2
 800b7b6:	701a      	strb	r2, [r3, #0]
 800b7b8:	887b      	ldrh	r3, [r7, #2]
 800b7ba:	0a1b      	lsrs	r3, r3, #8
 800b7bc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	1c5a      	adds	r2, r3, #1
 800b7c2:	607a      	str	r2, [r7, #4]
 800b7c4:	887a      	ldrh	r2, [r7, #2]
 800b7c6:	b2d2      	uxtb	r2, r2
 800b7c8:	701a      	strb	r2, [r3, #0]
}
 800b7ca:	bf00      	nop
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
 800b7de:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	607a      	str	r2, [r7, #4]
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	b2d2      	uxtb	r2, r2
 800b7ea:	701a      	strb	r2, [r3, #0]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	0a1b      	lsrs	r3, r3, #8
 800b7f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	607a      	str	r2, [r7, #4]
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	b2d2      	uxtb	r2, r2
 800b7fc:	701a      	strb	r2, [r3, #0]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	0a1b      	lsrs	r3, r3, #8
 800b802:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	1c5a      	adds	r2, r3, #1
 800b808:	607a      	str	r2, [r7, #4]
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	b2d2      	uxtb	r2, r2
 800b80e:	701a      	strb	r2, [r3, #0]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	0a1b      	lsrs	r3, r3, #8
 800b814:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	607a      	str	r2, [r7, #4]
 800b81c:	683a      	ldr	r2, [r7, #0]
 800b81e:	b2d2      	uxtb	r2, r2
 800b820:	701a      	strb	r2, [r3, #0]
}
 800b822:	bf00      	nop
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b82e:	b480      	push	{r7}
 800b830:	b087      	sub	sp, #28
 800b832:	af00      	add	r7, sp, #0
 800b834:	60f8      	str	r0, [r7, #12]
 800b836:	60b9      	str	r1, [r7, #8]
 800b838:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00d      	beq.n	800b864 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	1c53      	adds	r3, r2, #1
 800b84c:	613b      	str	r3, [r7, #16]
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	1c59      	adds	r1, r3, #1
 800b852:	6179      	str	r1, [r7, #20]
 800b854:	7812      	ldrb	r2, [r2, #0]
 800b856:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	607b      	str	r3, [r7, #4]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1f1      	bne.n	800b848 <mem_cpy+0x1a>
	}
}
 800b864:	bf00      	nop
 800b866:	371c      	adds	r7, #28
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b870:	b480      	push	{r7}
 800b872:	b087      	sub	sp, #28
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	617a      	str	r2, [r7, #20]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	b2d2      	uxtb	r2, r2
 800b88a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3b01      	subs	r3, #1
 800b890:	607b      	str	r3, [r7, #4]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1f3      	bne.n	800b880 <mem_set+0x10>
}
 800b898:	bf00      	nop
 800b89a:	bf00      	nop
 800b89c:	371c      	adds	r7, #28
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a4:	4770      	bx	lr

0800b8a6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b8a6:	b480      	push	{r7}
 800b8a8:	b089      	sub	sp, #36	@ 0x24
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	61fb      	str	r3, [r7, #28]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	61fa      	str	r2, [r7, #28]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	1c5a      	adds	r2, r3, #1
 800b8cc:	61ba      	str	r2, [r7, #24]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	1acb      	subs	r3, r1, r3
 800b8d2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	607b      	str	r3, [r7, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <mem_cmp+0x40>
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d0eb      	beq.n	800b8be <mem_cmp+0x18>

	return r;
 800b8e6:	697b      	ldr	r3, [r7, #20]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3724      	adds	r7, #36	@ 0x24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b8fe:	e002      	b.n	800b906 <chk_chr+0x12>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	3301      	adds	r3, #1
 800b904:	607b      	str	r3, [r7, #4]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d005      	beq.n	800b91a <chk_chr+0x26>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	461a      	mov	r2, r3
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	4293      	cmp	r3, r2
 800b918:	d1f2      	bne.n	800b900 <chk_chr+0xc>
	return *str;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	781b      	ldrb	r3, [r3, #0]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b082      	sub	sp, #8
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d009      	beq.n	800b94c <lock_fs+0x22>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f002 fb7b 	bl	800e038 <ff_req_grant>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <lock_fs+0x22>
 800b948:	2301      	movs	r3, #1
 800b94a:	e000      	b.n	800b94e <lock_fs+0x24>
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}

0800b956 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800b956:	b580      	push	{r7, lr}
 800b958:	b082      	sub	sp, #8
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00d      	beq.n	800b984 <unlock_fs+0x2e>
 800b968:	78fb      	ldrb	r3, [r7, #3]
 800b96a:	2b0c      	cmp	r3, #12
 800b96c:	d00a      	beq.n	800b984 <unlock_fs+0x2e>
 800b96e:	78fb      	ldrb	r3, [r7, #3]
 800b970:	2b0b      	cmp	r3, #11
 800b972:	d007      	beq.n	800b984 <unlock_fs+0x2e>
 800b974:	78fb      	ldrb	r3, [r7, #3]
 800b976:	2b0f      	cmp	r3, #15
 800b978:	d004      	beq.n	800b984 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	4618      	mov	r0, r3
 800b980:	f002 fb6f 	bl	800e062 <ff_rel_grant>
	}
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b996:	2300      	movs	r3, #0
 800b998:	60bb      	str	r3, [r7, #8]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	60fb      	str	r3, [r7, #12]
 800b99e:	e029      	b.n	800b9f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b9a0:	4a27      	ldr	r2, [pc, #156]	@ (800ba40 <chk_lock+0xb4>)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	011b      	lsls	r3, r3, #4
 800b9a6:	4413      	add	r3, r2
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d01d      	beq.n	800b9ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9ae:	4a24      	ldr	r2, [pc, #144]	@ (800ba40 <chk_lock+0xb4>)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	011b      	lsls	r3, r3, #4
 800b9b4:	4413      	add	r3, r2
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d116      	bne.n	800b9ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b9c0:	4a1f      	ldr	r2, [pc, #124]	@ (800ba40 <chk_lock+0xb4>)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	011b      	lsls	r3, r3, #4
 800b9c6:	4413      	add	r3, r2
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d10c      	bne.n	800b9ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9d4:	4a1a      	ldr	r2, [pc, #104]	@ (800ba40 <chk_lock+0xb4>)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	011b      	lsls	r3, r3, #4
 800b9da:	4413      	add	r3, r2
 800b9dc:	3308      	adds	r3, #8
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d102      	bne.n	800b9ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b9e8:	e007      	b.n	800b9fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d9d2      	bls.n	800b9a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d109      	bne.n	800ba14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <chk_lock+0x80>
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d101      	bne.n	800ba10 <chk_lock+0x84>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	e010      	b.n	800ba32 <chk_lock+0xa6>
 800ba10:	2312      	movs	r3, #18
 800ba12:	e00e      	b.n	800ba32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d108      	bne.n	800ba2c <chk_lock+0xa0>
 800ba1a:	4a09      	ldr	r2, [pc, #36]	@ (800ba40 <chk_lock+0xb4>)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	011b      	lsls	r3, r3, #4
 800ba20:	4413      	add	r3, r2
 800ba22:	330c      	adds	r3, #12
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba2a:	d101      	bne.n	800ba30 <chk_lock+0xa4>
 800ba2c:	2310      	movs	r3, #16
 800ba2e:	e000      	b.n	800ba32 <chk_lock+0xa6>
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	20000ad0 	.word	0x20000ad0

0800ba44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	607b      	str	r3, [r7, #4]
 800ba4e:	e002      	b.n	800ba56 <enq_lock+0x12>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3301      	adds	r3, #1
 800ba54:	607b      	str	r3, [r7, #4]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d806      	bhi.n	800ba6a <enq_lock+0x26>
 800ba5c:	4a09      	ldr	r2, [pc, #36]	@ (800ba84 <enq_lock+0x40>)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	011b      	lsls	r3, r3, #4
 800ba62:	4413      	add	r3, r2
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1f2      	bne.n	800ba50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	bf14      	ite	ne
 800ba70:	2301      	movne	r3, #1
 800ba72:	2300      	moveq	r3, #0
 800ba74:	b2db      	uxtb	r3, r3
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
 800ba82:	bf00      	nop
 800ba84:	20000ad0 	.word	0x20000ad0

0800ba88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ba92:	2300      	movs	r3, #0
 800ba94:	60fb      	str	r3, [r7, #12]
 800ba96:	e01f      	b.n	800bad8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ba98:	4a41      	ldr	r2, [pc, #260]	@ (800bba0 <inc_lock+0x118>)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	011b      	lsls	r3, r3, #4
 800ba9e:	4413      	add	r3, r2
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d113      	bne.n	800bad2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800baaa:	4a3d      	ldr	r2, [pc, #244]	@ (800bba0 <inc_lock+0x118>)
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	011b      	lsls	r3, r3, #4
 800bab0:	4413      	add	r3, r2
 800bab2:	3304      	adds	r3, #4
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800baba:	429a      	cmp	r2, r3
 800babc:	d109      	bne.n	800bad2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800babe:	4a38      	ldr	r2, [pc, #224]	@ (800bba0 <inc_lock+0x118>)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	011b      	lsls	r3, r3, #4
 800bac4:	4413      	add	r3, r2
 800bac6:	3308      	adds	r3, #8
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bace:	429a      	cmp	r2, r3
 800bad0:	d006      	beq.n	800bae0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3301      	adds	r3, #1
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d9dc      	bls.n	800ba98 <inc_lock+0x10>
 800bade:	e000      	b.n	800bae2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bae0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d132      	bne.n	800bb4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bae8:	2300      	movs	r3, #0
 800baea:	60fb      	str	r3, [r7, #12]
 800baec:	e002      	b.n	800baf4 <inc_lock+0x6c>
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	3301      	adds	r3, #1
 800baf2:	60fb      	str	r3, [r7, #12]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d806      	bhi.n	800bb08 <inc_lock+0x80>
 800bafa:	4a29      	ldr	r2, [pc, #164]	@ (800bba0 <inc_lock+0x118>)
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	011b      	lsls	r3, r3, #4
 800bb00:	4413      	add	r3, r2
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1f2      	bne.n	800baee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d101      	bne.n	800bb12 <inc_lock+0x8a>
 800bb0e:	2300      	movs	r3, #0
 800bb10:	e040      	b.n	800bb94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	4922      	ldr	r1, [pc, #136]	@ (800bba0 <inc_lock+0x118>)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	011b      	lsls	r3, r3, #4
 800bb1c:	440b      	add	r3, r1
 800bb1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689a      	ldr	r2, [r3, #8]
 800bb24:	491e      	ldr	r1, [pc, #120]	@ (800bba0 <inc_lock+0x118>)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	011b      	lsls	r3, r3, #4
 800bb2a:	440b      	add	r3, r1
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	695a      	ldr	r2, [r3, #20]
 800bb34:	491a      	ldr	r1, [pc, #104]	@ (800bba0 <inc_lock+0x118>)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	011b      	lsls	r3, r3, #4
 800bb3a:	440b      	add	r3, r1
 800bb3c:	3308      	adds	r3, #8
 800bb3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bb40:	4a17      	ldr	r2, [pc, #92]	@ (800bba0 <inc_lock+0x118>)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	011b      	lsls	r3, r3, #4
 800bb46:	4413      	add	r3, r2
 800bb48:	330c      	adds	r3, #12
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d009      	beq.n	800bb68 <inc_lock+0xe0>
 800bb54:	4a12      	ldr	r2, [pc, #72]	@ (800bba0 <inc_lock+0x118>)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	011b      	lsls	r3, r3, #4
 800bb5a:	4413      	add	r3, r2
 800bb5c:	330c      	adds	r3, #12
 800bb5e:	881b      	ldrh	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <inc_lock+0xe0>
 800bb64:	2300      	movs	r3, #0
 800bb66:	e015      	b.n	800bb94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d108      	bne.n	800bb80 <inc_lock+0xf8>
 800bb6e:	4a0c      	ldr	r2, [pc, #48]	@ (800bba0 <inc_lock+0x118>)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	011b      	lsls	r3, r3, #4
 800bb74:	4413      	add	r3, r2
 800bb76:	330c      	adds	r3, #12
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	e001      	b.n	800bb84 <inc_lock+0xfc>
 800bb80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb84:	4906      	ldr	r1, [pc, #24]	@ (800bba0 <inc_lock+0x118>)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	011b      	lsls	r3, r3, #4
 800bb8a:	440b      	add	r3, r1
 800bb8c:	330c      	adds	r3, #12
 800bb8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3301      	adds	r3, #1
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	20000ad0 	.word	0x20000ad0

0800bba4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	607b      	str	r3, [r7, #4]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d825      	bhi.n	800bc04 <dec_lock+0x60>
		n = Files[i].ctr;
 800bbb8:	4a17      	ldr	r2, [pc, #92]	@ (800bc18 <dec_lock+0x74>)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	011b      	lsls	r3, r3, #4
 800bbbe:	4413      	add	r3, r2
 800bbc0:	330c      	adds	r3, #12
 800bbc2:	881b      	ldrh	r3, [r3, #0]
 800bbc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bbc6:	89fb      	ldrh	r3, [r7, #14]
 800bbc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bbcc:	d101      	bne.n	800bbd2 <dec_lock+0x2e>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bbd2:	89fb      	ldrh	r3, [r7, #14]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <dec_lock+0x3a>
 800bbd8:	89fb      	ldrh	r3, [r7, #14]
 800bbda:	3b01      	subs	r3, #1
 800bbdc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bbde:	4a0e      	ldr	r2, [pc, #56]	@ (800bc18 <dec_lock+0x74>)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	011b      	lsls	r3, r3, #4
 800bbe4:	4413      	add	r3, r2
 800bbe6:	330c      	adds	r3, #12
 800bbe8:	89fa      	ldrh	r2, [r7, #14]
 800bbea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bbec:	89fb      	ldrh	r3, [r7, #14]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d105      	bne.n	800bbfe <dec_lock+0x5a>
 800bbf2:	4a09      	ldr	r2, [pc, #36]	@ (800bc18 <dec_lock+0x74>)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	011b      	lsls	r3, r3, #4
 800bbf8:	4413      	add	r3, r2
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	737b      	strb	r3, [r7, #13]
 800bc02:	e001      	b.n	800bc08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bc04:	2302      	movs	r3, #2
 800bc06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bc08:	7b7b      	ldrb	r3, [r7, #13]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3714      	adds	r7, #20
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	20000ad0 	.word	0x20000ad0

0800bc1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bc24:	2300      	movs	r3, #0
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	e010      	b.n	800bc4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bc2a:	4a0d      	ldr	r2, [pc, #52]	@ (800bc60 <clear_lock+0x44>)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	4413      	add	r3, r2
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d105      	bne.n	800bc46 <clear_lock+0x2a>
 800bc3a:	4a09      	ldr	r2, [pc, #36]	@ (800bc60 <clear_lock+0x44>)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	011b      	lsls	r3, r3, #4
 800bc40:	4413      	add	r3, r2
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	60fb      	str	r3, [r7, #12]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	d9eb      	bls.n	800bc2a <clear_lock+0xe>
	}
}
 800bc52:	bf00      	nop
 800bc54:	bf00      	nop
 800bc56:	3714      	adds	r7, #20
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr
 800bc60:	20000ad0 	.word	0x20000ad0

0800bc64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	78db      	ldrb	r3, [r3, #3]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d034      	beq.n	800bce2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	7858      	ldrb	r0, [r3, #1]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bc88:	2301      	movs	r3, #1
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	f7ff fd0e 	bl	800b6ac <disk_write>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d002      	beq.n	800bc9c <sync_window+0x38>
			res = FR_DISK_ERR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	73fb      	strb	r3, [r7, #15]
 800bc9a:	e022      	b.n	800bce2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bca6:	697a      	ldr	r2, [r7, #20]
 800bca8:	1ad2      	subs	r2, r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	69db      	ldr	r3, [r3, #28]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d217      	bcs.n	800bce2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	789b      	ldrb	r3, [r3, #2]
 800bcb6:	613b      	str	r3, [r7, #16]
 800bcb8:	e010      	b.n	800bcdc <sync_window+0x78>
					wsect += fs->fsize;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	7858      	ldrb	r0, [r3, #1]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bcce:	2301      	movs	r3, #1
 800bcd0:	697a      	ldr	r2, [r7, #20]
 800bcd2:	f7ff fceb 	bl	800b6ac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	613b      	str	r3, [r7, #16]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d8eb      	bhi.n	800bcba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3718      	adds	r7, #24
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcfe:	683a      	ldr	r2, [r7, #0]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d01b      	beq.n	800bd3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff ffad 	bl	800bc64 <sync_window>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d113      	bne.n	800bd3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	7858      	ldrb	r0, [r3, #1]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bd1e:	2301      	movs	r3, #1
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	f7ff fca3 	bl	800b66c <disk_read>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d004      	beq.n	800bd36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bd2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800bd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
	...

0800bd48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff ff87 	bl	800bc64 <sync_window>
 800bd56:	4603      	mov	r3, r0
 800bd58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d158      	bne.n	800be12 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	d148      	bne.n	800bdfa <sync_fs+0xb2>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	791b      	ldrb	r3, [r3, #4]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d144      	bne.n	800bdfa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	3334      	adds	r3, #52	@ 0x34
 800bd74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7ff fd78 	bl	800b870 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3334      	adds	r3, #52	@ 0x34
 800bd84:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bd88:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7ff fd07 	bl	800b7a0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3334      	adds	r3, #52	@ 0x34
 800bd96:	4921      	ldr	r1, [pc, #132]	@ (800be1c <sync_fs+0xd4>)
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff fd1c 	bl	800b7d6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	3334      	adds	r3, #52	@ 0x34
 800bda2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bda6:	491e      	ldr	r1, [pc, #120]	@ (800be20 <sync_fs+0xd8>)
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff fd14 	bl	800b7d6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	3334      	adds	r3, #52	@ 0x34
 800bdb2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	f7ff fd0a 	bl	800b7d6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	3334      	adds	r3, #52	@ 0x34
 800bdc6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	4619      	mov	r1, r3
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	f7ff fd00 	bl	800b7d6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7858      	ldrb	r0, [r3, #1]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdee:	2301      	movs	r3, #1
 800bdf0:	f7ff fc5c 	bl	800b6ac <disk_write>
			fs->fsi_flag = 0;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	785b      	ldrb	r3, [r3, #1]
 800bdfe:	2200      	movs	r2, #0
 800be00:	2100      	movs	r1, #0
 800be02:	4618      	mov	r0, r3
 800be04:	f7ff fc72 	bl	800b6ec <disk_ioctl>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <sync_fs+0xca>
 800be0e:	2301      	movs	r3, #1
 800be10:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800be12:	7bfb      	ldrb	r3, [r7, #15]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3710      	adds	r7, #16
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	41615252 	.word	0x41615252
 800be20:	61417272 	.word	0x61417272

0800be24 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	3b02      	subs	r3, #2
 800be32:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	3b02      	subs	r3, #2
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d301      	bcc.n	800be44 <clust2sect+0x20>
 800be40:	2300      	movs	r3, #0
 800be42:	e008      	b.n	800be56 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	895b      	ldrh	r3, [r3, #10]
 800be48:	461a      	mov	r2, r3
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	fb03 f202 	mul.w	r2, r3, r2
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be54:	4413      	add	r3, r2
}
 800be56:	4618      	mov	r0, r3
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b086      	sub	sp, #24
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d904      	bls.n	800be82 <get_fat+0x20>
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d302      	bcc.n	800be88 <get_fat+0x26>
		val = 1;	/* Internal error */
 800be82:	2301      	movs	r3, #1
 800be84:	617b      	str	r3, [r7, #20]
 800be86:	e08e      	b.n	800bfa6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800be88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be8c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	2b03      	cmp	r3, #3
 800be94:	d061      	beq.n	800bf5a <get_fat+0xf8>
 800be96:	2b03      	cmp	r3, #3
 800be98:	dc7b      	bgt.n	800bf92 <get_fat+0x130>
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d002      	beq.n	800bea4 <get_fat+0x42>
 800be9e:	2b02      	cmp	r3, #2
 800bea0:	d041      	beq.n	800bf26 <get_fat+0xc4>
 800bea2:	e076      	b.n	800bf92 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	60fb      	str	r3, [r7, #12]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	085b      	lsrs	r3, r3, #1
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	4413      	add	r3, r2
 800beb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	0a5b      	lsrs	r3, r3, #9
 800beba:	4413      	add	r3, r2
 800bebc:	4619      	mov	r1, r3
 800bebe:	6938      	ldr	r0, [r7, #16]
 800bec0:	f7ff ff14 	bl	800bcec <move_window>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d166      	bne.n	800bf98 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	1c5a      	adds	r2, r3, #1
 800bece:	60fa      	str	r2, [r7, #12]
 800bed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	4413      	add	r3, r2
 800bed8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bedc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	0a5b      	lsrs	r3, r3, #9
 800bee6:	4413      	add	r3, r2
 800bee8:	4619      	mov	r1, r3
 800beea:	6938      	ldr	r0, [r7, #16]
 800beec:	f7ff fefe 	bl	800bcec <move_window>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d152      	bne.n	800bf9c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	4413      	add	r3, r2
 800bf00:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf04:	021b      	lsls	r3, r3, #8
 800bf06:	68ba      	ldr	r2, [r7, #8]
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d002      	beq.n	800bf1c <get_fat+0xba>
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	091b      	lsrs	r3, r3, #4
 800bf1a:	e002      	b.n	800bf22 <get_fat+0xc0>
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf22:	617b      	str	r3, [r7, #20]
			break;
 800bf24:	e03f      	b.n	800bfa6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	0a1b      	lsrs	r3, r3, #8
 800bf2e:	4413      	add	r3, r2
 800bf30:	4619      	mov	r1, r3
 800bf32:	6938      	ldr	r0, [r7, #16]
 800bf34:	f7ff feda 	bl	800bcec <move_window>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d130      	bne.n	800bfa0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bf4c:	4413      	add	r3, r2
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7ff fbea 	bl	800b728 <ld_word>
 800bf54:	4603      	mov	r3, r0
 800bf56:	617b      	str	r3, [r7, #20]
			break;
 800bf58:	e025      	b.n	800bfa6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	09db      	lsrs	r3, r3, #7
 800bf62:	4413      	add	r3, r2
 800bf64:	4619      	mov	r1, r3
 800bf66:	6938      	ldr	r0, [r7, #16]
 800bf68:	f7ff fec0 	bl	800bcec <move_window>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d118      	bne.n	800bfa4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bf80:	4413      	add	r3, r2
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff fbe9 	bl	800b75a <ld_dword>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bf8e:	617b      	str	r3, [r7, #20]
			break;
 800bf90:	e009      	b.n	800bfa6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bf92:	2301      	movs	r3, #1
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e006      	b.n	800bfa6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf98:	bf00      	nop
 800bf9a:	e004      	b.n	800bfa6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bf9c:	bf00      	nop
 800bf9e:	e002      	b.n	800bfa6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bfa0:	bf00      	nop
 800bfa2:	e000      	b.n	800bfa6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bfa4:	bf00      	nop
		}
	}

	return val;
 800bfa6:	697b      	ldr	r3, [r7, #20]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bfb0:	b590      	push	{r4, r7, lr}
 800bfb2:	b089      	sub	sp, #36	@ 0x24
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	f240 80d9 	bls.w	800c17a <put_fat+0x1ca>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	699b      	ldr	r3, [r3, #24]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	f080 80d3 	bcs.w	800c17a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	2b03      	cmp	r3, #3
 800bfda:	f000 8096 	beq.w	800c10a <put_fat+0x15a>
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	f300 80cb 	bgt.w	800c17a <put_fat+0x1ca>
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d002      	beq.n	800bfee <put_fat+0x3e>
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d06e      	beq.n	800c0ca <put_fat+0x11a>
 800bfec:	e0c5      	b.n	800c17a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	61bb      	str	r3, [r7, #24]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	085b      	lsrs	r3, r3, #1
 800bff6:	69ba      	ldr	r2, [r7, #24]
 800bff8:	4413      	add	r3, r2
 800bffa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	0a5b      	lsrs	r3, r3, #9
 800c004:	4413      	add	r3, r2
 800c006:	4619      	mov	r1, r3
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f7ff fe6f 	bl	800bcec <move_window>
 800c00e:	4603      	mov	r3, r0
 800c010:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c012:	7ffb      	ldrb	r3, [r7, #31]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f040 80a9 	bne.w	800c16c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	1c59      	adds	r1, r3, #1
 800c024:	61b9      	str	r1, [r7, #24]
 800c026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c02a:	4413      	add	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00d      	beq.n	800c054 <put_fat+0xa4>
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	b25b      	sxtb	r3, r3
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	b25a      	sxtb	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	b25b      	sxtb	r3, r3
 800c048:	011b      	lsls	r3, r3, #4
 800c04a:	b25b      	sxtb	r3, r3
 800c04c:	4313      	orrs	r3, r2
 800c04e:	b25b      	sxtb	r3, r3
 800c050:	b2db      	uxtb	r3, r3
 800c052:	e001      	b.n	800c058 <put_fat+0xa8>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	b2db      	uxtb	r3, r3
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2201      	movs	r2, #1
 800c060:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	0a5b      	lsrs	r3, r3, #9
 800c06a:	4413      	add	r3, r2
 800c06c:	4619      	mov	r1, r3
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff fe3c 	bl	800bcec <move_window>
 800c074:	4603      	mov	r3, r0
 800c076:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c078:	7ffb      	ldrb	r3, [r7, #31]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d178      	bne.n	800c170 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08a:	4413      	add	r3, r2
 800c08c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	f003 0301 	and.w	r3, r3, #1
 800c094:	2b00      	cmp	r3, #0
 800c096:	d003      	beq.n	800c0a0 <put_fat+0xf0>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	091b      	lsrs	r3, r3, #4
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	e00e      	b.n	800c0be <put_fat+0x10e>
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	b25b      	sxtb	r3, r3
 800c0a6:	f023 030f 	bic.w	r3, r3, #15
 800c0aa:	b25a      	sxtb	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	0a1b      	lsrs	r3, r3, #8
 800c0b0:	b25b      	sxtb	r3, r3
 800c0b2:	f003 030f 	and.w	r3, r3, #15
 800c0b6:	b25b      	sxtb	r3, r3
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	b25b      	sxtb	r3, r3
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	70da      	strb	r2, [r3, #3]
			break;
 800c0c8:	e057      	b.n	800c17a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	0a1b      	lsrs	r3, r3, #8
 800c0d2:	4413      	add	r3, r2
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f7ff fe08 	bl	800bcec <move_window>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c0e0:	7ffb      	ldrb	r3, [r7, #31]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d146      	bne.n	800c174 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	005b      	lsls	r3, r3, #1
 800c0f0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800c0f4:	4413      	add	r3, r2
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	b292      	uxth	r2, r2
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fb4f 	bl	800b7a0 <st_word>
			fs->wflag = 1;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2201      	movs	r2, #1
 800c106:	70da      	strb	r2, [r3, #3]
			break;
 800c108:	e037      	b.n	800c17a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	09db      	lsrs	r3, r3, #7
 800c112:	4413      	add	r3, r2
 800c114:	4619      	mov	r1, r3
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7ff fde8 	bl	800bcec <move_window>
 800c11c:	4603      	mov	r3, r0
 800c11e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c120:	7ffb      	ldrb	r3, [r7, #31]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d128      	bne.n	800c178 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c13a:	4413      	add	r3, r2
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fb0c 	bl	800b75a <ld_dword>
 800c142:	4603      	mov	r3, r0
 800c144:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800c148:	4323      	orrs	r3, r4
 800c14a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800c15a:	4413      	add	r3, r2
 800c15c:	6879      	ldr	r1, [r7, #4]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff fb39 	bl	800b7d6 <st_dword>
			fs->wflag = 1;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2201      	movs	r2, #1
 800c168:	70da      	strb	r2, [r3, #3]
			break;
 800c16a:	e006      	b.n	800c17a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c16c:	bf00      	nop
 800c16e:	e004      	b.n	800c17a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c170:	bf00      	nop
 800c172:	e002      	b.n	800c17a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c174:	bf00      	nop
 800c176:	e000      	b.n	800c17a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c178:	bf00      	nop
		}
	}
	return res;
 800c17a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3724      	adds	r7, #36	@ 0x24
 800c180:	46bd      	mov	sp, r7
 800c182:	bd90      	pop	{r4, r7, pc}

0800c184 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b088      	sub	sp, #32
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c190:	2300      	movs	r3, #0
 800c192:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d904      	bls.n	800c1aa <remove_chain+0x26>
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d301      	bcc.n	800c1ae <remove_chain+0x2a>
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	e04b      	b.n	800c246 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d00c      	beq.n	800c1ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c1b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	69b8      	ldr	r0, [r7, #24]
 800c1bc:	f7ff fef8 	bl	800bfb0 <put_fat>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c1c4:	7ffb      	ldrb	r3, [r7, #31]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d001      	beq.n	800c1ce <remove_chain+0x4a>
 800c1ca:	7ffb      	ldrb	r3, [r7, #31]
 800c1cc:	e03b      	b.n	800c246 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c1ce:	68b9      	ldr	r1, [r7, #8]
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f7ff fe46 	bl	800be62 <get_fat>
 800c1d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d031      	beq.n	800c242 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d101      	bne.n	800c1e8 <remove_chain+0x64>
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	e02e      	b.n	800c246 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c1ee:	d101      	bne.n	800c1f4 <remove_chain+0x70>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e028      	b.n	800c246 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	68b9      	ldr	r1, [r7, #8]
 800c1f8:	69b8      	ldr	r0, [r7, #24]
 800c1fa:	f7ff fed9 	bl	800bfb0 <put_fat>
 800c1fe:	4603      	mov	r3, r0
 800c200:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c202:	7ffb      	ldrb	r3, [r7, #31]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d001      	beq.n	800c20c <remove_chain+0x88>
 800c208:	7ffb      	ldrb	r3, [r7, #31]
 800c20a:	e01c      	b.n	800c246 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	695a      	ldr	r2, [r3, #20]
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	3b02      	subs	r3, #2
 800c216:	429a      	cmp	r2, r3
 800c218:	d20b      	bcs.n	800c232 <remove_chain+0xae>
			fs->free_clst++;
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	695b      	ldr	r3, [r3, #20]
 800c21e:	1c5a      	adds	r2, r3, #1
 800c220:	69bb      	ldr	r3, [r7, #24]
 800c222:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	791b      	ldrb	r3, [r3, #4]
 800c228:	f043 0301 	orr.w	r3, r3, #1
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	699b      	ldr	r3, [r3, #24]
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d3c6      	bcc.n	800c1ce <remove_chain+0x4a>
 800c240:	e000      	b.n	800c244 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c242:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3720      	adds	r7, #32
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b088      	sub	sp, #32
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10d      	bne.n	800c280 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d004      	beq.n	800c27a <create_chain+0x2c>
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	69ba      	ldr	r2, [r7, #24]
 800c276:	429a      	cmp	r2, r3
 800c278:	d31b      	bcc.n	800c2b2 <create_chain+0x64>
 800c27a:	2301      	movs	r3, #1
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	e018      	b.n	800c2b2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f7ff fded 	bl	800be62 <get_fat>
 800c288:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d801      	bhi.n	800c294 <create_chain+0x46>
 800c290:	2301      	movs	r3, #1
 800c292:	e070      	b.n	800c376 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c29a:	d101      	bne.n	800c2a0 <create_chain+0x52>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	e06a      	b.n	800c376 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	699b      	ldr	r3, [r3, #24]
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d201      	bcs.n	800c2ae <create_chain+0x60>
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	e063      	b.n	800c376 <create_chain+0x128>
		scl = clst;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c2b6:	69fb      	ldr	r3, [r7, #28]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	69fa      	ldr	r2, [r7, #28]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d307      	bcc.n	800c2d6 <create_chain+0x88>
				ncl = 2;
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c2ca:	69fa      	ldr	r2, [r7, #28]
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d901      	bls.n	800c2d6 <create_chain+0x88>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e04f      	b.n	800c376 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c2d6:	69f9      	ldr	r1, [r7, #28]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff fdc2 	bl	800be62 <get_fat>
 800c2de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00e      	beq.n	800c304 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d003      	beq.n	800c2f4 <create_chain+0xa6>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2f2:	d101      	bne.n	800c2f8 <create_chain+0xaa>
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	e03e      	b.n	800c376 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c2f8:	69fa      	ldr	r2, [r7, #28]
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d1da      	bne.n	800c2b6 <create_chain+0x68>
 800c300:	2300      	movs	r3, #0
 800c302:	e038      	b.n	800c376 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c304:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c306:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c30a:	69f9      	ldr	r1, [r7, #28]
 800c30c:	6938      	ldr	r0, [r7, #16]
 800c30e:	f7ff fe4f 	bl	800bfb0 <put_fat>
 800c312:	4603      	mov	r3, r0
 800c314:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c316:	7dfb      	ldrb	r3, [r7, #23]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d109      	bne.n	800c330 <create_chain+0xe2>
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d006      	beq.n	800c330 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c322:	69fa      	ldr	r2, [r7, #28]
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6938      	ldr	r0, [r7, #16]
 800c328:	f7ff fe42 	bl	800bfb0 <put_fat>
 800c32c:	4603      	mov	r3, r0
 800c32e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c330:	7dfb      	ldrb	r3, [r7, #23]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d116      	bne.n	800c364 <create_chain+0x116>
		fs->last_clst = ncl;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	69fa      	ldr	r2, [r7, #28]
 800c33a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	695a      	ldr	r2, [r3, #20]
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	3b02      	subs	r3, #2
 800c346:	429a      	cmp	r2, r3
 800c348:	d804      	bhi.n	800c354 <create_chain+0x106>
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	695b      	ldr	r3, [r3, #20]
 800c34e:	1e5a      	subs	r2, r3, #1
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	791b      	ldrb	r3, [r3, #4]
 800c358:	f043 0301 	orr.w	r3, r3, #1
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	711a      	strb	r2, [r3, #4]
 800c362:	e007      	b.n	800c374 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c364:	7dfb      	ldrb	r3, [r7, #23]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d102      	bne.n	800c370 <create_chain+0x122>
 800c36a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c36e:	e000      	b.n	800c372 <create_chain+0x124>
 800c370:	2301      	movs	r3, #1
 800c372:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c374:	69fb      	ldr	r3, [r7, #28]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3720      	adds	r7, #32
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c37e:	b480      	push	{r7}
 800c380:	b087      	sub	sp, #28
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c392:	3304      	adds	r3, #4
 800c394:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	0a5b      	lsrs	r3, r3, #9
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	8952      	ldrh	r2, [r2, #10]
 800c39e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	1d1a      	adds	r2, r3, #4
 800c3a8:	613a      	str	r2, [r7, #16]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d101      	bne.n	800c3b8 <clmt_clust+0x3a>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e010      	b.n	800c3da <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d307      	bcc.n	800c3d0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	617b      	str	r3, [r7, #20]
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3ce:	e7e9      	b.n	800c3a4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c3d0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	4413      	add	r3, r2
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	371c      	adds	r7, #28
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b086      	sub	sp, #24
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c3fc:	d204      	bcs.n	800c408 <dir_sdi+0x22>
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	f003 031f 	and.w	r3, r3, #31
 800c404:	2b00      	cmp	r3, #0
 800c406:	d001      	beq.n	800c40c <dir_sdi+0x26>
		return FR_INT_ERR;
 800c408:	2302      	movs	r3, #2
 800c40a:	e063      	b.n	800c4d4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	683a      	ldr	r2, [r7, #0]
 800c410:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	689b      	ldr	r3, [r3, #8]
 800c416:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <dir_sdi+0x46>
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	2b02      	cmp	r3, #2
 800c424:	d902      	bls.n	800c42c <dir_sdi+0x46>
		clst = fs->dirbase;
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c42a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10c      	bne.n	800c44c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	095b      	lsrs	r3, r3, #5
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	8912      	ldrh	r2, [r2, #8]
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d301      	bcc.n	800c442 <dir_sdi+0x5c>
 800c43e:	2302      	movs	r3, #2
 800c440:	e048      	b.n	800c4d4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	61da      	str	r2, [r3, #28]
 800c44a:	e029      	b.n	800c4a0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	895b      	ldrh	r3, [r3, #10]
 800c450:	025b      	lsls	r3, r3, #9
 800c452:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c454:	e019      	b.n	800c48a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6979      	ldr	r1, [r7, #20]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7ff fd01 	bl	800be62 <get_fat>
 800c460:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c468:	d101      	bne.n	800c46e <dir_sdi+0x88>
 800c46a:	2301      	movs	r3, #1
 800c46c:	e032      	b.n	800c4d4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d904      	bls.n	800c47e <dir_sdi+0x98>
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d301      	bcc.n	800c482 <dir_sdi+0x9c>
 800c47e:	2302      	movs	r3, #2
 800c480:	e028      	b.n	800c4d4 <dir_sdi+0xee>
			ofs -= csz;
 800c482:	683a      	ldr	r2, [r7, #0]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	1ad3      	subs	r3, r2, r3
 800c488:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d2e1      	bcs.n	800c456 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c492:	6979      	ldr	r1, [r7, #20]
 800c494:	6938      	ldr	r0, [r7, #16]
 800c496:	f7ff fcc5 	bl	800be24 <clust2sect>
 800c49a:	4602      	mov	r2, r0
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d101      	bne.n	800c4b2 <dir_sdi+0xcc>
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	e010      	b.n	800c4d4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	69da      	ldr	r2, [r3, #28]
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	0a5b      	lsrs	r3, r3, #9
 800c4ba:	441a      	add	r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4cc:	441a      	add	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3718      	adds	r7, #24
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	3320      	adds	r3, #32
 800c4f2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	69db      	ldr	r3, [r3, #28]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <dir_next+0x28>
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c502:	d301      	bcc.n	800c508 <dir_next+0x2c>
 800c504:	2304      	movs	r3, #4
 800c506:	e0aa      	b.n	800c65e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f040 8098 	bne.w	800c644 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	69db      	ldr	r3, [r3, #28]
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10b      	bne.n	800c53e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	095b      	lsrs	r3, r3, #5
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	8912      	ldrh	r2, [r2, #8]
 800c52e:	4293      	cmp	r3, r2
 800c530:	f0c0 8088 	bcc.w	800c644 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	61da      	str	r2, [r3, #28]
 800c53a:	2304      	movs	r3, #4
 800c53c:	e08f      	b.n	800c65e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	0a5b      	lsrs	r3, r3, #9
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	8952      	ldrh	r2, [r2, #10]
 800c546:	3a01      	subs	r2, #1
 800c548:	4013      	ands	r3, r2
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d17a      	bne.n	800c644 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	699b      	ldr	r3, [r3, #24]
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	f7ff fc83 	bl	800be62 <get_fat>
 800c55c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d801      	bhi.n	800c568 <dir_next+0x8c>
 800c564:	2302      	movs	r3, #2
 800c566:	e07a      	b.n	800c65e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c56e:	d101      	bne.n	800c574 <dir_next+0x98>
 800c570:	2301      	movs	r3, #1
 800c572:	e074      	b.n	800c65e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	699b      	ldr	r3, [r3, #24]
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d358      	bcc.n	800c630 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d104      	bne.n	800c58e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	61da      	str	r2, [r3, #28]
 800c58a:	2304      	movs	r3, #4
 800c58c:	e067      	b.n	800c65e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	4619      	mov	r1, r3
 800c596:	4610      	mov	r0, r2
 800c598:	f7ff fe59 	bl	800c24e <create_chain>
 800c59c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <dir_next+0xcc>
 800c5a4:	2307      	movs	r3, #7
 800c5a6:	e05a      	b.n	800c65e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d101      	bne.n	800c5b2 <dir_next+0xd6>
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	e055      	b.n	800c65e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5b8:	d101      	bne.n	800c5be <dir_next+0xe2>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	e04f      	b.n	800c65e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f7ff fb50 	bl	800bc64 <sync_window>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d001      	beq.n	800c5ce <dir_next+0xf2>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e047      	b.n	800c65e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	3334      	adds	r3, #52	@ 0x34
 800c5d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7ff f949 	bl	800b870 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c5de:	2300      	movs	r3, #0
 800c5e0:	613b      	str	r3, [r7, #16]
 800c5e2:	6979      	ldr	r1, [r7, #20]
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f7ff fc1d 	bl	800be24 <clust2sect>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	631a      	str	r2, [r3, #48]	@ 0x30
 800c5f0:	e012      	b.n	800c618 <dir_next+0x13c>
						fs->wflag = 1;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c5f8:	68f8      	ldr	r0, [r7, #12]
 800c5fa:	f7ff fb33 	bl	800bc64 <sync_window>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <dir_next+0x12c>
 800c604:	2301      	movs	r3, #1
 800c606:	e02a      	b.n	800c65e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	3301      	adds	r3, #1
 800c60c:	613b      	str	r3, [r7, #16]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c612:	1c5a      	adds	r2, r3, #1
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	631a      	str	r2, [r3, #48]	@ 0x30
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	895b      	ldrh	r3, [r3, #10]
 800c61c:	461a      	mov	r2, r3
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	4293      	cmp	r3, r2
 800c622:	d3e6      	bcc.n	800c5f2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	1ad2      	subs	r2, r2, r3
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c636:	6979      	ldr	r1, [r7, #20]
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff fbf3 	bl	800be24 <clust2sect>
 800c63e:	4602      	mov	r2, r0
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68ba      	ldr	r2, [r7, #8]
 800c648:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c656:	441a      	add	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b086      	sub	sp, #24
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c676:	2100      	movs	r1, #0
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff feb4 	bl	800c3e6 <dir_sdi>
 800c67e:	4603      	mov	r3, r0
 800c680:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c682:	7dfb      	ldrb	r3, [r7, #23]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d12b      	bne.n	800c6e0 <dir_alloc+0x7a>
		n = 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	69db      	ldr	r3, [r3, #28]
 800c690:	4619      	mov	r1, r3
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f7ff fb2a 	bl	800bcec <move_window>
 800c698:	4603      	mov	r3, r0
 800c69a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c69c:	7dfb      	ldrb	r3, [r7, #23]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d11d      	bne.n	800c6de <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6a1b      	ldr	r3, [r3, #32]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2be5      	cmp	r3, #229	@ 0xe5
 800c6aa:	d004      	beq.n	800c6b6 <dir_alloc+0x50>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6a1b      	ldr	r3, [r3, #32]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d107      	bne.n	800c6c6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	3301      	adds	r3, #1
 800c6ba:	613b      	str	r3, [r7, #16]
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d102      	bne.n	800c6ca <dir_alloc+0x64>
 800c6c4:	e00c      	b.n	800c6e0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c6ca:	2101      	movs	r1, #1
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f7ff ff05 	bl	800c4dc <dir_next>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d0d7      	beq.n	800c68c <dir_alloc+0x26>
 800c6dc:	e000      	b.n	800c6e0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c6de:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c6e0:	7dfb      	ldrb	r3, [r7, #23]
 800c6e2:	2b04      	cmp	r3, #4
 800c6e4:	d101      	bne.n	800c6ea <dir_alloc+0x84>
 800c6e6:	2307      	movs	r3, #7
 800c6e8:	75fb      	strb	r3, [r7, #23]
	return res;
 800c6ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3718      	adds	r7, #24
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	331a      	adds	r3, #26
 800c702:	4618      	mov	r0, r3
 800c704:	f7ff f810 	bl	800b728 <ld_word>
 800c708:	4603      	mov	r3, r0
 800c70a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b03      	cmp	r3, #3
 800c712:	d109      	bne.n	800c728 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	3314      	adds	r3, #20
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff f805 	bl	800b728 <ld_word>
 800c71e:	4603      	mov	r3, r0
 800c720:	041b      	lsls	r3, r3, #16
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	4313      	orrs	r3, r2
 800c726:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c728:	68fb      	ldr	r3, [r7, #12]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c732:	b580      	push	{r7, lr}
 800c734:	b084      	sub	sp, #16
 800c736:	af00      	add	r7, sp, #0
 800c738:	60f8      	str	r0, [r7, #12]
 800c73a:	60b9      	str	r1, [r7, #8]
 800c73c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	331a      	adds	r3, #26
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	b292      	uxth	r2, r2
 800c746:	4611      	mov	r1, r2
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff f829 	bl	800b7a0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	2b03      	cmp	r3, #3
 800c754:	d109      	bne.n	800c76a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	f103 0214 	add.w	r2, r3, #20
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	0c1b      	lsrs	r3, r3, #16
 800c760:	b29b      	uxth	r3, r3
 800c762:	4619      	mov	r1, r3
 800c764:	4610      	mov	r0, r2
 800c766:	f7ff f81b 	bl	800b7a0 <st_word>
	}
}
 800c76a:	bf00      	nop
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c772:	b580      	push	{r7, lr}
 800c774:	b086      	sub	sp, #24
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c77c:	2304      	movs	r3, #4
 800c77e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800c786:	e03c      	b.n	800c802 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	69db      	ldr	r3, [r3, #28]
 800c78c:	4619      	mov	r1, r3
 800c78e:	6938      	ldr	r0, [r7, #16]
 800c790:	f7ff faac 	bl	800bcec <move_window>
 800c794:	4603      	mov	r3, r0
 800c796:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c798:	7dfb      	ldrb	r3, [r7, #23]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d136      	bne.n	800c80c <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a1b      	ldr	r3, [r3, #32]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c7ac:	2304      	movs	r3, #4
 800c7ae:	75fb      	strb	r3, [r7, #23]
 800c7b0:	e031      	b.n	800c816 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6a1b      	ldr	r3, [r3, #32]
 800c7b6:	330b      	adds	r3, #11
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7be:	73bb      	strb	r3, [r7, #14]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	7bba      	ldrb	r2, [r7, #14]
 800c7c4:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800c7c6:	7bfb      	ldrb	r3, [r7, #15]
 800c7c8:	2be5      	cmp	r3, #229	@ 0xe5
 800c7ca:	d011      	beq.n	800c7f0 <dir_read+0x7e>
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7d0:	d00e      	beq.n	800c7f0 <dir_read+0x7e>
 800c7d2:	7bbb      	ldrb	r3, [r7, #14]
 800c7d4:	2b0f      	cmp	r3, #15
 800c7d6:	d00b      	beq.n	800c7f0 <dir_read+0x7e>
 800c7d8:	7bbb      	ldrb	r3, [r7, #14]
 800c7da:	f023 0320 	bic.w	r3, r3, #32
 800c7de:	2b08      	cmp	r3, #8
 800c7e0:	bf0c      	ite	eq
 800c7e2:	2301      	moveq	r3, #1
 800c7e4:	2300      	movne	r3, #0
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d00f      	beq.n	800c810 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7ff fe72 	bl	800c4dc <dir_next>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d108      	bne.n	800c814 <dir_read+0xa2>
	while (dp->sect) {
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	69db      	ldr	r3, [r3, #28]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1be      	bne.n	800c788 <dir_read+0x16>
 800c80a:	e004      	b.n	800c816 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c80c:	bf00      	nop
 800c80e:	e002      	b.n	800c816 <dir_read+0xa4>
				break;
 800c810:	bf00      	nop
 800c812:	e000      	b.n	800c816 <dir_read+0xa4>
		if (res != FR_OK) break;
 800c814:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c816:	7dfb      	ldrb	r3, [r7, #23]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <dir_read+0xb0>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2200      	movs	r2, #0
 800c820:	61da      	str	r2, [r3, #28]
	return res;
 800c822:	7dfb      	ldrb	r3, [r7, #23]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3718      	adds	r7, #24
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c83a:	2100      	movs	r1, #0
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7ff fdd2 	bl	800c3e6 <dir_sdi>
 800c842:	4603      	mov	r3, r0
 800c844:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d001      	beq.n	800c850 <dir_find+0x24>
 800c84c:	7dfb      	ldrb	r3, [r7, #23]
 800c84e:	e03e      	b.n	800c8ce <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	4619      	mov	r1, r3
 800c856:	6938      	ldr	r0, [r7, #16]
 800c858:	f7ff fa48 	bl	800bcec <move_window>
 800c85c:	4603      	mov	r3, r0
 800c85e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c860:	7dfb      	ldrb	r3, [r7, #23]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d12f      	bne.n	800c8c6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d102      	bne.n	800c87a <dir_find+0x4e>
 800c874:	2304      	movs	r3, #4
 800c876:	75fb      	strb	r3, [r7, #23]
 800c878:	e028      	b.n	800c8cc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	330b      	adds	r3, #11
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c886:	b2da      	uxtb	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6a1b      	ldr	r3, [r3, #32]
 800c890:	330b      	adds	r3, #11
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	f003 0308 	and.w	r3, r3, #8
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10a      	bne.n	800c8b2 <dir_find+0x86>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a18      	ldr	r0, [r3, #32]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3324      	adds	r3, #36	@ 0x24
 800c8a4:	220b      	movs	r2, #11
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	f7fe fffd 	bl	800b8a6 <mem_cmp>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00b      	beq.n	800c8ca <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7ff fe11 	bl	800c4dc <dir_next>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c8be:	7dfb      	ldrb	r3, [r7, #23]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d0c5      	beq.n	800c850 <dir_find+0x24>
 800c8c4:	e002      	b.n	800c8cc <dir_find+0xa0>
		if (res != FR_OK) break;
 800c8c6:	bf00      	nop
 800c8c8:	e000      	b.n	800c8cc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c8ca:	bf00      	nop

	return res;
 800c8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3718      	adds	r7, #24
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b084      	sub	sp, #16
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff febd 	bl	800c666 <dir_alloc>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d11c      	bne.n	800c930 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	69db      	ldr	r3, [r3, #28]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68b8      	ldr	r0, [r7, #8]
 800c8fe:	f7ff f9f5 	bl	800bcec <move_window>
 800c902:	4603      	mov	r3, r0
 800c904:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c906:	7bfb      	ldrb	r3, [r7, #15]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d111      	bne.n	800c930 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	2220      	movs	r2, #32
 800c912:	2100      	movs	r1, #0
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe ffab 	bl	800b870 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a18      	ldr	r0, [r3, #32]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3324      	adds	r3, #36	@ 0x24
 800c922:	220b      	movs	r2, #11
 800c924:	4619      	mov	r1, r3
 800c926:	f7fe ff82 	bl	800b82e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	2201      	movs	r2, #1
 800c92e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c930:	7bfb      	ldrb	r3, [r7, #15]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	69db      	ldr	r3, [r3, #28]
 800c94c:	4619      	mov	r1, r3
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	f7ff f9cc 	bl	800bcec <move_window>
 800c954:	4603      	mov	r3, r0
 800c956:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800c958:	7afb      	ldrb	r3, [r7, #11]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d106      	bne.n	800c96c <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a1b      	ldr	r3, [r3, #32]
 800c962:	22e5      	movs	r2, #229	@ 0xe5
 800c964:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2201      	movs	r2, #1
 800c96a:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800c96c:	7afb      	ldrb	r3, [r7, #11]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
	...

0800c978 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b088      	sub	sp, #32
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	60fb      	str	r3, [r7, #12]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	3324      	adds	r3, #36	@ 0x24
 800c98c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c98e:	220b      	movs	r2, #11
 800c990:	2120      	movs	r1, #32
 800c992:	68b8      	ldr	r0, [r7, #8]
 800c994:	f7fe ff6c 	bl	800b870 <mem_set>
	si = i = 0; ni = 8;
 800c998:	2300      	movs	r3, #0
 800c99a:	613b      	str	r3, [r7, #16]
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	61fb      	str	r3, [r7, #28]
 800c9a0:	2308      	movs	r3, #8
 800c9a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c9a4:	69fb      	ldr	r3, [r7, #28]
 800c9a6:	1c5a      	adds	r2, r3, #1
 800c9a8:	61fa      	str	r2, [r7, #28]
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c9b2:	7efb      	ldrb	r3, [r7, #27]
 800c9b4:	2b20      	cmp	r3, #32
 800c9b6:	d94e      	bls.n	800ca56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c9b8:	7efb      	ldrb	r3, [r7, #27]
 800c9ba:	2b2f      	cmp	r3, #47	@ 0x2f
 800c9bc:	d006      	beq.n	800c9cc <create_name+0x54>
 800c9be:	7efb      	ldrb	r3, [r7, #27]
 800c9c0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c9c2:	d110      	bne.n	800c9e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c9c4:	e002      	b.n	800c9cc <create_name+0x54>
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	61fb      	str	r3, [r7, #28]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	69fb      	ldr	r3, [r7, #28]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c9d6:	d0f6      	beq.n	800c9c6 <create_name+0x4e>
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	4413      	add	r3, r2
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c9e2:	d0f0      	beq.n	800c9c6 <create_name+0x4e>
			break;
 800c9e4:	e038      	b.n	800ca58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c9e6:	7efb      	ldrb	r3, [r7, #27]
 800c9e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9ea:	d003      	beq.n	800c9f4 <create_name+0x7c>
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d30c      	bcc.n	800ca0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	2b0b      	cmp	r3, #11
 800c9f8:	d002      	beq.n	800ca00 <create_name+0x88>
 800c9fa:	7efb      	ldrb	r3, [r7, #27]
 800c9fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9fe:	d001      	beq.n	800ca04 <create_name+0x8c>
 800ca00:	2306      	movs	r3, #6
 800ca02:	e044      	b.n	800ca8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ca04:	2308      	movs	r3, #8
 800ca06:	613b      	str	r3, [r7, #16]
 800ca08:	230b      	movs	r3, #11
 800ca0a:	617b      	str	r3, [r7, #20]
			continue;
 800ca0c:	e022      	b.n	800ca54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ca0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	da04      	bge.n	800ca20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ca16:	7efb      	ldrb	r3, [r7, #27]
 800ca18:	3b80      	subs	r3, #128	@ 0x80
 800ca1a:	4a1f      	ldr	r2, [pc, #124]	@ (800ca98 <create_name+0x120>)
 800ca1c:	5cd3      	ldrb	r3, [r2, r3]
 800ca1e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ca20:	7efb      	ldrb	r3, [r7, #27]
 800ca22:	4619      	mov	r1, r3
 800ca24:	481d      	ldr	r0, [pc, #116]	@ (800ca9c <create_name+0x124>)
 800ca26:	f7fe ff65 	bl	800b8f4 <chk_chr>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d001      	beq.n	800ca34 <create_name+0xbc>
 800ca30:	2306      	movs	r3, #6
 800ca32:	e02c      	b.n	800ca8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ca34:	7efb      	ldrb	r3, [r7, #27]
 800ca36:	2b60      	cmp	r3, #96	@ 0x60
 800ca38:	d905      	bls.n	800ca46 <create_name+0xce>
 800ca3a:	7efb      	ldrb	r3, [r7, #27]
 800ca3c:	2b7a      	cmp	r3, #122	@ 0x7a
 800ca3e:	d802      	bhi.n	800ca46 <create_name+0xce>
 800ca40:	7efb      	ldrb	r3, [r7, #27]
 800ca42:	3b20      	subs	r3, #32
 800ca44:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	613a      	str	r2, [r7, #16]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	4413      	add	r3, r2
 800ca50:	7efa      	ldrb	r2, [r7, #27]
 800ca52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ca54:	e7a6      	b.n	800c9a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ca56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	441a      	add	r2, r3
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d101      	bne.n	800ca6c <create_name+0xf4>
 800ca68:	2306      	movs	r3, #6
 800ca6a:	e010      	b.n	800ca8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	2be5      	cmp	r3, #229	@ 0xe5
 800ca72:	d102      	bne.n	800ca7a <create_name+0x102>
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2205      	movs	r2, #5
 800ca78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ca7a:	7efb      	ldrb	r3, [r7, #27]
 800ca7c:	2b20      	cmp	r3, #32
 800ca7e:	d801      	bhi.n	800ca84 <create_name+0x10c>
 800ca80:	2204      	movs	r2, #4
 800ca82:	e000      	b.n	800ca86 <create_name+0x10e>
 800ca84:	2200      	movs	r2, #0
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	330b      	adds	r3, #11
 800ca8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ca8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3720      	adds	r7, #32
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	08018320 	.word	0x08018320
 800ca9c:	08018158 	.word	0x08018158

0800caa0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cab4:	e002      	b.n	800cabc <follow_path+0x1c>
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	3301      	adds	r3, #1
 800caba:	603b      	str	r3, [r7, #0]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b2f      	cmp	r3, #47	@ 0x2f
 800cac2:	d0f8      	beq.n	800cab6 <follow_path+0x16>
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	2b5c      	cmp	r3, #92	@ 0x5c
 800caca:	d0f4      	beq.n	800cab6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	2200      	movs	r2, #0
 800cad0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	2b1f      	cmp	r3, #31
 800cad8:	d80a      	bhi.n	800caf0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2280      	movs	r2, #128	@ 0x80
 800cade:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800cae2:	2100      	movs	r1, #0
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7ff fc7e 	bl	800c3e6 <dir_sdi>
 800caea:	4603      	mov	r3, r0
 800caec:	75fb      	strb	r3, [r7, #23]
 800caee:	e043      	b.n	800cb78 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800caf0:	463b      	mov	r3, r7
 800caf2:	4619      	mov	r1, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7ff ff3f 	bl	800c978 <create_name>
 800cafa:	4603      	mov	r3, r0
 800cafc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d134      	bne.n	800cb6e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7ff fe91 	bl	800c82c <dir_find>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cb14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cb16:	7dfb      	ldrb	r3, [r7, #23]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00a      	beq.n	800cb32 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cb1c:	7dfb      	ldrb	r3, [r7, #23]
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d127      	bne.n	800cb72 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cb22:	7afb      	ldrb	r3, [r7, #11]
 800cb24:	f003 0304 	and.w	r3, r3, #4
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d122      	bne.n	800cb72 <follow_path+0xd2>
 800cb2c:	2305      	movs	r3, #5
 800cb2e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cb30:	e01f      	b.n	800cb72 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cb32:	7afb      	ldrb	r3, [r7, #11]
 800cb34:	f003 0304 	and.w	r3, r3, #4
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d11c      	bne.n	800cb76 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	799b      	ldrb	r3, [r3, #6]
 800cb40:	f003 0310 	and.w	r3, r3, #16
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d102      	bne.n	800cb4e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cb48:	2305      	movs	r3, #5
 800cb4a:	75fb      	strb	r3, [r7, #23]
 800cb4c:	e014      	b.n	800cb78 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb5c:	4413      	add	r3, r2
 800cb5e:	4619      	mov	r1, r3
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f7ff fdc7 	bl	800c6f4 <ld_clust>
 800cb66:	4602      	mov	r2, r0
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cb6c:	e7c0      	b.n	800caf0 <follow_path+0x50>
			if (res != FR_OK) break;
 800cb6e:	bf00      	nop
 800cb70:	e002      	b.n	800cb78 <follow_path+0xd8>
				break;
 800cb72:	bf00      	nop
 800cb74:	e000      	b.n	800cb78 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cb76:	bf00      	nop
			}
		}
	}

	return res;
 800cb78:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3718      	adds	r7, #24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cb82:	b480      	push	{r7}
 800cb84:	b087      	sub	sp, #28
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cb8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb8e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d031      	beq.n	800cbfc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e002      	b.n	800cba6 <get_ldnumber+0x24>
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	3301      	adds	r3, #1
 800cba4:	617b      	str	r3, [r7, #20]
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b20      	cmp	r3, #32
 800cbac:	d903      	bls.n	800cbb6 <get_ldnumber+0x34>
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	2b3a      	cmp	r3, #58	@ 0x3a
 800cbb4:	d1f4      	bne.n	800cba0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	2b3a      	cmp	r3, #58	@ 0x3a
 800cbbc:	d11c      	bne.n	800cbf8 <get_ldnumber+0x76>
			tp = *path;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	60fa      	str	r2, [r7, #12]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	3b30      	subs	r3, #48	@ 0x30
 800cbce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	2b09      	cmp	r3, #9
 800cbd4:	d80e      	bhi.n	800cbf4 <get_ldnumber+0x72>
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d10a      	bne.n	800cbf4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d107      	bne.n	800cbf4 <get_ldnumber+0x72>
					vol = (int)i;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	3301      	adds	r3, #1
 800cbec:	617b      	str	r3, [r7, #20]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	e002      	b.n	800cbfe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cbfc:	693b      	ldr	r3, [r7, #16]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	371c      	adds	r7, #28
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr
	...

0800cc0c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	70da      	strb	r2, [r3, #3]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc22:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7ff f860 	bl	800bcec <move_window>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d001      	beq.n	800cc36 <check_fs+0x2a>
 800cc32:	2304      	movs	r3, #4
 800cc34:	e038      	b.n	800cca8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	3334      	adds	r3, #52	@ 0x34
 800cc3a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe fd72 	bl	800b728 <ld_word>
 800cc44:	4603      	mov	r3, r0
 800cc46:	461a      	mov	r2, r3
 800cc48:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d001      	beq.n	800cc54 <check_fs+0x48>
 800cc50:	2303      	movs	r3, #3
 800cc52:	e029      	b.n	800cca8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cc5a:	2be9      	cmp	r3, #233	@ 0xe9
 800cc5c:	d009      	beq.n	800cc72 <check_fs+0x66>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cc64:	2beb      	cmp	r3, #235	@ 0xeb
 800cc66:	d11e      	bne.n	800cca6 <check_fs+0x9a>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800cc6e:	2b90      	cmp	r3, #144	@ 0x90
 800cc70:	d119      	bne.n	800cca6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	3334      	adds	r3, #52	@ 0x34
 800cc76:	3336      	adds	r3, #54	@ 0x36
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fe fd6e 	bl	800b75a <ld_dword>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cc84:	4a0a      	ldr	r2, [pc, #40]	@ (800ccb0 <check_fs+0xa4>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d101      	bne.n	800cc8e <check_fs+0x82>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	e00c      	b.n	800cca8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3334      	adds	r3, #52	@ 0x34
 800cc92:	3352      	adds	r3, #82	@ 0x52
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fe fd60 	bl	800b75a <ld_dword>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	4a05      	ldr	r2, [pc, #20]	@ (800ccb4 <check_fs+0xa8>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d101      	bne.n	800cca6 <check_fs+0x9a>
 800cca2:	2300      	movs	r3, #0
 800cca4:	e000      	b.n	800cca8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cca6:	2302      	movs	r3, #2
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	00544146 	.word	0x00544146
 800ccb4:	33544146 	.word	0x33544146

0800ccb8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b096      	sub	sp, #88	@ 0x58
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7ff ff58 	bl	800cb82 <get_ldnumber>
 800ccd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ccd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	da01      	bge.n	800ccde <find_volume+0x26>
 800ccda:	230b      	movs	r3, #11
 800ccdc:	e235      	b.n	800d14a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ccde:	4aa5      	ldr	r2, [pc, #660]	@ (800cf74 <find_volume+0x2bc>)
 800cce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cce6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <find_volume+0x3a>
 800ccee:	230c      	movs	r3, #12
 800ccf0:	e22b      	b.n	800d14a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800ccf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ccf4:	f7fe fe19 	bl	800b92a <lock_fs>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d101      	bne.n	800cd02 <find_volume+0x4a>
 800ccfe:	230f      	movs	r3, #15
 800cd00:	e223      	b.n	800d14a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cd08:	79fb      	ldrb	r3, [r7, #7]
 800cd0a:	f023 0301 	bic.w	r3, r3, #1
 800cd0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d01a      	beq.n	800cd4e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800cd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1a:	785b      	ldrb	r3, [r3, #1]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fe fc65 	bl	800b5ec <disk_status>
 800cd22:	4603      	mov	r3, r0
 800cd24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cd28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd2c:	f003 0301 	and.w	r3, r3, #1
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d10c      	bne.n	800cd4e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cd34:	79fb      	ldrb	r3, [r7, #7]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d007      	beq.n	800cd4a <find_volume+0x92>
 800cd3a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd3e:	f003 0304 	and.w	r3, r3, #4
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d001      	beq.n	800cd4a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800cd46:	230a      	movs	r3, #10
 800cd48:	e1ff      	b.n	800d14a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	e1fd      	b.n	800d14a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cd4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd50:	2200      	movs	r2, #0
 800cd52:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cd54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5e:	785b      	ldrb	r3, [r3, #1]
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fe fc5d 	bl	800b620 <disk_initialize>
 800cd66:	4603      	mov	r3, r0
 800cd68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cd6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd70:	f003 0301 	and.w	r3, r3, #1
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cd78:	2303      	movs	r3, #3
 800cd7a:	e1e6      	b.n	800d14a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cd7c:	79fb      	ldrb	r3, [r7, #7]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d007      	beq.n	800cd92 <find_volume+0xda>
 800cd82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd86:	f003 0304 	and.w	r3, r3, #4
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800cd8e:	230a      	movs	r3, #10
 800cd90:	e1db      	b.n	800d14a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cd96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cd98:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cd9a:	f7ff ff37 	bl	800cc0c <check_fs>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cda4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d149      	bne.n	800ce40 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cdac:	2300      	movs	r3, #0
 800cdae:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdb0:	e01e      	b.n	800cdf0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cdb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cdb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdba:	011b      	lsls	r3, r3, #4
 800cdbc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cdc0:	4413      	add	r3, r2
 800cdc2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d006      	beq.n	800cddc <find_volume+0x124>
 800cdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd0:	3308      	adds	r3, #8
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fe fcc1 	bl	800b75a <ld_dword>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	e000      	b.n	800cdde <find_volume+0x126>
 800cddc:	2200      	movs	r2, #0
 800cdde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	3358      	adds	r3, #88	@ 0x58
 800cde4:	443b      	add	r3, r7
 800cde6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cdea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdec:	3301      	adds	r3, #1
 800cdee:	643b      	str	r3, [r7, #64]	@ 0x40
 800cdf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdf2:	2b03      	cmp	r3, #3
 800cdf4:	d9dd      	bls.n	800cdb2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cdfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <find_volume+0x14e>
 800ce00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce02:	3b01      	subs	r3, #1
 800ce04:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ce06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	3358      	adds	r3, #88	@ 0x58
 800ce0c:	443b      	add	r3, r7
 800ce0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ce12:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ce14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d005      	beq.n	800ce26 <find_volume+0x16e>
 800ce1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ce1e:	f7ff fef5 	bl	800cc0c <check_fs>
 800ce22:	4603      	mov	r3, r0
 800ce24:	e000      	b.n	800ce28 <find_volume+0x170>
 800ce26:	2303      	movs	r3, #3
 800ce28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ce2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce30:	2b01      	cmp	r3, #1
 800ce32:	d905      	bls.n	800ce40 <find_volume+0x188>
 800ce34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce36:	3301      	adds	r3, #1
 800ce38:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce3c:	2b03      	cmp	r3, #3
 800ce3e:	d9e2      	bls.n	800ce06 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ce40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce44:	2b04      	cmp	r3, #4
 800ce46:	d101      	bne.n	800ce4c <find_volume+0x194>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e17e      	b.n	800d14a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ce4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ce50:	2b01      	cmp	r3, #1
 800ce52:	d901      	bls.n	800ce58 <find_volume+0x1a0>
 800ce54:	230d      	movs	r3, #13
 800ce56:	e178      	b.n	800d14a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ce58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce5a:	3334      	adds	r3, #52	@ 0x34
 800ce5c:	330b      	adds	r3, #11
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fe fc62 	bl	800b728 <ld_word>
 800ce64:	4603      	mov	r3, r0
 800ce66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce6a:	d001      	beq.n	800ce70 <find_volume+0x1b8>
 800ce6c:	230d      	movs	r3, #13
 800ce6e:	e16c      	b.n	800d14a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ce70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce72:	3334      	adds	r3, #52	@ 0x34
 800ce74:	3316      	adds	r3, #22
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fe fc56 	bl	800b728 <ld_word>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ce80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d106      	bne.n	800ce94 <find_volume+0x1dc>
 800ce86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce88:	3334      	adds	r3, #52	@ 0x34
 800ce8a:	3324      	adds	r3, #36	@ 0x24
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe fc64 	bl	800b75a <ld_dword>
 800ce92:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ce94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce98:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea6:	789b      	ldrb	r3, [r3, #2]
 800cea8:	2b01      	cmp	r3, #1
 800ceaa:	d005      	beq.n	800ceb8 <find_volume+0x200>
 800ceac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceae:	789b      	ldrb	r3, [r3, #2]
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d001      	beq.n	800ceb8 <find_volume+0x200>
 800ceb4:	230d      	movs	r3, #13
 800ceb6:	e148      	b.n	800d14a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceba:	789b      	ldrb	r3, [r3, #2]
 800cebc:	461a      	mov	r2, r3
 800cebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cec0:	fb02 f303 	mul.w	r3, r2, r3
 800cec4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cecc:	461a      	mov	r2, r3
 800cece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ced2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced4:	895b      	ldrh	r3, [r3, #10]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d008      	beq.n	800ceec <find_volume+0x234>
 800ceda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cedc:	895b      	ldrh	r3, [r3, #10]
 800cede:	461a      	mov	r2, r3
 800cee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cee2:	895b      	ldrh	r3, [r3, #10]
 800cee4:	3b01      	subs	r3, #1
 800cee6:	4013      	ands	r3, r2
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d001      	beq.n	800cef0 <find_volume+0x238>
 800ceec:	230d      	movs	r3, #13
 800ceee:	e12c      	b.n	800d14a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef2:	3334      	adds	r3, #52	@ 0x34
 800cef4:	3311      	adds	r3, #17
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7fe fc16 	bl	800b728 <ld_word>
 800cefc:	4603      	mov	r3, r0
 800cefe:	461a      	mov	r2, r3
 800cf00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cf04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf06:	891b      	ldrh	r3, [r3, #8]
 800cf08:	f003 030f 	and.w	r3, r3, #15
 800cf0c:	b29b      	uxth	r3, r3
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <find_volume+0x25e>
 800cf12:	230d      	movs	r3, #13
 800cf14:	e119      	b.n	800d14a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cf16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf18:	3334      	adds	r3, #52	@ 0x34
 800cf1a:	3313      	adds	r3, #19
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fe fc03 	bl	800b728 <ld_word>
 800cf22:	4603      	mov	r3, r0
 800cf24:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cf26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d106      	bne.n	800cf3a <find_volume+0x282>
 800cf2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2e:	3334      	adds	r3, #52	@ 0x34
 800cf30:	3320      	adds	r3, #32
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7fe fc11 	bl	800b75a <ld_dword>
 800cf38:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3c:	3334      	adds	r3, #52	@ 0x34
 800cf3e:	330e      	adds	r3, #14
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fe fbf1 	bl	800b728 <ld_word>
 800cf46:	4603      	mov	r3, r0
 800cf48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cf4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d101      	bne.n	800cf54 <find_volume+0x29c>
 800cf50:	230d      	movs	r3, #13
 800cf52:	e0fa      	b.n	800d14a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cf54:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cf56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf58:	4413      	add	r3, r2
 800cf5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf5c:	8912      	ldrh	r2, [r2, #8]
 800cf5e:	0912      	lsrs	r2, r2, #4
 800cf60:	b292      	uxth	r2, r2
 800cf62:	4413      	add	r3, r2
 800cf64:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cf66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d204      	bcs.n	800cf78 <find_volume+0x2c0>
 800cf6e:	230d      	movs	r3, #13
 800cf70:	e0eb      	b.n	800d14a <find_volume+0x492>
 800cf72:	bf00      	nop
 800cf74:	20000ac8 	.word	0x20000ac8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cf78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf80:	8952      	ldrh	r2, [r2, #10]
 800cf82:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf86:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cf88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d101      	bne.n	800cf92 <find_volume+0x2da>
 800cf8e:	230d      	movs	r3, #13
 800cf90:	e0db      	b.n	800d14a <find_volume+0x492>
		fmt = FS_FAT32;
 800cf92:	2303      	movs	r3, #3
 800cf94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d802      	bhi.n	800cfa8 <find_volume+0x2f0>
 800cfa2:	2302      	movs	r3, #2
 800cfa4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfaa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d802      	bhi.n	800cfb8 <find_volume+0x300>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfba:	1c9a      	adds	r2, r3, #2
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfbe:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cfc4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cfc6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cfc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfca:	441a      	add	r2, r3
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfce:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800cfd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd4:	441a      	add	r2, r3
 800cfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800cfda:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cfde:	2b03      	cmp	r3, #3
 800cfe0:	d11e      	bne.n	800d020 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cfe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe4:	3334      	adds	r3, #52	@ 0x34
 800cfe6:	332a      	adds	r3, #42	@ 0x2a
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f7fe fb9d 	bl	800b728 <ld_word>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d001      	beq.n	800cff8 <find_volume+0x340>
 800cff4:	230d      	movs	r3, #13
 800cff6:	e0a8      	b.n	800d14a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cffa:	891b      	ldrh	r3, [r3, #8]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <find_volume+0x34c>
 800d000:	230d      	movs	r3, #13
 800d002:	e0a2      	b.n	800d14a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d006:	3334      	adds	r3, #52	@ 0x34
 800d008:	332c      	adds	r3, #44	@ 0x2c
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe fba5 	bl	800b75a <ld_dword>
 800d010:	4602      	mov	r2, r0
 800d012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d014:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d018:	699b      	ldr	r3, [r3, #24]
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d01e:	e01f      	b.n	800d060 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d022:	891b      	ldrh	r3, [r3, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d101      	bne.n	800d02c <find_volume+0x374>
 800d028:	230d      	movs	r3, #13
 800d02a:	e08e      	b.n	800d14a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d032:	441a      	add	r2, r3
 800d034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d036:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d038:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d103      	bne.n	800d048 <find_volume+0x390>
 800d040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	005b      	lsls	r3, r3, #1
 800d046:	e00a      	b.n	800d05e <find_volume+0x3a6>
 800d048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d04a:	699a      	ldr	r2, [r3, #24]
 800d04c:	4613      	mov	r3, r2
 800d04e:	005b      	lsls	r3, r3, #1
 800d050:	4413      	add	r3, r2
 800d052:	085a      	lsrs	r2, r3, #1
 800d054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d05e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d062:	69da      	ldr	r2, [r3, #28]
 800d064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d066:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d06a:	0a5b      	lsrs	r3, r3, #9
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d201      	bcs.n	800d074 <find_volume+0x3bc>
 800d070:	230d      	movs	r3, #13
 800d072:	e06a      	b.n	800d14a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d076:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d07a:	615a      	str	r2, [r3, #20]
 800d07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07e:	695a      	ldr	r2, [r3, #20]
 800d080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d082:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d086:	2280      	movs	r2, #128	@ 0x80
 800d088:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d08a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d149      	bne.n	800d126 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d094:	3334      	adds	r3, #52	@ 0x34
 800d096:	3330      	adds	r3, #48	@ 0x30
 800d098:	4618      	mov	r0, r3
 800d09a:	f7fe fb45 	bl	800b728 <ld_word>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d140      	bne.n	800d126 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d0a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d0ac:	f7fe fe1e 	bl	800bcec <move_window>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d137      	bne.n	800d126 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800d0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0be:	3334      	adds	r3, #52	@ 0x34
 800d0c0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe fb2f 	bl	800b728 <ld_word>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d127      	bne.n	800d126 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d8:	3334      	adds	r3, #52	@ 0x34
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fe fb3d 	bl	800b75a <ld_dword>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	4a1c      	ldr	r2, [pc, #112]	@ (800d154 <find_volume+0x49c>)
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d11e      	bne.n	800d126 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ea:	3334      	adds	r3, #52	@ 0x34
 800d0ec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fe fb32 	bl	800b75a <ld_dword>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	4a17      	ldr	r2, [pc, #92]	@ (800d158 <find_volume+0x4a0>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d113      	bne.n	800d126 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d100:	3334      	adds	r3, #52	@ 0x34
 800d102:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fb27 	bl	800b75a <ld_dword>
 800d10c:	4602      	mov	r2, r0
 800d10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d110:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d114:	3334      	adds	r3, #52	@ 0x34
 800d116:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fe fb1d 	bl	800b75a <ld_dword>
 800d120:	4602      	mov	r2, r0
 800d122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d124:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d128:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d12c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d12e:	4b0b      	ldr	r3, [pc, #44]	@ (800d15c <find_volume+0x4a4>)
 800d130:	881b      	ldrh	r3, [r3, #0]
 800d132:	3301      	adds	r3, #1
 800d134:	b29a      	uxth	r2, r3
 800d136:	4b09      	ldr	r3, [pc, #36]	@ (800d15c <find_volume+0x4a4>)
 800d138:	801a      	strh	r2, [r3, #0]
 800d13a:	4b08      	ldr	r3, [pc, #32]	@ (800d15c <find_volume+0x4a4>)
 800d13c:	881a      	ldrh	r2, [r3, #0]
 800d13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d140:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d142:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d144:	f7fe fd6a 	bl	800bc1c <clear_lock>
#endif
	return FR_OK;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3758      	adds	r7, #88	@ 0x58
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	41615252 	.word	0x41615252
 800d158:	61417272 	.word	0x61417272
 800d15c:	20000acc 	.word	0x20000acc

0800d160 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d16a:	2309      	movs	r3, #9
 800d16c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d02e      	beq.n	800d1d2 <validate+0x72>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d02a      	beq.n	800d1d2 <validate+0x72>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d025      	beq.n	800d1d2 <validate+0x72>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	889a      	ldrh	r2, [r3, #4]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	88db      	ldrh	r3, [r3, #6]
 800d190:	429a      	cmp	r2, r3
 800d192:	d11e      	bne.n	800d1d2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fe fbc6 	bl	800b92a <lock_fs>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d014      	beq.n	800d1ce <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	785b      	ldrb	r3, [r3, #1]
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fe fa1e 	bl	800b5ec <disk_status>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	f003 0301 	and.w	r3, r3, #1
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d102      	bne.n	800d1c0 <validate+0x60>
				res = FR_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]
 800d1be:	e008      	b.n	800d1d2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fe fbc5 	bl	800b956 <unlock_fs>
 800d1cc:	e001      	b.n	800d1d2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d1ce:	230f      	movs	r3, #15
 800d1d0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d102      	bne.n	800d1de <validate+0x7e>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	e000      	b.n	800d1e0 <validate+0x80>
 800d1de:	2300      	movs	r3, #0
 800d1e0:	683a      	ldr	r2, [r7, #0]
 800d1e2:	6013      	str	r3, [r2, #0]
	return res;
 800d1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
	...

0800d1f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b088      	sub	sp, #32
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d202:	f107 0310 	add.w	r3, r7, #16
 800d206:	4618      	mov	r0, r3
 800d208:	f7ff fcbb 	bl	800cb82 <get_ldnumber>
 800d20c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	2b00      	cmp	r3, #0
 800d212:	da01      	bge.n	800d218 <f_mount+0x28>
 800d214:	230b      	movs	r3, #11
 800d216:	e048      	b.n	800d2aa <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d218:	4a26      	ldr	r2, [pc, #152]	@ (800d2b4 <f_mount+0xc4>)
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d220:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d00f      	beq.n	800d248 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d228:	69b8      	ldr	r0, [r7, #24]
 800d22a:	f7fe fcf7 	bl	800bc1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	4618      	mov	r0, r3
 800d234:	f000 fef4 	bl	800e020 <ff_del_syncobj>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d101      	bne.n	800d242 <f_mount+0x52>
 800d23e:	2302      	movs	r3, #2
 800d240:	e033      	b.n	800d2aa <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	2200      	movs	r2, #0
 800d246:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00f      	beq.n	800d26e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	b2da      	uxtb	r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	330c      	adds	r3, #12
 800d25c:	4619      	mov	r1, r3
 800d25e:	4610      	mov	r0, r2
 800d260:	f000 fec3 	bl	800dfea <ff_cre_syncobj>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d101      	bne.n	800d26e <f_mount+0x7e>
 800d26a:	2302      	movs	r3, #2
 800d26c:	e01d      	b.n	800d2aa <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	4910      	ldr	r1, [pc, #64]	@ (800d2b4 <f_mount+0xc4>)
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d002      	beq.n	800d284 <f_mount+0x94>
 800d27e:	79fb      	ldrb	r3, [r7, #7]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d001      	beq.n	800d288 <f_mount+0x98>
 800d284:	2300      	movs	r3, #0
 800d286:	e010      	b.n	800d2aa <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d288:	f107 010c 	add.w	r1, r7, #12
 800d28c:	f107 0308 	add.w	r3, r7, #8
 800d290:	2200      	movs	r2, #0
 800d292:	4618      	mov	r0, r3
 800d294:	f7ff fd10 	bl	800ccb8 <find_volume>
 800d298:	4603      	mov	r3, r0
 800d29a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	7dfa      	ldrb	r2, [r7, #23]
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fe fb57 	bl	800b956 <unlock_fs>
 800d2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3720      	adds	r7, #32
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20000ac8 	.word	0x20000ac8

0800d2b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b098      	sub	sp, #96	@ 0x60
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d101      	bne.n	800d2d0 <f_open+0x18>
 800d2cc:	2309      	movs	r3, #9
 800d2ce:	e1b0      	b.n	800d632 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d2d0:	79fb      	ldrb	r3, [r7, #7]
 800d2d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d2d8:	79fa      	ldrb	r2, [r7, #7]
 800d2da:	f107 0110 	add.w	r1, r7, #16
 800d2de:	f107 0308 	add.w	r3, r7, #8
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7ff fce8 	bl	800ccb8 <find_volume>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800d2ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f040 818d 	bne.w	800d612 <f_open+0x35a>
		dj.obj.fs = fs;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d2fc:	68ba      	ldr	r2, [r7, #8]
 800d2fe:	f107 0314 	add.w	r3, r7, #20
 800d302:	4611      	mov	r1, r2
 800d304:	4618      	mov	r0, r3
 800d306:	f7ff fbcb 	bl	800caa0 <follow_path>
 800d30a:	4603      	mov	r3, r0
 800d30c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d310:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d314:	2b00      	cmp	r3, #0
 800d316:	d118      	bne.n	800d34a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d318:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d31c:	b25b      	sxtb	r3, r3
 800d31e:	2b00      	cmp	r3, #0
 800d320:	da03      	bge.n	800d32a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d322:	2306      	movs	r3, #6
 800d324:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d328:	e00f      	b.n	800d34a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d32a:	79fb      	ldrb	r3, [r7, #7]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	bf8c      	ite	hi
 800d330:	2301      	movhi	r3, #1
 800d332:	2300      	movls	r3, #0
 800d334:	b2db      	uxtb	r3, r3
 800d336:	461a      	mov	r2, r3
 800d338:	f107 0314 	add.w	r3, r7, #20
 800d33c:	4611      	mov	r1, r2
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fe fb24 	bl	800b98c <chk_lock>
 800d344:	4603      	mov	r3, r0
 800d346:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d34a:	79fb      	ldrb	r3, [r7, #7]
 800d34c:	f003 031c 	and.w	r3, r3, #28
 800d350:	2b00      	cmp	r3, #0
 800d352:	d07f      	beq.n	800d454 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800d354:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d017      	beq.n	800d38c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d35c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d360:	2b04      	cmp	r3, #4
 800d362:	d10e      	bne.n	800d382 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d364:	f7fe fb6e 	bl	800ba44 <enq_lock>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d006      	beq.n	800d37c <f_open+0xc4>
 800d36e:	f107 0314 	add.w	r3, r7, #20
 800d372:	4618      	mov	r0, r3
 800d374:	f7ff faaf 	bl	800c8d6 <dir_register>
 800d378:	4603      	mov	r3, r0
 800d37a:	e000      	b.n	800d37e <f_open+0xc6>
 800d37c:	2312      	movs	r3, #18
 800d37e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d382:	79fb      	ldrb	r3, [r7, #7]
 800d384:	f043 0308 	orr.w	r3, r3, #8
 800d388:	71fb      	strb	r3, [r7, #7]
 800d38a:	e010      	b.n	800d3ae <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d38c:	7ebb      	ldrb	r3, [r7, #26]
 800d38e:	f003 0311 	and.w	r3, r3, #17
 800d392:	2b00      	cmp	r3, #0
 800d394:	d003      	beq.n	800d39e <f_open+0xe6>
					res = FR_DENIED;
 800d396:	2307      	movs	r3, #7
 800d398:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d39c:	e007      	b.n	800d3ae <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d39e:	79fb      	ldrb	r3, [r7, #7]
 800d3a0:	f003 0304 	and.w	r3, r3, #4
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d002      	beq.n	800d3ae <f_open+0xf6>
 800d3a8:	2308      	movs	r3, #8
 800d3aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d3ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d168      	bne.n	800d488 <f_open+0x1d0>
 800d3b6:	79fb      	ldrb	r3, [r7, #7]
 800d3b8:	f003 0308 	and.w	r3, r3, #8
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d063      	beq.n	800d488 <f_open+0x1d0>
				dw = GET_FATTIME();
 800d3c0:	f7fd fbd6 	bl	800ab70 <get_fattime>
 800d3c4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3c8:	330e      	adds	r3, #14
 800d3ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7fe fa02 	bl	800b7d6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3d4:	3316      	adds	r3, #22
 800d3d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fe f9fc 	bl	800b7d6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3e0:	330b      	adds	r3, #11
 800d3e2:	2220      	movs	r2, #32
 800d3e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff f981 	bl	800c6f4 <ld_clust>
 800d3f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff f999 	bl	800c732 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d402:	331c      	adds	r3, #28
 800d404:	2100      	movs	r1, #0
 800d406:	4618      	mov	r0, r3
 800d408:	f7fe f9e5 	bl	800b7d6 <st_dword>
					fs->wflag = 1;
 800d40c:	693b      	ldr	r3, [r7, #16]
 800d40e:	2201      	movs	r2, #1
 800d410:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d414:	2b00      	cmp	r3, #0
 800d416:	d037      	beq.n	800d488 <f_open+0x1d0>
						dw = fs->winsect;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d41c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d41e:	f107 0314 	add.w	r3, r7, #20
 800d422:	2200      	movs	r2, #0
 800d424:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d426:	4618      	mov	r0, r3
 800d428:	f7fe feac 	bl	800c184 <remove_chain>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800d432:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d436:	2b00      	cmp	r3, #0
 800d438:	d126      	bne.n	800d488 <f_open+0x1d0>
							res = move_window(fs, dw);
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fe fc54 	bl	800bcec <move_window>
 800d444:	4603      	mov	r3, r0
 800d446:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d44e:	3a01      	subs	r2, #1
 800d450:	611a      	str	r2, [r3, #16]
 800d452:	e019      	b.n	800d488 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d454:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d115      	bne.n	800d488 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d45c:	7ebb      	ldrb	r3, [r7, #26]
 800d45e:	f003 0310 	and.w	r3, r3, #16
 800d462:	2b00      	cmp	r3, #0
 800d464:	d003      	beq.n	800d46e <f_open+0x1b6>
					res = FR_NO_FILE;
 800d466:	2304      	movs	r3, #4
 800d468:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d46c:	e00c      	b.n	800d488 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d46e:	79fb      	ldrb	r3, [r7, #7]
 800d470:	f003 0302 	and.w	r3, r3, #2
 800d474:	2b00      	cmp	r3, #0
 800d476:	d007      	beq.n	800d488 <f_open+0x1d0>
 800d478:	7ebb      	ldrb	r3, [r7, #26]
 800d47a:	f003 0301 	and.w	r3, r3, #1
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d002      	beq.n	800d488 <f_open+0x1d0>
						res = FR_DENIED;
 800d482:	2307      	movs	r3, #7
 800d484:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d488:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d126      	bne.n	800d4de <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d490:	79fb      	ldrb	r3, [r7, #7]
 800d492:	f003 0308 	and.w	r3, r3, #8
 800d496:	2b00      	cmp	r3, #0
 800d498:	d003      	beq.n	800d4a2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800d49a:	79fb      	ldrb	r3, [r7, #7]
 800d49c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d4aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	bf8c      	ite	hi
 800d4b6:	2301      	movhi	r3, #1
 800d4b8:	2300      	movls	r3, #0
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	461a      	mov	r2, r3
 800d4be:	f107 0314 	add.w	r3, r7, #20
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fe fadf 	bl	800ba88 <inc_lock>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d102      	bne.n	800d4de <f_open+0x226>
 800d4d8:	2302      	movs	r3, #2
 800d4da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d4de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f040 8095 	bne.w	800d612 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4ec:	4611      	mov	r1, r2
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff f900 	bl	800c6f4 <ld_clust>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d4fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4fc:	331c      	adds	r3, #28
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe f92b 	bl	800b75a <ld_dword>
 800d504:	4602      	mov	r2, r0
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d510:	693a      	ldr	r2, [r7, #16]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	88da      	ldrh	r2, [r3, #6]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	79fa      	ldrb	r2, [r7, #7]
 800d522:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	2200      	movs	r2, #0
 800d52e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	3330      	adds	r3, #48	@ 0x30
 800d53a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d53e:	2100      	movs	r1, #0
 800d540:	4618      	mov	r0, r3
 800d542:	f7fe f995 	bl	800b870 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d546:	79fb      	ldrb	r3, [r7, #7]
 800d548:	f003 0320 	and.w	r3, r3, #32
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d060      	beq.n	800d612 <f_open+0x35a>
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d05c      	beq.n	800d612 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	68da      	ldr	r2, [r3, #12]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	895b      	ldrh	r3, [r3, #10]
 800d564:	025b      	lsls	r3, r3, #9
 800d566:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	657b      	str	r3, [r7, #84]	@ 0x54
 800d574:	e016      	b.n	800d5a4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fe fc71 	bl	800be62 <get_fat>
 800d580:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d582:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d584:	2b01      	cmp	r3, #1
 800d586:	d802      	bhi.n	800d58e <f_open+0x2d6>
 800d588:	2302      	movs	r3, #2
 800d58a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d58e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d594:	d102      	bne.n	800d59c <f_open+0x2e4>
 800d596:	2301      	movs	r3, #1
 800d598:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d59c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d59e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800d5a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d103      	bne.n	800d5b4 <f_open+0x2fc>
 800d5ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d5ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d8e0      	bhi.n	800d576 <f_open+0x2be>
				}
				fp->clust = clst;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d5ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d127      	bne.n	800d612 <f_open+0x35a>
 800d5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d022      	beq.n	800d612 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fe fc27 	bl	800be24 <clust2sect>
 800d5d6:	6478      	str	r0, [r7, #68]	@ 0x44
 800d5d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d103      	bne.n	800d5e6 <f_open+0x32e>
						res = FR_INT_ERR;
 800d5de:	2302      	movs	r3, #2
 800d5e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800d5e4:	e015      	b.n	800d612 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5e8:	0a5a      	lsrs	r2, r3, #9
 800d5ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5ec:	441a      	add	r2, r3
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	7858      	ldrb	r0, [r3, #1]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6a1a      	ldr	r2, [r3, #32]
 800d600:	2301      	movs	r3, #1
 800d602:	f7fe f833 	bl	800b66c <disk_read>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d002      	beq.n	800d612 <f_open+0x35a>
 800d60c:	2301      	movs	r3, #1
 800d60e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d612:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800d616:	2b00      	cmp	r3, #0
 800d618:	d002      	beq.n	800d620 <f_open+0x368>
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2200      	movs	r2, #0
 800d61e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800d626:	4611      	mov	r1, r2
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe f994 	bl	800b956 <unlock_fs>
 800d62e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800d632:	4618      	mov	r0, r3
 800d634:	3760      	adds	r7, #96	@ 0x60
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b08e      	sub	sp, #56	@ 0x38
 800d63e:	af00      	add	r7, sp, #0
 800d640:	60f8      	str	r0, [r7, #12]
 800d642:	60b9      	str	r1, [r7, #8]
 800d644:	607a      	str	r2, [r7, #4]
 800d646:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2200      	movs	r2, #0
 800d650:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	f107 0214 	add.w	r2, r7, #20
 800d658:	4611      	mov	r1, r2
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff fd80 	bl	800d160 <validate>
 800d660:	4603      	mov	r3, r0
 800d662:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d666:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d107      	bne.n	800d67e <f_read+0x44>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	7d5b      	ldrb	r3, [r3, #21]
 800d672:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d676:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d009      	beq.n	800d692 <f_read+0x58>
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800d684:	4611      	mov	r1, r2
 800d686:	4618      	mov	r0, r3
 800d688:	f7fe f965 	bl	800b956 <unlock_fs>
 800d68c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d690:	e13d      	b.n	800d90e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	7d1b      	ldrb	r3, [r3, #20]
 800d696:	f003 0301 	and.w	r3, r3, #1
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d106      	bne.n	800d6ac <f_read+0x72>
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	2107      	movs	r1, #7
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fe f957 	bl	800b956 <unlock_fs>
 800d6a8:	2307      	movs	r3, #7
 800d6aa:	e130      	b.n	800d90e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	68da      	ldr	r2, [r3, #12]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	699b      	ldr	r3, [r3, #24]
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	6a3b      	ldr	r3, [r7, #32]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	f240 811c 	bls.w	800d8fa <f_read+0x2c0>
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d6c6:	e118      	b.n	800d8fa <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	699b      	ldr	r3, [r3, #24]
 800d6cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	f040 80e4 	bne.w	800d89e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	0a5b      	lsrs	r3, r3, #9
 800d6dc:	697a      	ldr	r2, [r7, #20]
 800d6de:	8952      	ldrh	r2, [r2, #10]
 800d6e0:	3a01      	subs	r2, #1
 800d6e2:	4013      	ands	r3, r2
 800d6e4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d139      	bne.n	800d760 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d103      	bne.n	800d6fc <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6fa:	e013      	b.n	800d724 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d700:	2b00      	cmp	r3, #0
 800d702:	d007      	beq.n	800d714 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	4619      	mov	r1, r3
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f7fe fe37 	bl	800c37e <clmt_clust>
 800d710:	6338      	str	r0, [r7, #48]	@ 0x30
 800d712:	e007      	b.n	800d724 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	69db      	ldr	r3, [r3, #28]
 800d71a:	4619      	mov	r1, r3
 800d71c:	4610      	mov	r0, r2
 800d71e:	f7fe fba0 	bl	800be62 <get_fat>
 800d722:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d726:	2b01      	cmp	r3, #1
 800d728:	d809      	bhi.n	800d73e <f_read+0x104>
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2202      	movs	r2, #2
 800d72e:	755a      	strb	r2, [r3, #21]
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	2102      	movs	r1, #2
 800d734:	4618      	mov	r0, r3
 800d736:	f7fe f90e 	bl	800b956 <unlock_fs>
 800d73a:	2302      	movs	r3, #2
 800d73c:	e0e7      	b.n	800d90e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d744:	d109      	bne.n	800d75a <f_read+0x120>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2201      	movs	r2, #1
 800d74a:	755a      	strb	r2, [r3, #21]
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	2101      	movs	r1, #1
 800d750:	4618      	mov	r0, r3
 800d752:	f7fe f900 	bl	800b956 <unlock_fs>
 800d756:	2301      	movs	r3, #1
 800d758:	e0d9      	b.n	800d90e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d75e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d760:	697a      	ldr	r2, [r7, #20]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	69db      	ldr	r3, [r3, #28]
 800d766:	4619      	mov	r1, r3
 800d768:	4610      	mov	r0, r2
 800d76a:	f7fe fb5b 	bl	800be24 <clust2sect>
 800d76e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d109      	bne.n	800d78a <f_read+0x150>
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2202      	movs	r2, #2
 800d77a:	755a      	strb	r2, [r3, #21]
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	2102      	movs	r1, #2
 800d780:	4618      	mov	r0, r3
 800d782:	f7fe f8e8 	bl	800b956 <unlock_fs>
 800d786:	2302      	movs	r3, #2
 800d788:	e0c1      	b.n	800d90e <f_read+0x2d4>
			sect += csect;
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	4413      	add	r3, r2
 800d790:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	0a5b      	lsrs	r3, r3, #9
 800d796:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d03e      	beq.n	800d81c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d79e:	69fa      	ldr	r2, [r7, #28]
 800d7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a2:	4413      	add	r3, r2
 800d7a4:	697a      	ldr	r2, [r7, #20]
 800d7a6:	8952      	ldrh	r2, [r2, #10]
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d905      	bls.n	800d7b8 <f_read+0x17e>
					cc = fs->csize - csect;
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	895b      	ldrh	r3, [r3, #10]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	1ad3      	subs	r3, r2, r3
 800d7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	7858      	ldrb	r0, [r3, #1]
 800d7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7be:	69ba      	ldr	r2, [r7, #24]
 800d7c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d7c2:	f7fd ff53 	bl	800b66c <disk_read>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d009      	beq.n	800d7e0 <f_read+0x1a6>
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	755a      	strb	r2, [r3, #21]
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	2101      	movs	r1, #1
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f7fe f8bd 	bl	800b956 <unlock_fs>
 800d7dc:	2301      	movs	r3, #1
 800d7de:	e096      	b.n	800d90e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	7d1b      	ldrb	r3, [r3, #20]
 800d7e4:	b25b      	sxtb	r3, r3
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	da14      	bge.n	800d814 <f_read+0x1da>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6a1a      	ldr	r2, [r3, #32]
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	1ad3      	subs	r3, r2, r3
 800d7f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d90d      	bls.n	800d814 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6a1a      	ldr	r2, [r3, #32]
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	025b      	lsls	r3, r3, #9
 800d802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d804:	18d0      	adds	r0, r2, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	3330      	adds	r3, #48	@ 0x30
 800d80a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d80e:	4619      	mov	r1, r3
 800d810:	f7fe f80d 	bl	800b82e <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d816:	025b      	lsls	r3, r3, #9
 800d818:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d81a:	e05a      	b.n	800d8d2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6a1b      	ldr	r3, [r3, #32]
 800d820:	69ba      	ldr	r2, [r7, #24]
 800d822:	429a      	cmp	r2, r3
 800d824:	d038      	beq.n	800d898 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	7d1b      	ldrb	r3, [r3, #20]
 800d82a:	b25b      	sxtb	r3, r3
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	da1d      	bge.n	800d86c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	7858      	ldrb	r0, [r3, #1]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6a1a      	ldr	r2, [r3, #32]
 800d83e:	2301      	movs	r3, #1
 800d840:	f7fd ff34 	bl	800b6ac <disk_write>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d009      	beq.n	800d85e <f_read+0x224>
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2201      	movs	r2, #1
 800d84e:	755a      	strb	r2, [r3, #21]
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	2101      	movs	r1, #1
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe f87e 	bl	800b956 <unlock_fs>
 800d85a:	2301      	movs	r3, #1
 800d85c:	e057      	b.n	800d90e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	7d1b      	ldrb	r3, [r3, #20]
 800d862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d866:	b2da      	uxtb	r2, r3
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	7858      	ldrb	r0, [r3, #1]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d876:	2301      	movs	r3, #1
 800d878:	69ba      	ldr	r2, [r7, #24]
 800d87a:	f7fd fef7 	bl	800b66c <disk_read>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d009      	beq.n	800d898 <f_read+0x25e>
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2201      	movs	r2, #1
 800d888:	755a      	strb	r2, [r3, #21]
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	2101      	movs	r1, #1
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fe f861 	bl	800b956 <unlock_fs>
 800d894:	2301      	movs	r3, #1
 800d896:	e03a      	b.n	800d90e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	69ba      	ldr	r2, [r7, #24]
 800d89c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8a6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d8aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d8ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d901      	bls.n	800d8b8 <f_read+0x27e>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	699b      	ldr	r3, [r3, #24]
 800d8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8c6:	4413      	add	r3, r2
 800d8c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d8ce:	f7fd ffae 	bl	800b82e <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d8d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d6:	4413      	add	r3, r2
 800d8d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	699a      	ldr	r2, [r3, #24]
 800d8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e0:	441a      	add	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	619a      	str	r2, [r3, #24]
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ec:	441a      	add	r2, r3
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	601a      	str	r2, [r3, #0]
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f6:	1ad3      	subs	r3, r2, r3
 800d8f8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	f47f aee3 	bne.w	800d6c8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	2100      	movs	r1, #0
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe f825 	bl	800b956 <unlock_fs>
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3738      	adds	r7, #56	@ 0x38
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b08c      	sub	sp, #48	@ 0x30
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	60f8      	str	r0, [r7, #12]
 800d91e:	60b9      	str	r1, [r7, #8]
 800d920:	607a      	str	r2, [r7, #4]
 800d922:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	2200      	movs	r2, #0
 800d92c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f107 0210 	add.w	r2, r7, #16
 800d934:	4611      	mov	r1, r2
 800d936:	4618      	mov	r0, r3
 800d938:	f7ff fc12 	bl	800d160 <validate>
 800d93c:	4603      	mov	r3, r0
 800d93e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d942:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d946:	2b00      	cmp	r3, #0
 800d948:	d107      	bne.n	800d95a <f_write+0x44>
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	7d5b      	ldrb	r3, [r3, #21]
 800d94e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d956:	2b00      	cmp	r3, #0
 800d958:	d009      	beq.n	800d96e <f_write+0x58>
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800d960:	4611      	mov	r1, r2
 800d962:	4618      	mov	r0, r3
 800d964:	f7fd fff7 	bl	800b956 <unlock_fs>
 800d968:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d96c:	e173      	b.n	800dc56 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	7d1b      	ldrb	r3, [r3, #20]
 800d972:	f003 0302 	and.w	r3, r3, #2
 800d976:	2b00      	cmp	r3, #0
 800d978:	d106      	bne.n	800d988 <f_write+0x72>
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	2107      	movs	r1, #7
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fd ffe9 	bl	800b956 <unlock_fs>
 800d984:	2307      	movs	r3, #7
 800d986:	e166      	b.n	800dc56 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	699a      	ldr	r2, [r3, #24]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	441a      	add	r2, r3
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	429a      	cmp	r2, r3
 800d996:	f080 814b 	bcs.w	800dc30 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	699b      	ldr	r3, [r3, #24]
 800d99e:	43db      	mvns	r3, r3
 800d9a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d9a2:	e145      	b.n	800dc30 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	699b      	ldr	r3, [r3, #24]
 800d9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f040 8101 	bne.w	800dbb4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	699b      	ldr	r3, [r3, #24]
 800d9b6:	0a5b      	lsrs	r3, r3, #9
 800d9b8:	693a      	ldr	r2, [r7, #16]
 800d9ba:	8952      	ldrh	r2, [r2, #10]
 800d9bc:	3a01      	subs	r2, #1
 800d9be:	4013      	ands	r3, r2
 800d9c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d14d      	bne.n	800da64 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	699b      	ldr	r3, [r3, #24]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d10c      	bne.n	800d9ea <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d9d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d11a      	bne.n	800da12 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2100      	movs	r1, #0
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fe fc34 	bl	800c24e <create_chain>
 800d9e6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d9e8:	e013      	b.n	800da12 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d007      	beq.n	800da02 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	699b      	ldr	r3, [r3, #24]
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	68f8      	ldr	r0, [r7, #12]
 800d9fa:	f7fe fcc0 	bl	800c37e <clmt_clust>
 800d9fe:	62b8      	str	r0, [r7, #40]	@ 0x28
 800da00:	e007      	b.n	800da12 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	69db      	ldr	r3, [r3, #28]
 800da08:	4619      	mov	r1, r3
 800da0a:	4610      	mov	r0, r2
 800da0c:	f7fe fc1f 	bl	800c24e <create_chain>
 800da10:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800da12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da14:	2b00      	cmp	r3, #0
 800da16:	f000 8110 	beq.w	800dc3a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d109      	bne.n	800da34 <f_write+0x11e>
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2202      	movs	r2, #2
 800da24:	755a      	strb	r2, [r3, #21]
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	2102      	movs	r1, #2
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7fd ff93 	bl	800b956 <unlock_fs>
 800da30:	2302      	movs	r3, #2
 800da32:	e110      	b.n	800dc56 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da3a:	d109      	bne.n	800da50 <f_write+0x13a>
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2201      	movs	r2, #1
 800da40:	755a      	strb	r2, [r3, #21]
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	2101      	movs	r1, #1
 800da46:	4618      	mov	r0, r3
 800da48:	f7fd ff85 	bl	800b956 <unlock_fs>
 800da4c:	2301      	movs	r3, #1
 800da4e:	e102      	b.n	800dc56 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da54:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d102      	bne.n	800da64 <f_write+0x14e>
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da62:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	7d1b      	ldrb	r3, [r3, #20]
 800da68:	b25b      	sxtb	r3, r3
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	da1d      	bge.n	800daaa <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	7858      	ldrb	r0, [r3, #1]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	6a1a      	ldr	r2, [r3, #32]
 800da7c:	2301      	movs	r3, #1
 800da7e:	f7fd fe15 	bl	800b6ac <disk_write>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d009      	beq.n	800da9c <f_write+0x186>
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2201      	movs	r2, #1
 800da8c:	755a      	strb	r2, [r3, #21]
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	2101      	movs	r1, #1
 800da92:	4618      	mov	r0, r3
 800da94:	f7fd ff5f 	bl	800b956 <unlock_fs>
 800da98:	2301      	movs	r3, #1
 800da9a:	e0dc      	b.n	800dc56 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	7d1b      	ldrb	r3, [r3, #20]
 800daa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800daa4:	b2da      	uxtb	r2, r3
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800daaa:	693a      	ldr	r2, [r7, #16]
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	69db      	ldr	r3, [r3, #28]
 800dab0:	4619      	mov	r1, r3
 800dab2:	4610      	mov	r0, r2
 800dab4:	f7fe f9b6 	bl	800be24 <clust2sect>
 800dab8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d109      	bne.n	800dad4 <f_write+0x1be>
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2202      	movs	r2, #2
 800dac4:	755a      	strb	r2, [r3, #21]
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	2102      	movs	r1, #2
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fd ff43 	bl	800b956 <unlock_fs>
 800dad0:	2302      	movs	r3, #2
 800dad2:	e0c0      	b.n	800dc56 <f_write+0x340>
			sect += csect;
 800dad4:	697a      	ldr	r2, [r7, #20]
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	4413      	add	r3, r2
 800dada:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	0a5b      	lsrs	r3, r3, #9
 800dae0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d041      	beq.n	800db6c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dae8:	69ba      	ldr	r2, [r7, #24]
 800daea:	6a3b      	ldr	r3, [r7, #32]
 800daec:	4413      	add	r3, r2
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	8952      	ldrh	r2, [r2, #10]
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d905      	bls.n	800db02 <f_write+0x1ec>
					cc = fs->csize - csect;
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	895b      	ldrh	r3, [r3, #10]
 800dafa:	461a      	mov	r2, r3
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	7858      	ldrb	r0, [r3, #1]
 800db06:	6a3b      	ldr	r3, [r7, #32]
 800db08:	697a      	ldr	r2, [r7, #20]
 800db0a:	69f9      	ldr	r1, [r7, #28]
 800db0c:	f7fd fdce 	bl	800b6ac <disk_write>
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d009      	beq.n	800db2a <f_write+0x214>
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2201      	movs	r2, #1
 800db1a:	755a      	strb	r2, [r3, #21]
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	2101      	movs	r1, #1
 800db20:	4618      	mov	r0, r3
 800db22:	f7fd ff18 	bl	800b956 <unlock_fs>
 800db26:	2301      	movs	r3, #1
 800db28:	e095      	b.n	800dc56 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6a1a      	ldr	r2, [r3, #32]
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	6a3a      	ldr	r2, [r7, #32]
 800db34:	429a      	cmp	r2, r3
 800db36:	d915      	bls.n	800db64 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6a1a      	ldr	r2, [r3, #32]
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	025b      	lsls	r3, r3, #9
 800db48:	69fa      	ldr	r2, [r7, #28]
 800db4a:	4413      	add	r3, r2
 800db4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db50:	4619      	mov	r1, r3
 800db52:	f7fd fe6c 	bl	800b82e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	7d1b      	ldrb	r3, [r3, #20]
 800db5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	025b      	lsls	r3, r3, #9
 800db68:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800db6a:	e044      	b.n	800dbf6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	6a1b      	ldr	r3, [r3, #32]
 800db70:	697a      	ldr	r2, [r7, #20]
 800db72:	429a      	cmp	r2, r3
 800db74:	d01b      	beq.n	800dbae <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	699a      	ldr	r2, [r3, #24]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800db7e:	429a      	cmp	r2, r3
 800db80:	d215      	bcs.n	800dbae <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	7858      	ldrb	r0, [r3, #1]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db8c:	2301      	movs	r3, #1
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	f7fd fd6c 	bl	800b66c <disk_read>
 800db94:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800db96:	2b00      	cmp	r3, #0
 800db98:	d009      	beq.n	800dbae <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2201      	movs	r2, #1
 800db9e:	755a      	strb	r2, [r3, #21]
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	2101      	movs	r1, #1
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7fd fed6 	bl	800b956 <unlock_fs>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	e053      	b.n	800dc56 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	697a      	ldr	r2, [r7, #20]
 800dbb2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbbc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dbc0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dbc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d901      	bls.n	800dbce <f_write+0x2b8>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	699b      	ldr	r3, [r3, #24]
 800dbd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbdc:	4413      	add	r3, r2
 800dbde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dbe0:	69f9      	ldr	r1, [r7, #28]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd fe23 	bl	800b82e <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	7d1b      	ldrb	r3, [r3, #20]
 800dbec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dbf6:	69fa      	ldr	r2, [r7, #28]
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfa:	4413      	add	r3, r2
 800dbfc:	61fb      	str	r3, [r7, #28]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	699a      	ldr	r2, [r3, #24]
 800dc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc04:	441a      	add	r2, r3
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	619a      	str	r2, [r3, #24]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	68da      	ldr	r2, [r3, #12]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	bf38      	it	cc
 800dc16:	461a      	movcc	r2, r3
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	60da      	str	r2, [r3, #12]
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc22:	441a      	add	r2, r3
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	601a      	str	r2, [r3, #0]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	f47f aeb6 	bne.w	800d9a4 <f_write+0x8e>
 800dc38:	e000      	b.n	800dc3c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dc3a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	7d1b      	ldrb	r3, [r3, #20]
 800dc40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc44:	b2da      	uxtb	r2, r3
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fd fe81 	bl	800b956 <unlock_fs>
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3730      	adds	r7, #48	@ 0x30
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b086      	sub	sp, #24
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f107 0208 	add.w	r2, r7, #8
 800dc6c:	4611      	mov	r1, r2
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff fa76 	bl	800d160 <validate>
 800dc74:	4603      	mov	r3, r0
 800dc76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc78:	7dfb      	ldrb	r3, [r7, #23]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d16d      	bne.n	800dd5a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	7d1b      	ldrb	r3, [r3, #20]
 800dc82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d067      	beq.n	800dd5a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	7d1b      	ldrb	r3, [r3, #20]
 800dc8e:	b25b      	sxtb	r3, r3
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	da1a      	bge.n	800dcca <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	7858      	ldrb	r0, [r3, #1]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1a      	ldr	r2, [r3, #32]
 800dca2:	2301      	movs	r3, #1
 800dca4:	f7fd fd02 	bl	800b6ac <disk_write>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d006      	beq.n	800dcbc <f_sync+0x5e>
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fd fe4f 	bl	800b956 <unlock_fs>
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e055      	b.n	800dd68 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	7d1b      	ldrb	r3, [r3, #20]
 800dcc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dcca:	f7fc ff51 	bl	800ab70 <get_fattime>
 800dcce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4610      	mov	r0, r2
 800dcda:	f7fe f807 	bl	800bcec <move_window>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dce2:	7dfb      	ldrb	r3, [r7, #23]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d138      	bne.n	800dd5a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	330b      	adds	r3, #11
 800dcf2:	781a      	ldrb	r2, [r3, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	330b      	adds	r3, #11
 800dcf8:	f042 0220 	orr.w	r2, r2, #32
 800dcfc:	b2d2      	uxtb	r2, r2
 800dcfe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6818      	ldr	r0, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	461a      	mov	r2, r3
 800dd0a:	68f9      	ldr	r1, [r7, #12]
 800dd0c:	f7fe fd11 	bl	800c732 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f103 021c 	add.w	r2, r3, #28
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	f7fd fd5a 	bl	800b7d6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3316      	adds	r3, #22
 800dd26:	6939      	ldr	r1, [r7, #16]
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7fd fd54 	bl	800b7d6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	3312      	adds	r3, #18
 800dd32:	2100      	movs	r1, #0
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fd fd33 	bl	800b7a0 <st_word>
					fs->wflag = 1;
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fe f800 	bl	800bd48 <sync_fs>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	7d1b      	ldrb	r3, [r3, #20]
 800dd50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	7dfa      	ldrb	r2, [r7, #23]
 800dd5e:	4611      	mov	r1, r2
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fd fdf8 	bl	800b956 <unlock_fs>
 800dd66:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3718      	adds	r7, #24
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f7ff ff70 	bl	800dc5e <f_sync>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dd82:	7bfb      	ldrb	r3, [r7, #15]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d11d      	bne.n	800ddc4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f107 0208 	add.w	r2, r7, #8
 800dd8e:	4611      	mov	r1, r2
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7ff f9e5 	bl	800d160 <validate>
 800dd96:	4603      	mov	r3, r0
 800dd98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dd9a:	7bfb      	ldrb	r3, [r7, #15]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d111      	bne.n	800ddc4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fd fefd 	bl	800bba4 <dec_lock>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ddae:	7bfb      	ldrb	r3, [r7, #15]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d102      	bne.n	800ddba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	2100      	movs	r1, #0
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7fd fdc9 	bl	800b956 <unlock_fs>
#endif
		}
	}
	return res;
 800ddc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3710      	adds	r7, #16
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b09e      	sub	sp, #120	@ 0x78
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ddda:	f107 010c 	add.w	r1, r7, #12
 800ddde:	1d3b      	adds	r3, r7, #4
 800dde0:	2202      	movs	r2, #2
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fe ff68 	bl	800ccb8 <find_volume>
 800dde8:	4603      	mov	r3, r0
 800ddea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800ddf2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f040 808e 	bne.w	800df18 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800de02:	4611      	mov	r1, r2
 800de04:	4618      	mov	r0, r3
 800de06:	f7fe fe4b 	bl	800caa0 <follow_path>
 800de0a:	4603      	mov	r3, r0
 800de0c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800de10:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800de14:	2b00      	cmp	r3, #0
 800de16:	d108      	bne.n	800de2a <f_unlink+0x5c>
 800de18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800de1c:	2102      	movs	r1, #2
 800de1e:	4618      	mov	r0, r3
 800de20:	f7fd fdb4 	bl	800b98c <chk_lock>
 800de24:	4603      	mov	r3, r0
 800de26:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800de2a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d172      	bne.n	800df18 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800de32:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800de36:	b25b      	sxtb	r3, r3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	da03      	bge.n	800de44 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800de3c:	2306      	movs	r3, #6
 800de3e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800de42:	e008      	b.n	800de56 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800de44:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800de50:	2307      	movs	r3, #7
 800de52:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800de56:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d134      	bne.n	800dec8 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800de62:	4611      	mov	r1, r2
 800de64:	4618      	mov	r0, r3
 800de66:	f7fe fc45 	bl	800c6f4 <ld_clust>
 800de6a:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800de6c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800de70:	f003 0310 	and.w	r3, r3, #16
 800de74:	2b00      	cmp	r3, #0
 800de76:	d027      	beq.n	800dec8 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800de7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de7e:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800de80:	f107 0310 	add.w	r3, r7, #16
 800de84:	2100      	movs	r1, #0
 800de86:	4618      	mov	r0, r3
 800de88:	f7fe faad 	bl	800c3e6 <dir_sdi>
 800de8c:	4603      	mov	r3, r0
 800de8e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800de92:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800de96:	2b00      	cmp	r3, #0
 800de98:	d116      	bne.n	800dec8 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800de9a:	f107 0310 	add.w	r3, r7, #16
 800de9e:	2100      	movs	r1, #0
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fe fc66 	bl	800c772 <dir_read>
 800dea6:	4603      	mov	r3, r0
 800dea8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800deac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d102      	bne.n	800deba <f_unlink+0xec>
 800deb4:	2307      	movs	r3, #7
 800deb6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800deba:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800debe:	2b04      	cmp	r3, #4
 800dec0:	d102      	bne.n	800dec8 <f_unlink+0xfa>
 800dec2:	2300      	movs	r3, #0
 800dec4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800dec8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800decc:	2b00      	cmp	r3, #0
 800dece:	d123      	bne.n	800df18 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ded0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7fe fd30 	bl	800c93a <dir_remove>
 800deda:	4603      	mov	r3, r0
 800dedc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800dee0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10c      	bne.n	800df02 <f_unlink+0x134>
 800dee8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800deea:	2b00      	cmp	r3, #0
 800deec:	d009      	beq.n	800df02 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800deee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800def2:	2200      	movs	r2, #0
 800def4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800def6:	4618      	mov	r0, r3
 800def8:	f7fe f944 	bl	800c184 <remove_chain>
 800defc:	4603      	mov	r3, r0
 800defe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800df02:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800df06:	2b00      	cmp	r3, #0
 800df08:	d106      	bne.n	800df18 <f_unlink+0x14a>
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fd ff1b 	bl	800bd48 <sync_fs>
 800df12:	4603      	mov	r3, r0
 800df14:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800df1e:	4611      	mov	r1, r2
 800df20:	4618      	mov	r0, r3
 800df22:	f7fd fd18 	bl	800b956 <unlock_fs>
 800df26:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3778      	adds	r7, #120	@ 0x78
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
	...

0800df34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df34:	b480      	push	{r7}
 800df36:	b087      	sub	sp, #28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	4613      	mov	r3, r2
 800df40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df42:	2301      	movs	r3, #1
 800df44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df4a:	4b1f      	ldr	r3, [pc, #124]	@ (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df4c:	7a5b      	ldrb	r3, [r3, #9]
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d131      	bne.n	800dfb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df54:	4b1c      	ldr	r3, [pc, #112]	@ (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df56:	7a5b      	ldrb	r3, [r3, #9]
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	461a      	mov	r2, r3
 800df5c:	4b1a      	ldr	r3, [pc, #104]	@ (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df5e:	2100      	movs	r1, #0
 800df60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df62:	4b19      	ldr	r3, [pc, #100]	@ (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df64:	7a5b      	ldrb	r3, [r3, #9]
 800df66:	b2db      	uxtb	r3, r3
 800df68:	4a17      	ldr	r2, [pc, #92]	@ (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4413      	add	r3, r2
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df72:	4b15      	ldr	r3, [pc, #84]	@ (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df74:	7a5b      	ldrb	r3, [r3, #9]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	461a      	mov	r2, r3
 800df7a:	4b13      	ldr	r3, [pc, #76]	@ (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df7c:	4413      	add	r3, r2
 800df7e:	79fa      	ldrb	r2, [r7, #7]
 800df80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df82:	4b11      	ldr	r3, [pc, #68]	@ (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df84:	7a5b      	ldrb	r3, [r3, #9]
 800df86:	b2db      	uxtb	r3, r3
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	b2d1      	uxtb	r1, r2
 800df8c:	4a0e      	ldr	r2, [pc, #56]	@ (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df8e:	7251      	strb	r1, [r2, #9]
 800df90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df92:	7dbb      	ldrb	r3, [r7, #22]
 800df94:	3330      	adds	r3, #48	@ 0x30
 800df96:	b2da      	uxtb	r2, r3
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	223a      	movs	r2, #58	@ 0x3a
 800dfa2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	3302      	adds	r3, #2
 800dfa8:	222f      	movs	r2, #47	@ 0x2f
 800dfaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	3303      	adds	r3, #3
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dfb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	371c      	adds	r7, #28
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	20000af0 	.word	0x20000af0

0800dfcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	6839      	ldr	r1, [r7, #0]
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7ff ffaa 	bl	800df34 <FATFS_LinkDriverEx>
 800dfe0:	4603      	mov	r3, r0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}

0800dfea <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b084      	sub	sp, #16
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	4603      	mov	r3, r0
 800dff2:	6039      	str	r1, [r7, #0]
 800dff4:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800dff6:	2200      	movs	r2, #0
 800dff8:	2101      	movs	r1, #1
 800dffa:	2001      	movs	r0, #1
 800dffc:	f000 fc51 	bl	800e8a2 <osSemaphoreNew>
 800e000:	4602      	mov	r2, r0
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	bf14      	ite	ne
 800e00e:	2301      	movne	r3, #1
 800e010:	2300      	moveq	r3, #0
 800e012:	b2db      	uxtb	r3, r3
 800e014:	60fb      	str	r3, [r7, #12]

    return ret;
 800e016:	68fb      	ldr	r3, [r7, #12]
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3710      	adds	r7, #16
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f000 fd59 	bl	800eae0 <osSemaphoreDelete>
#endif
    return 1;
 800e02e:	2301      	movs	r3, #1
}
 800e030:	4618      	mov	r0, r3
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800e040:	2300      	movs	r3, #0
 800e042:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800e044:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 fcb3 	bl	800e9b4 <osSemaphoreAcquire>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800e054:	2301      	movs	r3, #1
 800e056:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e058:	68fb      	ldr	r3, [r7, #12]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b082      	sub	sp, #8
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fcf4 	bl	800ea58 <osSemaphoreRelease>
#endif
}
 800e070:	bf00      	nop
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <__NVIC_SetPriority>:
{
 800e078:	b480      	push	{r7}
 800e07a:	b083      	sub	sp, #12
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	4603      	mov	r3, r0
 800e080:	6039      	str	r1, [r7, #0]
 800e082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	db0a      	blt.n	800e0a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	490c      	ldr	r1, [pc, #48]	@ (800e0c4 <__NVIC_SetPriority+0x4c>)
 800e092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e096:	0112      	lsls	r2, r2, #4
 800e098:	b2d2      	uxtb	r2, r2
 800e09a:	440b      	add	r3, r1
 800e09c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e0a0:	e00a      	b.n	800e0b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	4908      	ldr	r1, [pc, #32]	@ (800e0c8 <__NVIC_SetPriority+0x50>)
 800e0a8:	79fb      	ldrb	r3, [r7, #7]
 800e0aa:	f003 030f 	and.w	r3, r3, #15
 800e0ae:	3b04      	subs	r3, #4
 800e0b0:	0112      	lsls	r2, r2, #4
 800e0b2:	b2d2      	uxtb	r2, r2
 800e0b4:	440b      	add	r3, r1
 800e0b6:	761a      	strb	r2, [r3, #24]
}
 800e0b8:	bf00      	nop
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	e000e100 	.word	0xe000e100
 800e0c8:	e000ed00 	.word	0xe000ed00

0800e0cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e0d0:	2100      	movs	r1, #0
 800e0d2:	f06f 0004 	mvn.w	r0, #4
 800e0d6:	f7ff ffcf 	bl	800e078 <__NVIC_SetPriority>
#endif
}
 800e0da:	bf00      	nop
 800e0dc:	bd80      	pop	{r7, pc}
	...

0800e0e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0e6:	f3ef 8305 	mrs	r3, IPSR
 800e0ea:	603b      	str	r3, [r7, #0]
  return(result);
 800e0ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d003      	beq.n	800e0fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e0f2:	f06f 0305 	mvn.w	r3, #5
 800e0f6:	607b      	str	r3, [r7, #4]
 800e0f8:	e00c      	b.n	800e114 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e0fa:	4b0a      	ldr	r3, [pc, #40]	@ (800e124 <osKernelInitialize+0x44>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d105      	bne.n	800e10e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e102:	4b08      	ldr	r3, [pc, #32]	@ (800e124 <osKernelInitialize+0x44>)
 800e104:	2201      	movs	r2, #1
 800e106:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e108:	2300      	movs	r3, #0
 800e10a:	607b      	str	r3, [r7, #4]
 800e10c:	e002      	b.n	800e114 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e10e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e112:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e114:	687b      	ldr	r3, [r7, #4]
}
 800e116:	4618      	mov	r0, r3
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop
 800e124:	20000afc 	.word	0x20000afc

0800e128 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e12e:	f3ef 8305 	mrs	r3, IPSR
 800e132:	603b      	str	r3, [r7, #0]
  return(result);
 800e134:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e13a:	f06f 0305 	mvn.w	r3, #5
 800e13e:	607b      	str	r3, [r7, #4]
 800e140:	e010      	b.n	800e164 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e142:	4b0b      	ldr	r3, [pc, #44]	@ (800e170 <osKernelStart+0x48>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b01      	cmp	r3, #1
 800e148:	d109      	bne.n	800e15e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e14a:	f7ff ffbf 	bl	800e0cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e14e:	4b08      	ldr	r3, [pc, #32]	@ (800e170 <osKernelStart+0x48>)
 800e150:	2202      	movs	r2, #2
 800e152:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e154:	f002 fbb8 	bl	80108c8 <vTaskStartScheduler>
      stat = osOK;
 800e158:	2300      	movs	r3, #0
 800e15a:	607b      	str	r3, [r7, #4]
 800e15c:	e002      	b.n	800e164 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e15e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e162:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e164:	687b      	ldr	r3, [r7, #4]
}
 800e166:	4618      	mov	r0, r3
 800e168:	3708      	adds	r7, #8
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	20000afc 	.word	0x20000afc

0800e174 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e174:	b580      	push	{r7, lr}
 800e176:	b08e      	sub	sp, #56	@ 0x38
 800e178:	af04      	add	r7, sp, #16
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e180:	2300      	movs	r3, #0
 800e182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e184:	f3ef 8305 	mrs	r3, IPSR
 800e188:	617b      	str	r3, [r7, #20]
  return(result);
 800e18a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d17e      	bne.n	800e28e <osThreadNew+0x11a>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d07b      	beq.n	800e28e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e196:	2380      	movs	r3, #128	@ 0x80
 800e198:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e19a:	2318      	movs	r3, #24
 800e19c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800e1a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e1a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d045      	beq.n	800e23a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d002      	beq.n	800e1bc <osThreadNew+0x48>
        name = attr->name;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	699b      	ldr	r3, [r3, #24]
 800e1c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d008      	beq.n	800e1e2 <osThreadNew+0x6e>
 800e1d0:	69fb      	ldr	r3, [r7, #28]
 800e1d2:	2b38      	cmp	r3, #56	@ 0x38
 800e1d4:	d805      	bhi.n	800e1e2 <osThreadNew+0x6e>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	f003 0301 	and.w	r3, r3, #1
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <osThreadNew+0x72>
        return (NULL);
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e054      	b.n	800e290 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	695b      	ldr	r3, [r3, #20]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d003      	beq.n	800e1f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	695b      	ldr	r3, [r3, #20]
 800e1f2:	089b      	lsrs	r3, r3, #2
 800e1f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00e      	beq.n	800e21c <osThreadNew+0xa8>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	68db      	ldr	r3, [r3, #12]
 800e202:	2b5b      	cmp	r3, #91	@ 0x5b
 800e204:	d90a      	bls.n	800e21c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d006      	beq.n	800e21c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	695b      	ldr	r3, [r3, #20]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d002      	beq.n	800e21c <osThreadNew+0xa8>
        mem = 1;
 800e216:	2301      	movs	r3, #1
 800e218:	61bb      	str	r3, [r7, #24]
 800e21a:	e010      	b.n	800e23e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d10c      	bne.n	800e23e <osThreadNew+0xca>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d108      	bne.n	800e23e <osThreadNew+0xca>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d104      	bne.n	800e23e <osThreadNew+0xca>
          mem = 0;
 800e234:	2300      	movs	r3, #0
 800e236:	61bb      	str	r3, [r7, #24]
 800e238:	e001      	b.n	800e23e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e23a:	2300      	movs	r3, #0
 800e23c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	2b01      	cmp	r3, #1
 800e242:	d110      	bne.n	800e266 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e24c:	9202      	str	r2, [sp, #8]
 800e24e:	9301      	str	r3, [sp, #4]
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	6a3a      	ldr	r2, [r7, #32]
 800e258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e25a:	68f8      	ldr	r0, [r7, #12]
 800e25c:	f002 f958 	bl	8010510 <xTaskCreateStatic>
 800e260:	4603      	mov	r3, r0
 800e262:	613b      	str	r3, [r7, #16]
 800e264:	e013      	b.n	800e28e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d110      	bne.n	800e28e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e26c:	6a3b      	ldr	r3, [r7, #32]
 800e26e:	b29a      	uxth	r2, r3
 800e270:	f107 0310 	add.w	r3, r7, #16
 800e274:	9301      	str	r3, [sp, #4]
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e27e:	68f8      	ldr	r0, [r7, #12]
 800e280:	f002 f9a6 	bl	80105d0 <xTaskCreate>
 800e284:	4603      	mov	r3, r0
 800e286:	2b01      	cmp	r3, #1
 800e288:	d001      	beq.n	800e28e <osThreadNew+0x11a>
            hTask = NULL;
 800e28a:	2300      	movs	r3, #0
 800e28c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e28e:	693b      	ldr	r3, [r7, #16]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3728      	adds	r7, #40	@ 0x28
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e2a0:	f3ef 8305 	mrs	r3, IPSR
 800e2a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e2a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d003      	beq.n	800e2b4 <osDelay+0x1c>
    stat = osErrorISR;
 800e2ac:	f06f 0305 	mvn.w	r3, #5
 800e2b0:	60fb      	str	r3, [r7, #12]
 800e2b2:	e007      	b.n	800e2c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d002      	beq.n	800e2c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f002 facc 	bl	801085c <vTaskDelay>
    }
  }

  return (stat);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3710      	adds	r7, #16
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}

0800e2ce <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b084      	sub	sp, #16
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f003 ff14 	bl	8012104 <pvTimerGetTimerID>
 800e2dc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <TimerCallback+0x22>
    callb->func (callb->arg);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68fa      	ldr	r2, [r7, #12]
 800e2ea:	6852      	ldr	r2, [r2, #4]
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	4798      	blx	r3
  }
}
 800e2f0:	bf00      	nop
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b08c      	sub	sp, #48	@ 0x30
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	60f8      	str	r0, [r7, #12]
 800e300:	607a      	str	r2, [r7, #4]
 800e302:	603b      	str	r3, [r7, #0]
 800e304:	460b      	mov	r3, r1
 800e306:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e308:	2300      	movs	r3, #0
 800e30a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e30c:	f3ef 8305 	mrs	r3, IPSR
 800e310:	613b      	str	r3, [r7, #16]
  return(result);
 800e312:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800e314:	2b00      	cmp	r3, #0
 800e316:	d163      	bne.n	800e3e0 <osTimerNew+0xe8>
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d060      	beq.n	800e3e0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e31e:	2008      	movs	r0, #8
 800e320:	f004 f984 	bl	801262c <pvPortMalloc>
 800e324:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d059      	beq.n	800e3e0 <osTimerNew+0xe8>
      callb->func = func;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	68fa      	ldr	r2, [r7, #12]
 800e330:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	687a      	ldr	r2, [r7, #4]
 800e336:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e338:	7afb      	ldrb	r3, [r7, #11]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d102      	bne.n	800e344 <osTimerNew+0x4c>
        reload = pdFALSE;
 800e33e:	2300      	movs	r3, #0
 800e340:	61fb      	str	r3, [r7, #28]
 800e342:	e001      	b.n	800e348 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800e344:	2301      	movs	r3, #1
 800e346:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800e348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e34c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800e34e:	2300      	movs	r3, #0
 800e350:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d01c      	beq.n	800e392 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d002      	beq.n	800e366 <osTimerNew+0x6e>
          name = attr->name;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	689b      	ldr	r3, [r3, #8]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d006      	beq.n	800e37c <osTimerNew+0x84>
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	2b2b      	cmp	r3, #43	@ 0x2b
 800e374:	d902      	bls.n	800e37c <osTimerNew+0x84>
          mem = 1;
 800e376:	2301      	movs	r3, #1
 800e378:	61bb      	str	r3, [r7, #24]
 800e37a:	e00c      	b.n	800e396 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d108      	bne.n	800e396 <osTimerNew+0x9e>
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d104      	bne.n	800e396 <osTimerNew+0x9e>
            mem = 0;
 800e38c:	2300      	movs	r3, #0
 800e38e:	61bb      	str	r3, [r7, #24]
 800e390:	e001      	b.n	800e396 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800e392:	2300      	movs	r3, #0
 800e394:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d10c      	bne.n	800e3b6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	689b      	ldr	r3, [r3, #8]
 800e3a0:	9301      	str	r3, [sp, #4]
 800e3a2:	4b12      	ldr	r3, [pc, #72]	@ (800e3ec <osTimerNew+0xf4>)
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	69fa      	ldr	r2, [r7, #28]
 800e3aa:	2101      	movs	r1, #1
 800e3ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3ae:	f003 faf2 	bl	8011996 <xTimerCreateStatic>
 800e3b2:	6238      	str	r0, [r7, #32]
 800e3b4:	e00b      	b.n	800e3ce <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d108      	bne.n	800e3ce <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e3bc:	4b0b      	ldr	r3, [pc, #44]	@ (800e3ec <osTimerNew+0xf4>)
 800e3be:	9300      	str	r3, [sp, #0]
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	69fa      	ldr	r2, [r7, #28]
 800e3c4:	2101      	movs	r1, #1
 800e3c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3c8:	f003 fac4 	bl	8011954 <xTimerCreate>
 800e3cc:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800e3ce:	6a3b      	ldr	r3, [r7, #32]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d105      	bne.n	800e3e0 <osTimerNew+0xe8>
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <osTimerNew+0xe8>
        vPortFree (callb);
 800e3da:	6978      	ldr	r0, [r7, #20]
 800e3dc:	f004 f9f4 	bl	80127c8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3728      	adds	r7, #40	@ 0x28
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	0800e2cf 	.word	0x0800e2cf

0800e3f0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b088      	sub	sp, #32
 800e3f4:	af02      	add	r7, sp, #8
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3fe:	f3ef 8305 	mrs	r3, IPSR
 800e402:	60fb      	str	r3, [r7, #12]
  return(result);
 800e404:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e406:	2b00      	cmp	r3, #0
 800e408:	d003      	beq.n	800e412 <osTimerStart+0x22>
    stat = osErrorISR;
 800e40a:	f06f 0305 	mvn.w	r3, #5
 800e40e:	617b      	str	r3, [r7, #20]
 800e410:	e017      	b.n	800e442 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d103      	bne.n	800e420 <osTimerStart+0x30>
    stat = osErrorParameter;
 800e418:	f06f 0303 	mvn.w	r3, #3
 800e41c:	617b      	str	r3, [r7, #20]
 800e41e:	e010      	b.n	800e442 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e420:	2300      	movs	r3, #0
 800e422:	9300      	str	r3, [sp, #0]
 800e424:	2300      	movs	r3, #0
 800e426:	683a      	ldr	r2, [r7, #0]
 800e428:	2104      	movs	r1, #4
 800e42a:	6938      	ldr	r0, [r7, #16]
 800e42c:	f003 fb30 	bl	8011a90 <xTimerGenericCommand>
 800e430:	4603      	mov	r3, r0
 800e432:	2b01      	cmp	r3, #1
 800e434:	d102      	bne.n	800e43c <osTimerStart+0x4c>
      stat = osOK;
 800e436:	2300      	movs	r3, #0
 800e438:	617b      	str	r3, [r7, #20]
 800e43a:	e002      	b.n	800e442 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800e43c:	f06f 0302 	mvn.w	r3, #2
 800e440:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e442:	697b      	ldr	r3, [r7, #20]
}
 800e444:	4618      	mov	r0, r3
 800e446:	3718      	adds	r7, #24
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af02      	add	r7, sp, #8
 800e452:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e458:	f3ef 8305 	mrs	r3, IPSR
 800e45c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e45e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e460:	2b00      	cmp	r3, #0
 800e462:	d003      	beq.n	800e46c <osTimerStop+0x20>
    stat = osErrorISR;
 800e464:	f06f 0305 	mvn.w	r3, #5
 800e468:	617b      	str	r3, [r7, #20]
 800e46a:	e021      	b.n	800e4b0 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d103      	bne.n	800e47a <osTimerStop+0x2e>
    stat = osErrorParameter;
 800e472:	f06f 0303 	mvn.w	r3, #3
 800e476:	617b      	str	r3, [r7, #20]
 800e478:	e01a      	b.n	800e4b0 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800e47a:	6938      	ldr	r0, [r7, #16]
 800e47c:	f003 fe18 	bl	80120b0 <xTimerIsTimerActive>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d103      	bne.n	800e48e <osTimerStop+0x42>
      stat = osErrorResource;
 800e486:	f06f 0302 	mvn.w	r3, #2
 800e48a:	617b      	str	r3, [r7, #20]
 800e48c:	e010      	b.n	800e4b0 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800e48e:	2300      	movs	r3, #0
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	2300      	movs	r3, #0
 800e494:	2200      	movs	r2, #0
 800e496:	2103      	movs	r1, #3
 800e498:	6938      	ldr	r0, [r7, #16]
 800e49a:	f003 faf9 	bl	8011a90 <xTimerGenericCommand>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d102      	bne.n	800e4aa <osTimerStop+0x5e>
        stat = osOK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	617b      	str	r3, [r7, #20]
 800e4a8:	e002      	b.n	800e4b0 <osTimerStop+0x64>
      } else {
        stat = osError;
 800e4aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e4b0:	697b      	ldr	r3, [r7, #20]
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3718      	adds	r7, #24
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b086      	sub	sp, #24
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4c6:	f3ef 8305 	mrs	r3, IPSR
 800e4ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800e4cc:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d12d      	bne.n	800e52e <osEventFlagsNew+0x74>
    mem = -1;
 800e4d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4d6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d015      	beq.n	800e50a <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d006      	beq.n	800e4f4 <osEventFlagsNew+0x3a>
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	2b1f      	cmp	r3, #31
 800e4ec:	d902      	bls.n	800e4f4 <osEventFlagsNew+0x3a>
        mem = 1;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	613b      	str	r3, [r7, #16]
 800e4f2:	e00c      	b.n	800e50e <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d108      	bne.n	800e50e <osEventFlagsNew+0x54>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d104      	bne.n	800e50e <osEventFlagsNew+0x54>
          mem = 0;
 800e504:	2300      	movs	r3, #0
 800e506:	613b      	str	r3, [r7, #16]
 800e508:	e001      	b.n	800e50e <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	2b01      	cmp	r3, #1
 800e512:	d106      	bne.n	800e522 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	4618      	mov	r0, r3
 800e51a:	f000 fc6b 	bl	800edf4 <xEventGroupCreateStatic>
 800e51e:	6178      	str	r0, [r7, #20]
 800e520:	e005      	b.n	800e52e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d102      	bne.n	800e52e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800e528:	f000 fc9d 	bl	800ee66 <xEventGroupCreate>
 800e52c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800e52e:	697b      	ldr	r3, [r7, #20]
}
 800e530:	4618      	mov	r0, r3
 800e532:	3718      	adds	r7, #24
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}

0800e538 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d003      	beq.n	800e554 <osEventFlagsSet+0x1c>
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e552:	d303      	bcc.n	800e55c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 800e554:	f06f 0303 	mvn.w	r3, #3
 800e558:	617b      	str	r3, [r7, #20]
 800e55a:	e028      	b.n	800e5ae <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e55c:	f3ef 8305 	mrs	r3, IPSR
 800e560:	60fb      	str	r3, [r7, #12]
  return(result);
 800e562:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e564:	2b00      	cmp	r3, #0
 800e566:	d01d      	beq.n	800e5a4 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800e568:	2300      	movs	r3, #0
 800e56a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800e56c:	f107 0308 	add.w	r3, r7, #8
 800e570:	461a      	mov	r2, r3
 800e572:	6839      	ldr	r1, [r7, #0]
 800e574:	6938      	ldr	r0, [r7, #16]
 800e576:	f000 fe1f 	bl	800f1b8 <xEventGroupSetBitsFromISR>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d103      	bne.n	800e588 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 800e580:	f06f 0302 	mvn.w	r3, #2
 800e584:	617b      	str	r3, [r7, #20]
 800e586:	e012      	b.n	800e5ae <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00d      	beq.n	800e5ae <osEventFlagsSet+0x76>
 800e592:	4b09      	ldr	r3, [pc, #36]	@ (800e5b8 <osEventFlagsSet+0x80>)
 800e594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e598:	601a      	str	r2, [r3, #0]
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	f3bf 8f6f 	isb	sy
 800e5a2:	e004      	b.n	800e5ae <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800e5a4:	6839      	ldr	r1, [r7, #0]
 800e5a6:	6938      	ldr	r0, [r7, #16]
 800e5a8:	f000 fd4a 	bl	800f040 <xEventGroupSetBits>
 800e5ac:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800e5ae:	697b      	ldr	r3, [r7, #20]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3718      	adds	r7, #24
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	e000ed04 	.word	0xe000ed04

0800e5bc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b08c      	sub	sp, #48	@ 0x30
 800e5c0:	af02      	add	r7, sp, #8
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
 800e5c8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d003      	beq.n	800e5dc <osEventFlagsWait+0x20>
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e5da:	d303      	bcc.n	800e5e4 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 800e5dc:	f06f 0303 	mvn.w	r3, #3
 800e5e0:	61fb      	str	r3, [r7, #28]
 800e5e2:	e04b      	b.n	800e67c <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5e4:	f3ef 8305 	mrs	r3, IPSR
 800e5e8:	617b      	str	r3, [r7, #20]
  return(result);
 800e5ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d003      	beq.n	800e5f8 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 800e5f0:	f06f 0305 	mvn.w	r3, #5
 800e5f4:	61fb      	str	r3, [r7, #28]
 800e5f6:	e041      	b.n	800e67c <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d002      	beq.n	800e608 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 800e602:	2301      	movs	r3, #1
 800e604:	627b      	str	r3, [r7, #36]	@ 0x24
 800e606:	e001      	b.n	800e60c <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 800e608:	2300      	movs	r3, #0
 800e60a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f003 0302 	and.w	r3, r3, #2
 800e612:	2b00      	cmp	r3, #0
 800e614:	d002      	beq.n	800e61c <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 800e616:	2300      	movs	r3, #0
 800e618:	623b      	str	r3, [r7, #32]
 800e61a:	e001      	b.n	800e620 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800e61c:	2301      	movs	r3, #1
 800e61e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e626:	6a3a      	ldr	r2, [r7, #32]
 800e628:	68b9      	ldr	r1, [r7, #8]
 800e62a:	69b8      	ldr	r0, [r7, #24]
 800e62c:	f000 fc36 	bl	800ee9c <xEventGroupWaitBits>
 800e630:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f003 0301 	and.w	r3, r3, #1
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d010      	beq.n	800e65e <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	4013      	ands	r3, r2
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	429a      	cmp	r2, r3
 800e646:	d019      	beq.n	800e67c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d003      	beq.n	800e656 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800e64e:	f06f 0301 	mvn.w	r3, #1
 800e652:	61fb      	str	r3, [r7, #28]
 800e654:	e012      	b.n	800e67c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e656:	f06f 0302 	mvn.w	r3, #2
 800e65a:	61fb      	str	r3, [r7, #28]
 800e65c:	e00e      	b.n	800e67c <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	4013      	ands	r3, r2
 800e664:	2b00      	cmp	r3, #0
 800e666:	d109      	bne.n	800e67c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d003      	beq.n	800e676 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800e66e:	f06f 0301 	mvn.w	r3, #1
 800e672:	61fb      	str	r3, [r7, #28]
 800e674:	e002      	b.n	800e67c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800e676:	f06f 0302 	mvn.w	r3, #2
 800e67a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800e67c:	69fb      	ldr	r3, [r7, #28]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3728      	adds	r7, #40	@ 0x28
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e686:	b580      	push	{r7, lr}
 800e688:	b088      	sub	sp, #32
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e68e:	2300      	movs	r3, #0
 800e690:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e692:	f3ef 8305 	mrs	r3, IPSR
 800e696:	60bb      	str	r3, [r7, #8]
  return(result);
 800e698:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d174      	bne.n	800e788 <osMutexNew+0x102>
    if (attr != NULL) {
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d003      	beq.n	800e6ac <osMutexNew+0x26>
      type = attr->attr_bits;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	61bb      	str	r3, [r7, #24]
 800e6aa:	e001      	b.n	800e6b0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	f003 0301 	and.w	r3, r3, #1
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d002      	beq.n	800e6c0 <osMutexNew+0x3a>
      rmtx = 1U;
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	617b      	str	r3, [r7, #20]
 800e6be:	e001      	b.n	800e6c4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	f003 0308 	and.w	r3, r3, #8
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d15c      	bne.n	800e788 <osMutexNew+0x102>
      mem = -1;
 800e6ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e6d2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d015      	beq.n	800e706 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d006      	beq.n	800e6f0 <osMutexNew+0x6a>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	2b4f      	cmp	r3, #79	@ 0x4f
 800e6e8:	d902      	bls.n	800e6f0 <osMutexNew+0x6a>
          mem = 1;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	613b      	str	r3, [r7, #16]
 800e6ee:	e00c      	b.n	800e70a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d108      	bne.n	800e70a <osMutexNew+0x84>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d104      	bne.n	800e70a <osMutexNew+0x84>
            mem = 0;
 800e700:	2300      	movs	r3, #0
 800e702:	613b      	str	r3, [r7, #16]
 800e704:	e001      	b.n	800e70a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d112      	bne.n	800e736 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d007      	beq.n	800e726 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	689b      	ldr	r3, [r3, #8]
 800e71a:	4619      	mov	r1, r3
 800e71c:	2004      	movs	r0, #4
 800e71e:	f000 ff8a 	bl	800f636 <xQueueCreateMutexStatic>
 800e722:	61f8      	str	r0, [r7, #28]
 800e724:	e016      	b.n	800e754 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	689b      	ldr	r3, [r3, #8]
 800e72a:	4619      	mov	r1, r3
 800e72c:	2001      	movs	r0, #1
 800e72e:	f000 ff82 	bl	800f636 <xQueueCreateMutexStatic>
 800e732:	61f8      	str	r0, [r7, #28]
 800e734:	e00e      	b.n	800e754 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d10b      	bne.n	800e754 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d004      	beq.n	800e74c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e742:	2004      	movs	r0, #4
 800e744:	f000 ff5f 	bl	800f606 <xQueueCreateMutex>
 800e748:	61f8      	str	r0, [r7, #28]
 800e74a:	e003      	b.n	800e754 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e74c:	2001      	movs	r0, #1
 800e74e:	f000 ff5a 	bl	800f606 <xQueueCreateMutex>
 800e752:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00c      	beq.n	800e774 <osMutexNew+0xee>
        if (attr != NULL) {
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d003      	beq.n	800e768 <osMutexNew+0xe2>
          name = attr->name;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	60fb      	str	r3, [r7, #12]
 800e766:	e001      	b.n	800e76c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e768:	2300      	movs	r3, #0
 800e76a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e76c:	68f9      	ldr	r1, [r7, #12]
 800e76e:	69f8      	ldr	r0, [r7, #28]
 800e770:	f001 fe46 	bl	8010400 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d006      	beq.n	800e788 <osMutexNew+0x102>
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d003      	beq.n	800e788 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	f043 0301 	orr.w	r3, r3, #1
 800e786:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e788:	69fb      	ldr	r3, [r7, #28]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3720      	adds	r7, #32
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e792:	b580      	push	{r7, lr}
 800e794:	b086      	sub	sp, #24
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
 800e79a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f023 0301 	bic.w	r3, r3, #1
 800e7a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f003 0301 	and.w	r3, r3, #1
 800e7aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7b0:	f3ef 8305 	mrs	r3, IPSR
 800e7b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800e7b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d003      	beq.n	800e7c4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800e7bc:	f06f 0305 	mvn.w	r3, #5
 800e7c0:	617b      	str	r3, [r7, #20]
 800e7c2:	e02c      	b.n	800e81e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d103      	bne.n	800e7d2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800e7ca:	f06f 0303 	mvn.w	r3, #3
 800e7ce:	617b      	str	r3, [r7, #20]
 800e7d0:	e025      	b.n	800e81e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d011      	beq.n	800e7fc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	6938      	ldr	r0, [r7, #16]
 800e7dc:	f000 ff7b 	bl	800f6d6 <xQueueTakeMutexRecursive>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d01b      	beq.n	800e81e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d003      	beq.n	800e7f4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800e7ec:	f06f 0301 	mvn.w	r3, #1
 800e7f0:	617b      	str	r3, [r7, #20]
 800e7f2:	e014      	b.n	800e81e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e7f4:	f06f 0302 	mvn.w	r3, #2
 800e7f8:	617b      	str	r3, [r7, #20]
 800e7fa:	e010      	b.n	800e81e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e7fc:	6839      	ldr	r1, [r7, #0]
 800e7fe:	6938      	ldr	r0, [r7, #16]
 800e800:	f001 fb20 	bl	800fe44 <xQueueSemaphoreTake>
 800e804:	4603      	mov	r3, r0
 800e806:	2b01      	cmp	r3, #1
 800e808:	d009      	beq.n	800e81e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d003      	beq.n	800e818 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800e810:	f06f 0301 	mvn.w	r3, #1
 800e814:	617b      	str	r3, [r7, #20]
 800e816:	e002      	b.n	800e81e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800e818:	f06f 0302 	mvn.w	r3, #2
 800e81c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800e81e:	697b      	ldr	r3, [r7, #20]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3718      	adds	r7, #24
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e828:	b580      	push	{r7, lr}
 800e82a:	b086      	sub	sp, #24
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f023 0301 	bic.w	r3, r3, #1
 800e836:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	f003 0301 	and.w	r3, r3, #1
 800e83e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e840:	2300      	movs	r3, #0
 800e842:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e844:	f3ef 8305 	mrs	r3, IPSR
 800e848:	60bb      	str	r3, [r7, #8]
  return(result);
 800e84a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d003      	beq.n	800e858 <osMutexRelease+0x30>
    stat = osErrorISR;
 800e850:	f06f 0305 	mvn.w	r3, #5
 800e854:	617b      	str	r3, [r7, #20]
 800e856:	e01f      	b.n	800e898 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d103      	bne.n	800e866 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800e85e:	f06f 0303 	mvn.w	r3, #3
 800e862:	617b      	str	r3, [r7, #20]
 800e864:	e018      	b.n	800e898 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d009      	beq.n	800e880 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e86c:	6938      	ldr	r0, [r7, #16]
 800e86e:	f000 fefd 	bl	800f66c <xQueueGiveMutexRecursive>
 800e872:	4603      	mov	r3, r0
 800e874:	2b01      	cmp	r3, #1
 800e876:	d00f      	beq.n	800e898 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e878:	f06f 0302 	mvn.w	r3, #2
 800e87c:	617b      	str	r3, [r7, #20]
 800e87e:	e00b      	b.n	800e898 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e880:	2300      	movs	r3, #0
 800e882:	2200      	movs	r2, #0
 800e884:	2100      	movs	r1, #0
 800e886:	6938      	ldr	r0, [r7, #16]
 800e888:	f000 ffca 	bl	800f820 <xQueueGenericSend>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d002      	beq.n	800e898 <osMutexRelease+0x70>
        stat = osErrorResource;
 800e892:	f06f 0302 	mvn.w	r3, #2
 800e896:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e898:	697b      	ldr	r3, [r7, #20]
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3718      	adds	r7, #24
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b08a      	sub	sp, #40	@ 0x28
 800e8a6:	af02      	add	r7, sp, #8
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8b2:	f3ef 8305 	mrs	r3, IPSR
 800e8b6:	613b      	str	r3, [r7, #16]
  return(result);
 800e8b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d175      	bne.n	800e9aa <osSemaphoreNew+0x108>
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d072      	beq.n	800e9aa <osSemaphoreNew+0x108>
 800e8c4:	68ba      	ldr	r2, [r7, #8]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d86e      	bhi.n	800e9aa <osSemaphoreNew+0x108>
    mem = -1;
 800e8cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e8d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d015      	beq.n	800e904 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d006      	beq.n	800e8ee <osSemaphoreNew+0x4c>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	2b4f      	cmp	r3, #79	@ 0x4f
 800e8e6:	d902      	bls.n	800e8ee <osSemaphoreNew+0x4c>
        mem = 1;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	61bb      	str	r3, [r7, #24]
 800e8ec:	e00c      	b.n	800e908 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d108      	bne.n	800e908 <osSemaphoreNew+0x66>
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d104      	bne.n	800e908 <osSemaphoreNew+0x66>
          mem = 0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	61bb      	str	r3, [r7, #24]
 800e902:	e001      	b.n	800e908 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e904:	2300      	movs	r3, #0
 800e906:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e90e:	d04c      	beq.n	800e9aa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2b01      	cmp	r3, #1
 800e914:	d128      	bne.n	800e968 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e916:	69bb      	ldr	r3, [r7, #24]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d10a      	bne.n	800e932 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	2203      	movs	r2, #3
 800e922:	9200      	str	r2, [sp, #0]
 800e924:	2200      	movs	r2, #0
 800e926:	2100      	movs	r1, #0
 800e928:	2001      	movs	r0, #1
 800e92a:	f000 fd77 	bl	800f41c <xQueueGenericCreateStatic>
 800e92e:	61f8      	str	r0, [r7, #28]
 800e930:	e005      	b.n	800e93e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e932:	2203      	movs	r2, #3
 800e934:	2100      	movs	r1, #0
 800e936:	2001      	movs	r0, #1
 800e938:	f000 fded 	bl	800f516 <xQueueGenericCreate>
 800e93c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d022      	beq.n	800e98a <osSemaphoreNew+0xe8>
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d01f      	beq.n	800e98a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e94a:	2300      	movs	r3, #0
 800e94c:	2200      	movs	r2, #0
 800e94e:	2100      	movs	r1, #0
 800e950:	69f8      	ldr	r0, [r7, #28]
 800e952:	f000 ff65 	bl	800f820 <xQueueGenericSend>
 800e956:	4603      	mov	r3, r0
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d016      	beq.n	800e98a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e95c:	69f8      	ldr	r0, [r7, #28]
 800e95e:	f001 fc03 	bl	8010168 <vQueueDelete>
            hSemaphore = NULL;
 800e962:	2300      	movs	r3, #0
 800e964:	61fb      	str	r3, [r7, #28]
 800e966:	e010      	b.n	800e98a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d108      	bne.n	800e980 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	689b      	ldr	r3, [r3, #8]
 800e972:	461a      	mov	r2, r3
 800e974:	68b9      	ldr	r1, [r7, #8]
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f000 fee4 	bl	800f744 <xQueueCreateCountingSemaphoreStatic>
 800e97c:	61f8      	str	r0, [r7, #28]
 800e97e:	e004      	b.n	800e98a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e980:	68b9      	ldr	r1, [r7, #8]
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f000 ff17 	bl	800f7b6 <xQueueCreateCountingSemaphore>
 800e988:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00c      	beq.n	800e9aa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d003      	beq.n	800e99e <osSemaphoreNew+0xfc>
          name = attr->name;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	617b      	str	r3, [r7, #20]
 800e99c:	e001      	b.n	800e9a2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e9a2:	6979      	ldr	r1, [r7, #20]
 800e9a4:	69f8      	ldr	r0, [r7, #28]
 800e9a6:	f001 fd2b 	bl	8010400 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e9aa:	69fb      	ldr	r3, [r7, #28]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3720      	adds	r7, #32
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b086      	sub	sp, #24
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d103      	bne.n	800e9d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e9cc:	f06f 0303 	mvn.w	r3, #3
 800e9d0:	617b      	str	r3, [r7, #20]
 800e9d2:	e039      	b.n	800ea48 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9d4:	f3ef 8305 	mrs	r3, IPSR
 800e9d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800e9da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d022      	beq.n	800ea26 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d003      	beq.n	800e9ee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e9e6:	f06f 0303 	mvn.w	r3, #3
 800e9ea:	617b      	str	r3, [r7, #20]
 800e9ec:	e02c      	b.n	800ea48 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e9f2:	f107 0308 	add.w	r3, r7, #8
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	6938      	ldr	r0, [r7, #16]
 800e9fc:	f001 fb32 	bl	8010064 <xQueueReceiveFromISR>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d003      	beq.n	800ea0e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ea06:	f06f 0302 	mvn.w	r3, #2
 800ea0a:	617b      	str	r3, [r7, #20]
 800ea0c:	e01c      	b.n	800ea48 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d019      	beq.n	800ea48 <osSemaphoreAcquire+0x94>
 800ea14:	4b0f      	ldr	r3, [pc, #60]	@ (800ea54 <osSemaphoreAcquire+0xa0>)
 800ea16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea1a:	601a      	str	r2, [r3, #0]
 800ea1c:	f3bf 8f4f 	dsb	sy
 800ea20:	f3bf 8f6f 	isb	sy
 800ea24:	e010      	b.n	800ea48 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6938      	ldr	r0, [r7, #16]
 800ea2a:	f001 fa0b 	bl	800fe44 <xQueueSemaphoreTake>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d009      	beq.n	800ea48 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d003      	beq.n	800ea42 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ea3a:	f06f 0301 	mvn.w	r3, #1
 800ea3e:	617b      	str	r3, [r7, #20]
 800ea40:	e002      	b.n	800ea48 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ea42:	f06f 0302 	mvn.w	r3, #2
 800ea46:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ea48:	697b      	ldr	r3, [r7, #20]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3718      	adds	r7, #24
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	e000ed04 	.word	0xe000ed04

0800ea58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ea68:	693b      	ldr	r3, [r7, #16]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d103      	bne.n	800ea76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ea6e:	f06f 0303 	mvn.w	r3, #3
 800ea72:	617b      	str	r3, [r7, #20]
 800ea74:	e02c      	b.n	800ead0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea76:	f3ef 8305 	mrs	r3, IPSR
 800ea7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d01a      	beq.n	800eab8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ea82:	2300      	movs	r3, #0
 800ea84:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ea86:	f107 0308 	add.w	r3, r7, #8
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	6938      	ldr	r0, [r7, #16]
 800ea8e:	f001 f867 	bl	800fb60 <xQueueGiveFromISR>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b01      	cmp	r3, #1
 800ea96:	d003      	beq.n	800eaa0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ea98:	f06f 0302 	mvn.w	r3, #2
 800ea9c:	617b      	str	r3, [r7, #20]
 800ea9e:	e017      	b.n	800ead0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d014      	beq.n	800ead0 <osSemaphoreRelease+0x78>
 800eaa6:	4b0d      	ldr	r3, [pc, #52]	@ (800eadc <osSemaphoreRelease+0x84>)
 800eaa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eaac:	601a      	str	r2, [r3, #0]
 800eaae:	f3bf 8f4f 	dsb	sy
 800eab2:	f3bf 8f6f 	isb	sy
 800eab6:	e00b      	b.n	800ead0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800eab8:	2300      	movs	r3, #0
 800eaba:	2200      	movs	r2, #0
 800eabc:	2100      	movs	r1, #0
 800eabe:	6938      	ldr	r0, [r7, #16]
 800eac0:	f000 feae 	bl	800f820 <xQueueGenericSend>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d002      	beq.n	800ead0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800eaca:	f06f 0302 	mvn.w	r3, #2
 800eace:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ead0:	697b      	ldr	r3, [r7, #20]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3718      	adds	r7, #24
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	e000ed04 	.word	0xe000ed04

0800eae0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaec:	f3ef 8305 	mrs	r3, IPSR
 800eaf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d003      	beq.n	800eb00 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800eaf8:	f06f 0305 	mvn.w	r3, #5
 800eafc:	617b      	str	r3, [r7, #20]
 800eafe:	e00e      	b.n	800eb1e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d103      	bne.n	800eb0e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800eb06:	f06f 0303 	mvn.w	r3, #3
 800eb0a:	617b      	str	r3, [r7, #20]
 800eb0c:	e007      	b.n	800eb1e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800eb0e:	6938      	ldr	r0, [r7, #16]
 800eb10:	f001 fca0 	bl	8010454 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800eb14:	2300      	movs	r3, #0
 800eb16:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800eb18:	6938      	ldr	r0, [r7, #16]
 800eb1a:	f001 fb25 	bl	8010168 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800eb1e:	697b      	ldr	r3, [r7, #20]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3718      	adds	r7, #24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b08a      	sub	sp, #40	@ 0x28
 800eb2c:	af02      	add	r7, sp, #8
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800eb34:	2300      	movs	r3, #0
 800eb36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb38:	f3ef 8305 	mrs	r3, IPSR
 800eb3c:	613b      	str	r3, [r7, #16]
  return(result);
 800eb3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d15f      	bne.n	800ec04 <osMessageQueueNew+0xdc>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d05c      	beq.n	800ec04 <osMessageQueueNew+0xdc>
 800eb4a:	68bb      	ldr	r3, [r7, #8]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d059      	beq.n	800ec04 <osMessageQueueNew+0xdc>
    mem = -1;
 800eb50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d029      	beq.n	800ebb0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d012      	beq.n	800eb8a <osMessageQueueNew+0x62>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	2b4f      	cmp	r3, #79	@ 0x4f
 800eb6a:	d90e      	bls.n	800eb8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00a      	beq.n	800eb8a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	695a      	ldr	r2, [r3, #20]
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	68b9      	ldr	r1, [r7, #8]
 800eb7c:	fb01 f303 	mul.w	r3, r1, r3
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d302      	bcc.n	800eb8a <osMessageQueueNew+0x62>
        mem = 1;
 800eb84:	2301      	movs	r3, #1
 800eb86:	61bb      	str	r3, [r7, #24]
 800eb88:	e014      	b.n	800ebb4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d110      	bne.n	800ebb4 <osMessageQueueNew+0x8c>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d10c      	bne.n	800ebb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d108      	bne.n	800ebb4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	695b      	ldr	r3, [r3, #20]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d104      	bne.n	800ebb4 <osMessageQueueNew+0x8c>
          mem = 0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	61bb      	str	r3, [r7, #24]
 800ebae:	e001      	b.n	800ebb4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d10b      	bne.n	800ebd2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	691a      	ldr	r2, [r3, #16]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	9100      	str	r1, [sp, #0]
 800ebc6:	68b9      	ldr	r1, [r7, #8]
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f000 fc27 	bl	800f41c <xQueueGenericCreateStatic>
 800ebce:	61f8      	str	r0, [r7, #28]
 800ebd0:	e008      	b.n	800ebe4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ebd2:	69bb      	ldr	r3, [r7, #24]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d105      	bne.n	800ebe4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ebd8:	2200      	movs	r2, #0
 800ebda:	68b9      	ldr	r1, [r7, #8]
 800ebdc:	68f8      	ldr	r0, [r7, #12]
 800ebde:	f000 fc9a 	bl	800f516 <xQueueGenericCreate>
 800ebe2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00c      	beq.n	800ec04 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d003      	beq.n	800ebf8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	617b      	str	r3, [r7, #20]
 800ebf6:	e001      	b.n	800ebfc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ebfc:	6979      	ldr	r1, [r7, #20]
 800ebfe:	69f8      	ldr	r0, [r7, #28]
 800ec00:	f001 fbfe 	bl	8010400 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ec04:	69fb      	ldr	r3, [r7, #28]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3720      	adds	r7, #32
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
	...

0800ec10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b088      	sub	sp, #32
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	603b      	str	r3, [r7, #0]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec28:	f3ef 8305 	mrs	r3, IPSR
 800ec2c:	617b      	str	r3, [r7, #20]
  return(result);
 800ec2e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d028      	beq.n	800ec86 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d005      	beq.n	800ec46 <osMessageQueuePut+0x36>
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d002      	beq.n	800ec46 <osMessageQueuePut+0x36>
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d003      	beq.n	800ec4e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ec46:	f06f 0303 	mvn.w	r3, #3
 800ec4a:	61fb      	str	r3, [r7, #28]
 800ec4c:	e038      	b.n	800ecc0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ec52:	f107 0210 	add.w	r2, r7, #16
 800ec56:	2300      	movs	r3, #0
 800ec58:	68b9      	ldr	r1, [r7, #8]
 800ec5a:	69b8      	ldr	r0, [r7, #24]
 800ec5c:	f000 fee2 	bl	800fa24 <xQueueGenericSendFromISR>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d003      	beq.n	800ec6e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ec66:	f06f 0302 	mvn.w	r3, #2
 800ec6a:	61fb      	str	r3, [r7, #28]
 800ec6c:	e028      	b.n	800ecc0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d025      	beq.n	800ecc0 <osMessageQueuePut+0xb0>
 800ec74:	4b15      	ldr	r3, [pc, #84]	@ (800eccc <osMessageQueuePut+0xbc>)
 800ec76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec7a:	601a      	str	r2, [r3, #0]
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	f3bf 8f6f 	isb	sy
 800ec84:	e01c      	b.n	800ecc0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d002      	beq.n	800ec92 <osMessageQueuePut+0x82>
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d103      	bne.n	800ec9a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ec92:	f06f 0303 	mvn.w	r3, #3
 800ec96:	61fb      	str	r3, [r7, #28]
 800ec98:	e012      	b.n	800ecc0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	683a      	ldr	r2, [r7, #0]
 800ec9e:	68b9      	ldr	r1, [r7, #8]
 800eca0:	69b8      	ldr	r0, [r7, #24]
 800eca2:	f000 fdbd 	bl	800f820 <xQueueGenericSend>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d009      	beq.n	800ecc0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ecb2:	f06f 0301 	mvn.w	r3, #1
 800ecb6:	61fb      	str	r3, [r7, #28]
 800ecb8:	e002      	b.n	800ecc0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ecba:	f06f 0302 	mvn.w	r3, #2
 800ecbe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ecc0:	69fb      	ldr	r3, [r7, #28]
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3720      	adds	r7, #32
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	e000ed04 	.word	0xe000ed04

0800ecd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b088      	sub	sp, #32
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
 800ecdc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ece6:	f3ef 8305 	mrs	r3, IPSR
 800ecea:	617b      	str	r3, [r7, #20]
  return(result);
 800ecec:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d028      	beq.n	800ed44 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d005      	beq.n	800ed04 <osMessageQueueGet+0x34>
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d002      	beq.n	800ed04 <osMessageQueueGet+0x34>
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d003      	beq.n	800ed0c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ed04:	f06f 0303 	mvn.w	r3, #3
 800ed08:	61fb      	str	r3, [r7, #28]
 800ed0a:	e037      	b.n	800ed7c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ed10:	f107 0310 	add.w	r3, r7, #16
 800ed14:	461a      	mov	r2, r3
 800ed16:	68b9      	ldr	r1, [r7, #8]
 800ed18:	69b8      	ldr	r0, [r7, #24]
 800ed1a:	f001 f9a3 	bl	8010064 <xQueueReceiveFromISR>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d003      	beq.n	800ed2c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ed24:	f06f 0302 	mvn.w	r3, #2
 800ed28:	61fb      	str	r3, [r7, #28]
 800ed2a:	e027      	b.n	800ed7c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d024      	beq.n	800ed7c <osMessageQueueGet+0xac>
 800ed32:	4b15      	ldr	r3, [pc, #84]	@ (800ed88 <osMessageQueueGet+0xb8>)
 800ed34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed38:	601a      	str	r2, [r3, #0]
 800ed3a:	f3bf 8f4f 	dsb	sy
 800ed3e:	f3bf 8f6f 	isb	sy
 800ed42:	e01b      	b.n	800ed7c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d002      	beq.n	800ed50 <osMessageQueueGet+0x80>
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d103      	bne.n	800ed58 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ed50:	f06f 0303 	mvn.w	r3, #3
 800ed54:	61fb      	str	r3, [r7, #28]
 800ed56:	e011      	b.n	800ed7c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ed58:	683a      	ldr	r2, [r7, #0]
 800ed5a:	68b9      	ldr	r1, [r7, #8]
 800ed5c:	69b8      	ldr	r0, [r7, #24]
 800ed5e:	f000 ff8f 	bl	800fc80 <xQueueReceive>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d009      	beq.n	800ed7c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d003      	beq.n	800ed76 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ed6e:	f06f 0301 	mvn.w	r3, #1
 800ed72:	61fb      	str	r3, [r7, #28]
 800ed74:	e002      	b.n	800ed7c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ed76:	f06f 0302 	mvn.w	r3, #2
 800ed7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ed7c:	69fb      	ldr	r3, [r7, #28]
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3720      	adds	r7, #32
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	e000ed04 	.word	0xe000ed04

0800ed8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ed8c:	b480      	push	{r7}
 800ed8e:	b085      	sub	sp, #20
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	4a07      	ldr	r2, [pc, #28]	@ (800edb8 <vApplicationGetIdleTaskMemory+0x2c>)
 800ed9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	4a06      	ldr	r2, [pc, #24]	@ (800edbc <vApplicationGetIdleTaskMemory+0x30>)
 800eda2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2280      	movs	r2, #128	@ 0x80
 800eda8:	601a      	str	r2, [r3, #0]
}
 800edaa:	bf00      	nop
 800edac:	3714      	adds	r7, #20
 800edae:	46bd      	mov	sp, r7
 800edb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	20000b00 	.word	0x20000b00
 800edbc:	20000b5c 	.word	0x20000b5c

0800edc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800edc0:	b480      	push	{r7}
 800edc2:	b085      	sub	sp, #20
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	4a07      	ldr	r2, [pc, #28]	@ (800edec <vApplicationGetTimerTaskMemory+0x2c>)
 800edd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	4a06      	ldr	r2, [pc, #24]	@ (800edf0 <vApplicationGetTimerTaskMemory+0x30>)
 800edd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800edde:	601a      	str	r2, [r3, #0]
}
 800ede0:	bf00      	nop
 800ede2:	3714      	adds	r7, #20
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	20000d5c 	.word	0x20000d5c
 800edf0:	20000db8 	.word	0x20000db8

0800edf4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b086      	sub	sp, #24
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10b      	bne.n	800ee1a <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ee14:	bf00      	nop
 800ee16:	bf00      	nop
 800ee18:	e7fd      	b.n	800ee16 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800ee1a:	2320      	movs	r3, #32
 800ee1c:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	2b20      	cmp	r3, #32
 800ee22:	d00b      	beq.n	800ee3c <xEventGroupCreateStatic+0x48>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	60fb      	str	r3, [r7, #12]
}
 800ee36:	bf00      	nop
 800ee38:	bf00      	nop
 800ee3a:	e7fd      	b.n	800ee38 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00a      	beq.n	800ee5c <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	3304      	adds	r3, #4
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 f9c5 	bl	800f1e0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	2201      	movs	r2, #1
 800ee5a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800ee5c:	697b      	ldr	r3, [r7, #20]
	}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3718      	adds	r7, #24
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b082      	sub	sp, #8
 800ee6a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800ee6c:	2020      	movs	r0, #32
 800ee6e:	f003 fbdd 	bl	801262c <pvPortMalloc>
 800ee72:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00a      	beq.n	800ee90 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	3304      	adds	r3, #4
 800ee84:	4618      	mov	r0, r3
 800ee86:	f000 f9ab 	bl	800f1e0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800ee90:	687b      	ldr	r3, [r7, #4]
	}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
	...

0800ee9c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b090      	sub	sp, #64	@ 0x40
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	607a      	str	r2, [r7, #4]
 800eea8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d10b      	bne.n	800eed4 <xEventGroupWaitBits+0x38>
	__asm volatile
 800eebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec0:	f383 8811 	msr	BASEPRI, r3
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	f3bf 8f4f 	dsb	sy
 800eecc:	623b      	str	r3, [r7, #32]
}
 800eece:	bf00      	nop
 800eed0:	bf00      	nop
 800eed2:	e7fd      	b.n	800eed0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eeda:	d30b      	bcc.n	800eef4 <xEventGroupWaitBits+0x58>
	__asm volatile
 800eedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eee0:	f383 8811 	msr	BASEPRI, r3
 800eee4:	f3bf 8f6f 	isb	sy
 800eee8:	f3bf 8f4f 	dsb	sy
 800eeec:	61fb      	str	r3, [r7, #28]
}
 800eeee:	bf00      	nop
 800eef0:	bf00      	nop
 800eef2:	e7fd      	b.n	800eef0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10b      	bne.n	800ef12 <xEventGroupWaitBits+0x76>
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	61bb      	str	r3, [r7, #24]
}
 800ef0c:	bf00      	nop
 800ef0e:	bf00      	nop
 800ef10:	e7fd      	b.n	800ef0e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef12:	f002 f9d9 	bl	80112c8 <xTaskGetSchedulerState>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d102      	bne.n	800ef22 <xEventGroupWaitBits+0x86>
 800ef1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d101      	bne.n	800ef26 <xEventGroupWaitBits+0x8a>
 800ef22:	2301      	movs	r3, #1
 800ef24:	e000      	b.n	800ef28 <xEventGroupWaitBits+0x8c>
 800ef26:	2300      	movs	r3, #0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10b      	bne.n	800ef44 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800ef2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef30:	f383 8811 	msr	BASEPRI, r3
 800ef34:	f3bf 8f6f 	isb	sy
 800ef38:	f3bf 8f4f 	dsb	sy
 800ef3c:	617b      	str	r3, [r7, #20]
}
 800ef3e:	bf00      	nop
 800ef40:	bf00      	nop
 800ef42:	e7fd      	b.n	800ef40 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800ef44:	f001 fd28 	bl	8010998 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800ef48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800ef4e:	683a      	ldr	r2, [r7, #0]
 800ef50:	68b9      	ldr	r1, [r7, #8]
 800ef52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ef54:	f000 f90d 	bl	800f172 <prvTestWaitCondition>
 800ef58:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800ef5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00e      	beq.n	800ef7e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800ef60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef62:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800ef64:	2300      	movs	r3, #0
 800ef66:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d028      	beq.n	800efc0 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800ef6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	43db      	mvns	r3, r3
 800ef76:	401a      	ands	r2, r3
 800ef78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	e020      	b.n	800efc0 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800ef7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d104      	bne.n	800ef8e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800ef84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef86:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ef8c:	e018      	b.n	800efc0 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d003      	beq.n	800ef9c <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800ef94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ef9a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d003      	beq.n	800efaa <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800efa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800efa8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800efaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efac:	1d18      	adds	r0, r3, #4
 800efae:	68ba      	ldr	r2, [r7, #8]
 800efb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efb2:	4313      	orrs	r3, r2
 800efb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800efb6:	4619      	mov	r1, r3
 800efb8:	f001 fee8 	bl	8010d8c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800efbc:	2300      	movs	r3, #0
 800efbe:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800efc0:	f001 fcf8 	bl	80109b4 <xTaskResumeAll>
 800efc4:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800efc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d031      	beq.n	800f030 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800efcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d107      	bne.n	800efe2 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800efd2:	4b1a      	ldr	r3, [pc, #104]	@ (800f03c <xEventGroupWaitBits+0x1a0>)
 800efd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efd8:	601a      	str	r2, [r3, #0]
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800efe2:	f002 faeb 	bl	80115bc <uxTaskResetEventItemValue>
 800efe6:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800efe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d11a      	bne.n	800f028 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800eff2:	f003 f9f9 	bl	80123e8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800eff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800effc:	683a      	ldr	r2, [r7, #0]
 800effe:	68b9      	ldr	r1, [r7, #8]
 800f000:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f002:	f000 f8b6 	bl	800f172 <prvTestWaitCondition>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d009      	beq.n	800f020 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d006      	beq.n	800f020 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800f012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	43db      	mvns	r3, r3
 800f01a:	401a      	ands	r2, r3
 800f01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f01e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800f020:	2301      	movs	r3, #1
 800f022:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800f024:	f003 fa12 	bl	801244c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f02a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800f030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800f032:	4618      	mov	r0, r3
 800f034:	3740      	adds	r7, #64	@ 0x40
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	e000ed04 	.word	0xe000ed04

0800f040 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b08e      	sub	sp, #56	@ 0x38
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800f04a:	2300      	movs	r3, #0
 800f04c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800f052:	2300      	movs	r3, #0
 800f054:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d10b      	bne.n	800f074 <xEventGroupSetBits+0x34>
	__asm volatile
 800f05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f060:	f383 8811 	msr	BASEPRI, r3
 800f064:	f3bf 8f6f 	isb	sy
 800f068:	f3bf 8f4f 	dsb	sy
 800f06c:	613b      	str	r3, [r7, #16]
}
 800f06e:	bf00      	nop
 800f070:	bf00      	nop
 800f072:	e7fd      	b.n	800f070 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f07a:	d30b      	bcc.n	800f094 <xEventGroupSetBits+0x54>
	__asm volatile
 800f07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f080:	f383 8811 	msr	BASEPRI, r3
 800f084:	f3bf 8f6f 	isb	sy
 800f088:	f3bf 8f4f 	dsb	sy
 800f08c:	60fb      	str	r3, [r7, #12]
}
 800f08e:	bf00      	nop
 800f090:	bf00      	nop
 800f092:	e7fd      	b.n	800f090 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800f094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f096:	3304      	adds	r3, #4
 800f098:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f09c:	3308      	adds	r3, #8
 800f09e:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800f0a0:	f001 fc7a 	bl	8010998 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800f0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	431a      	orrs	r2, r3
 800f0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0b4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800f0b6:	e03c      	b.n	800f132 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800f0b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800f0be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800f0c8:	69bb      	ldr	r3, [r7, #24]
 800f0ca:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800f0ce:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f0d6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d108      	bne.n	800f0f4 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800f0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e4:	681a      	ldr	r2, [r3, #0]
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	4013      	ands	r3, r2
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00b      	beq.n	800f106 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0f2:	e008      	b.n	800f106 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800f0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	69bb      	ldr	r3, [r7, #24]
 800f0fa:	4013      	ands	r3, r2
 800f0fc:	69ba      	ldr	r2, [r7, #24]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d101      	bne.n	800f106 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800f102:	2301      	movs	r3, #1
 800f104:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800f106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d010      	beq.n	800f12e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f112:	2b00      	cmp	r3, #0
 800f114:	d003      	beq.n	800f11e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800f116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	4313      	orrs	r3, r2
 800f11c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800f11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800f126:	4619      	mov	r1, r3
 800f128:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f12a:	f001 fefd 	bl	8010f28 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800f132:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	429a      	cmp	r2, r3
 800f138:	d1be      	bne.n	800f0b8 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800f13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f140:	43db      	mvns	r3, r3
 800f142:	401a      	ands	r2, r3
 800f144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f146:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800f148:	f001 fc34 	bl	80109b4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800f14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f14e:	681b      	ldr	r3, [r3, #0]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3738      	adds	r7, #56	@ 0x38
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7ff ff6b 	bl	800f040 <xEventGroupSetBits>
}
 800f16a:	bf00      	nop
 800f16c:	3708      	adds	r7, #8
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800f172:	b480      	push	{r7}
 800f174:	b087      	sub	sp, #28
 800f176:	af00      	add	r7, sp, #0
 800f178:	60f8      	str	r0, [r7, #12]
 800f17a:	60b9      	str	r1, [r7, #8]
 800f17c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800f17e:	2300      	movs	r3, #0
 800f180:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d107      	bne.n	800f198 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	4013      	ands	r3, r2
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d00a      	beq.n	800f1a8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f192:	2301      	movs	r3, #1
 800f194:	617b      	str	r3, [r7, #20]
 800f196:	e007      	b.n	800f1a8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800f198:	68fa      	ldr	r2, [r7, #12]
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	4013      	ands	r3, r2
 800f19e:	68ba      	ldr	r2, [r7, #8]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d101      	bne.n	800f1a8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800f1a8:	697b      	ldr	r3, [r7, #20]
}
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	371c      	adds	r7, #28
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b4:	4770      	bx	lr
	...

0800f1b8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b086      	sub	sp, #24
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	68ba      	ldr	r2, [r7, #8]
 800f1c8:	68f9      	ldr	r1, [r7, #12]
 800f1ca:	4804      	ldr	r0, [pc, #16]	@ (800f1dc <xEventGroupSetBitsFromISR+0x24>)
 800f1cc:	f002 ffbc 	bl	8012148 <xTimerPendFunctionCallFromISR>
 800f1d0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800f1d2:	697b      	ldr	r3, [r7, #20]
	}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3718      	adds	r7, #24
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	0800f159 	.word	0x0800f159

0800f1e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f103 0208 	add.w	r2, r3, #8
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f1f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f103 0208 	add.w	r2, r3, #8
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f103 0208 	add.w	r2, r3, #8
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2200      	movs	r2, #0
 800f212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f214:	bf00      	nop
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2200      	movs	r2, #0
 800f22c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f22e:	bf00      	nop
 800f230:	370c      	adds	r7, #12
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr

0800f23a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f23a:	b480      	push	{r7}
 800f23c:	b085      	sub	sp, #20
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
 800f242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	689a      	ldr	r2, [r3, #8]
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	689b      	ldr	r3, [r3, #8]
 800f25c:	683a      	ldr	r2, [r7, #0]
 800f25e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	683a      	ldr	r2, [r7, #0]
 800f264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	1c5a      	adds	r2, r3, #1
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	601a      	str	r2, [r3, #0]
}
 800f276:	bf00      	nop
 800f278:	3714      	adds	r7, #20
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr

0800f282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f282:	b480      	push	{r7}
 800f284:	b085      	sub	sp, #20
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
 800f28a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f298:	d103      	bne.n	800f2a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	691b      	ldr	r3, [r3, #16]
 800f29e:	60fb      	str	r3, [r7, #12]
 800f2a0:	e00c      	b.n	800f2bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	3308      	adds	r3, #8
 800f2a6:	60fb      	str	r3, [r7, #12]
 800f2a8:	e002      	b.n	800f2b0 <vListInsert+0x2e>
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	60fb      	str	r3, [r7, #12]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	68ba      	ldr	r2, [r7, #8]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d2f6      	bcs.n	800f2aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	685a      	ldr	r2, [r3, #4]
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	683a      	ldr	r2, [r7, #0]
 800f2ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	683a      	ldr	r2, [r7, #0]
 800f2d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	1c5a      	adds	r2, r3, #1
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	601a      	str	r2, [r3, #0]
}
 800f2e8:	bf00      	nop
 800f2ea:	3714      	adds	r7, #20
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	6892      	ldr	r2, [r2, #8]
 800f30a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	689b      	ldr	r3, [r3, #8]
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	6852      	ldr	r2, [r2, #4]
 800f314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d103      	bne.n	800f328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	689a      	ldr	r2, [r3, #8]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	1e5a      	subs	r2, r3, #1
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3714      	adds	r7, #20
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b084      	sub	sp, #16
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10b      	bne.n	800f374 <xQueueGenericReset+0x2c>
	__asm volatile
 800f35c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f360:	f383 8811 	msr	BASEPRI, r3
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	60bb      	str	r3, [r7, #8]
}
 800f36e:	bf00      	nop
 800f370:	bf00      	nop
 800f372:	e7fd      	b.n	800f370 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f374:	f003 f838 	bl	80123e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f380:	68f9      	ldr	r1, [r7, #12]
 800f382:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f384:	fb01 f303 	mul.w	r3, r1, r3
 800f388:	441a      	add	r2, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2200      	movs	r2, #0
 800f392:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681a      	ldr	r2, [r3, #0]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	68f9      	ldr	r1, [r7, #12]
 800f3a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f3aa:	fb01 f303 	mul.w	r3, r1, r3
 800f3ae:	441a      	add	r2, r3
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	22ff      	movs	r2, #255	@ 0xff
 800f3b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	22ff      	movs	r2, #255	@ 0xff
 800f3c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d114      	bne.n	800f3f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d01a      	beq.n	800f408 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	3310      	adds	r3, #16
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f001 fd42 	bl	8010e60 <xTaskRemoveFromEventList>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d012      	beq.n	800f408 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f418 <xQueueGenericReset+0xd0>)
 800f3e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3e8:	601a      	str	r2, [r3, #0]
 800f3ea:	f3bf 8f4f 	dsb	sy
 800f3ee:	f3bf 8f6f 	isb	sy
 800f3f2:	e009      	b.n	800f408 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	3310      	adds	r3, #16
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7ff fef1 	bl	800f1e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	3324      	adds	r3, #36	@ 0x24
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff feec 	bl	800f1e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f408:	f003 f820 	bl	801244c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f40c:	2301      	movs	r3, #1
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3710      	adds	r7, #16
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}
 800f416:	bf00      	nop
 800f418:	e000ed04 	.word	0xe000ed04

0800f41c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b08e      	sub	sp, #56	@ 0x38
 800f420:	af02      	add	r7, sp, #8
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
 800f428:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10b      	bne.n	800f448 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800f430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f442:	bf00      	nop
 800f444:	bf00      	nop
 800f446:	e7fd      	b.n	800f444 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d10b      	bne.n	800f466 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800f44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f452:	f383 8811 	msr	BASEPRI, r3
 800f456:	f3bf 8f6f 	isb	sy
 800f45a:	f3bf 8f4f 	dsb	sy
 800f45e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f460:	bf00      	nop
 800f462:	bf00      	nop
 800f464:	e7fd      	b.n	800f462 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d002      	beq.n	800f472 <xQueueGenericCreateStatic+0x56>
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d001      	beq.n	800f476 <xQueueGenericCreateStatic+0x5a>
 800f472:	2301      	movs	r3, #1
 800f474:	e000      	b.n	800f478 <xQueueGenericCreateStatic+0x5c>
 800f476:	2300      	movs	r3, #0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d10b      	bne.n	800f494 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800f47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f480:	f383 8811 	msr	BASEPRI, r3
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	f3bf 8f4f 	dsb	sy
 800f48c:	623b      	str	r3, [r7, #32]
}
 800f48e:	bf00      	nop
 800f490:	bf00      	nop
 800f492:	e7fd      	b.n	800f490 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d102      	bne.n	800f4a0 <xQueueGenericCreateStatic+0x84>
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d101      	bne.n	800f4a4 <xQueueGenericCreateStatic+0x88>
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	e000      	b.n	800f4a6 <xQueueGenericCreateStatic+0x8a>
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d10b      	bne.n	800f4c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800f4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ae:	f383 8811 	msr	BASEPRI, r3
 800f4b2:	f3bf 8f6f 	isb	sy
 800f4b6:	f3bf 8f4f 	dsb	sy
 800f4ba:	61fb      	str	r3, [r7, #28]
}
 800f4bc:	bf00      	nop
 800f4be:	bf00      	nop
 800f4c0:	e7fd      	b.n	800f4be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f4c2:	2350      	movs	r3, #80	@ 0x50
 800f4c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	2b50      	cmp	r3, #80	@ 0x50
 800f4ca:	d00b      	beq.n	800f4e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800f4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d0:	f383 8811 	msr	BASEPRI, r3
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	61bb      	str	r3, [r7, #24]
}
 800f4de:	bf00      	nop
 800f4e0:	bf00      	nop
 800f4e2:	e7fd      	b.n	800f4e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f4e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00d      	beq.n	800f50c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	4613      	mov	r3, r2
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	68b9      	ldr	r1, [r7, #8]
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f000 f840 	bl	800f58c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f50e:	4618      	mov	r0, r3
 800f510:	3730      	adds	r7, #48	@ 0x30
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f516:	b580      	push	{r7, lr}
 800f518:	b08a      	sub	sp, #40	@ 0x28
 800f51a:	af02      	add	r7, sp, #8
 800f51c:	60f8      	str	r0, [r7, #12]
 800f51e:	60b9      	str	r1, [r7, #8]
 800f520:	4613      	mov	r3, r2
 800f522:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d10b      	bne.n	800f542 <xQueueGenericCreate+0x2c>
	__asm volatile
 800f52a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f52e:	f383 8811 	msr	BASEPRI, r3
 800f532:	f3bf 8f6f 	isb	sy
 800f536:	f3bf 8f4f 	dsb	sy
 800f53a:	613b      	str	r3, [r7, #16]
}
 800f53c:	bf00      	nop
 800f53e:	bf00      	nop
 800f540:	e7fd      	b.n	800f53e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	fb02 f303 	mul.w	r3, r2, r3
 800f54a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f54c:	69fb      	ldr	r3, [r7, #28]
 800f54e:	3350      	adds	r3, #80	@ 0x50
 800f550:	4618      	mov	r0, r3
 800f552:	f003 f86b 	bl	801262c <pvPortMalloc>
 800f556:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f558:	69bb      	ldr	r3, [r7, #24]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d011      	beq.n	800f582 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f55e:	69bb      	ldr	r3, [r7, #24]
 800f560:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	3350      	adds	r3, #80	@ 0x50
 800f566:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	2200      	movs	r2, #0
 800f56c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f570:	79fa      	ldrb	r2, [r7, #7]
 800f572:	69bb      	ldr	r3, [r7, #24]
 800f574:	9300      	str	r3, [sp, #0]
 800f576:	4613      	mov	r3, r2
 800f578:	697a      	ldr	r2, [r7, #20]
 800f57a:	68b9      	ldr	r1, [r7, #8]
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f000 f805 	bl	800f58c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f582:	69bb      	ldr	r3, [r7, #24]
	}
 800f584:	4618      	mov	r0, r3
 800f586:	3720      	adds	r7, #32
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd80      	pop	{r7, pc}

0800f58c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b084      	sub	sp, #16
 800f590:	af00      	add	r7, sp, #0
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
 800f598:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d103      	bne.n	800f5a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	69ba      	ldr	r2, [r7, #24]
 800f5a4:	601a      	str	r2, [r3, #0]
 800f5a6:	e002      	b.n	800f5ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	68fa      	ldr	r2, [r7, #12]
 800f5b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f5b4:	69bb      	ldr	r3, [r7, #24]
 800f5b6:	68ba      	ldr	r2, [r7, #8]
 800f5b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f5ba:	2101      	movs	r1, #1
 800f5bc:	69b8      	ldr	r0, [r7, #24]
 800f5be:	f7ff fec3 	bl	800f348 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	78fa      	ldrb	r2, [r7, #3]
 800f5c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f5ca:	bf00      	nop
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}

0800f5d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f5d2:	b580      	push	{r7, lr}
 800f5d4:	b082      	sub	sp, #8
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00e      	beq.n	800f5fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f000 f911 	bl	800f820 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f5fe:	bf00      	nop
 800f600:	3708      	adds	r7, #8
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}

0800f606 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f606:	b580      	push	{r7, lr}
 800f608:	b086      	sub	sp, #24
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	4603      	mov	r3, r0
 800f60e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f610:	2301      	movs	r3, #1
 800f612:	617b      	str	r3, [r7, #20]
 800f614:	2300      	movs	r3, #0
 800f616:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f618:	79fb      	ldrb	r3, [r7, #7]
 800f61a:	461a      	mov	r2, r3
 800f61c:	6939      	ldr	r1, [r7, #16]
 800f61e:	6978      	ldr	r0, [r7, #20]
 800f620:	f7ff ff79 	bl	800f516 <xQueueGenericCreate>
 800f624:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f7ff ffd3 	bl	800f5d2 <prvInitialiseMutex>

		return xNewQueue;
 800f62c:	68fb      	ldr	r3, [r7, #12]
	}
 800f62e:	4618      	mov	r0, r3
 800f630:	3718      	adds	r7, #24
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}

0800f636 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f636:	b580      	push	{r7, lr}
 800f638:	b088      	sub	sp, #32
 800f63a:	af02      	add	r7, sp, #8
 800f63c:	4603      	mov	r3, r0
 800f63e:	6039      	str	r1, [r7, #0]
 800f640:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f642:	2301      	movs	r3, #1
 800f644:	617b      	str	r3, [r7, #20]
 800f646:	2300      	movs	r3, #0
 800f648:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f64a:	79fb      	ldrb	r3, [r7, #7]
 800f64c:	9300      	str	r3, [sp, #0]
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	2200      	movs	r2, #0
 800f652:	6939      	ldr	r1, [r7, #16]
 800f654:	6978      	ldr	r0, [r7, #20]
 800f656:	f7ff fee1 	bl	800f41c <xQueueGenericCreateStatic>
 800f65a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f65c:	68f8      	ldr	r0, [r7, #12]
 800f65e:	f7ff ffb8 	bl	800f5d2 <prvInitialiseMutex>

		return xNewQueue;
 800f662:	68fb      	ldr	r3, [r7, #12]
	}
 800f664:	4618      	mov	r0, r3
 800f666:	3718      	adds	r7, #24
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f66c:	b590      	push	{r4, r7, lr}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f678:	693b      	ldr	r3, [r7, #16]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d10b      	bne.n	800f696 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800f67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f682:	f383 8811 	msr	BASEPRI, r3
 800f686:	f3bf 8f6f 	isb	sy
 800f68a:	f3bf 8f4f 	dsb	sy
 800f68e:	60fb      	str	r3, [r7, #12]
}
 800f690:	bf00      	nop
 800f692:	bf00      	nop
 800f694:	e7fd      	b.n	800f692 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	689c      	ldr	r4, [r3, #8]
 800f69a:	f001 fe05 	bl	80112a8 <xTaskGetCurrentTaskHandle>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	429c      	cmp	r4, r3
 800f6a2:	d111      	bne.n	800f6c8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	1e5a      	subs	r2, r3, #1
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d105      	bne.n	800f6c2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	6938      	ldr	r0, [r7, #16]
 800f6be:	f000 f8af 	bl	800f820 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	617b      	str	r3, [r7, #20]
 800f6c6:	e001      	b.n	800f6cc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f6cc:	697b      	ldr	r3, [r7, #20]
	}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	371c      	adds	r7, #28
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd90      	pop	{r4, r7, pc}

0800f6d6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f6d6:	b590      	push	{r4, r7, lr}
 800f6d8:	b087      	sub	sp, #28
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d10b      	bne.n	800f702 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800f6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ee:	f383 8811 	msr	BASEPRI, r3
 800f6f2:	f3bf 8f6f 	isb	sy
 800f6f6:	f3bf 8f4f 	dsb	sy
 800f6fa:	60fb      	str	r3, [r7, #12]
}
 800f6fc:	bf00      	nop
 800f6fe:	bf00      	nop
 800f700:	e7fd      	b.n	800f6fe <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	689c      	ldr	r4, [r3, #8]
 800f706:	f001 fdcf 	bl	80112a8 <xTaskGetCurrentTaskHandle>
 800f70a:	4603      	mov	r3, r0
 800f70c:	429c      	cmp	r4, r3
 800f70e:	d107      	bne.n	800f720 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	68db      	ldr	r3, [r3, #12]
 800f714:	1c5a      	adds	r2, r3, #1
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f71a:	2301      	movs	r3, #1
 800f71c:	617b      	str	r3, [r7, #20]
 800f71e:	e00c      	b.n	800f73a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f720:	6839      	ldr	r1, [r7, #0]
 800f722:	6938      	ldr	r0, [r7, #16]
 800f724:	f000 fb8e 	bl	800fe44 <xQueueSemaphoreTake>
 800f728:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d004      	beq.n	800f73a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	1c5a      	adds	r2, r3, #1
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f73a:	697b      	ldr	r3, [r7, #20]
	}
 800f73c:	4618      	mov	r0, r3
 800f73e:	371c      	adds	r7, #28
 800f740:	46bd      	mov	sp, r7
 800f742:	bd90      	pop	{r4, r7, pc}

0800f744 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08a      	sub	sp, #40	@ 0x28
 800f748:	af02      	add	r7, sp, #8
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d10b      	bne.n	800f76e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800f756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75a:	f383 8811 	msr	BASEPRI, r3
 800f75e:	f3bf 8f6f 	isb	sy
 800f762:	f3bf 8f4f 	dsb	sy
 800f766:	61bb      	str	r3, [r7, #24]
}
 800f768:	bf00      	nop
 800f76a:	bf00      	nop
 800f76c:	e7fd      	b.n	800f76a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	429a      	cmp	r2, r3
 800f774:	d90b      	bls.n	800f78e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800f776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	617b      	str	r3, [r7, #20]
}
 800f788:	bf00      	nop
 800f78a:	bf00      	nop
 800f78c:	e7fd      	b.n	800f78a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f78e:	2302      	movs	r3, #2
 800f790:	9300      	str	r3, [sp, #0]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2200      	movs	r2, #0
 800f796:	2100      	movs	r1, #0
 800f798:	68f8      	ldr	r0, [r7, #12]
 800f79a:	f7ff fe3f 	bl	800f41c <xQueueGenericCreateStatic>
 800f79e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d002      	beq.n	800f7ac <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	68ba      	ldr	r2, [r7, #8]
 800f7aa:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f7ac:	69fb      	ldr	r3, [r7, #28]
	}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3720      	adds	r7, #32
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b086      	sub	sp, #24
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
 800f7be:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10b      	bne.n	800f7de <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800f7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	613b      	str	r3, [r7, #16]
}
 800f7d8:	bf00      	nop
 800f7da:	bf00      	nop
 800f7dc:	e7fd      	b.n	800f7da <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f7de:	683a      	ldr	r2, [r7, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d90b      	bls.n	800f7fe <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800f7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ea:	f383 8811 	msr	BASEPRI, r3
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f3bf 8f4f 	dsb	sy
 800f7f6:	60fb      	str	r3, [r7, #12]
}
 800f7f8:	bf00      	nop
 800f7fa:	bf00      	nop
 800f7fc:	e7fd      	b.n	800f7fa <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f7fe:	2202      	movs	r2, #2
 800f800:	2100      	movs	r1, #0
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7ff fe87 	bl	800f516 <xQueueGenericCreate>
 800f808:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d002      	beq.n	800f816 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	683a      	ldr	r2, [r7, #0]
 800f814:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f816:	697b      	ldr	r3, [r7, #20]
	}
 800f818:	4618      	mov	r0, r3
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b08e      	sub	sp, #56	@ 0x38
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
 800f82c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f82e:	2300      	movs	r3, #0
 800f830:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d10b      	bne.n	800f854 <xQueueGenericSend+0x34>
	__asm volatile
 800f83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f840:	f383 8811 	msr	BASEPRI, r3
 800f844:	f3bf 8f6f 	isb	sy
 800f848:	f3bf 8f4f 	dsb	sy
 800f84c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f84e:	bf00      	nop
 800f850:	bf00      	nop
 800f852:	e7fd      	b.n	800f850 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d103      	bne.n	800f862 <xQueueGenericSend+0x42>
 800f85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d101      	bne.n	800f866 <xQueueGenericSend+0x46>
 800f862:	2301      	movs	r3, #1
 800f864:	e000      	b.n	800f868 <xQueueGenericSend+0x48>
 800f866:	2300      	movs	r3, #0
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d10b      	bne.n	800f884 <xQueueGenericSend+0x64>
	__asm volatile
 800f86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f870:	f383 8811 	msr	BASEPRI, r3
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f87e:	bf00      	nop
 800f880:	bf00      	nop
 800f882:	e7fd      	b.n	800f880 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	2b02      	cmp	r3, #2
 800f888:	d103      	bne.n	800f892 <xQueueGenericSend+0x72>
 800f88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f88c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f88e:	2b01      	cmp	r3, #1
 800f890:	d101      	bne.n	800f896 <xQueueGenericSend+0x76>
 800f892:	2301      	movs	r3, #1
 800f894:	e000      	b.n	800f898 <xQueueGenericSend+0x78>
 800f896:	2300      	movs	r3, #0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d10b      	bne.n	800f8b4 <xQueueGenericSend+0x94>
	__asm volatile
 800f89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a0:	f383 8811 	msr	BASEPRI, r3
 800f8a4:	f3bf 8f6f 	isb	sy
 800f8a8:	f3bf 8f4f 	dsb	sy
 800f8ac:	623b      	str	r3, [r7, #32]
}
 800f8ae:	bf00      	nop
 800f8b0:	bf00      	nop
 800f8b2:	e7fd      	b.n	800f8b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f8b4:	f001 fd08 	bl	80112c8 <xTaskGetSchedulerState>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d102      	bne.n	800f8c4 <xQueueGenericSend+0xa4>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d101      	bne.n	800f8c8 <xQueueGenericSend+0xa8>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e000      	b.n	800f8ca <xQueueGenericSend+0xaa>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10b      	bne.n	800f8e6 <xQueueGenericSend+0xc6>
	__asm volatile
 800f8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	61fb      	str	r3, [r7, #28]
}
 800f8e0:	bf00      	nop
 800f8e2:	bf00      	nop
 800f8e4:	e7fd      	b.n	800f8e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f8e6:	f002 fd7f 	bl	80123e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d302      	bcc.n	800f8fc <xQueueGenericSend+0xdc>
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b02      	cmp	r3, #2
 800f8fa:	d129      	bne.n	800f950 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8fc:	683a      	ldr	r2, [r7, #0]
 800f8fe:	68b9      	ldr	r1, [r7, #8]
 800f900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f902:	f000 fc6d 	bl	80101e0 <prvCopyDataToQueue>
 800f906:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d010      	beq.n	800f932 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f912:	3324      	adds	r3, #36	@ 0x24
 800f914:	4618      	mov	r0, r3
 800f916:	f001 faa3 	bl	8010e60 <xTaskRemoveFromEventList>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d013      	beq.n	800f948 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f920:	4b3f      	ldr	r3, [pc, #252]	@ (800fa20 <xQueueGenericSend+0x200>)
 800f922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f926:	601a      	str	r2, [r3, #0]
 800f928:	f3bf 8f4f 	dsb	sy
 800f92c:	f3bf 8f6f 	isb	sy
 800f930:	e00a      	b.n	800f948 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f934:	2b00      	cmp	r3, #0
 800f936:	d007      	beq.n	800f948 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f938:	4b39      	ldr	r3, [pc, #228]	@ (800fa20 <xQueueGenericSend+0x200>)
 800f93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f93e:	601a      	str	r2, [r3, #0]
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f948:	f002 fd80 	bl	801244c <vPortExitCritical>
				return pdPASS;
 800f94c:	2301      	movs	r3, #1
 800f94e:	e063      	b.n	800fa18 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d103      	bne.n	800f95e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f956:	f002 fd79 	bl	801244c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e05c      	b.n	800fa18 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f960:	2b00      	cmp	r3, #0
 800f962:	d106      	bne.n	800f972 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f964:	f107 0314 	add.w	r3, r7, #20
 800f968:	4618      	mov	r0, r3
 800f96a:	f001 fb41 	bl	8010ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f96e:	2301      	movs	r3, #1
 800f970:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f972:	f002 fd6b 	bl	801244c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f976:	f001 f80f 	bl	8010998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f97a:	f002 fd35 	bl	80123e8 <vPortEnterCritical>
 800f97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f984:	b25b      	sxtb	r3, r3
 800f986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f98a:	d103      	bne.n	800f994 <xQueueGenericSend+0x174>
 800f98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f98e:	2200      	movs	r2, #0
 800f990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f996:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f99a:	b25b      	sxtb	r3, r3
 800f99c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9a0:	d103      	bne.n	800f9aa <xQueueGenericSend+0x18a>
 800f9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f9aa:	f002 fd4f 	bl	801244c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9ae:	1d3a      	adds	r2, r7, #4
 800f9b0:	f107 0314 	add.w	r3, r7, #20
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f001 fb30 	bl	801101c <xTaskCheckForTimeOut>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d124      	bne.n	800fa0c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f9c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9c4:	f000 fd04 	bl	80103d0 <prvIsQueueFull>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d018      	beq.n	800fa00 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9d0:	3310      	adds	r3, #16
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f001 f9b2 	bl	8010d40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f9dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9de:	f000 fc8f 	bl	8010300 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f9e2:	f000 ffe7 	bl	80109b4 <xTaskResumeAll>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f47f af7c 	bne.w	800f8e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800f9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800fa20 <xQueueGenericSend+0x200>)
 800f9f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f9f4:	601a      	str	r2, [r3, #0]
 800f9f6:	f3bf 8f4f 	dsb	sy
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	e772      	b.n	800f8e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fa00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa02:	f000 fc7d 	bl	8010300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa06:	f000 ffd5 	bl	80109b4 <xTaskResumeAll>
 800fa0a:	e76c      	b.n	800f8e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fa0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa0e:	f000 fc77 	bl	8010300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa12:	f000 ffcf 	bl	80109b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fa16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3738      	adds	r7, #56	@ 0x38
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	e000ed04 	.word	0xe000ed04

0800fa24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b090      	sub	sp, #64	@ 0x40
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
 800fa30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800fa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10b      	bne.n	800fa54 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800fa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa40:	f383 8811 	msr	BASEPRI, r3
 800fa44:	f3bf 8f6f 	isb	sy
 800fa48:	f3bf 8f4f 	dsb	sy
 800fa4c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fa4e:	bf00      	nop
 800fa50:	bf00      	nop
 800fa52:	e7fd      	b.n	800fa50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d103      	bne.n	800fa62 <xQueueGenericSendFromISR+0x3e>
 800fa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d101      	bne.n	800fa66 <xQueueGenericSendFromISR+0x42>
 800fa62:	2301      	movs	r3, #1
 800fa64:	e000      	b.n	800fa68 <xQueueGenericSendFromISR+0x44>
 800fa66:	2300      	movs	r3, #0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10b      	bne.n	800fa84 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800fa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa70:	f383 8811 	msr	BASEPRI, r3
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fa7e:	bf00      	nop
 800fa80:	bf00      	nop
 800fa82:	e7fd      	b.n	800fa80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d103      	bne.n	800fa92 <xQueueGenericSendFromISR+0x6e>
 800fa8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d101      	bne.n	800fa96 <xQueueGenericSendFromISR+0x72>
 800fa92:	2301      	movs	r3, #1
 800fa94:	e000      	b.n	800fa98 <xQueueGenericSendFromISR+0x74>
 800fa96:	2300      	movs	r3, #0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10b      	bne.n	800fab4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800fa9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faa0:	f383 8811 	msr	BASEPRI, r3
 800faa4:	f3bf 8f6f 	isb	sy
 800faa8:	f3bf 8f4f 	dsb	sy
 800faac:	623b      	str	r3, [r7, #32]
}
 800faae:	bf00      	nop
 800fab0:	bf00      	nop
 800fab2:	e7fd      	b.n	800fab0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fab4:	f002 fd78 	bl	80125a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fab8:	f3ef 8211 	mrs	r2, BASEPRI
 800fabc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac0:	f383 8811 	msr	BASEPRI, r3
 800fac4:	f3bf 8f6f 	isb	sy
 800fac8:	f3bf 8f4f 	dsb	sy
 800facc:	61fa      	str	r2, [r7, #28]
 800face:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fad0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fad2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fadc:	429a      	cmp	r2, r3
 800fade:	d302      	bcc.n	800fae6 <xQueueGenericSendFromISR+0xc2>
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	2b02      	cmp	r3, #2
 800fae4:	d12f      	bne.n	800fb46 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fae8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800faec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800faf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800faf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800faf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800faf6:	683a      	ldr	r2, [r7, #0]
 800faf8:	68b9      	ldr	r1, [r7, #8]
 800fafa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fafc:	f000 fb70 	bl	80101e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fb00:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800fb04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb08:	d112      	bne.n	800fb30 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d016      	beq.n	800fb40 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb14:	3324      	adds	r3, #36	@ 0x24
 800fb16:	4618      	mov	r0, r3
 800fb18:	f001 f9a2 	bl	8010e60 <xTaskRemoveFromEventList>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00e      	beq.n	800fb40 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00b      	beq.n	800fb40 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	601a      	str	r2, [r3, #0]
 800fb2e:	e007      	b.n	800fb40 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fb34:	3301      	adds	r3, #1
 800fb36:	b2db      	uxtb	r3, r3
 800fb38:	b25a      	sxtb	r2, r3
 800fb3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fb40:	2301      	movs	r3, #1
 800fb42:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800fb44:	e001      	b.n	800fb4a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fb46:	2300      	movs	r3, #0
 800fb48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb4c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fb54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3740      	adds	r7, #64	@ 0x40
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b08e      	sub	sp, #56	@ 0x38
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fb6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d10b      	bne.n	800fb8c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800fb74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb78:	f383 8811 	msr	BASEPRI, r3
 800fb7c:	f3bf 8f6f 	isb	sy
 800fb80:	f3bf 8f4f 	dsb	sy
 800fb84:	623b      	str	r3, [r7, #32]
}
 800fb86:	bf00      	nop
 800fb88:	bf00      	nop
 800fb8a:	e7fd      	b.n	800fb88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00b      	beq.n	800fbac <xQueueGiveFromISR+0x4c>
	__asm volatile
 800fb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb98:	f383 8811 	msr	BASEPRI, r3
 800fb9c:	f3bf 8f6f 	isb	sy
 800fba0:	f3bf 8f4f 	dsb	sy
 800fba4:	61fb      	str	r3, [r7, #28]
}
 800fba6:	bf00      	nop
 800fba8:	bf00      	nop
 800fbaa:	e7fd      	b.n	800fba8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d103      	bne.n	800fbbc <xQueueGiveFromISR+0x5c>
 800fbb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d101      	bne.n	800fbc0 <xQueueGiveFromISR+0x60>
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	e000      	b.n	800fbc2 <xQueueGiveFromISR+0x62>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10b      	bne.n	800fbde <xQueueGiveFromISR+0x7e>
	__asm volatile
 800fbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbca:	f383 8811 	msr	BASEPRI, r3
 800fbce:	f3bf 8f6f 	isb	sy
 800fbd2:	f3bf 8f4f 	dsb	sy
 800fbd6:	61bb      	str	r3, [r7, #24]
}
 800fbd8:	bf00      	nop
 800fbda:	bf00      	nop
 800fbdc:	e7fd      	b.n	800fbda <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fbde:	f002 fce3 	bl	80125a8 <vPortValidateInterruptPriority>
	__asm volatile
 800fbe2:	f3ef 8211 	mrs	r2, BASEPRI
 800fbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbea:	f383 8811 	msr	BASEPRI, r3
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	617a      	str	r2, [r7, #20]
 800fbf8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fbfa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fbfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc0a:	429a      	cmp	r2, r3
 800fc0c:	d22b      	bcs.n	800fc66 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc1a:	1c5a      	adds	r2, r3, #1
 800fc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fc20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fc24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fc28:	d112      	bne.n	800fc50 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d016      	beq.n	800fc60 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc34:	3324      	adds	r3, #36	@ 0x24
 800fc36:	4618      	mov	r0, r3
 800fc38:	f001 f912 	bl	8010e60 <xTaskRemoveFromEventList>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00e      	beq.n	800fc60 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00b      	beq.n	800fc60 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	601a      	str	r2, [r3, #0]
 800fc4e:	e007      	b.n	800fc60 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fc50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc54:	3301      	adds	r3, #1
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	b25a      	sxtb	r2, r3
 800fc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fc60:	2301      	movs	r3, #1
 800fc62:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc64:	e001      	b.n	800fc6a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc66:	2300      	movs	r3, #0
 800fc68:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f383 8811 	msr	BASEPRI, r3
}
 800fc74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3738      	adds	r7, #56	@ 0x38
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b08c      	sub	sp, #48	@ 0x30
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d10b      	bne.n	800fcb2 <xQueueReceive+0x32>
	__asm volatile
 800fc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc9e:	f383 8811 	msr	BASEPRI, r3
 800fca2:	f3bf 8f6f 	isb	sy
 800fca6:	f3bf 8f4f 	dsb	sy
 800fcaa:	623b      	str	r3, [r7, #32]
}
 800fcac:	bf00      	nop
 800fcae:	bf00      	nop
 800fcb0:	e7fd      	b.n	800fcae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d103      	bne.n	800fcc0 <xQueueReceive+0x40>
 800fcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d101      	bne.n	800fcc4 <xQueueReceive+0x44>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e000      	b.n	800fcc6 <xQueueReceive+0x46>
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d10b      	bne.n	800fce2 <xQueueReceive+0x62>
	__asm volatile
 800fcca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcce:	f383 8811 	msr	BASEPRI, r3
 800fcd2:	f3bf 8f6f 	isb	sy
 800fcd6:	f3bf 8f4f 	dsb	sy
 800fcda:	61fb      	str	r3, [r7, #28]
}
 800fcdc:	bf00      	nop
 800fcde:	bf00      	nop
 800fce0:	e7fd      	b.n	800fcde <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fce2:	f001 faf1 	bl	80112c8 <xTaskGetSchedulerState>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d102      	bne.n	800fcf2 <xQueueReceive+0x72>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d101      	bne.n	800fcf6 <xQueueReceive+0x76>
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	e000      	b.n	800fcf8 <xQueueReceive+0x78>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d10b      	bne.n	800fd14 <xQueueReceive+0x94>
	__asm volatile
 800fcfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd00:	f383 8811 	msr	BASEPRI, r3
 800fd04:	f3bf 8f6f 	isb	sy
 800fd08:	f3bf 8f4f 	dsb	sy
 800fd0c:	61bb      	str	r3, [r7, #24]
}
 800fd0e:	bf00      	nop
 800fd10:	bf00      	nop
 800fd12:	e7fd      	b.n	800fd10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd14:	f002 fb68 	bl	80123e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fd1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d01f      	beq.n	800fd64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fd24:	68b9      	ldr	r1, [r7, #8]
 800fd26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd28:	f000 fac4 	bl	80102b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd2e:	1e5a      	subs	r2, r3, #1
 800fd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00f      	beq.n	800fd5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd3e:	3310      	adds	r3, #16
 800fd40:	4618      	mov	r0, r3
 800fd42:	f001 f88d 	bl	8010e60 <xTaskRemoveFromEventList>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d007      	beq.n	800fd5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fd4c:	4b3c      	ldr	r3, [pc, #240]	@ (800fe40 <xQueueReceive+0x1c0>)
 800fd4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	f3bf 8f4f 	dsb	sy
 800fd58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd5c:	f002 fb76 	bl	801244c <vPortExitCritical>
				return pdPASS;
 800fd60:	2301      	movs	r3, #1
 800fd62:	e069      	b.n	800fe38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d103      	bne.n	800fd72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd6a:	f002 fb6f 	bl	801244c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	e062      	b.n	800fe38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d106      	bne.n	800fd86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd78:	f107 0310 	add.w	r3, r7, #16
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f001 f937 	bl	8010ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd82:	2301      	movs	r3, #1
 800fd84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd86:	f002 fb61 	bl	801244c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd8a:	f000 fe05 	bl	8010998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd8e:	f002 fb2b 	bl	80123e8 <vPortEnterCritical>
 800fd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fd98:	b25b      	sxtb	r3, r3
 800fd9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd9e:	d103      	bne.n	800fda8 <xQueueReceive+0x128>
 800fda0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fda2:	2200      	movs	r2, #0
 800fda4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fdae:	b25b      	sxtb	r3, r3
 800fdb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fdb4:	d103      	bne.n	800fdbe <xQueueReceive+0x13e>
 800fdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fdbe:	f002 fb45 	bl	801244c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fdc2:	1d3a      	adds	r2, r7, #4
 800fdc4:	f107 0310 	add.w	r3, r7, #16
 800fdc8:	4611      	mov	r1, r2
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f001 f926 	bl	801101c <xTaskCheckForTimeOut>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d123      	bne.n	800fe1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdd8:	f000 fae4 	bl	80103a4 <prvIsQueueEmpty>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d017      	beq.n	800fe12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde4:	3324      	adds	r3, #36	@ 0x24
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	4611      	mov	r1, r2
 800fdea:	4618      	mov	r0, r3
 800fdec:	f000 ffa8 	bl	8010d40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fdf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdf2:	f000 fa85 	bl	8010300 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fdf6:	f000 fddd 	bl	80109b4 <xTaskResumeAll>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d189      	bne.n	800fd14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800fe00:	4b0f      	ldr	r3, [pc, #60]	@ (800fe40 <xQueueReceive+0x1c0>)
 800fe02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe06:	601a      	str	r2, [r3, #0]
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	e780      	b.n	800fd14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fe12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe14:	f000 fa74 	bl	8010300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe18:	f000 fdcc 	bl	80109b4 <xTaskResumeAll>
 800fe1c:	e77a      	b.n	800fd14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fe1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe20:	f000 fa6e 	bl	8010300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe24:	f000 fdc6 	bl	80109b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fe2a:	f000 fabb 	bl	80103a4 <prvIsQueueEmpty>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	f43f af6f 	beq.w	800fd14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3730      	adds	r7, #48	@ 0x30
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	e000ed04 	.word	0xe000ed04

0800fe44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b08e      	sub	sp, #56	@ 0x38
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fe56:	2300      	movs	r3, #0
 800fe58:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fe5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10b      	bne.n	800fe78 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800fe60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe64:	f383 8811 	msr	BASEPRI, r3
 800fe68:	f3bf 8f6f 	isb	sy
 800fe6c:	f3bf 8f4f 	dsb	sy
 800fe70:	623b      	str	r3, [r7, #32]
}
 800fe72:	bf00      	nop
 800fe74:	bf00      	nop
 800fe76:	e7fd      	b.n	800fe74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00b      	beq.n	800fe98 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800fe80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	61fb      	str	r3, [r7, #28]
}
 800fe92:	bf00      	nop
 800fe94:	bf00      	nop
 800fe96:	e7fd      	b.n	800fe94 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe98:	f001 fa16 	bl	80112c8 <xTaskGetSchedulerState>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d102      	bne.n	800fea8 <xQueueSemaphoreTake+0x64>
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <xQueueSemaphoreTake+0x68>
 800fea8:	2301      	movs	r3, #1
 800feaa:	e000      	b.n	800feae <xQueueSemaphoreTake+0x6a>
 800feac:	2300      	movs	r3, #0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10b      	bne.n	800feca <xQueueSemaphoreTake+0x86>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb6:	f383 8811 	msr	BASEPRI, r3
 800feba:	f3bf 8f6f 	isb	sy
 800febe:	f3bf 8f4f 	dsb	sy
 800fec2:	61bb      	str	r3, [r7, #24]
}
 800fec4:	bf00      	nop
 800fec6:	bf00      	nop
 800fec8:	e7fd      	b.n	800fec6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800feca:	f002 fa8d 	bl	80123e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fed2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d024      	beq.n	800ff24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800feda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fedc:	1e5a      	subs	r2, r3, #1
 800fede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d104      	bne.n	800fef4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800feea:	f001 fb7f 	bl	80115ec <pvTaskIncrementMutexHeldCount>
 800feee:	4602      	mov	r2, r0
 800fef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fef6:	691b      	ldr	r3, [r3, #16]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00f      	beq.n	800ff1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fefe:	3310      	adds	r3, #16
 800ff00:	4618      	mov	r0, r3
 800ff02:	f000 ffad 	bl	8010e60 <xTaskRemoveFromEventList>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d007      	beq.n	800ff1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff0c:	4b54      	ldr	r3, [pc, #336]	@ (8010060 <xQueueSemaphoreTake+0x21c>)
 800ff0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff1c:	f002 fa96 	bl	801244c <vPortExitCritical>
				return pdPASS;
 800ff20:	2301      	movs	r3, #1
 800ff22:	e098      	b.n	8010056 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d112      	bne.n	800ff50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00b      	beq.n	800ff48 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ff30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff34:	f383 8811 	msr	BASEPRI, r3
 800ff38:	f3bf 8f6f 	isb	sy
 800ff3c:	f3bf 8f4f 	dsb	sy
 800ff40:	617b      	str	r3, [r7, #20]
}
 800ff42:	bf00      	nop
 800ff44:	bf00      	nop
 800ff46:	e7fd      	b.n	800ff44 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ff48:	f002 fa80 	bl	801244c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	e082      	b.n	8010056 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d106      	bne.n	800ff64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff56:	f107 030c 	add.w	r3, r7, #12
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f001 f848 	bl	8010ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff60:	2301      	movs	r3, #1
 800ff62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff64:	f002 fa72 	bl	801244c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff68:	f000 fd16 	bl	8010998 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff6c:	f002 fa3c 	bl	80123e8 <vPortEnterCritical>
 800ff70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff76:	b25b      	sxtb	r3, r3
 800ff78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff7c:	d103      	bne.n	800ff86 <xQueueSemaphoreTake+0x142>
 800ff7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff80:	2200      	movs	r2, #0
 800ff82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ff86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff8c:	b25b      	sxtb	r3, r3
 800ff8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ff92:	d103      	bne.n	800ff9c <xQueueSemaphoreTake+0x158>
 800ff94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff96:	2200      	movs	r2, #0
 800ff98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ff9c:	f002 fa56 	bl	801244c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffa0:	463a      	mov	r2, r7
 800ffa2:	f107 030c 	add.w	r3, r7, #12
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f001 f837 	bl	801101c <xTaskCheckForTimeOut>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d132      	bne.n	801001a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffb6:	f000 f9f5 	bl	80103a4 <prvIsQueueEmpty>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d026      	beq.n	801000e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ffc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d109      	bne.n	800ffdc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ffc8:	f002 fa0e 	bl	80123e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ffcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffce:	689b      	ldr	r3, [r3, #8]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f001 f997 	bl	8011304 <xTaskPriorityInherit>
 800ffd6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ffd8:	f002 fa38 	bl	801244c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffde:	3324      	adds	r3, #36	@ 0x24
 800ffe0:	683a      	ldr	r2, [r7, #0]
 800ffe2:	4611      	mov	r1, r2
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f000 feab 	bl	8010d40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ffea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ffec:	f000 f988 	bl	8010300 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fff0:	f000 fce0 	bl	80109b4 <xTaskResumeAll>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	f47f af67 	bne.w	800feca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800fffc:	4b18      	ldr	r3, [pc, #96]	@ (8010060 <xQueueSemaphoreTake+0x21c>)
 800fffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010002:	601a      	str	r2, [r3, #0]
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	e75d      	b.n	800feca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801000e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010010:	f000 f976 	bl	8010300 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010014:	f000 fcce 	bl	80109b4 <xTaskResumeAll>
 8010018:	e757      	b.n	800feca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801001a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801001c:	f000 f970 	bl	8010300 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010020:	f000 fcc8 	bl	80109b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010024:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010026:	f000 f9bd 	bl	80103a4 <prvIsQueueEmpty>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	f43f af4c 	beq.w	800feca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010034:	2b00      	cmp	r3, #0
 8010036:	d00d      	beq.n	8010054 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010038:	f002 f9d6 	bl	80123e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801003c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801003e:	f000 f8b7 	bl	80101b0 <prvGetDisinheritPriorityAfterTimeout>
 8010042:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010046:	689b      	ldr	r3, [r3, #8]
 8010048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801004a:	4618      	mov	r0, r3
 801004c:	f001 fa32 	bl	80114b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010050:	f002 f9fc 	bl	801244c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010054:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010056:	4618      	mov	r0, r3
 8010058:	3738      	adds	r7, #56	@ 0x38
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}
 801005e:	bf00      	nop
 8010060:	e000ed04 	.word	0xe000ed04

08010064 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b08e      	sub	sp, #56	@ 0x38
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010076:	2b00      	cmp	r3, #0
 8010078:	d10b      	bne.n	8010092 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801007a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801007e:	f383 8811 	msr	BASEPRI, r3
 8010082:	f3bf 8f6f 	isb	sy
 8010086:	f3bf 8f4f 	dsb	sy
 801008a:	623b      	str	r3, [r7, #32]
}
 801008c:	bf00      	nop
 801008e:	bf00      	nop
 8010090:	e7fd      	b.n	801008e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d103      	bne.n	80100a0 <xQueueReceiveFromISR+0x3c>
 8010098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801009a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801009c:	2b00      	cmp	r3, #0
 801009e:	d101      	bne.n	80100a4 <xQueueReceiveFromISR+0x40>
 80100a0:	2301      	movs	r3, #1
 80100a2:	e000      	b.n	80100a6 <xQueueReceiveFromISR+0x42>
 80100a4:	2300      	movs	r3, #0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d10b      	bne.n	80100c2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80100aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ae:	f383 8811 	msr	BASEPRI, r3
 80100b2:	f3bf 8f6f 	isb	sy
 80100b6:	f3bf 8f4f 	dsb	sy
 80100ba:	61fb      	str	r3, [r7, #28]
}
 80100bc:	bf00      	nop
 80100be:	bf00      	nop
 80100c0:	e7fd      	b.n	80100be <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100c2:	f002 fa71 	bl	80125a8 <vPortValidateInterruptPriority>
	__asm volatile
 80100c6:	f3ef 8211 	mrs	r2, BASEPRI
 80100ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ce:	f383 8811 	msr	BASEPRI, r3
 80100d2:	f3bf 8f6f 	isb	sy
 80100d6:	f3bf 8f4f 	dsb	sy
 80100da:	61ba      	str	r2, [r7, #24]
 80100dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80100de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80100e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100e6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d02f      	beq.n	801014e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80100ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80100f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80100f8:	68b9      	ldr	r1, [r7, #8]
 80100fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100fc:	f000 f8da 	bl	80102b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010102:	1e5a      	subs	r2, r3, #1
 8010104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010106:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010108:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801010c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010110:	d112      	bne.n	8010138 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010114:	691b      	ldr	r3, [r3, #16]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d016      	beq.n	8010148 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801011a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801011c:	3310      	adds	r3, #16
 801011e:	4618      	mov	r0, r3
 8010120:	f000 fe9e 	bl	8010e60 <xTaskRemoveFromEventList>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00e      	beq.n	8010148 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00b      	beq.n	8010148 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	e007      	b.n	8010148 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801013c:	3301      	adds	r3, #1
 801013e:	b2db      	uxtb	r3, r3
 8010140:	b25a      	sxtb	r2, r3
 8010142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010148:	2301      	movs	r3, #1
 801014a:	637b      	str	r3, [r7, #52]	@ 0x34
 801014c:	e001      	b.n	8010152 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 801014e:	2300      	movs	r3, #0
 8010150:	637b      	str	r3, [r7, #52]	@ 0x34
 8010152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010154:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	f383 8811 	msr	BASEPRI, r3
}
 801015c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801015e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010160:	4618      	mov	r0, r3
 8010162:	3738      	adds	r7, #56	@ 0x38
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b084      	sub	sp, #16
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d10b      	bne.n	8010192 <vQueueDelete+0x2a>
	__asm volatile
 801017a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801017e:	f383 8811 	msr	BASEPRI, r3
 8010182:	f3bf 8f6f 	isb	sy
 8010186:	f3bf 8f4f 	dsb	sy
 801018a:	60bb      	str	r3, [r7, #8]
}
 801018c:	bf00      	nop
 801018e:	bf00      	nop
 8010190:	e7fd      	b.n	801018e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 f95e 	bl	8010454 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d102      	bne.n	80101a8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80101a2:	68f8      	ldr	r0, [r7, #12]
 80101a4:	f002 fb10 	bl	80127c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80101a8:	bf00      	nop
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d006      	beq.n	80101ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80101ca:	60fb      	str	r3, [r7, #12]
 80101cc:	e001      	b.n	80101d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80101ce:	2300      	movs	r3, #0
 80101d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80101d2:	68fb      	ldr	r3, [r7, #12]
	}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3714      	adds	r7, #20
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80101ec:	2300      	movs	r3, #0
 80101ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d10d      	bne.n	801021a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d14d      	bne.n	80102a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	689b      	ldr	r3, [r3, #8]
 801020a:	4618      	mov	r0, r3
 801020c:	f001 f8e2 	bl	80113d4 <xTaskPriorityDisinherit>
 8010210:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2200      	movs	r2, #0
 8010216:	609a      	str	r2, [r3, #8]
 8010218:	e043      	b.n	80102a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d119      	bne.n	8010254 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6858      	ldr	r0, [r3, #4]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010228:	461a      	mov	r2, r3
 801022a:	68b9      	ldr	r1, [r7, #8]
 801022c:	f004 fbf8 	bl	8014a20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	685a      	ldr	r2, [r3, #4]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010238:	441a      	add	r2, r3
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	685a      	ldr	r2, [r3, #4]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	689b      	ldr	r3, [r3, #8]
 8010246:	429a      	cmp	r2, r3
 8010248:	d32b      	bcc.n	80102a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	605a      	str	r2, [r3, #4]
 8010252:	e026      	b.n	80102a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	68d8      	ldr	r0, [r3, #12]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801025c:	461a      	mov	r2, r3
 801025e:	68b9      	ldr	r1, [r7, #8]
 8010260:	f004 fbde 	bl	8014a20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	68da      	ldr	r2, [r3, #12]
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801026c:	425b      	negs	r3, r3
 801026e:	441a      	add	r2, r3
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	68da      	ldr	r2, [r3, #12]
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	429a      	cmp	r2, r3
 801027e:	d207      	bcs.n	8010290 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	689a      	ldr	r2, [r3, #8]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010288:	425b      	negs	r3, r3
 801028a:	441a      	add	r2, r3
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2b02      	cmp	r3, #2
 8010294:	d105      	bne.n	80102a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d002      	beq.n	80102a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	3b01      	subs	r3, #1
 80102a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	1c5a      	adds	r2, r3, #1
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80102aa:	697b      	ldr	r3, [r7, #20]
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3718      	adds	r7, #24
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}

080102b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b082      	sub	sp, #8
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
 80102bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d018      	beq.n	80102f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	68da      	ldr	r2, [r3, #12]
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102ce:	441a      	add	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	68da      	ldr	r2, [r3, #12]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	689b      	ldr	r3, [r3, #8]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d303      	bcc.n	80102e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	68d9      	ldr	r1, [r3, #12]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102f0:	461a      	mov	r2, r3
 80102f2:	6838      	ldr	r0, [r7, #0]
 80102f4:	f004 fb94 	bl	8014a20 <memcpy>
	}
}
 80102f8:	bf00      	nop
 80102fa:	3708      	adds	r7, #8
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}

08010300 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010308:	f002 f86e 	bl	80123e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010312:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010314:	e011      	b.n	801033a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801031a:	2b00      	cmp	r3, #0
 801031c:	d012      	beq.n	8010344 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	3324      	adds	r3, #36	@ 0x24
 8010322:	4618      	mov	r0, r3
 8010324:	f000 fd9c 	bl	8010e60 <xTaskRemoveFromEventList>
 8010328:	4603      	mov	r3, r0
 801032a:	2b00      	cmp	r3, #0
 801032c:	d001      	beq.n	8010332 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801032e:	f000 fed9 	bl	80110e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010332:	7bfb      	ldrb	r3, [r7, #15]
 8010334:	3b01      	subs	r3, #1
 8010336:	b2db      	uxtb	r3, r3
 8010338:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801033a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801033e:	2b00      	cmp	r3, #0
 8010340:	dce9      	bgt.n	8010316 <prvUnlockQueue+0x16>
 8010342:	e000      	b.n	8010346 <prvUnlockQueue+0x46>
					break;
 8010344:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	22ff      	movs	r2, #255	@ 0xff
 801034a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801034e:	f002 f87d 	bl	801244c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010352:	f002 f849 	bl	80123e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801035c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801035e:	e011      	b.n	8010384 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d012      	beq.n	801038e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	3310      	adds	r3, #16
 801036c:	4618      	mov	r0, r3
 801036e:	f000 fd77 	bl	8010e60 <xTaskRemoveFromEventList>
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	d001      	beq.n	801037c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010378:	f000 feb4 	bl	80110e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801037c:	7bbb      	ldrb	r3, [r7, #14]
 801037e:	3b01      	subs	r3, #1
 8010380:	b2db      	uxtb	r3, r3
 8010382:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010388:	2b00      	cmp	r3, #0
 801038a:	dce9      	bgt.n	8010360 <prvUnlockQueue+0x60>
 801038c:	e000      	b.n	8010390 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801038e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	22ff      	movs	r2, #255	@ 0xff
 8010394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010398:	f002 f858 	bl	801244c <vPortExitCritical>
}
 801039c:	bf00      	nop
 801039e:	3710      	adds	r7, #16
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b084      	sub	sp, #16
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103ac:	f002 f81c 	bl	80123e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d102      	bne.n	80103be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80103b8:	2301      	movs	r3, #1
 80103ba:	60fb      	str	r3, [r7, #12]
 80103bc:	e001      	b.n	80103c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80103be:	2300      	movs	r3, #0
 80103c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80103c2:	f002 f843 	bl	801244c <vPortExitCritical>

	return xReturn;
 80103c6:	68fb      	ldr	r3, [r7, #12]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103d8:	f002 f806 	bl	80123e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d102      	bne.n	80103ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80103e8:	2301      	movs	r3, #1
 80103ea:	60fb      	str	r3, [r7, #12]
 80103ec:	e001      	b.n	80103f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80103ee:	2300      	movs	r3, #0
 80103f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80103f2:	f002 f82b 	bl	801244c <vPortExitCritical>

	return xReturn;
 80103f6:	68fb      	ldr	r3, [r7, #12]
}
 80103f8:	4618      	mov	r0, r3
 80103fa:	3710      	adds	r7, #16
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}

08010400 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010400:	b480      	push	{r7}
 8010402:	b085      	sub	sp, #20
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801040a:	2300      	movs	r3, #0
 801040c:	60fb      	str	r3, [r7, #12]
 801040e:	e014      	b.n	801043a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010410:	4a0f      	ldr	r2, [pc, #60]	@ (8010450 <vQueueAddToRegistry+0x50>)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d10b      	bne.n	8010434 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801041c:	490c      	ldr	r1, [pc, #48]	@ (8010450 <vQueueAddToRegistry+0x50>)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	683a      	ldr	r2, [r7, #0]
 8010422:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010426:	4a0a      	ldr	r2, [pc, #40]	@ (8010450 <vQueueAddToRegistry+0x50>)
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	00db      	lsls	r3, r3, #3
 801042c:	4413      	add	r3, r2
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010432:	e006      	b.n	8010442 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	3301      	adds	r3, #1
 8010438:	60fb      	str	r3, [r7, #12]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2b07      	cmp	r3, #7
 801043e:	d9e7      	bls.n	8010410 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010440:	bf00      	nop
 8010442:	bf00      	nop
 8010444:	3714      	adds	r7, #20
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr
 801044e:	bf00      	nop
 8010450:	200011b8 	.word	0x200011b8

08010454 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010454:	b480      	push	{r7}
 8010456:	b085      	sub	sp, #20
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801045c:	2300      	movs	r3, #0
 801045e:	60fb      	str	r3, [r7, #12]
 8010460:	e016      	b.n	8010490 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010462:	4a10      	ldr	r2, [pc, #64]	@ (80104a4 <vQueueUnregisterQueue+0x50>)
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	00db      	lsls	r3, r3, #3
 8010468:	4413      	add	r3, r2
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	429a      	cmp	r2, r3
 8010470:	d10b      	bne.n	801048a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010472:	4a0c      	ldr	r2, [pc, #48]	@ (80104a4 <vQueueUnregisterQueue+0x50>)
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2100      	movs	r1, #0
 8010478:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801047c:	4a09      	ldr	r2, [pc, #36]	@ (80104a4 <vQueueUnregisterQueue+0x50>)
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	00db      	lsls	r3, r3, #3
 8010482:	4413      	add	r3, r2
 8010484:	2200      	movs	r2, #0
 8010486:	605a      	str	r2, [r3, #4]
				break;
 8010488:	e006      	b.n	8010498 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	3301      	adds	r3, #1
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2b07      	cmp	r3, #7
 8010494:	d9e5      	bls.n	8010462 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010496:	bf00      	nop
 8010498:	bf00      	nop
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr
 80104a4:	200011b8 	.word	0x200011b8

080104a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80104b8:	f001 ff96 	bl	80123e8 <vPortEnterCritical>
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80104c2:	b25b      	sxtb	r3, r3
 80104c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104c8:	d103      	bne.n	80104d2 <vQueueWaitForMessageRestricted+0x2a>
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	2200      	movs	r2, #0
 80104ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80104d8:	b25b      	sxtb	r3, r3
 80104da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80104de:	d103      	bne.n	80104e8 <vQueueWaitForMessageRestricted+0x40>
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	2200      	movs	r2, #0
 80104e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80104e8:	f001 ffb0 	bl	801244c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d106      	bne.n	8010502 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	3324      	adds	r3, #36	@ 0x24
 80104f8:	687a      	ldr	r2, [r7, #4]
 80104fa:	68b9      	ldr	r1, [r7, #8]
 80104fc:	4618      	mov	r0, r3
 80104fe:	f000 fc83 	bl	8010e08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010502:	6978      	ldr	r0, [r7, #20]
 8010504:	f7ff fefc 	bl	8010300 <prvUnlockQueue>
	}
 8010508:	bf00      	nop
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010510:	b580      	push	{r7, lr}
 8010512:	b08e      	sub	sp, #56	@ 0x38
 8010514:	af04      	add	r7, sp, #16
 8010516:	60f8      	str	r0, [r7, #12]
 8010518:	60b9      	str	r1, [r7, #8]
 801051a:	607a      	str	r2, [r7, #4]
 801051c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801051e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10b      	bne.n	801053c <xTaskCreateStatic+0x2c>
	__asm volatile
 8010524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	623b      	str	r3, [r7, #32]
}
 8010536:	bf00      	nop
 8010538:	bf00      	nop
 801053a:	e7fd      	b.n	8010538 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801053c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801053e:	2b00      	cmp	r3, #0
 8010540:	d10b      	bne.n	801055a <xTaskCreateStatic+0x4a>
	__asm volatile
 8010542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010546:	f383 8811 	msr	BASEPRI, r3
 801054a:	f3bf 8f6f 	isb	sy
 801054e:	f3bf 8f4f 	dsb	sy
 8010552:	61fb      	str	r3, [r7, #28]
}
 8010554:	bf00      	nop
 8010556:	bf00      	nop
 8010558:	e7fd      	b.n	8010556 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801055a:	235c      	movs	r3, #92	@ 0x5c
 801055c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	2b5c      	cmp	r3, #92	@ 0x5c
 8010562:	d00b      	beq.n	801057c <xTaskCreateStatic+0x6c>
	__asm volatile
 8010564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010568:	f383 8811 	msr	BASEPRI, r3
 801056c:	f3bf 8f6f 	isb	sy
 8010570:	f3bf 8f4f 	dsb	sy
 8010574:	61bb      	str	r3, [r7, #24]
}
 8010576:	bf00      	nop
 8010578:	bf00      	nop
 801057a:	e7fd      	b.n	8010578 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801057c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801057e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010580:	2b00      	cmp	r3, #0
 8010582:	d01e      	beq.n	80105c2 <xTaskCreateStatic+0xb2>
 8010584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010586:	2b00      	cmp	r3, #0
 8010588:	d01b      	beq.n	80105c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801058a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801058c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801058e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010590:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010592:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010596:	2202      	movs	r2, #2
 8010598:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801059c:	2300      	movs	r3, #0
 801059e:	9303      	str	r3, [sp, #12]
 80105a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a2:	9302      	str	r3, [sp, #8]
 80105a4:	f107 0314 	add.w	r3, r7, #20
 80105a8:	9301      	str	r3, [sp, #4]
 80105aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105ac:	9300      	str	r3, [sp, #0]
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	68b9      	ldr	r1, [r7, #8]
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f000 f850 	bl	801065a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80105ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80105bc:	f000 f8de 	bl	801077c <prvAddNewTaskToReadyList>
 80105c0:	e001      	b.n	80105c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80105c2:	2300      	movs	r3, #0
 80105c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80105c6:	697b      	ldr	r3, [r7, #20]
	}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3728      	adds	r7, #40	@ 0x28
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b08c      	sub	sp, #48	@ 0x30
 80105d4:	af04      	add	r7, sp, #16
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	603b      	str	r3, [r7, #0]
 80105dc:	4613      	mov	r3, r2
 80105de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80105e0:	88fb      	ldrh	r3, [r7, #6]
 80105e2:	009b      	lsls	r3, r3, #2
 80105e4:	4618      	mov	r0, r3
 80105e6:	f002 f821 	bl	801262c <pvPortMalloc>
 80105ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00e      	beq.n	8010610 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80105f2:	205c      	movs	r0, #92	@ 0x5c
 80105f4:	f002 f81a 	bl	801262c <pvPortMalloc>
 80105f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d003      	beq.n	8010608 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	697a      	ldr	r2, [r7, #20]
 8010604:	631a      	str	r2, [r3, #48]	@ 0x30
 8010606:	e005      	b.n	8010614 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010608:	6978      	ldr	r0, [r7, #20]
 801060a:	f002 f8dd 	bl	80127c8 <vPortFree>
 801060e:	e001      	b.n	8010614 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010610:	2300      	movs	r3, #0
 8010612:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d017      	beq.n	801064a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	2200      	movs	r2, #0
 801061e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010622:	88fa      	ldrh	r2, [r7, #6]
 8010624:	2300      	movs	r3, #0
 8010626:	9303      	str	r3, [sp, #12]
 8010628:	69fb      	ldr	r3, [r7, #28]
 801062a:	9302      	str	r3, [sp, #8]
 801062c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801062e:	9301      	str	r3, [sp, #4]
 8010630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	68b9      	ldr	r1, [r7, #8]
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f000 f80e 	bl	801065a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801063e:	69f8      	ldr	r0, [r7, #28]
 8010640:	f000 f89c 	bl	801077c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010644:	2301      	movs	r3, #1
 8010646:	61bb      	str	r3, [r7, #24]
 8010648:	e002      	b.n	8010650 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801064a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801064e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010650:	69bb      	ldr	r3, [r7, #24]
	}
 8010652:	4618      	mov	r0, r3
 8010654:	3720      	adds	r7, #32
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b088      	sub	sp, #32
 801065e:	af00      	add	r7, sp, #0
 8010660:	60f8      	str	r0, [r7, #12]
 8010662:	60b9      	str	r1, [r7, #8]
 8010664:	607a      	str	r2, [r7, #4]
 8010666:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801066a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	009b      	lsls	r3, r3, #2
 8010670:	461a      	mov	r2, r3
 8010672:	21a5      	movs	r1, #165	@ 0xa5
 8010674:	f004 f8ca 	bl	801480c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801067a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010682:	3b01      	subs	r3, #1
 8010684:	009b      	lsls	r3, r3, #2
 8010686:	4413      	add	r3, r2
 8010688:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	f023 0307 	bic.w	r3, r3, #7
 8010690:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	f003 0307 	and.w	r3, r3, #7
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00b      	beq.n	80106b4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 801069c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a0:	f383 8811 	msr	BASEPRI, r3
 80106a4:	f3bf 8f6f 	isb	sy
 80106a8:	f3bf 8f4f 	dsb	sy
 80106ac:	617b      	str	r3, [r7, #20]
}
 80106ae:	bf00      	nop
 80106b0:	bf00      	nop
 80106b2:	e7fd      	b.n	80106b0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d01f      	beq.n	80106fa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80106ba:	2300      	movs	r3, #0
 80106bc:	61fb      	str	r3, [r7, #28]
 80106be:	e012      	b.n	80106e6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80106c0:	68ba      	ldr	r2, [r7, #8]
 80106c2:	69fb      	ldr	r3, [r7, #28]
 80106c4:	4413      	add	r3, r2
 80106c6:	7819      	ldrb	r1, [r3, #0]
 80106c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106ca:	69fb      	ldr	r3, [r7, #28]
 80106cc:	4413      	add	r3, r2
 80106ce:	3334      	adds	r3, #52	@ 0x34
 80106d0:	460a      	mov	r2, r1
 80106d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80106d4:	68ba      	ldr	r2, [r7, #8]
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	4413      	add	r3, r2
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d006      	beq.n	80106ee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80106e0:	69fb      	ldr	r3, [r7, #28]
 80106e2:	3301      	adds	r3, #1
 80106e4:	61fb      	str	r3, [r7, #28]
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	2b0f      	cmp	r3, #15
 80106ea:	d9e9      	bls.n	80106c0 <prvInitialiseNewTask+0x66>
 80106ec:	e000      	b.n	80106f0 <prvInitialiseNewTask+0x96>
			{
				break;
 80106ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80106f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f2:	2200      	movs	r2, #0
 80106f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80106f8:	e003      	b.n	8010702 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80106fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106fc:	2200      	movs	r2, #0
 80106fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010704:	2b37      	cmp	r3, #55	@ 0x37
 8010706:	d901      	bls.n	801070c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010708:	2337      	movs	r3, #55	@ 0x37
 801070a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801070c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801070e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010710:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010714:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010716:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801071a:	2200      	movs	r2, #0
 801071c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801071e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010720:	3304      	adds	r3, #4
 8010722:	4618      	mov	r0, r3
 8010724:	f7fe fd7c 	bl	800f220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801072a:	3318      	adds	r3, #24
 801072c:	4618      	mov	r0, r3
 801072e:	f7fe fd77 	bl	800f220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010734:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010736:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801073a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801073e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010740:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010746:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801074a:	2200      	movs	r2, #0
 801074c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801074e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010750:	2200      	movs	r2, #0
 8010752:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010756:	683a      	ldr	r2, [r7, #0]
 8010758:	68f9      	ldr	r1, [r7, #12]
 801075a:	69b8      	ldr	r0, [r7, #24]
 801075c:	f001 fd14 	bl	8012188 <pxPortInitialiseStack>
 8010760:	4602      	mov	r2, r0
 8010762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010764:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010768:	2b00      	cmp	r3, #0
 801076a:	d002      	beq.n	8010772 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801076c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801076e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010770:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010772:	bf00      	nop
 8010774:	3720      	adds	r7, #32
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
	...

0801077c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010784:	f001 fe30 	bl	80123e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010788:	4b2d      	ldr	r3, [pc, #180]	@ (8010840 <prvAddNewTaskToReadyList+0xc4>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	3301      	adds	r3, #1
 801078e:	4a2c      	ldr	r2, [pc, #176]	@ (8010840 <prvAddNewTaskToReadyList+0xc4>)
 8010790:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010792:	4b2c      	ldr	r3, [pc, #176]	@ (8010844 <prvAddNewTaskToReadyList+0xc8>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d109      	bne.n	80107ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801079a:	4a2a      	ldr	r2, [pc, #168]	@ (8010844 <prvAddNewTaskToReadyList+0xc8>)
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80107a0:	4b27      	ldr	r3, [pc, #156]	@ (8010840 <prvAddNewTaskToReadyList+0xc4>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d110      	bne.n	80107ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80107a8:	f000 fcc0 	bl	801112c <prvInitialiseTaskLists>
 80107ac:	e00d      	b.n	80107ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80107ae:	4b26      	ldr	r3, [pc, #152]	@ (8010848 <prvAddNewTaskToReadyList+0xcc>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d109      	bne.n	80107ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80107b6:	4b23      	ldr	r3, [pc, #140]	@ (8010844 <prvAddNewTaskToReadyList+0xc8>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d802      	bhi.n	80107ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80107c4:	4a1f      	ldr	r2, [pc, #124]	@ (8010844 <prvAddNewTaskToReadyList+0xc8>)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80107ca:	4b20      	ldr	r3, [pc, #128]	@ (801084c <prvAddNewTaskToReadyList+0xd0>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	3301      	adds	r3, #1
 80107d0:	4a1e      	ldr	r2, [pc, #120]	@ (801084c <prvAddNewTaskToReadyList+0xd0>)
 80107d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80107d4:	4b1d      	ldr	r3, [pc, #116]	@ (801084c <prvAddNewTaskToReadyList+0xd0>)
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107e0:	4b1b      	ldr	r3, [pc, #108]	@ (8010850 <prvAddNewTaskToReadyList+0xd4>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	429a      	cmp	r2, r3
 80107e6:	d903      	bls.n	80107f0 <prvAddNewTaskToReadyList+0x74>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107ec:	4a18      	ldr	r2, [pc, #96]	@ (8010850 <prvAddNewTaskToReadyList+0xd4>)
 80107ee:	6013      	str	r3, [r2, #0]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107f4:	4613      	mov	r3, r2
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	4413      	add	r3, r2
 80107fa:	009b      	lsls	r3, r3, #2
 80107fc:	4a15      	ldr	r2, [pc, #84]	@ (8010854 <prvAddNewTaskToReadyList+0xd8>)
 80107fe:	441a      	add	r2, r3
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	3304      	adds	r3, #4
 8010804:	4619      	mov	r1, r3
 8010806:	4610      	mov	r0, r2
 8010808:	f7fe fd17 	bl	800f23a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801080c:	f001 fe1e 	bl	801244c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010810:	4b0d      	ldr	r3, [pc, #52]	@ (8010848 <prvAddNewTaskToReadyList+0xcc>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d00e      	beq.n	8010836 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010818:	4b0a      	ldr	r3, [pc, #40]	@ (8010844 <prvAddNewTaskToReadyList+0xc8>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010822:	429a      	cmp	r2, r3
 8010824:	d207      	bcs.n	8010836 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010826:	4b0c      	ldr	r3, [pc, #48]	@ (8010858 <prvAddNewTaskToReadyList+0xdc>)
 8010828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801082c:	601a      	str	r2, [r3, #0]
 801082e:	f3bf 8f4f 	dsb	sy
 8010832:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010836:	bf00      	nop
 8010838:	3708      	adds	r7, #8
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}
 801083e:	bf00      	nop
 8010840:	200016cc 	.word	0x200016cc
 8010844:	200011f8 	.word	0x200011f8
 8010848:	200016d8 	.word	0x200016d8
 801084c:	200016e8 	.word	0x200016e8
 8010850:	200016d4 	.word	0x200016d4
 8010854:	200011fc 	.word	0x200011fc
 8010858:	e000ed04 	.word	0xe000ed04

0801085c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010864:	2300      	movs	r3, #0
 8010866:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d018      	beq.n	80108a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801086e:	4b14      	ldr	r3, [pc, #80]	@ (80108c0 <vTaskDelay+0x64>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d00b      	beq.n	801088e <vTaskDelay+0x32>
	__asm volatile
 8010876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801087a:	f383 8811 	msr	BASEPRI, r3
 801087e:	f3bf 8f6f 	isb	sy
 8010882:	f3bf 8f4f 	dsb	sy
 8010886:	60bb      	str	r3, [r7, #8]
}
 8010888:	bf00      	nop
 801088a:	bf00      	nop
 801088c:	e7fd      	b.n	801088a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801088e:	f000 f883 	bl	8010998 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010892:	2100      	movs	r1, #0
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 ffbf 	bl	8011818 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801089a:	f000 f88b 	bl	80109b4 <xTaskResumeAll>
 801089e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d107      	bne.n	80108b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80108a6:	4b07      	ldr	r3, [pc, #28]	@ (80108c4 <vTaskDelay+0x68>)
 80108a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108ac:	601a      	str	r2, [r3, #0]
 80108ae:	f3bf 8f4f 	dsb	sy
 80108b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80108b6:	bf00      	nop
 80108b8:	3710      	adds	r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	bf00      	nop
 80108c0:	200016f4 	.word	0x200016f4
 80108c4:	e000ed04 	.word	0xe000ed04

080108c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b08a      	sub	sp, #40	@ 0x28
 80108cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80108ce:	2300      	movs	r3, #0
 80108d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80108d2:	2300      	movs	r3, #0
 80108d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80108d6:	463a      	mov	r2, r7
 80108d8:	1d39      	adds	r1, r7, #4
 80108da:	f107 0308 	add.w	r3, r7, #8
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fe fa54 	bl	800ed8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80108e4:	6839      	ldr	r1, [r7, #0]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	68ba      	ldr	r2, [r7, #8]
 80108ea:	9202      	str	r2, [sp, #8]
 80108ec:	9301      	str	r3, [sp, #4]
 80108ee:	2300      	movs	r3, #0
 80108f0:	9300      	str	r3, [sp, #0]
 80108f2:	2300      	movs	r3, #0
 80108f4:	460a      	mov	r2, r1
 80108f6:	4922      	ldr	r1, [pc, #136]	@ (8010980 <vTaskStartScheduler+0xb8>)
 80108f8:	4822      	ldr	r0, [pc, #136]	@ (8010984 <vTaskStartScheduler+0xbc>)
 80108fa:	f7ff fe09 	bl	8010510 <xTaskCreateStatic>
 80108fe:	4603      	mov	r3, r0
 8010900:	4a21      	ldr	r2, [pc, #132]	@ (8010988 <vTaskStartScheduler+0xc0>)
 8010902:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010904:	4b20      	ldr	r3, [pc, #128]	@ (8010988 <vTaskStartScheduler+0xc0>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801090c:	2301      	movs	r3, #1
 801090e:	617b      	str	r3, [r7, #20]
 8010910:	e001      	b.n	8010916 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010912:	2300      	movs	r3, #0
 8010914:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	2b01      	cmp	r3, #1
 801091a:	d102      	bne.n	8010922 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801091c:	f000 ffd0 	bl	80118c0 <xTimerCreateTimerTask>
 8010920:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	2b01      	cmp	r3, #1
 8010926:	d116      	bne.n	8010956 <vTaskStartScheduler+0x8e>
	__asm volatile
 8010928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801092c:	f383 8811 	msr	BASEPRI, r3
 8010930:	f3bf 8f6f 	isb	sy
 8010934:	f3bf 8f4f 	dsb	sy
 8010938:	613b      	str	r3, [r7, #16]
}
 801093a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801093c:	4b13      	ldr	r3, [pc, #76]	@ (801098c <vTaskStartScheduler+0xc4>)
 801093e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010942:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010944:	4b12      	ldr	r3, [pc, #72]	@ (8010990 <vTaskStartScheduler+0xc8>)
 8010946:	2201      	movs	r2, #1
 8010948:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801094a:	4b12      	ldr	r3, [pc, #72]	@ (8010994 <vTaskStartScheduler+0xcc>)
 801094c:	2200      	movs	r2, #0
 801094e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010950:	f001 fca6 	bl	80122a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010954:	e00f      	b.n	8010976 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801095c:	d10b      	bne.n	8010976 <vTaskStartScheduler+0xae>
	__asm volatile
 801095e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010962:	f383 8811 	msr	BASEPRI, r3
 8010966:	f3bf 8f6f 	isb	sy
 801096a:	f3bf 8f4f 	dsb	sy
 801096e:	60fb      	str	r3, [r7, #12]
}
 8010970:	bf00      	nop
 8010972:	bf00      	nop
 8010974:	e7fd      	b.n	8010972 <vTaskStartScheduler+0xaa>
}
 8010976:	bf00      	nop
 8010978:	3718      	adds	r7, #24
 801097a:	46bd      	mov	sp, r7
 801097c:	bd80      	pop	{r7, pc}
 801097e:	bf00      	nop
 8010980:	0801819c 	.word	0x0801819c
 8010984:	080110fd 	.word	0x080110fd
 8010988:	200016f0 	.word	0x200016f0
 801098c:	200016ec 	.word	0x200016ec
 8010990:	200016d8 	.word	0x200016d8
 8010994:	200016d0 	.word	0x200016d0

08010998 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010998:	b480      	push	{r7}
 801099a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801099c:	4b04      	ldr	r3, [pc, #16]	@ (80109b0 <vTaskSuspendAll+0x18>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	3301      	adds	r3, #1
 80109a2:	4a03      	ldr	r2, [pc, #12]	@ (80109b0 <vTaskSuspendAll+0x18>)
 80109a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80109a6:	bf00      	nop
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr
 80109b0:	200016f4 	.word	0x200016f4

080109b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80109ba:	2300      	movs	r3, #0
 80109bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80109be:	2300      	movs	r3, #0
 80109c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80109c2:	4b42      	ldr	r3, [pc, #264]	@ (8010acc <xTaskResumeAll+0x118>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d10b      	bne.n	80109e2 <xTaskResumeAll+0x2e>
	__asm volatile
 80109ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ce:	f383 8811 	msr	BASEPRI, r3
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	f3bf 8f4f 	dsb	sy
 80109da:	603b      	str	r3, [r7, #0]
}
 80109dc:	bf00      	nop
 80109de:	bf00      	nop
 80109e0:	e7fd      	b.n	80109de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80109e2:	f001 fd01 	bl	80123e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80109e6:	4b39      	ldr	r3, [pc, #228]	@ (8010acc <xTaskResumeAll+0x118>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	3b01      	subs	r3, #1
 80109ec:	4a37      	ldr	r2, [pc, #220]	@ (8010acc <xTaskResumeAll+0x118>)
 80109ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109f0:	4b36      	ldr	r3, [pc, #216]	@ (8010acc <xTaskResumeAll+0x118>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d162      	bne.n	8010abe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80109f8:	4b35      	ldr	r3, [pc, #212]	@ (8010ad0 <xTaskResumeAll+0x11c>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d05e      	beq.n	8010abe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a00:	e02f      	b.n	8010a62 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a02:	4b34      	ldr	r3, [pc, #208]	@ (8010ad4 <xTaskResumeAll+0x120>)
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	3318      	adds	r3, #24
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7fe fc70 	bl	800f2f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	3304      	adds	r3, #4
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fe fc6b 	bl	800f2f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a22:	4b2d      	ldr	r3, [pc, #180]	@ (8010ad8 <xTaskResumeAll+0x124>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d903      	bls.n	8010a32 <xTaskResumeAll+0x7e>
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8010ad8 <xTaskResumeAll+0x124>)
 8010a30:	6013      	str	r3, [r2, #0]
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a36:	4613      	mov	r3, r2
 8010a38:	009b      	lsls	r3, r3, #2
 8010a3a:	4413      	add	r3, r2
 8010a3c:	009b      	lsls	r3, r3, #2
 8010a3e:	4a27      	ldr	r2, [pc, #156]	@ (8010adc <xTaskResumeAll+0x128>)
 8010a40:	441a      	add	r2, r3
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	3304      	adds	r3, #4
 8010a46:	4619      	mov	r1, r3
 8010a48:	4610      	mov	r0, r2
 8010a4a:	f7fe fbf6 	bl	800f23a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a52:	4b23      	ldr	r3, [pc, #140]	@ (8010ae0 <xTaskResumeAll+0x12c>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d302      	bcc.n	8010a62 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010a5c:	4b21      	ldr	r3, [pc, #132]	@ (8010ae4 <xTaskResumeAll+0x130>)
 8010a5e:	2201      	movs	r2, #1
 8010a60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a62:	4b1c      	ldr	r3, [pc, #112]	@ (8010ad4 <xTaskResumeAll+0x120>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d1cb      	bne.n	8010a02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d001      	beq.n	8010a74 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010a70:	f000 fbfa 	bl	8011268 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010a74:	4b1c      	ldr	r3, [pc, #112]	@ (8010ae8 <xTaskResumeAll+0x134>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d010      	beq.n	8010aa2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010a80:	f000 f846 	bl	8010b10 <xTaskIncrementTick>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d002      	beq.n	8010a90 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010a8a:	4b16      	ldr	r3, [pc, #88]	@ (8010ae4 <xTaskResumeAll+0x130>)
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	3b01      	subs	r3, #1
 8010a94:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d1f1      	bne.n	8010a80 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8010a9c:	4b12      	ldr	r3, [pc, #72]	@ (8010ae8 <xTaskResumeAll+0x134>)
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010aa2:	4b10      	ldr	r3, [pc, #64]	@ (8010ae4 <xTaskResumeAll+0x130>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d009      	beq.n	8010abe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010aaa:	2301      	movs	r3, #1
 8010aac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010aae:	4b0f      	ldr	r3, [pc, #60]	@ (8010aec <xTaskResumeAll+0x138>)
 8010ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ab4:	601a      	str	r2, [r3, #0]
 8010ab6:	f3bf 8f4f 	dsb	sy
 8010aba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010abe:	f001 fcc5 	bl	801244c <vPortExitCritical>

	return xAlreadyYielded;
 8010ac2:	68bb      	ldr	r3, [r7, #8]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3710      	adds	r7, #16
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	200016f4 	.word	0x200016f4
 8010ad0:	200016cc 	.word	0x200016cc
 8010ad4:	2000168c 	.word	0x2000168c
 8010ad8:	200016d4 	.word	0x200016d4
 8010adc:	200011fc 	.word	0x200011fc
 8010ae0:	200011f8 	.word	0x200011f8
 8010ae4:	200016e0 	.word	0x200016e0
 8010ae8:	200016dc 	.word	0x200016dc
 8010aec:	e000ed04 	.word	0xe000ed04

08010af0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010af0:	b480      	push	{r7}
 8010af2:	b083      	sub	sp, #12
 8010af4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010af6:	4b05      	ldr	r3, [pc, #20]	@ (8010b0c <xTaskGetTickCount+0x1c>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010afc:	687b      	ldr	r3, [r7, #4]
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	370c      	adds	r7, #12
 8010b02:	46bd      	mov	sp, r7
 8010b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop
 8010b0c:	200016d0 	.word	0x200016d0

08010b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b086      	sub	sp, #24
 8010b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010b16:	2300      	movs	r3, #0
 8010b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b1a:	4b4f      	ldr	r3, [pc, #316]	@ (8010c58 <xTaskIncrementTick+0x148>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f040 8090 	bne.w	8010c44 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010b24:	4b4d      	ldr	r3, [pc, #308]	@ (8010c5c <xTaskIncrementTick+0x14c>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010b2c:	4a4b      	ldr	r2, [pc, #300]	@ (8010c5c <xTaskIncrementTick+0x14c>)
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d121      	bne.n	8010b7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010b38:	4b49      	ldr	r3, [pc, #292]	@ (8010c60 <xTaskIncrementTick+0x150>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d00b      	beq.n	8010b5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8010b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b46:	f383 8811 	msr	BASEPRI, r3
 8010b4a:	f3bf 8f6f 	isb	sy
 8010b4e:	f3bf 8f4f 	dsb	sy
 8010b52:	603b      	str	r3, [r7, #0]
}
 8010b54:	bf00      	nop
 8010b56:	bf00      	nop
 8010b58:	e7fd      	b.n	8010b56 <xTaskIncrementTick+0x46>
 8010b5a:	4b41      	ldr	r3, [pc, #260]	@ (8010c60 <xTaskIncrementTick+0x150>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	60fb      	str	r3, [r7, #12]
 8010b60:	4b40      	ldr	r3, [pc, #256]	@ (8010c64 <xTaskIncrementTick+0x154>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4a3e      	ldr	r2, [pc, #248]	@ (8010c60 <xTaskIncrementTick+0x150>)
 8010b66:	6013      	str	r3, [r2, #0]
 8010b68:	4a3e      	ldr	r2, [pc, #248]	@ (8010c64 <xTaskIncrementTick+0x154>)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6013      	str	r3, [r2, #0]
 8010b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8010c68 <xTaskIncrementTick+0x158>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	3301      	adds	r3, #1
 8010b74:	4a3c      	ldr	r2, [pc, #240]	@ (8010c68 <xTaskIncrementTick+0x158>)
 8010b76:	6013      	str	r3, [r2, #0]
 8010b78:	f000 fb76 	bl	8011268 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8010c6c <xTaskIncrementTick+0x15c>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	693a      	ldr	r2, [r7, #16]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d349      	bcc.n	8010c1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b86:	4b36      	ldr	r3, [pc, #216]	@ (8010c60 <xTaskIncrementTick+0x150>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d104      	bne.n	8010b9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b90:	4b36      	ldr	r3, [pc, #216]	@ (8010c6c <xTaskIncrementTick+0x15c>)
 8010b92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b96:	601a      	str	r2, [r3, #0]
					break;
 8010b98:	e03f      	b.n	8010c1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b9a:	4b31      	ldr	r3, [pc, #196]	@ (8010c60 <xTaskIncrementTick+0x150>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010baa:	693a      	ldr	r2, [r7, #16]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d203      	bcs.n	8010bba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010bb2:	4a2e      	ldr	r2, [pc, #184]	@ (8010c6c <xTaskIncrementTick+0x15c>)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010bb8:	e02f      	b.n	8010c1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	3304      	adds	r3, #4
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7fe fb98 	bl	800f2f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d004      	beq.n	8010bd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	3318      	adds	r3, #24
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fe fb8f 	bl	800f2f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bda:	4b25      	ldr	r3, [pc, #148]	@ (8010c70 <xTaskIncrementTick+0x160>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d903      	bls.n	8010bea <xTaskIncrementTick+0xda>
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010be6:	4a22      	ldr	r2, [pc, #136]	@ (8010c70 <xTaskIncrementTick+0x160>)
 8010be8:	6013      	str	r3, [r2, #0]
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bee:	4613      	mov	r3, r2
 8010bf0:	009b      	lsls	r3, r3, #2
 8010bf2:	4413      	add	r3, r2
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8010c74 <xTaskIncrementTick+0x164>)
 8010bf8:	441a      	add	r2, r3
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	3304      	adds	r3, #4
 8010bfe:	4619      	mov	r1, r3
 8010c00:	4610      	mov	r0, r2
 8010c02:	f7fe fb1a 	bl	800f23a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c06:	68bb      	ldr	r3, [r7, #8]
 8010c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8010c78 <xTaskIncrementTick+0x168>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d3b8      	bcc.n	8010b86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010c14:	2301      	movs	r3, #1
 8010c16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c18:	e7b5      	b.n	8010b86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010c1a:	4b17      	ldr	r3, [pc, #92]	@ (8010c78 <xTaskIncrementTick+0x168>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c20:	4914      	ldr	r1, [pc, #80]	@ (8010c74 <xTaskIncrementTick+0x164>)
 8010c22:	4613      	mov	r3, r2
 8010c24:	009b      	lsls	r3, r3, #2
 8010c26:	4413      	add	r3, r2
 8010c28:	009b      	lsls	r3, r3, #2
 8010c2a:	440b      	add	r3, r1
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d901      	bls.n	8010c36 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8010c32:	2301      	movs	r3, #1
 8010c34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010c36:	4b11      	ldr	r3, [pc, #68]	@ (8010c7c <xTaskIncrementTick+0x16c>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d007      	beq.n	8010c4e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8010c3e:	2301      	movs	r3, #1
 8010c40:	617b      	str	r3, [r7, #20]
 8010c42:	e004      	b.n	8010c4e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010c44:	4b0e      	ldr	r3, [pc, #56]	@ (8010c80 <xTaskIncrementTick+0x170>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	3301      	adds	r3, #1
 8010c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8010c80 <xTaskIncrementTick+0x170>)
 8010c4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010c4e:	697b      	ldr	r3, [r7, #20]
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3718      	adds	r7, #24
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	200016f4 	.word	0x200016f4
 8010c5c:	200016d0 	.word	0x200016d0
 8010c60:	20001684 	.word	0x20001684
 8010c64:	20001688 	.word	0x20001688
 8010c68:	200016e4 	.word	0x200016e4
 8010c6c:	200016ec 	.word	0x200016ec
 8010c70:	200016d4 	.word	0x200016d4
 8010c74:	200011fc 	.word	0x200011fc
 8010c78:	200011f8 	.word	0x200011f8
 8010c7c:	200016e0 	.word	0x200016e0
 8010c80:	200016dc 	.word	0x200016dc

08010c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010c84:	b480      	push	{r7}
 8010c86:	b085      	sub	sp, #20
 8010c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010c8a:	4b28      	ldr	r3, [pc, #160]	@ (8010d2c <vTaskSwitchContext+0xa8>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d003      	beq.n	8010c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010c92:	4b27      	ldr	r3, [pc, #156]	@ (8010d30 <vTaskSwitchContext+0xac>)
 8010c94:	2201      	movs	r2, #1
 8010c96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010c98:	e042      	b.n	8010d20 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8010c9a:	4b25      	ldr	r3, [pc, #148]	@ (8010d30 <vTaskSwitchContext+0xac>)
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ca0:	4b24      	ldr	r3, [pc, #144]	@ (8010d34 <vTaskSwitchContext+0xb0>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	60fb      	str	r3, [r7, #12]
 8010ca6:	e011      	b.n	8010ccc <vTaskSwitchContext+0x48>
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d10b      	bne.n	8010cc6 <vTaskSwitchContext+0x42>
	__asm volatile
 8010cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	607b      	str	r3, [r7, #4]
}
 8010cc0:	bf00      	nop
 8010cc2:	bf00      	nop
 8010cc4:	e7fd      	b.n	8010cc2 <vTaskSwitchContext+0x3e>
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	60fb      	str	r3, [r7, #12]
 8010ccc:	491a      	ldr	r1, [pc, #104]	@ (8010d38 <vTaskSwitchContext+0xb4>)
 8010cce:	68fa      	ldr	r2, [r7, #12]
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	4413      	add	r3, r2
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	440b      	add	r3, r1
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d0e3      	beq.n	8010ca8 <vTaskSwitchContext+0x24>
 8010ce0:	68fa      	ldr	r2, [r7, #12]
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	009b      	lsls	r3, r3, #2
 8010ce6:	4413      	add	r3, r2
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4a13      	ldr	r2, [pc, #76]	@ (8010d38 <vTaskSwitchContext+0xb4>)
 8010cec:	4413      	add	r3, r2
 8010cee:	60bb      	str	r3, [r7, #8]
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	685a      	ldr	r2, [r3, #4]
 8010cf6:	68bb      	ldr	r3, [r7, #8]
 8010cf8:	605a      	str	r2, [r3, #4]
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	685a      	ldr	r2, [r3, #4]
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	3308      	adds	r3, #8
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d104      	bne.n	8010d10 <vTaskSwitchContext+0x8c>
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	685a      	ldr	r2, [r3, #4]
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	605a      	str	r2, [r3, #4]
 8010d10:	68bb      	ldr	r3, [r7, #8]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	4a09      	ldr	r2, [pc, #36]	@ (8010d3c <vTaskSwitchContext+0xb8>)
 8010d18:	6013      	str	r3, [r2, #0]
 8010d1a:	4a06      	ldr	r2, [pc, #24]	@ (8010d34 <vTaskSwitchContext+0xb0>)
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	6013      	str	r3, [r2, #0]
}
 8010d20:	bf00      	nop
 8010d22:	3714      	adds	r7, #20
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr
 8010d2c:	200016f4 	.word	0x200016f4
 8010d30:	200016e0 	.word	0x200016e0
 8010d34:	200016d4 	.word	0x200016d4
 8010d38:	200011fc 	.word	0x200011fc
 8010d3c:	200011f8 	.word	0x200011f8

08010d40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10b      	bne.n	8010d68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8010d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d54:	f383 8811 	msr	BASEPRI, r3
 8010d58:	f3bf 8f6f 	isb	sy
 8010d5c:	f3bf 8f4f 	dsb	sy
 8010d60:	60fb      	str	r3, [r7, #12]
}
 8010d62:	bf00      	nop
 8010d64:	bf00      	nop
 8010d66:	e7fd      	b.n	8010d64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d68:	4b07      	ldr	r3, [pc, #28]	@ (8010d88 <vTaskPlaceOnEventList+0x48>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	3318      	adds	r3, #24
 8010d6e:	4619      	mov	r1, r3
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7fe fa86 	bl	800f282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010d76:	2101      	movs	r1, #1
 8010d78:	6838      	ldr	r0, [r7, #0]
 8010d7a:	f000 fd4d 	bl	8011818 <prvAddCurrentTaskToDelayedList>
}
 8010d7e:	bf00      	nop
 8010d80:	3710      	adds	r7, #16
 8010d82:	46bd      	mov	sp, r7
 8010d84:	bd80      	pop	{r7, pc}
 8010d86:	bf00      	nop
 8010d88:	200011f8 	.word	0x200011f8

08010d8c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b086      	sub	sp, #24
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d10b      	bne.n	8010db6 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8010d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	617b      	str	r3, [r7, #20]
}
 8010db0:	bf00      	nop
 8010db2:	bf00      	nop
 8010db4:	e7fd      	b.n	8010db2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8010db6:	4b12      	ldr	r3, [pc, #72]	@ (8010e00 <vTaskPlaceOnUnorderedEventList+0x74>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d10b      	bne.n	8010dd6 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8010dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	613b      	str	r3, [r7, #16]
}
 8010dd0:	bf00      	nop
 8010dd2:	bf00      	nop
 8010dd4:	e7fd      	b.n	8010dd2 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8010e04 <vTaskPlaceOnUnorderedEventList+0x78>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	68ba      	ldr	r2, [r7, #8]
 8010ddc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8010de0:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010de2:	4b08      	ldr	r3, [pc, #32]	@ (8010e04 <vTaskPlaceOnUnorderedEventList+0x78>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	3318      	adds	r3, #24
 8010de8:	4619      	mov	r1, r3
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	f7fe fa25 	bl	800f23a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010df0:	2101      	movs	r1, #1
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 fd10 	bl	8011818 <prvAddCurrentTaskToDelayedList>
}
 8010df8:	bf00      	nop
 8010dfa:	3718      	adds	r7, #24
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	200016f4 	.word	0x200016f4
 8010e04:	200011f8 	.word	0x200011f8

08010e08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b086      	sub	sp, #24
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d10b      	bne.n	8010e32 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8010e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e1e:	f383 8811 	msr	BASEPRI, r3
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	617b      	str	r3, [r7, #20]
}
 8010e2c:	bf00      	nop
 8010e2e:	bf00      	nop
 8010e30:	e7fd      	b.n	8010e2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e32:	4b0a      	ldr	r3, [pc, #40]	@ (8010e5c <vTaskPlaceOnEventListRestricted+0x54>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	3318      	adds	r3, #24
 8010e38:	4619      	mov	r1, r3
 8010e3a:	68f8      	ldr	r0, [r7, #12]
 8010e3c:	f7fe f9fd 	bl	800f23a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d002      	beq.n	8010e4c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8010e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010e4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010e4c:	6879      	ldr	r1, [r7, #4]
 8010e4e:	68b8      	ldr	r0, [r7, #8]
 8010e50:	f000 fce2 	bl	8011818 <prvAddCurrentTaskToDelayedList>
	}
 8010e54:	bf00      	nop
 8010e56:	3718      	adds	r7, #24
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bd80      	pop	{r7, pc}
 8010e5c:	200011f8 	.word	0x200011f8

08010e60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b086      	sub	sp, #24
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d10b      	bne.n	8010e8e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8010e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e7a:	f383 8811 	msr	BASEPRI, r3
 8010e7e:	f3bf 8f6f 	isb	sy
 8010e82:	f3bf 8f4f 	dsb	sy
 8010e86:	60fb      	str	r3, [r7, #12]
}
 8010e88:	bf00      	nop
 8010e8a:	bf00      	nop
 8010e8c:	e7fd      	b.n	8010e8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	3318      	adds	r3, #24
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fe fa2e 	bl	800f2f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e98:	4b1d      	ldr	r3, [pc, #116]	@ (8010f10 <xTaskRemoveFromEventList+0xb0>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d11d      	bne.n	8010edc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010ea0:	693b      	ldr	r3, [r7, #16]
 8010ea2:	3304      	adds	r3, #4
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fe fa25 	bl	800f2f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eae:	4b19      	ldr	r3, [pc, #100]	@ (8010f14 <xTaskRemoveFromEventList+0xb4>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d903      	bls.n	8010ebe <xTaskRemoveFromEventList+0x5e>
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eba:	4a16      	ldr	r2, [pc, #88]	@ (8010f14 <xTaskRemoveFromEventList+0xb4>)
 8010ebc:	6013      	str	r3, [r2, #0]
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	4413      	add	r3, r2
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	4a13      	ldr	r2, [pc, #76]	@ (8010f18 <xTaskRemoveFromEventList+0xb8>)
 8010ecc:	441a      	add	r2, r3
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	3304      	adds	r3, #4
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	4610      	mov	r0, r2
 8010ed6:	f7fe f9b0 	bl	800f23a <vListInsertEnd>
 8010eda:	e005      	b.n	8010ee8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	3318      	adds	r3, #24
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	480e      	ldr	r0, [pc, #56]	@ (8010f1c <xTaskRemoveFromEventList+0xbc>)
 8010ee4:	f7fe f9a9 	bl	800f23a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eec:	4b0c      	ldr	r3, [pc, #48]	@ (8010f20 <xTaskRemoveFromEventList+0xc0>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d905      	bls.n	8010f02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010efa:	4b0a      	ldr	r3, [pc, #40]	@ (8010f24 <xTaskRemoveFromEventList+0xc4>)
 8010efc:	2201      	movs	r2, #1
 8010efe:	601a      	str	r2, [r3, #0]
 8010f00:	e001      	b.n	8010f06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8010f02:	2300      	movs	r3, #0
 8010f04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010f06:	697b      	ldr	r3, [r7, #20]
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3718      	adds	r7, #24
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}
 8010f10:	200016f4 	.word	0x200016f4
 8010f14:	200016d4 	.word	0x200016d4
 8010f18:	200011fc 	.word	0x200011fc
 8010f1c:	2000168c 	.word	0x2000168c
 8010f20:	200011f8 	.word	0x200011f8
 8010f24:	200016e0 	.word	0x200016e0

08010f28 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b086      	sub	sp, #24
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8010f32:	4b2a      	ldr	r3, [pc, #168]	@ (8010fdc <vTaskRemoveFromUnorderedEventList+0xb4>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d10b      	bne.n	8010f52 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8010f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f3e:	f383 8811 	msr	BASEPRI, r3
 8010f42:	f3bf 8f6f 	isb	sy
 8010f46:	f3bf 8f4f 	dsb	sy
 8010f4a:	613b      	str	r3, [r7, #16]
}
 8010f4c:	bf00      	nop
 8010f4e:	bf00      	nop
 8010f50:	e7fd      	b.n	8010f4e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d10b      	bne.n	8010f80 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8010f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f6c:	f383 8811 	msr	BASEPRI, r3
 8010f70:	f3bf 8f6f 	isb	sy
 8010f74:	f3bf 8f4f 	dsb	sy
 8010f78:	60fb      	str	r3, [r7, #12]
}
 8010f7a:	bf00      	nop
 8010f7c:	bf00      	nop
 8010f7e:	e7fd      	b.n	8010f7c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f7fe f9b7 	bl	800f2f4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	3304      	adds	r3, #4
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fe f9b2 	bl	800f2f4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f94:	4b12      	ldr	r3, [pc, #72]	@ (8010fe0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d903      	bls.n	8010fa4 <vTaskRemoveFromUnorderedEventList+0x7c>
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8010fe0 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8010fa2:	6013      	str	r3, [r2, #0]
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fa8:	4613      	mov	r3, r2
 8010faa:	009b      	lsls	r3, r3, #2
 8010fac:	4413      	add	r3, r2
 8010fae:	009b      	lsls	r3, r3, #2
 8010fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8010fe4 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8010fb2:	441a      	add	r2, r3
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	3304      	adds	r3, #4
 8010fb8:	4619      	mov	r1, r3
 8010fba:	4610      	mov	r0, r2
 8010fbc:	f7fe f93d 	bl	800f23a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fc4:	4b08      	ldr	r3, [pc, #32]	@ (8010fe8 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d902      	bls.n	8010fd4 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8010fce:	4b07      	ldr	r3, [pc, #28]	@ (8010fec <vTaskRemoveFromUnorderedEventList+0xc4>)
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	601a      	str	r2, [r3, #0]
	}
}
 8010fd4:	bf00      	nop
 8010fd6:	3718      	adds	r7, #24
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	200016f4 	.word	0x200016f4
 8010fe0:	200016d4 	.word	0x200016d4
 8010fe4:	200011fc 	.word	0x200011fc
 8010fe8:	200011f8 	.word	0x200011f8
 8010fec:	200016e0 	.word	0x200016e0

08010ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010ff8:	4b06      	ldr	r3, [pc, #24]	@ (8011014 <vTaskInternalSetTimeOutState+0x24>)
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011000:	4b05      	ldr	r3, [pc, #20]	@ (8011018 <vTaskInternalSetTimeOutState+0x28>)
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	605a      	str	r2, [r3, #4]
}
 8011008:	bf00      	nop
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	200016e4 	.word	0x200016e4
 8011018:	200016d0 	.word	0x200016d0

0801101c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b088      	sub	sp, #32
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d10b      	bne.n	8011044 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801102c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011030:	f383 8811 	msr	BASEPRI, r3
 8011034:	f3bf 8f6f 	isb	sy
 8011038:	f3bf 8f4f 	dsb	sy
 801103c:	613b      	str	r3, [r7, #16]
}
 801103e:	bf00      	nop
 8011040:	bf00      	nop
 8011042:	e7fd      	b.n	8011040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d10b      	bne.n	8011062 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801104a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801104e:	f383 8811 	msr	BASEPRI, r3
 8011052:	f3bf 8f6f 	isb	sy
 8011056:	f3bf 8f4f 	dsb	sy
 801105a:	60fb      	str	r3, [r7, #12]
}
 801105c:	bf00      	nop
 801105e:	bf00      	nop
 8011060:	e7fd      	b.n	801105e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011062:	f001 f9c1 	bl	80123e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011066:	4b1d      	ldr	r3, [pc, #116]	@ (80110dc <xTaskCheckForTimeOut+0xc0>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	69ba      	ldr	r2, [r7, #24]
 8011072:	1ad3      	subs	r3, r2, r3
 8011074:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801107e:	d102      	bne.n	8011086 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011080:	2300      	movs	r3, #0
 8011082:	61fb      	str	r3, [r7, #28]
 8011084:	e023      	b.n	80110ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	4b15      	ldr	r3, [pc, #84]	@ (80110e0 <xTaskCheckForTimeOut+0xc4>)
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	429a      	cmp	r2, r3
 8011090:	d007      	beq.n	80110a2 <xTaskCheckForTimeOut+0x86>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	69ba      	ldr	r2, [r7, #24]
 8011098:	429a      	cmp	r2, r3
 801109a:	d302      	bcc.n	80110a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801109c:	2301      	movs	r3, #1
 801109e:	61fb      	str	r3, [r7, #28]
 80110a0:	e015      	b.n	80110ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	697a      	ldr	r2, [r7, #20]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d20b      	bcs.n	80110c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	1ad2      	subs	r2, r2, r3
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7ff ff99 	bl	8010ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80110be:	2300      	movs	r3, #0
 80110c0:	61fb      	str	r3, [r7, #28]
 80110c2:	e004      	b.n	80110ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	2200      	movs	r2, #0
 80110c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80110ca:	2301      	movs	r3, #1
 80110cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80110ce:	f001 f9bd 	bl	801244c <vPortExitCritical>

	return xReturn;
 80110d2:	69fb      	ldr	r3, [r7, #28]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3720      	adds	r7, #32
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	200016d0 	.word	0x200016d0
 80110e0:	200016e4 	.word	0x200016e4

080110e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80110e4:	b480      	push	{r7}
 80110e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80110e8:	4b03      	ldr	r3, [pc, #12]	@ (80110f8 <vTaskMissedYield+0x14>)
 80110ea:	2201      	movs	r2, #1
 80110ec:	601a      	str	r2, [r3, #0]
}
 80110ee:	bf00      	nop
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr
 80110f8:	200016e0 	.word	0x200016e0

080110fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011104:	f000 f852 	bl	80111ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011108:	4b06      	ldr	r3, [pc, #24]	@ (8011124 <prvIdleTask+0x28>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	2b01      	cmp	r3, #1
 801110e:	d9f9      	bls.n	8011104 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011110:	4b05      	ldr	r3, [pc, #20]	@ (8011128 <prvIdleTask+0x2c>)
 8011112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011116:	601a      	str	r2, [r3, #0]
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011120:	e7f0      	b.n	8011104 <prvIdleTask+0x8>
 8011122:	bf00      	nop
 8011124:	200011fc 	.word	0x200011fc
 8011128:	e000ed04 	.word	0xe000ed04

0801112c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011132:	2300      	movs	r3, #0
 8011134:	607b      	str	r3, [r7, #4]
 8011136:	e00c      	b.n	8011152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	4613      	mov	r3, r2
 801113c:	009b      	lsls	r3, r3, #2
 801113e:	4413      	add	r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	4a12      	ldr	r2, [pc, #72]	@ (801118c <prvInitialiseTaskLists+0x60>)
 8011144:	4413      	add	r3, r2
 8011146:	4618      	mov	r0, r3
 8011148:	f7fe f84a 	bl	800f1e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	3301      	adds	r3, #1
 8011150:	607b      	str	r3, [r7, #4]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2b37      	cmp	r3, #55	@ 0x37
 8011156:	d9ef      	bls.n	8011138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011158:	480d      	ldr	r0, [pc, #52]	@ (8011190 <prvInitialiseTaskLists+0x64>)
 801115a:	f7fe f841 	bl	800f1e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801115e:	480d      	ldr	r0, [pc, #52]	@ (8011194 <prvInitialiseTaskLists+0x68>)
 8011160:	f7fe f83e 	bl	800f1e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011164:	480c      	ldr	r0, [pc, #48]	@ (8011198 <prvInitialiseTaskLists+0x6c>)
 8011166:	f7fe f83b 	bl	800f1e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801116a:	480c      	ldr	r0, [pc, #48]	@ (801119c <prvInitialiseTaskLists+0x70>)
 801116c:	f7fe f838 	bl	800f1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011170:	480b      	ldr	r0, [pc, #44]	@ (80111a0 <prvInitialiseTaskLists+0x74>)
 8011172:	f7fe f835 	bl	800f1e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011176:	4b0b      	ldr	r3, [pc, #44]	@ (80111a4 <prvInitialiseTaskLists+0x78>)
 8011178:	4a05      	ldr	r2, [pc, #20]	@ (8011190 <prvInitialiseTaskLists+0x64>)
 801117a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801117c:	4b0a      	ldr	r3, [pc, #40]	@ (80111a8 <prvInitialiseTaskLists+0x7c>)
 801117e:	4a05      	ldr	r2, [pc, #20]	@ (8011194 <prvInitialiseTaskLists+0x68>)
 8011180:	601a      	str	r2, [r3, #0]
}
 8011182:	bf00      	nop
 8011184:	3708      	adds	r7, #8
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	200011fc 	.word	0x200011fc
 8011190:	2000165c 	.word	0x2000165c
 8011194:	20001670 	.word	0x20001670
 8011198:	2000168c 	.word	0x2000168c
 801119c:	200016a0 	.word	0x200016a0
 80111a0:	200016b8 	.word	0x200016b8
 80111a4:	20001684 	.word	0x20001684
 80111a8:	20001688 	.word	0x20001688

080111ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111b2:	e019      	b.n	80111e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80111b4:	f001 f918 	bl	80123e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111b8:	4b10      	ldr	r3, [pc, #64]	@ (80111fc <prvCheckTasksWaitingTermination+0x50>)
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	3304      	adds	r3, #4
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7fe f895 	bl	800f2f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80111ca:	4b0d      	ldr	r3, [pc, #52]	@ (8011200 <prvCheckTasksWaitingTermination+0x54>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	3b01      	subs	r3, #1
 80111d0:	4a0b      	ldr	r2, [pc, #44]	@ (8011200 <prvCheckTasksWaitingTermination+0x54>)
 80111d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80111d4:	4b0b      	ldr	r3, [pc, #44]	@ (8011204 <prvCheckTasksWaitingTermination+0x58>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	3b01      	subs	r3, #1
 80111da:	4a0a      	ldr	r2, [pc, #40]	@ (8011204 <prvCheckTasksWaitingTermination+0x58>)
 80111dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80111de:	f001 f935 	bl	801244c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 f810 	bl	8011208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111e8:	4b06      	ldr	r3, [pc, #24]	@ (8011204 <prvCheckTasksWaitingTermination+0x58>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d1e1      	bne.n	80111b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80111f0:	bf00      	nop
 80111f2:	bf00      	nop
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	200016a0 	.word	0x200016a0
 8011200:	200016cc 	.word	0x200016cc
 8011204:	200016b4 	.word	0x200016b4

08011208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8011216:	2b00      	cmp	r3, #0
 8011218:	d108      	bne.n	801122c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801121e:	4618      	mov	r0, r3
 8011220:	f001 fad2 	bl	80127c8 <vPortFree>
				vPortFree( pxTCB );
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f001 facf 	bl	80127c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801122a:	e019      	b.n	8011260 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8011232:	2b01      	cmp	r3, #1
 8011234:	d103      	bne.n	801123e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f001 fac6 	bl	80127c8 <vPortFree>
	}
 801123c:	e010      	b.n	8011260 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8011244:	2b02      	cmp	r3, #2
 8011246:	d00b      	beq.n	8011260 <prvDeleteTCB+0x58>
	__asm volatile
 8011248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801124c:	f383 8811 	msr	BASEPRI, r3
 8011250:	f3bf 8f6f 	isb	sy
 8011254:	f3bf 8f4f 	dsb	sy
 8011258:	60fb      	str	r3, [r7, #12]
}
 801125a:	bf00      	nop
 801125c:	bf00      	nop
 801125e:	e7fd      	b.n	801125c <prvDeleteTCB+0x54>
	}
 8011260:	bf00      	nop
 8011262:	3710      	adds	r7, #16
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011268:	b480      	push	{r7}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801126e:	4b0c      	ldr	r3, [pc, #48]	@ (80112a0 <prvResetNextTaskUnblockTime+0x38>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d104      	bne.n	8011282 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011278:	4b0a      	ldr	r3, [pc, #40]	@ (80112a4 <prvResetNextTaskUnblockTime+0x3c>)
 801127a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801127e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011280:	e008      	b.n	8011294 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011282:	4b07      	ldr	r3, [pc, #28]	@ (80112a0 <prvResetNextTaskUnblockTime+0x38>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	68db      	ldr	r3, [r3, #12]
 801128a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	4a04      	ldr	r2, [pc, #16]	@ (80112a4 <prvResetNextTaskUnblockTime+0x3c>)
 8011292:	6013      	str	r3, [r2, #0]
}
 8011294:	bf00      	nop
 8011296:	370c      	adds	r7, #12
 8011298:	46bd      	mov	sp, r7
 801129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801129e:	4770      	bx	lr
 80112a0:	20001684 	.word	0x20001684
 80112a4:	200016ec 	.word	0x200016ec

080112a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80112ae:	4b05      	ldr	r3, [pc, #20]	@ (80112c4 <xTaskGetCurrentTaskHandle+0x1c>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80112b4:	687b      	ldr	r3, [r7, #4]
	}
 80112b6:	4618      	mov	r0, r3
 80112b8:	370c      	adds	r7, #12
 80112ba:	46bd      	mov	sp, r7
 80112bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop
 80112c4:	200011f8 	.word	0x200011f8

080112c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80112ce:	4b0b      	ldr	r3, [pc, #44]	@ (80112fc <xTaskGetSchedulerState+0x34>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d102      	bne.n	80112dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80112d6:	2301      	movs	r3, #1
 80112d8:	607b      	str	r3, [r7, #4]
 80112da:	e008      	b.n	80112ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112dc:	4b08      	ldr	r3, [pc, #32]	@ (8011300 <xTaskGetSchedulerState+0x38>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d102      	bne.n	80112ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80112e4:	2302      	movs	r3, #2
 80112e6:	607b      	str	r3, [r7, #4]
 80112e8:	e001      	b.n	80112ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80112ea:	2300      	movs	r3, #0
 80112ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80112ee:	687b      	ldr	r3, [r7, #4]
	}
 80112f0:	4618      	mov	r0, r3
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr
 80112fc:	200016d8 	.word	0x200016d8
 8011300:	200016f4 	.word	0x200016f4

08011304 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011310:	2300      	movs	r3, #0
 8011312:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d051      	beq.n	80113be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801131e:	4b2a      	ldr	r3, [pc, #168]	@ (80113c8 <xTaskPriorityInherit+0xc4>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011324:	429a      	cmp	r2, r3
 8011326:	d241      	bcs.n	80113ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	699b      	ldr	r3, [r3, #24]
 801132c:	2b00      	cmp	r3, #0
 801132e:	db06      	blt.n	801133e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011330:	4b25      	ldr	r3, [pc, #148]	@ (80113c8 <xTaskPriorityInherit+0xc4>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011336:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	6959      	ldr	r1, [r3, #20]
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011346:	4613      	mov	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	4413      	add	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	4a1f      	ldr	r2, [pc, #124]	@ (80113cc <xTaskPriorityInherit+0xc8>)
 8011350:	4413      	add	r3, r2
 8011352:	4299      	cmp	r1, r3
 8011354:	d122      	bne.n	801139c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	3304      	adds	r3, #4
 801135a:	4618      	mov	r0, r3
 801135c:	f7fd ffca 	bl	800f2f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011360:	4b19      	ldr	r3, [pc, #100]	@ (80113c8 <xTaskPriorityInherit+0xc4>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801136e:	4b18      	ldr	r3, [pc, #96]	@ (80113d0 <xTaskPriorityInherit+0xcc>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	429a      	cmp	r2, r3
 8011374:	d903      	bls.n	801137e <xTaskPriorityInherit+0x7a>
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801137a:	4a15      	ldr	r2, [pc, #84]	@ (80113d0 <xTaskPriorityInherit+0xcc>)
 801137c:	6013      	str	r3, [r2, #0]
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011382:	4613      	mov	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	4a10      	ldr	r2, [pc, #64]	@ (80113cc <xTaskPriorityInherit+0xc8>)
 801138c:	441a      	add	r2, r3
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	3304      	adds	r3, #4
 8011392:	4619      	mov	r1, r3
 8011394:	4610      	mov	r0, r2
 8011396:	f7fd ff50 	bl	800f23a <vListInsertEnd>
 801139a:	e004      	b.n	80113a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801139c:	4b0a      	ldr	r3, [pc, #40]	@ (80113c8 <xTaskPriorityInherit+0xc4>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80113a6:	2301      	movs	r3, #1
 80113a8:	60fb      	str	r3, [r7, #12]
 80113aa:	e008      	b.n	80113be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80113b0:	4b05      	ldr	r3, [pc, #20]	@ (80113c8 <xTaskPriorityInherit+0xc4>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d201      	bcs.n	80113be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80113ba:	2301      	movs	r3, #1
 80113bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80113be:	68fb      	ldr	r3, [r7, #12]
	}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3710      	adds	r7, #16
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	200011f8 	.word	0x200011f8
 80113cc:	200011fc 	.word	0x200011fc
 80113d0:	200016d4 	.word	0x200016d4

080113d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b086      	sub	sp, #24
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80113e0:	2300      	movs	r3, #0
 80113e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d058      	beq.n	801149c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80113ea:	4b2f      	ldr	r3, [pc, #188]	@ (80114a8 <xTaskPriorityDisinherit+0xd4>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	693a      	ldr	r2, [r7, #16]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d00b      	beq.n	801140c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80113f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113f8:	f383 8811 	msr	BASEPRI, r3
 80113fc:	f3bf 8f6f 	isb	sy
 8011400:	f3bf 8f4f 	dsb	sy
 8011404:	60fb      	str	r3, [r7, #12]
}
 8011406:	bf00      	nop
 8011408:	bf00      	nop
 801140a:	e7fd      	b.n	8011408 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011410:	2b00      	cmp	r3, #0
 8011412:	d10b      	bne.n	801142c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011418:	f383 8811 	msr	BASEPRI, r3
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	f3bf 8f4f 	dsb	sy
 8011424:	60bb      	str	r3, [r7, #8]
}
 8011426:	bf00      	nop
 8011428:	bf00      	nop
 801142a:	e7fd      	b.n	8011428 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011430:	1e5a      	subs	r2, r3, #1
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801143e:	429a      	cmp	r2, r3
 8011440:	d02c      	beq.n	801149c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011442:	693b      	ldr	r3, [r7, #16]
 8011444:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011446:	2b00      	cmp	r3, #0
 8011448:	d128      	bne.n	801149c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	3304      	adds	r3, #4
 801144e:	4618      	mov	r0, r3
 8011450:	f7fd ff50 	bl	800f2f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011460:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801146c:	4b0f      	ldr	r3, [pc, #60]	@ (80114ac <xTaskPriorityDisinherit+0xd8>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	429a      	cmp	r2, r3
 8011472:	d903      	bls.n	801147c <xTaskPriorityDisinherit+0xa8>
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011478:	4a0c      	ldr	r2, [pc, #48]	@ (80114ac <xTaskPriorityDisinherit+0xd8>)
 801147a:	6013      	str	r3, [r2, #0]
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011480:	4613      	mov	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	4413      	add	r3, r2
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	4a09      	ldr	r2, [pc, #36]	@ (80114b0 <xTaskPriorityDisinherit+0xdc>)
 801148a:	441a      	add	r2, r3
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	3304      	adds	r3, #4
 8011490:	4619      	mov	r1, r3
 8011492:	4610      	mov	r0, r2
 8011494:	f7fd fed1 	bl	800f23a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011498:	2301      	movs	r3, #1
 801149a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801149c:	697b      	ldr	r3, [r7, #20]
	}
 801149e:	4618      	mov	r0, r3
 80114a0:	3718      	adds	r7, #24
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}
 80114a6:	bf00      	nop
 80114a8:	200011f8 	.word	0x200011f8
 80114ac:	200016d4 	.word	0x200016d4
 80114b0:	200011fc 	.word	0x200011fc

080114b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b088      	sub	sp, #32
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80114c2:	2301      	movs	r3, #1
 80114c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d06c      	beq.n	80115a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d10b      	bne.n	80114ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80114d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114d8:	f383 8811 	msr	BASEPRI, r3
 80114dc:	f3bf 8f6f 	isb	sy
 80114e0:	f3bf 8f4f 	dsb	sy
 80114e4:	60fb      	str	r3, [r7, #12]
}
 80114e6:	bf00      	nop
 80114e8:	bf00      	nop
 80114ea:	e7fd      	b.n	80114e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114f0:	683a      	ldr	r2, [r7, #0]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d902      	bls.n	80114fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	61fb      	str	r3, [r7, #28]
 80114fa:	e002      	b.n	8011502 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80114fc:	69bb      	ldr	r3, [r7, #24]
 80114fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011500:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011502:	69bb      	ldr	r3, [r7, #24]
 8011504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011506:	69fa      	ldr	r2, [r7, #28]
 8011508:	429a      	cmp	r2, r3
 801150a:	d04c      	beq.n	80115a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011510:	697a      	ldr	r2, [r7, #20]
 8011512:	429a      	cmp	r2, r3
 8011514:	d147      	bne.n	80115a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011516:	4b26      	ldr	r3, [pc, #152]	@ (80115b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	69ba      	ldr	r2, [r7, #24]
 801151c:	429a      	cmp	r2, r3
 801151e:	d10b      	bne.n	8011538 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011524:	f383 8811 	msr	BASEPRI, r3
 8011528:	f3bf 8f6f 	isb	sy
 801152c:	f3bf 8f4f 	dsb	sy
 8011530:	60bb      	str	r3, [r7, #8]
}
 8011532:	bf00      	nop
 8011534:	bf00      	nop
 8011536:	e7fd      	b.n	8011534 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011538:	69bb      	ldr	r3, [r7, #24]
 801153a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801153c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	69fa      	ldr	r2, [r7, #28]
 8011542:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	699b      	ldr	r3, [r3, #24]
 8011548:	2b00      	cmp	r3, #0
 801154a:	db04      	blt.n	8011556 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	6959      	ldr	r1, [r3, #20]
 801155a:	693a      	ldr	r2, [r7, #16]
 801155c:	4613      	mov	r3, r2
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	4413      	add	r3, r2
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	4a13      	ldr	r2, [pc, #76]	@ (80115b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011566:	4413      	add	r3, r2
 8011568:	4299      	cmp	r1, r3
 801156a:	d11c      	bne.n	80115a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801156c:	69bb      	ldr	r3, [r7, #24]
 801156e:	3304      	adds	r3, #4
 8011570:	4618      	mov	r0, r3
 8011572:	f7fd febf 	bl	800f2f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801157a:	4b0f      	ldr	r3, [pc, #60]	@ (80115b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	429a      	cmp	r2, r3
 8011580:	d903      	bls.n	801158a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011586:	4a0c      	ldr	r2, [pc, #48]	@ (80115b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011588:	6013      	str	r3, [r2, #0]
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801158e:	4613      	mov	r3, r2
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	009b      	lsls	r3, r3, #2
 8011596:	4a07      	ldr	r2, [pc, #28]	@ (80115b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011598:	441a      	add	r2, r3
 801159a:	69bb      	ldr	r3, [r7, #24]
 801159c:	3304      	adds	r3, #4
 801159e:	4619      	mov	r1, r3
 80115a0:	4610      	mov	r0, r2
 80115a2:	f7fd fe4a 	bl	800f23a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80115a6:	bf00      	nop
 80115a8:	3720      	adds	r7, #32
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	200011f8 	.word	0x200011f8
 80115b4:	200011fc 	.word	0x200011fc
 80115b8:	200016d4 	.word	0x200016d4

080115bc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80115c2:	4b09      	ldr	r3, [pc, #36]	@ (80115e8 <uxTaskResetEventItemValue+0x2c>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	699b      	ldr	r3, [r3, #24]
 80115c8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115ca:	4b07      	ldr	r3, [pc, #28]	@ (80115e8 <uxTaskResetEventItemValue+0x2c>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115d0:	4b05      	ldr	r3, [pc, #20]	@ (80115e8 <uxTaskResetEventItemValue+0x2c>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80115d8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80115da:	687b      	ldr	r3, [r7, #4]
}
 80115dc:	4618      	mov	r0, r3
 80115de:	370c      	adds	r7, #12
 80115e0:	46bd      	mov	sp, r7
 80115e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e6:	4770      	bx	lr
 80115e8:	200011f8 	.word	0x200011f8

080115ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80115ec:	b480      	push	{r7}
 80115ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80115f0:	4b07      	ldr	r3, [pc, #28]	@ (8011610 <pvTaskIncrementMutexHeldCount+0x24>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d004      	beq.n	8011602 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80115f8:	4b05      	ldr	r3, [pc, #20]	@ (8011610 <pvTaskIncrementMutexHeldCount+0x24>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80115fe:	3201      	adds	r2, #1
 8011600:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8011602:	4b03      	ldr	r3, [pc, #12]	@ (8011610 <pvTaskIncrementMutexHeldCount+0x24>)
 8011604:	681b      	ldr	r3, [r3, #0]
	}
 8011606:	4618      	mov	r0, r3
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr
 8011610:	200011f8 	.word	0x200011f8

08011614 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801161e:	f000 fee3 	bl	80123e8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8011622:	4b1e      	ldr	r3, [pc, #120]	@ (801169c <ulTaskNotifyTake+0x88>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011628:	2b00      	cmp	r3, #0
 801162a:	d113      	bne.n	8011654 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801162c:	4b1b      	ldr	r3, [pc, #108]	@ (801169c <ulTaskNotifyTake+0x88>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2201      	movs	r2, #1
 8011632:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d00b      	beq.n	8011654 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801163c:	2101      	movs	r1, #1
 801163e:	6838      	ldr	r0, [r7, #0]
 8011640:	f000 f8ea 	bl	8011818 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011644:	4b16      	ldr	r3, [pc, #88]	@ (80116a0 <ulTaskNotifyTake+0x8c>)
 8011646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801164a:	601a      	str	r2, [r3, #0]
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011654:	f000 fefa 	bl	801244c <vPortExitCritical>

		taskENTER_CRITICAL();
 8011658:	f000 fec6 	bl	80123e8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801165c:	4b0f      	ldr	r3, [pc, #60]	@ (801169c <ulTaskNotifyTake+0x88>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011662:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d00c      	beq.n	8011684 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d004      	beq.n	801167a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011670:	4b0a      	ldr	r3, [pc, #40]	@ (801169c <ulTaskNotifyTake+0x88>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2200      	movs	r2, #0
 8011676:	655a      	str	r2, [r3, #84]	@ 0x54
 8011678:	e004      	b.n	8011684 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801167a:	4b08      	ldr	r3, [pc, #32]	@ (801169c <ulTaskNotifyTake+0x88>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	68fa      	ldr	r2, [r7, #12]
 8011680:	3a01      	subs	r2, #1
 8011682:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011684:	4b05      	ldr	r3, [pc, #20]	@ (801169c <ulTaskNotifyTake+0x88>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	2200      	movs	r2, #0
 801168a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 801168e:	f000 fedd 	bl	801244c <vPortExitCritical>

		return ulReturn;
 8011692:	68fb      	ldr	r3, [r7, #12]
	}
 8011694:	4618      	mov	r0, r3
 8011696:	3710      	adds	r7, #16
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	200011f8 	.word	0x200011f8
 80116a0:	e000ed04 	.word	0xe000ed04

080116a4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b08a      	sub	sp, #40	@ 0x28
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	603b      	str	r3, [r7, #0]
 80116b0:	4613      	mov	r3, r2
 80116b2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80116b4:	2301      	movs	r3, #1
 80116b6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d10b      	bne.n	80116d6 <xTaskGenericNotify+0x32>
	__asm volatile
 80116be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	61bb      	str	r3, [r7, #24]
}
 80116d0:	bf00      	nop
 80116d2:	bf00      	nop
 80116d4:	e7fd      	b.n	80116d2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80116da:	f000 fe85 	bl	80123e8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d003      	beq.n	80116ec <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80116e4:	6a3b      	ldr	r3, [r7, #32]
 80116e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80116ec:	6a3b      	ldr	r3, [r7, #32]
 80116ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80116f2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80116f4:	6a3b      	ldr	r3, [r7, #32]
 80116f6:	2202      	movs	r2, #2
 80116f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80116fc:	79fb      	ldrb	r3, [r7, #7]
 80116fe:	2b04      	cmp	r3, #4
 8011700:	d827      	bhi.n	8011752 <xTaskGenericNotify+0xae>
 8011702:	a201      	add	r2, pc, #4	@ (adr r2, 8011708 <xTaskGenericNotify+0x64>)
 8011704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011708:	08011775 	.word	0x08011775
 801170c:	0801171d 	.word	0x0801171d
 8011710:	0801172b 	.word	0x0801172b
 8011714:	08011737 	.word	0x08011737
 8011718:	0801173f 	.word	0x0801173f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801171c:	6a3b      	ldr	r3, [r7, #32]
 801171e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	431a      	orrs	r2, r3
 8011724:	6a3b      	ldr	r3, [r7, #32]
 8011726:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8011728:	e027      	b.n	801177a <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801172a:	6a3b      	ldr	r3, [r7, #32]
 801172c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801172e:	1c5a      	adds	r2, r3, #1
 8011730:	6a3b      	ldr	r3, [r7, #32]
 8011732:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8011734:	e021      	b.n	801177a <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011736:	6a3b      	ldr	r3, [r7, #32]
 8011738:	68ba      	ldr	r2, [r7, #8]
 801173a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 801173c:	e01d      	b.n	801177a <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801173e:	7ffb      	ldrb	r3, [r7, #31]
 8011740:	2b02      	cmp	r3, #2
 8011742:	d003      	beq.n	801174c <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011744:	6a3b      	ldr	r3, [r7, #32]
 8011746:	68ba      	ldr	r2, [r7, #8]
 8011748:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801174a:	e016      	b.n	801177a <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 801174c:	2300      	movs	r3, #0
 801174e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8011750:	e013      	b.n	801177a <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011752:	6a3b      	ldr	r3, [r7, #32]
 8011754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801175a:	d00d      	beq.n	8011778 <xTaskGenericNotify+0xd4>
	__asm volatile
 801175c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011760:	f383 8811 	msr	BASEPRI, r3
 8011764:	f3bf 8f6f 	isb	sy
 8011768:	f3bf 8f4f 	dsb	sy
 801176c:	617b      	str	r3, [r7, #20]
}
 801176e:	bf00      	nop
 8011770:	bf00      	nop
 8011772:	e7fd      	b.n	8011770 <xTaskGenericNotify+0xcc>
					break;
 8011774:	bf00      	nop
 8011776:	e000      	b.n	801177a <xTaskGenericNotify+0xd6>

					break;
 8011778:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801177a:	7ffb      	ldrb	r3, [r7, #31]
 801177c:	2b01      	cmp	r3, #1
 801177e:	d13b      	bne.n	80117f8 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011780:	6a3b      	ldr	r3, [r7, #32]
 8011782:	3304      	adds	r3, #4
 8011784:	4618      	mov	r0, r3
 8011786:	f7fd fdb5 	bl	800f2f4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801178a:	6a3b      	ldr	r3, [r7, #32]
 801178c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801178e:	4b1e      	ldr	r3, [pc, #120]	@ (8011808 <xTaskGenericNotify+0x164>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	429a      	cmp	r2, r3
 8011794:	d903      	bls.n	801179e <xTaskGenericNotify+0xfa>
 8011796:	6a3b      	ldr	r3, [r7, #32]
 8011798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801179a:	4a1b      	ldr	r2, [pc, #108]	@ (8011808 <xTaskGenericNotify+0x164>)
 801179c:	6013      	str	r3, [r2, #0]
 801179e:	6a3b      	ldr	r3, [r7, #32]
 80117a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117a2:	4613      	mov	r3, r2
 80117a4:	009b      	lsls	r3, r3, #2
 80117a6:	4413      	add	r3, r2
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	4a18      	ldr	r2, [pc, #96]	@ (801180c <xTaskGenericNotify+0x168>)
 80117ac:	441a      	add	r2, r3
 80117ae:	6a3b      	ldr	r3, [r7, #32]
 80117b0:	3304      	adds	r3, #4
 80117b2:	4619      	mov	r1, r3
 80117b4:	4610      	mov	r0, r2
 80117b6:	f7fd fd40 	bl	800f23a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80117ba:	6a3b      	ldr	r3, [r7, #32]
 80117bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00b      	beq.n	80117da <xTaskGenericNotify+0x136>
	__asm volatile
 80117c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117c6:	f383 8811 	msr	BASEPRI, r3
 80117ca:	f3bf 8f6f 	isb	sy
 80117ce:	f3bf 8f4f 	dsb	sy
 80117d2:	613b      	str	r3, [r7, #16]
}
 80117d4:	bf00      	nop
 80117d6:	bf00      	nop
 80117d8:	e7fd      	b.n	80117d6 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80117da:	6a3b      	ldr	r3, [r7, #32]
 80117dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80117de:	4b0c      	ldr	r3, [pc, #48]	@ (8011810 <xTaskGenericNotify+0x16c>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d907      	bls.n	80117f8 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80117e8:	4b0a      	ldr	r3, [pc, #40]	@ (8011814 <xTaskGenericNotify+0x170>)
 80117ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117ee:	601a      	str	r2, [r3, #0]
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80117f8:	f000 fe28 	bl	801244c <vPortExitCritical>

		return xReturn;
 80117fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80117fe:	4618      	mov	r0, r3
 8011800:	3728      	adds	r7, #40	@ 0x28
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	200016d4 	.word	0x200016d4
 801180c:	200011fc 	.word	0x200011fc
 8011810:	200011f8 	.word	0x200011f8
 8011814:	e000ed04 	.word	0xe000ed04

08011818 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b084      	sub	sp, #16
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011822:	4b21      	ldr	r3, [pc, #132]	@ (80118a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011828:	4b20      	ldr	r3, [pc, #128]	@ (80118ac <prvAddCurrentTaskToDelayedList+0x94>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	3304      	adds	r3, #4
 801182e:	4618      	mov	r0, r3
 8011830:	f7fd fd60 	bl	800f2f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801183a:	d10a      	bne.n	8011852 <prvAddCurrentTaskToDelayedList+0x3a>
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d007      	beq.n	8011852 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011842:	4b1a      	ldr	r3, [pc, #104]	@ (80118ac <prvAddCurrentTaskToDelayedList+0x94>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	3304      	adds	r3, #4
 8011848:	4619      	mov	r1, r3
 801184a:	4819      	ldr	r0, [pc, #100]	@ (80118b0 <prvAddCurrentTaskToDelayedList+0x98>)
 801184c:	f7fd fcf5 	bl	800f23a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011850:	e026      	b.n	80118a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	4413      	add	r3, r2
 8011858:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801185a:	4b14      	ldr	r3, [pc, #80]	@ (80118ac <prvAddCurrentTaskToDelayedList+0x94>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	68ba      	ldr	r2, [r7, #8]
 8011860:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011862:	68ba      	ldr	r2, [r7, #8]
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	429a      	cmp	r2, r3
 8011868:	d209      	bcs.n	801187e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801186a:	4b12      	ldr	r3, [pc, #72]	@ (80118b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801186c:	681a      	ldr	r2, [r3, #0]
 801186e:	4b0f      	ldr	r3, [pc, #60]	@ (80118ac <prvAddCurrentTaskToDelayedList+0x94>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	3304      	adds	r3, #4
 8011874:	4619      	mov	r1, r3
 8011876:	4610      	mov	r0, r2
 8011878:	f7fd fd03 	bl	800f282 <vListInsert>
}
 801187c:	e010      	b.n	80118a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801187e:	4b0e      	ldr	r3, [pc, #56]	@ (80118b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011880:	681a      	ldr	r2, [r3, #0]
 8011882:	4b0a      	ldr	r3, [pc, #40]	@ (80118ac <prvAddCurrentTaskToDelayedList+0x94>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3304      	adds	r3, #4
 8011888:	4619      	mov	r1, r3
 801188a:	4610      	mov	r0, r2
 801188c:	f7fd fcf9 	bl	800f282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011890:	4b0a      	ldr	r3, [pc, #40]	@ (80118bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	68ba      	ldr	r2, [r7, #8]
 8011896:	429a      	cmp	r2, r3
 8011898:	d202      	bcs.n	80118a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801189a:	4a08      	ldr	r2, [pc, #32]	@ (80118bc <prvAddCurrentTaskToDelayedList+0xa4>)
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	6013      	str	r3, [r2, #0]
}
 80118a0:	bf00      	nop
 80118a2:	3710      	adds	r7, #16
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	200016d0 	.word	0x200016d0
 80118ac:	200011f8 	.word	0x200011f8
 80118b0:	200016b8 	.word	0x200016b8
 80118b4:	20001688 	.word	0x20001688
 80118b8:	20001684 	.word	0x20001684
 80118bc:	200016ec 	.word	0x200016ec

080118c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b08a      	sub	sp, #40	@ 0x28
 80118c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80118c6:	2300      	movs	r3, #0
 80118c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80118ca:	f000 fbb1 	bl	8012030 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80118ce:	4b1d      	ldr	r3, [pc, #116]	@ (8011944 <xTimerCreateTimerTask+0x84>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d021      	beq.n	801191a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80118d6:	2300      	movs	r3, #0
 80118d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80118da:	2300      	movs	r3, #0
 80118dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80118de:	1d3a      	adds	r2, r7, #4
 80118e0:	f107 0108 	add.w	r1, r7, #8
 80118e4:	f107 030c 	add.w	r3, r7, #12
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7fd fa69 	bl	800edc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80118ee:	6879      	ldr	r1, [r7, #4]
 80118f0:	68bb      	ldr	r3, [r7, #8]
 80118f2:	68fa      	ldr	r2, [r7, #12]
 80118f4:	9202      	str	r2, [sp, #8]
 80118f6:	9301      	str	r3, [sp, #4]
 80118f8:	2302      	movs	r3, #2
 80118fa:	9300      	str	r3, [sp, #0]
 80118fc:	2300      	movs	r3, #0
 80118fe:	460a      	mov	r2, r1
 8011900:	4911      	ldr	r1, [pc, #68]	@ (8011948 <xTimerCreateTimerTask+0x88>)
 8011902:	4812      	ldr	r0, [pc, #72]	@ (801194c <xTimerCreateTimerTask+0x8c>)
 8011904:	f7fe fe04 	bl	8010510 <xTaskCreateStatic>
 8011908:	4603      	mov	r3, r0
 801190a:	4a11      	ldr	r2, [pc, #68]	@ (8011950 <xTimerCreateTimerTask+0x90>)
 801190c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801190e:	4b10      	ldr	r3, [pc, #64]	@ (8011950 <xTimerCreateTimerTask+0x90>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d001      	beq.n	801191a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011916:	2301      	movs	r3, #1
 8011918:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d10b      	bne.n	8011938 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011924:	f383 8811 	msr	BASEPRI, r3
 8011928:	f3bf 8f6f 	isb	sy
 801192c:	f3bf 8f4f 	dsb	sy
 8011930:	613b      	str	r3, [r7, #16]
}
 8011932:	bf00      	nop
 8011934:	bf00      	nop
 8011936:	e7fd      	b.n	8011934 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011938:	697b      	ldr	r3, [r7, #20]
}
 801193a:	4618      	mov	r0, r3
 801193c:	3718      	adds	r7, #24
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
 8011942:	bf00      	nop
 8011944:	20001728 	.word	0x20001728
 8011948:	080181a4 	.word	0x080181a4
 801194c:	08011bc9 	.word	0x08011bc9
 8011950:	2000172c 	.word	0x2000172c

08011954 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011954:	b580      	push	{r7, lr}
 8011956:	b088      	sub	sp, #32
 8011958:	af02      	add	r7, sp, #8
 801195a:	60f8      	str	r0, [r7, #12]
 801195c:	60b9      	str	r1, [r7, #8]
 801195e:	607a      	str	r2, [r7, #4]
 8011960:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011962:	202c      	movs	r0, #44	@ 0x2c
 8011964:	f000 fe62 	bl	801262c <pvPortMalloc>
 8011968:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d00d      	beq.n	801198c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	2200      	movs	r2, #0
 8011974:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	9301      	str	r3, [sp, #4]
 801197c:	6a3b      	ldr	r3, [r7, #32]
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	687a      	ldr	r2, [r7, #4]
 8011984:	68b9      	ldr	r1, [r7, #8]
 8011986:	68f8      	ldr	r0, [r7, #12]
 8011988:	f000 f845 	bl	8011a16 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801198c:	697b      	ldr	r3, [r7, #20]
	}
 801198e:	4618      	mov	r0, r3
 8011990:	3718      	adds	r7, #24
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}

08011996 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011996:	b580      	push	{r7, lr}
 8011998:	b08a      	sub	sp, #40	@ 0x28
 801199a:	af02      	add	r7, sp, #8
 801199c:	60f8      	str	r0, [r7, #12]
 801199e:	60b9      	str	r1, [r7, #8]
 80119a0:	607a      	str	r2, [r7, #4]
 80119a2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80119a4:	232c      	movs	r3, #44	@ 0x2c
 80119a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	2b2c      	cmp	r3, #44	@ 0x2c
 80119ac:	d00b      	beq.n	80119c6 <xTimerCreateStatic+0x30>
	__asm volatile
 80119ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119b2:	f383 8811 	msr	BASEPRI, r3
 80119b6:	f3bf 8f6f 	isb	sy
 80119ba:	f3bf 8f4f 	dsb	sy
 80119be:	61bb      	str	r3, [r7, #24]
}
 80119c0:	bf00      	nop
 80119c2:	bf00      	nop
 80119c4:	e7fd      	b.n	80119c2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80119c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80119c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d10b      	bne.n	80119e6 <xTimerCreateStatic+0x50>
	__asm volatile
 80119ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119d2:	f383 8811 	msr	BASEPRI, r3
 80119d6:	f3bf 8f6f 	isb	sy
 80119da:	f3bf 8f4f 	dsb	sy
 80119de:	617b      	str	r3, [r7, #20]
}
 80119e0:	bf00      	nop
 80119e2:	bf00      	nop
 80119e4:	e7fd      	b.n	80119e2 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80119e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119e8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00d      	beq.n	8011a0c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	2202      	movs	r2, #2
 80119f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	9301      	str	r3, [sp, #4]
 80119fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119fe:	9300      	str	r3, [sp, #0]
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	68b9      	ldr	r1, [r7, #8]
 8011a06:	68f8      	ldr	r0, [r7, #12]
 8011a08:	f000 f805 	bl	8011a16 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011a0c:	69fb      	ldr	r3, [r7, #28]
	}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3720      	adds	r7, #32
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b086      	sub	sp, #24
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	60f8      	str	r0, [r7, #12]
 8011a1e:	60b9      	str	r1, [r7, #8]
 8011a20:	607a      	str	r2, [r7, #4]
 8011a22:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d10b      	bne.n	8011a42 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8011a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a2e:	f383 8811 	msr	BASEPRI, r3
 8011a32:	f3bf 8f6f 	isb	sy
 8011a36:	f3bf 8f4f 	dsb	sy
 8011a3a:	617b      	str	r3, [r7, #20]
}
 8011a3c:	bf00      	nop
 8011a3e:	bf00      	nop
 8011a40:	e7fd      	b.n	8011a3e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8011a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d01e      	beq.n	8011a86 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011a48:	f000 faf2 	bl	8012030 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a4e:	68fa      	ldr	r2, [r7, #12]
 8011a50:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a54:	68ba      	ldr	r2, [r7, #8]
 8011a56:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a5a:	683a      	ldr	r2, [r7, #0]
 8011a5c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a60:	6a3a      	ldr	r2, [r7, #32]
 8011a62:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a66:	3304      	adds	r3, #4
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7fd fbd9 	bl	800f220 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d008      	beq.n	8011a86 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011a7a:	f043 0304 	orr.w	r3, r3, #4
 8011a7e:	b2da      	uxtb	r2, r3
 8011a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011a86:	bf00      	nop
 8011a88:	3718      	adds	r7, #24
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
	...

08011a90 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b08a      	sub	sp, #40	@ 0x28
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	60b9      	str	r1, [r7, #8]
 8011a9a:	607a      	str	r2, [r7, #4]
 8011a9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d10b      	bne.n	8011ac0 <xTimerGenericCommand+0x30>
	__asm volatile
 8011aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aac:	f383 8811 	msr	BASEPRI, r3
 8011ab0:	f3bf 8f6f 	isb	sy
 8011ab4:	f3bf 8f4f 	dsb	sy
 8011ab8:	623b      	str	r3, [r7, #32]
}
 8011aba:	bf00      	nop
 8011abc:	bf00      	nop
 8011abe:	e7fd      	b.n	8011abc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011ac0:	4b19      	ldr	r3, [pc, #100]	@ (8011b28 <xTimerGenericCommand+0x98>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d02a      	beq.n	8011b1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	2b05      	cmp	r3, #5
 8011ad8:	dc18      	bgt.n	8011b0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011ada:	f7ff fbf5 	bl	80112c8 <xTaskGetSchedulerState>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b02      	cmp	r3, #2
 8011ae2:	d109      	bne.n	8011af8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011ae4:	4b10      	ldr	r3, [pc, #64]	@ (8011b28 <xTimerGenericCommand+0x98>)
 8011ae6:	6818      	ldr	r0, [r3, #0]
 8011ae8:	f107 0110 	add.w	r1, r7, #16
 8011aec:	2300      	movs	r3, #0
 8011aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011af0:	f7fd fe96 	bl	800f820 <xQueueGenericSend>
 8011af4:	6278      	str	r0, [r7, #36]	@ 0x24
 8011af6:	e012      	b.n	8011b1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011af8:	4b0b      	ldr	r3, [pc, #44]	@ (8011b28 <xTimerGenericCommand+0x98>)
 8011afa:	6818      	ldr	r0, [r3, #0]
 8011afc:	f107 0110 	add.w	r1, r7, #16
 8011b00:	2300      	movs	r3, #0
 8011b02:	2200      	movs	r2, #0
 8011b04:	f7fd fe8c 	bl	800f820 <xQueueGenericSend>
 8011b08:	6278      	str	r0, [r7, #36]	@ 0x24
 8011b0a:	e008      	b.n	8011b1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011b0c:	4b06      	ldr	r3, [pc, #24]	@ (8011b28 <xTimerGenericCommand+0x98>)
 8011b0e:	6818      	ldr	r0, [r3, #0]
 8011b10:	f107 0110 	add.w	r1, r7, #16
 8011b14:	2300      	movs	r3, #0
 8011b16:	683a      	ldr	r2, [r7, #0]
 8011b18:	f7fd ff84 	bl	800fa24 <xQueueGenericSendFromISR>
 8011b1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3728      	adds	r7, #40	@ 0x28
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	20001728 	.word	0x20001728

08011b2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b088      	sub	sp, #32
 8011b30:	af02      	add	r7, sp, #8
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b36:	4b23      	ldr	r3, [pc, #140]	@ (8011bc4 <prvProcessExpiredTimer+0x98>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	68db      	ldr	r3, [r3, #12]
 8011b3c:	68db      	ldr	r3, [r3, #12]
 8011b3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	3304      	adds	r3, #4
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7fd fbd5 	bl	800f2f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011b50:	f003 0304 	and.w	r3, r3, #4
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d023      	beq.n	8011ba0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	699a      	ldr	r2, [r3, #24]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	18d1      	adds	r1, r2, r3
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	683a      	ldr	r2, [r7, #0]
 8011b64:	6978      	ldr	r0, [r7, #20]
 8011b66:	f000 f8d5 	bl	8011d14 <prvInsertTimerInActiveList>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d020      	beq.n	8011bb2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011b70:	2300      	movs	r3, #0
 8011b72:	9300      	str	r3, [sp, #0]
 8011b74:	2300      	movs	r3, #0
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	2100      	movs	r1, #0
 8011b7a:	6978      	ldr	r0, [r7, #20]
 8011b7c:	f7ff ff88 	bl	8011a90 <xTimerGenericCommand>
 8011b80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d114      	bne.n	8011bb2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b8c:	f383 8811 	msr	BASEPRI, r3
 8011b90:	f3bf 8f6f 	isb	sy
 8011b94:	f3bf 8f4f 	dsb	sy
 8011b98:	60fb      	str	r3, [r7, #12]
}
 8011b9a:	bf00      	nop
 8011b9c:	bf00      	nop
 8011b9e:	e7fd      	b.n	8011b9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011ba6:	f023 0301 	bic.w	r3, r3, #1
 8011baa:	b2da      	uxtb	r2, r3
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	6a1b      	ldr	r3, [r3, #32]
 8011bb6:	6978      	ldr	r0, [r7, #20]
 8011bb8:	4798      	blx	r3
}
 8011bba:	bf00      	nop
 8011bbc:	3718      	adds	r7, #24
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	20001720 	.word	0x20001720

08011bc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011bd0:	f107 0308 	add.w	r3, r7, #8
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f000 f859 	bl	8011c8c <prvGetNextExpireTime>
 8011bda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	4619      	mov	r1, r3
 8011be0:	68f8      	ldr	r0, [r7, #12]
 8011be2:	f000 f805 	bl	8011bf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011be6:	f000 f8d7 	bl	8011d98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011bea:	bf00      	nop
 8011bec:	e7f0      	b.n	8011bd0 <prvTimerTask+0x8>
	...

08011bf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011bfa:	f7fe fecd 	bl	8010998 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011bfe:	f107 0308 	add.w	r3, r7, #8
 8011c02:	4618      	mov	r0, r3
 8011c04:	f000 f866 	bl	8011cd4 <prvSampleTimeNow>
 8011c08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d130      	bne.n	8011c72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d10a      	bne.n	8011c2c <prvProcessTimerOrBlockTask+0x3c>
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d806      	bhi.n	8011c2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011c1e:	f7fe fec9 	bl	80109b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011c22:	68f9      	ldr	r1, [r7, #12]
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f7ff ff81 	bl	8011b2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011c2a:	e024      	b.n	8011c76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d008      	beq.n	8011c44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011c32:	4b13      	ldr	r3, [pc, #76]	@ (8011c80 <prvProcessTimerOrBlockTask+0x90>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d101      	bne.n	8011c40 <prvProcessTimerOrBlockTask+0x50>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	e000      	b.n	8011c42 <prvProcessTimerOrBlockTask+0x52>
 8011c40:	2300      	movs	r3, #0
 8011c42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011c44:	4b0f      	ldr	r3, [pc, #60]	@ (8011c84 <prvProcessTimerOrBlockTask+0x94>)
 8011c46:	6818      	ldr	r0, [r3, #0]
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	1ad3      	subs	r3, r2, r3
 8011c4e:	683a      	ldr	r2, [r7, #0]
 8011c50:	4619      	mov	r1, r3
 8011c52:	f7fe fc29 	bl	80104a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011c56:	f7fe fead 	bl	80109b4 <xTaskResumeAll>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d10a      	bne.n	8011c76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011c60:	4b09      	ldr	r3, [pc, #36]	@ (8011c88 <prvProcessTimerOrBlockTask+0x98>)
 8011c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c66:	601a      	str	r2, [r3, #0]
 8011c68:	f3bf 8f4f 	dsb	sy
 8011c6c:	f3bf 8f6f 	isb	sy
}
 8011c70:	e001      	b.n	8011c76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011c72:	f7fe fe9f 	bl	80109b4 <xTaskResumeAll>
}
 8011c76:	bf00      	nop
 8011c78:	3710      	adds	r7, #16
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}
 8011c7e:	bf00      	nop
 8011c80:	20001724 	.word	0x20001724
 8011c84:	20001728 	.word	0x20001728
 8011c88:	e000ed04 	.word	0xe000ed04

08011c8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b085      	sub	sp, #20
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011c94:	4b0e      	ldr	r3, [pc, #56]	@ (8011cd0 <prvGetNextExpireTime+0x44>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d101      	bne.n	8011ca2 <prvGetNextExpireTime+0x16>
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	e000      	b.n	8011ca4 <prvGetNextExpireTime+0x18>
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d105      	bne.n	8011cbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011cb0:	4b07      	ldr	r3, [pc, #28]	@ (8011cd0 <prvGetNextExpireTime+0x44>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	68db      	ldr	r3, [r3, #12]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	60fb      	str	r3, [r7, #12]
 8011cba:	e001      	b.n	8011cc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
}
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	3714      	adds	r7, #20
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr
 8011cce:	bf00      	nop
 8011cd0:	20001720 	.word	0x20001720

08011cd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b084      	sub	sp, #16
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011cdc:	f7fe ff08 	bl	8010af0 <xTaskGetTickCount>
 8011ce0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8011d10 <prvSampleTimeNow+0x3c>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	68fa      	ldr	r2, [r7, #12]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d205      	bcs.n	8011cf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011cec:	f000 f93a 	bl	8011f64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	601a      	str	r2, [r3, #0]
 8011cf6:	e002      	b.n	8011cfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011cfe:	4a04      	ldr	r2, [pc, #16]	@ (8011d10 <prvSampleTimeNow+0x3c>)
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011d04:	68fb      	ldr	r3, [r7, #12]
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3710      	adds	r7, #16
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	20001730 	.word	0x20001730

08011d14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b086      	sub	sp, #24
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
 8011d20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011d22:	2300      	movs	r3, #0
 8011d24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	68ba      	ldr	r2, [r7, #8]
 8011d2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	68fa      	ldr	r2, [r7, #12]
 8011d30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011d32:	68ba      	ldr	r2, [r7, #8]
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d812      	bhi.n	8011d60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	1ad2      	subs	r2, r2, r3
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	699b      	ldr	r3, [r3, #24]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d302      	bcc.n	8011d4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011d48:	2301      	movs	r3, #1
 8011d4a:	617b      	str	r3, [r7, #20]
 8011d4c:	e01b      	b.n	8011d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011d4e:	4b10      	ldr	r3, [pc, #64]	@ (8011d90 <prvInsertTimerInActiveList+0x7c>)
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	3304      	adds	r3, #4
 8011d56:	4619      	mov	r1, r3
 8011d58:	4610      	mov	r0, r2
 8011d5a:	f7fd fa92 	bl	800f282 <vListInsert>
 8011d5e:	e012      	b.n	8011d86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011d60:	687a      	ldr	r2, [r7, #4]
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d206      	bcs.n	8011d76 <prvInsertTimerInActiveList+0x62>
 8011d68:	68ba      	ldr	r2, [r7, #8]
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d302      	bcc.n	8011d76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011d70:	2301      	movs	r3, #1
 8011d72:	617b      	str	r3, [r7, #20]
 8011d74:	e007      	b.n	8011d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011d76:	4b07      	ldr	r3, [pc, #28]	@ (8011d94 <prvInsertTimerInActiveList+0x80>)
 8011d78:	681a      	ldr	r2, [r3, #0]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	3304      	adds	r3, #4
 8011d7e:	4619      	mov	r1, r3
 8011d80:	4610      	mov	r0, r2
 8011d82:	f7fd fa7e 	bl	800f282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011d86:	697b      	ldr	r3, [r7, #20]
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3718      	adds	r7, #24
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}
 8011d90:	20001724 	.word	0x20001724
 8011d94:	20001720 	.word	0x20001720

08011d98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b08e      	sub	sp, #56	@ 0x38
 8011d9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011d9e:	e0ce      	b.n	8011f3e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	da19      	bge.n	8011dda <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011da6:	1d3b      	adds	r3, r7, #4
 8011da8:	3304      	adds	r3, #4
 8011daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d10b      	bne.n	8011dca <prvProcessReceivedCommands+0x32>
	__asm volatile
 8011db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011db6:	f383 8811 	msr	BASEPRI, r3
 8011dba:	f3bf 8f6f 	isb	sy
 8011dbe:	f3bf 8f4f 	dsb	sy
 8011dc2:	61fb      	str	r3, [r7, #28]
}
 8011dc4:	bf00      	nop
 8011dc6:	bf00      	nop
 8011dc8:	e7fd      	b.n	8011dc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011dd0:	6850      	ldr	r0, [r2, #4]
 8011dd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011dd4:	6892      	ldr	r2, [r2, #8]
 8011dd6:	4611      	mov	r1, r2
 8011dd8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	f2c0 80ae 	blt.w	8011f3e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011de8:	695b      	ldr	r3, [r3, #20]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d004      	beq.n	8011df8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011df0:	3304      	adds	r3, #4
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fd fa7e 	bl	800f2f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011df8:	463b      	mov	r3, r7
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f7ff ff6a 	bl	8011cd4 <prvSampleTimeNow>
 8011e00:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b09      	cmp	r3, #9
 8011e06:	f200 8097 	bhi.w	8011f38 <prvProcessReceivedCommands+0x1a0>
 8011e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8011e10 <prvProcessReceivedCommands+0x78>)
 8011e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e10:	08011e39 	.word	0x08011e39
 8011e14:	08011e39 	.word	0x08011e39
 8011e18:	08011e39 	.word	0x08011e39
 8011e1c:	08011eaf 	.word	0x08011eaf
 8011e20:	08011ec3 	.word	0x08011ec3
 8011e24:	08011f0f 	.word	0x08011f0f
 8011e28:	08011e39 	.word	0x08011e39
 8011e2c:	08011e39 	.word	0x08011e39
 8011e30:	08011eaf 	.word	0x08011eaf
 8011e34:	08011ec3 	.word	0x08011ec3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e3e:	f043 0301 	orr.w	r3, r3, #1
 8011e42:	b2da      	uxtb	r2, r3
 8011e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011e4a:	68ba      	ldr	r2, [r7, #8]
 8011e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e4e:	699b      	ldr	r3, [r3, #24]
 8011e50:	18d1      	adds	r1, r2, r3
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e58:	f7ff ff5c 	bl	8011d14 <prvInsertTimerInActiveList>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d06c      	beq.n	8011f3c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e64:	6a1b      	ldr	r3, [r3, #32]
 8011e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e70:	f003 0304 	and.w	r3, r3, #4
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d061      	beq.n	8011f3c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011e78:	68ba      	ldr	r2, [r7, #8]
 8011e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e7c:	699b      	ldr	r3, [r3, #24]
 8011e7e:	441a      	add	r2, r3
 8011e80:	2300      	movs	r3, #0
 8011e82:	9300      	str	r3, [sp, #0]
 8011e84:	2300      	movs	r3, #0
 8011e86:	2100      	movs	r1, #0
 8011e88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011e8a:	f7ff fe01 	bl	8011a90 <xTimerGenericCommand>
 8011e8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011e90:	6a3b      	ldr	r3, [r7, #32]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d152      	bne.n	8011f3c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8011e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e9a:	f383 8811 	msr	BASEPRI, r3
 8011e9e:	f3bf 8f6f 	isb	sy
 8011ea2:	f3bf 8f4f 	dsb	sy
 8011ea6:	61bb      	str	r3, [r7, #24]
}
 8011ea8:	bf00      	nop
 8011eaa:	bf00      	nop
 8011eac:	e7fd      	b.n	8011eaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011eb4:	f023 0301 	bic.w	r3, r3, #1
 8011eb8:	b2da      	uxtb	r2, r3
 8011eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ebc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011ec0:	e03d      	b.n	8011f3e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011ec8:	f043 0301 	orr.w	r3, r3, #1
 8011ecc:	b2da      	uxtb	r2, r3
 8011ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011ed4:	68ba      	ldr	r2, [r7, #8]
 8011ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011edc:	699b      	ldr	r3, [r3, #24]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d10b      	bne.n	8011efa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8011ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ee6:	f383 8811 	msr	BASEPRI, r3
 8011eea:	f3bf 8f6f 	isb	sy
 8011eee:	f3bf 8f4f 	dsb	sy
 8011ef2:	617b      	str	r3, [r7, #20]
}
 8011ef4:	bf00      	nop
 8011ef6:	bf00      	nop
 8011ef8:	e7fd      	b.n	8011ef6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011efc:	699a      	ldr	r2, [r3, #24]
 8011efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f00:	18d1      	adds	r1, r2, r3
 8011f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f08:	f7ff ff04 	bl	8011d14 <prvInsertTimerInActiveList>
					break;
 8011f0c:	e017      	b.n	8011f3e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f14:	f003 0302 	and.w	r3, r3, #2
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d103      	bne.n	8011f24 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8011f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f1e:	f000 fc53 	bl	80127c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011f22:	e00c      	b.n	8011f3e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f2a:	f023 0301 	bic.w	r3, r3, #1
 8011f2e:	b2da      	uxtb	r2, r3
 8011f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011f36:	e002      	b.n	8011f3e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8011f38:	bf00      	nop
 8011f3a:	e000      	b.n	8011f3e <prvProcessReceivedCommands+0x1a6>
					break;
 8011f3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011f3e:	4b08      	ldr	r3, [pc, #32]	@ (8011f60 <prvProcessReceivedCommands+0x1c8>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	1d39      	adds	r1, r7, #4
 8011f44:	2200      	movs	r2, #0
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7fd fe9a 	bl	800fc80 <xQueueReceive>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	f47f af26 	bne.w	8011da0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011f54:	bf00      	nop
 8011f56:	bf00      	nop
 8011f58:	3730      	adds	r7, #48	@ 0x30
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	20001728 	.word	0x20001728

08011f64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b088      	sub	sp, #32
 8011f68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011f6a:	e049      	b.n	8012000 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f6c:	4b2e      	ldr	r3, [pc, #184]	@ (8012028 <prvSwitchTimerLists+0xc4>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	68db      	ldr	r3, [r3, #12]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f76:	4b2c      	ldr	r3, [pc, #176]	@ (8012028 <prvSwitchTimerLists+0xc4>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	68db      	ldr	r3, [r3, #12]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	3304      	adds	r3, #4
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7fd f9b5 	bl	800f2f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	6a1b      	ldr	r3, [r3, #32]
 8011f8e:	68f8      	ldr	r0, [r7, #12]
 8011f90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f98:	f003 0304 	and.w	r3, r3, #4
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d02f      	beq.n	8012000 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	699b      	ldr	r3, [r3, #24]
 8011fa4:	693a      	ldr	r2, [r7, #16]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011faa:	68ba      	ldr	r2, [r7, #8]
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d90e      	bls.n	8011fd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	68ba      	ldr	r2, [r7, #8]
 8011fb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	68fa      	ldr	r2, [r7, #12]
 8011fbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8012028 <prvSwitchTimerLists+0xc4>)
 8011fc0:	681a      	ldr	r2, [r3, #0]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	3304      	adds	r3, #4
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	4610      	mov	r0, r2
 8011fca:	f7fd f95a 	bl	800f282 <vListInsert>
 8011fce:	e017      	b.n	8012000 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	9300      	str	r3, [sp, #0]
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	693a      	ldr	r2, [r7, #16]
 8011fd8:	2100      	movs	r1, #0
 8011fda:	68f8      	ldr	r0, [r7, #12]
 8011fdc:	f7ff fd58 	bl	8011a90 <xTimerGenericCommand>
 8011fe0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d10b      	bne.n	8012000 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8011fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fec:	f383 8811 	msr	BASEPRI, r3
 8011ff0:	f3bf 8f6f 	isb	sy
 8011ff4:	f3bf 8f4f 	dsb	sy
 8011ff8:	603b      	str	r3, [r7, #0]
}
 8011ffa:	bf00      	nop
 8011ffc:	bf00      	nop
 8011ffe:	e7fd      	b.n	8011ffc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012000:	4b09      	ldr	r3, [pc, #36]	@ (8012028 <prvSwitchTimerLists+0xc4>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d1b0      	bne.n	8011f6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801200a:	4b07      	ldr	r3, [pc, #28]	@ (8012028 <prvSwitchTimerLists+0xc4>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012010:	4b06      	ldr	r3, [pc, #24]	@ (801202c <prvSwitchTimerLists+0xc8>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	4a04      	ldr	r2, [pc, #16]	@ (8012028 <prvSwitchTimerLists+0xc4>)
 8012016:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012018:	4a04      	ldr	r2, [pc, #16]	@ (801202c <prvSwitchTimerLists+0xc8>)
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	6013      	str	r3, [r2, #0]
}
 801201e:	bf00      	nop
 8012020:	3718      	adds	r7, #24
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	20001720 	.word	0x20001720
 801202c:	20001724 	.word	0x20001724

08012030 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012036:	f000 f9d7 	bl	80123e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801203a:	4b15      	ldr	r3, [pc, #84]	@ (8012090 <prvCheckForValidListAndQueue+0x60>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d120      	bne.n	8012084 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012042:	4814      	ldr	r0, [pc, #80]	@ (8012094 <prvCheckForValidListAndQueue+0x64>)
 8012044:	f7fd f8cc 	bl	800f1e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012048:	4813      	ldr	r0, [pc, #76]	@ (8012098 <prvCheckForValidListAndQueue+0x68>)
 801204a:	f7fd f8c9 	bl	800f1e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801204e:	4b13      	ldr	r3, [pc, #76]	@ (801209c <prvCheckForValidListAndQueue+0x6c>)
 8012050:	4a10      	ldr	r2, [pc, #64]	@ (8012094 <prvCheckForValidListAndQueue+0x64>)
 8012052:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012054:	4b12      	ldr	r3, [pc, #72]	@ (80120a0 <prvCheckForValidListAndQueue+0x70>)
 8012056:	4a10      	ldr	r2, [pc, #64]	@ (8012098 <prvCheckForValidListAndQueue+0x68>)
 8012058:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801205a:	2300      	movs	r3, #0
 801205c:	9300      	str	r3, [sp, #0]
 801205e:	4b11      	ldr	r3, [pc, #68]	@ (80120a4 <prvCheckForValidListAndQueue+0x74>)
 8012060:	4a11      	ldr	r2, [pc, #68]	@ (80120a8 <prvCheckForValidListAndQueue+0x78>)
 8012062:	2110      	movs	r1, #16
 8012064:	200a      	movs	r0, #10
 8012066:	f7fd f9d9 	bl	800f41c <xQueueGenericCreateStatic>
 801206a:	4603      	mov	r3, r0
 801206c:	4a08      	ldr	r2, [pc, #32]	@ (8012090 <prvCheckForValidListAndQueue+0x60>)
 801206e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012070:	4b07      	ldr	r3, [pc, #28]	@ (8012090 <prvCheckForValidListAndQueue+0x60>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d005      	beq.n	8012084 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012078:	4b05      	ldr	r3, [pc, #20]	@ (8012090 <prvCheckForValidListAndQueue+0x60>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	490b      	ldr	r1, [pc, #44]	@ (80120ac <prvCheckForValidListAndQueue+0x7c>)
 801207e:	4618      	mov	r0, r3
 8012080:	f7fe f9be 	bl	8010400 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012084:	f000 f9e2 	bl	801244c <vPortExitCritical>
}
 8012088:	bf00      	nop
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	20001728 	.word	0x20001728
 8012094:	200016f8 	.word	0x200016f8
 8012098:	2000170c 	.word	0x2000170c
 801209c:	20001720 	.word	0x20001720
 80120a0:	20001724 	.word	0x20001724
 80120a4:	200017d4 	.word	0x200017d4
 80120a8:	20001734 	.word	0x20001734
 80120ac:	080181ac 	.word	0x080181ac

080120b0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b086      	sub	sp, #24
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d10b      	bne.n	80120da <xTimerIsTimerActive+0x2a>
	__asm volatile
 80120c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120c6:	f383 8811 	msr	BASEPRI, r3
 80120ca:	f3bf 8f6f 	isb	sy
 80120ce:	f3bf 8f4f 	dsb	sy
 80120d2:	60fb      	str	r3, [r7, #12]
}
 80120d4:	bf00      	nop
 80120d6:	bf00      	nop
 80120d8:	e7fd      	b.n	80120d6 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80120da:	f000 f985 	bl	80123e8 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80120e4:	f003 0301 	and.w	r3, r3, #1
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d102      	bne.n	80120f2 <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 80120ec:	2300      	movs	r3, #0
 80120ee:	617b      	str	r3, [r7, #20]
 80120f0:	e001      	b.n	80120f6 <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 80120f2:	2301      	movs	r3, #1
 80120f4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80120f6:	f000 f9a9 	bl	801244c <vPortExitCritical>

	return xReturn;
 80120fa:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80120fc:	4618      	mov	r0, r3
 80120fe:	3718      	adds	r7, #24
 8012100:	46bd      	mov	sp, r7
 8012102:	bd80      	pop	{r7, pc}

08012104 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b086      	sub	sp, #24
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d10b      	bne.n	801212e <pvTimerGetTimerID+0x2a>
	__asm volatile
 8012116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801211a:	f383 8811 	msr	BASEPRI, r3
 801211e:	f3bf 8f6f 	isb	sy
 8012122:	f3bf 8f4f 	dsb	sy
 8012126:	60fb      	str	r3, [r7, #12]
}
 8012128:	bf00      	nop
 801212a:	bf00      	nop
 801212c:	e7fd      	b.n	801212a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 801212e:	f000 f95b 	bl	80123e8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	69db      	ldr	r3, [r3, #28]
 8012136:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8012138:	f000 f988 	bl	801244c <vPortExitCritical>

	return pvReturn;
 801213c:	693b      	ldr	r3, [r7, #16]
}
 801213e:	4618      	mov	r0, r3
 8012140:	3718      	adds	r7, #24
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
	...

08012148 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012148:	b580      	push	{r7, lr}
 801214a:	b08a      	sub	sp, #40	@ 0x28
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012156:	f06f 0301 	mvn.w	r3, #1
 801215a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012168:	4b06      	ldr	r3, [pc, #24]	@ (8012184 <xTimerPendFunctionCallFromISR+0x3c>)
 801216a:	6818      	ldr	r0, [r3, #0]
 801216c:	f107 0114 	add.w	r1, r7, #20
 8012170:	2300      	movs	r3, #0
 8012172:	683a      	ldr	r2, [r7, #0]
 8012174:	f7fd fc56 	bl	800fa24 <xQueueGenericSendFromISR>
 8012178:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 801217c:	4618      	mov	r0, r3
 801217e:	3728      	adds	r7, #40	@ 0x28
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	20001728 	.word	0x20001728

08012188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012188:	b480      	push	{r7}
 801218a:	b085      	sub	sp, #20
 801218c:	af00      	add	r7, sp, #0
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	60b9      	str	r1, [r7, #8]
 8012192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	3b04      	subs	r3, #4
 8012198:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80121a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	3b04      	subs	r3, #4
 80121a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80121a8:	68bb      	ldr	r3, [r7, #8]
 80121aa:	f023 0201 	bic.w	r2, r3, #1
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	3b04      	subs	r3, #4
 80121b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80121b8:	4a0c      	ldr	r2, [pc, #48]	@ (80121ec <pxPortInitialiseStack+0x64>)
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	3b14      	subs	r3, #20
 80121c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	3b04      	subs	r3, #4
 80121ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	f06f 0202 	mvn.w	r2, #2
 80121d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	3b20      	subs	r3, #32
 80121dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80121de:	68fb      	ldr	r3, [r7, #12]
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3714      	adds	r7, #20
 80121e4:	46bd      	mov	sp, r7
 80121e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ea:	4770      	bx	lr
 80121ec:	080121f1 	.word	0x080121f1

080121f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80121f0:	b480      	push	{r7}
 80121f2:	b085      	sub	sp, #20
 80121f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80121f6:	2300      	movs	r3, #0
 80121f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80121fa:	4b13      	ldr	r3, [pc, #76]	@ (8012248 <prvTaskExitError+0x58>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012202:	d00b      	beq.n	801221c <prvTaskExitError+0x2c>
	__asm volatile
 8012204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012208:	f383 8811 	msr	BASEPRI, r3
 801220c:	f3bf 8f6f 	isb	sy
 8012210:	f3bf 8f4f 	dsb	sy
 8012214:	60fb      	str	r3, [r7, #12]
}
 8012216:	bf00      	nop
 8012218:	bf00      	nop
 801221a:	e7fd      	b.n	8012218 <prvTaskExitError+0x28>
	__asm volatile
 801221c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012220:	f383 8811 	msr	BASEPRI, r3
 8012224:	f3bf 8f6f 	isb	sy
 8012228:	f3bf 8f4f 	dsb	sy
 801222c:	60bb      	str	r3, [r7, #8]
}
 801222e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012230:	bf00      	nop
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d0fc      	beq.n	8012232 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012238:	bf00      	nop
 801223a:	bf00      	nop
 801223c:	3714      	adds	r7, #20
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr
 8012246:	bf00      	nop
 8012248:	20000058 	.word	0x20000058
 801224c:	00000000 	.word	0x00000000

08012250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012250:	4b07      	ldr	r3, [pc, #28]	@ (8012270 <pxCurrentTCBConst2>)
 8012252:	6819      	ldr	r1, [r3, #0]
 8012254:	6808      	ldr	r0, [r1, #0]
 8012256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801225a:	f380 8809 	msr	PSP, r0
 801225e:	f3bf 8f6f 	isb	sy
 8012262:	f04f 0000 	mov.w	r0, #0
 8012266:	f380 8811 	msr	BASEPRI, r0
 801226a:	4770      	bx	lr
 801226c:	f3af 8000 	nop.w

08012270 <pxCurrentTCBConst2>:
 8012270:	200011f8 	.word	0x200011f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012274:	bf00      	nop
 8012276:	bf00      	nop

08012278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012278:	4808      	ldr	r0, [pc, #32]	@ (801229c <prvPortStartFirstTask+0x24>)
 801227a:	6800      	ldr	r0, [r0, #0]
 801227c:	6800      	ldr	r0, [r0, #0]
 801227e:	f380 8808 	msr	MSP, r0
 8012282:	f04f 0000 	mov.w	r0, #0
 8012286:	f380 8814 	msr	CONTROL, r0
 801228a:	b662      	cpsie	i
 801228c:	b661      	cpsie	f
 801228e:	f3bf 8f4f 	dsb	sy
 8012292:	f3bf 8f6f 	isb	sy
 8012296:	df00      	svc	0
 8012298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801229a:	bf00      	nop
 801229c:	e000ed08 	.word	0xe000ed08

080122a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b086      	sub	sp, #24
 80122a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80122a6:	4b47      	ldr	r3, [pc, #284]	@ (80123c4 <xPortStartScheduler+0x124>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	4a47      	ldr	r2, [pc, #284]	@ (80123c8 <xPortStartScheduler+0x128>)
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d10b      	bne.n	80122c8 <xPortStartScheduler+0x28>
	__asm volatile
 80122b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122b4:	f383 8811 	msr	BASEPRI, r3
 80122b8:	f3bf 8f6f 	isb	sy
 80122bc:	f3bf 8f4f 	dsb	sy
 80122c0:	60fb      	str	r3, [r7, #12]
}
 80122c2:	bf00      	nop
 80122c4:	bf00      	nop
 80122c6:	e7fd      	b.n	80122c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80122c8:	4b3e      	ldr	r3, [pc, #248]	@ (80123c4 <xPortStartScheduler+0x124>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	4a3f      	ldr	r2, [pc, #252]	@ (80123cc <xPortStartScheduler+0x12c>)
 80122ce:	4293      	cmp	r3, r2
 80122d0:	d10b      	bne.n	80122ea <xPortStartScheduler+0x4a>
	__asm volatile
 80122d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122d6:	f383 8811 	msr	BASEPRI, r3
 80122da:	f3bf 8f6f 	isb	sy
 80122de:	f3bf 8f4f 	dsb	sy
 80122e2:	613b      	str	r3, [r7, #16]
}
 80122e4:	bf00      	nop
 80122e6:	bf00      	nop
 80122e8:	e7fd      	b.n	80122e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80122ea:	4b39      	ldr	r3, [pc, #228]	@ (80123d0 <xPortStartScheduler+0x130>)
 80122ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	22ff      	movs	r2, #255	@ 0xff
 80122fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	b2db      	uxtb	r3, r3
 8012302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012304:	78fb      	ldrb	r3, [r7, #3]
 8012306:	b2db      	uxtb	r3, r3
 8012308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801230c:	b2da      	uxtb	r2, r3
 801230e:	4b31      	ldr	r3, [pc, #196]	@ (80123d4 <xPortStartScheduler+0x134>)
 8012310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012312:	4b31      	ldr	r3, [pc, #196]	@ (80123d8 <xPortStartScheduler+0x138>)
 8012314:	2207      	movs	r2, #7
 8012316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012318:	e009      	b.n	801232e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801231a:	4b2f      	ldr	r3, [pc, #188]	@ (80123d8 <xPortStartScheduler+0x138>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	3b01      	subs	r3, #1
 8012320:	4a2d      	ldr	r2, [pc, #180]	@ (80123d8 <xPortStartScheduler+0x138>)
 8012322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012324:	78fb      	ldrb	r3, [r7, #3]
 8012326:	b2db      	uxtb	r3, r3
 8012328:	005b      	lsls	r3, r3, #1
 801232a:	b2db      	uxtb	r3, r3
 801232c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801232e:	78fb      	ldrb	r3, [r7, #3]
 8012330:	b2db      	uxtb	r3, r3
 8012332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012336:	2b80      	cmp	r3, #128	@ 0x80
 8012338:	d0ef      	beq.n	801231a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801233a:	4b27      	ldr	r3, [pc, #156]	@ (80123d8 <xPortStartScheduler+0x138>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	f1c3 0307 	rsb	r3, r3, #7
 8012342:	2b04      	cmp	r3, #4
 8012344:	d00b      	beq.n	801235e <xPortStartScheduler+0xbe>
	__asm volatile
 8012346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801234a:	f383 8811 	msr	BASEPRI, r3
 801234e:	f3bf 8f6f 	isb	sy
 8012352:	f3bf 8f4f 	dsb	sy
 8012356:	60bb      	str	r3, [r7, #8]
}
 8012358:	bf00      	nop
 801235a:	bf00      	nop
 801235c:	e7fd      	b.n	801235a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801235e:	4b1e      	ldr	r3, [pc, #120]	@ (80123d8 <xPortStartScheduler+0x138>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	021b      	lsls	r3, r3, #8
 8012364:	4a1c      	ldr	r2, [pc, #112]	@ (80123d8 <xPortStartScheduler+0x138>)
 8012366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012368:	4b1b      	ldr	r3, [pc, #108]	@ (80123d8 <xPortStartScheduler+0x138>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012370:	4a19      	ldr	r2, [pc, #100]	@ (80123d8 <xPortStartScheduler+0x138>)
 8012372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	b2da      	uxtb	r2, r3
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801237c:	4b17      	ldr	r3, [pc, #92]	@ (80123dc <xPortStartScheduler+0x13c>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4a16      	ldr	r2, [pc, #88]	@ (80123dc <xPortStartScheduler+0x13c>)
 8012382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012388:	4b14      	ldr	r3, [pc, #80]	@ (80123dc <xPortStartScheduler+0x13c>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	4a13      	ldr	r2, [pc, #76]	@ (80123dc <xPortStartScheduler+0x13c>)
 801238e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012394:	f000 f8da 	bl	801254c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012398:	4b11      	ldr	r3, [pc, #68]	@ (80123e0 <xPortStartScheduler+0x140>)
 801239a:	2200      	movs	r2, #0
 801239c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801239e:	f000 f8f9 	bl	8012594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80123a2:	4b10      	ldr	r3, [pc, #64]	@ (80123e4 <xPortStartScheduler+0x144>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	4a0f      	ldr	r2, [pc, #60]	@ (80123e4 <xPortStartScheduler+0x144>)
 80123a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80123ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80123ae:	f7ff ff63 	bl	8012278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80123b2:	f7fe fc67 	bl	8010c84 <vTaskSwitchContext>
	prvTaskExitError();
 80123b6:	f7ff ff1b 	bl	80121f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80123ba:	2300      	movs	r3, #0
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3718      	adds	r7, #24
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}
 80123c4:	e000ed00 	.word	0xe000ed00
 80123c8:	410fc271 	.word	0x410fc271
 80123cc:	410fc270 	.word	0x410fc270
 80123d0:	e000e400 	.word	0xe000e400
 80123d4:	20001824 	.word	0x20001824
 80123d8:	20001828 	.word	0x20001828
 80123dc:	e000ed20 	.word	0xe000ed20
 80123e0:	20000058 	.word	0x20000058
 80123e4:	e000ef34 	.word	0xe000ef34

080123e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80123e8:	b480      	push	{r7}
 80123ea:	b083      	sub	sp, #12
 80123ec:	af00      	add	r7, sp, #0
	__asm volatile
 80123ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123f2:	f383 8811 	msr	BASEPRI, r3
 80123f6:	f3bf 8f6f 	isb	sy
 80123fa:	f3bf 8f4f 	dsb	sy
 80123fe:	607b      	str	r3, [r7, #4]
}
 8012400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012402:	4b10      	ldr	r3, [pc, #64]	@ (8012444 <vPortEnterCritical+0x5c>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	3301      	adds	r3, #1
 8012408:	4a0e      	ldr	r2, [pc, #56]	@ (8012444 <vPortEnterCritical+0x5c>)
 801240a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801240c:	4b0d      	ldr	r3, [pc, #52]	@ (8012444 <vPortEnterCritical+0x5c>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2b01      	cmp	r3, #1
 8012412:	d110      	bne.n	8012436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012414:	4b0c      	ldr	r3, [pc, #48]	@ (8012448 <vPortEnterCritical+0x60>)
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	b2db      	uxtb	r3, r3
 801241a:	2b00      	cmp	r3, #0
 801241c:	d00b      	beq.n	8012436 <vPortEnterCritical+0x4e>
	__asm volatile
 801241e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012422:	f383 8811 	msr	BASEPRI, r3
 8012426:	f3bf 8f6f 	isb	sy
 801242a:	f3bf 8f4f 	dsb	sy
 801242e:	603b      	str	r3, [r7, #0]
}
 8012430:	bf00      	nop
 8012432:	bf00      	nop
 8012434:	e7fd      	b.n	8012432 <vPortEnterCritical+0x4a>
	}
}
 8012436:	bf00      	nop
 8012438:	370c      	adds	r7, #12
 801243a:	46bd      	mov	sp, r7
 801243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012440:	4770      	bx	lr
 8012442:	bf00      	nop
 8012444:	20000058 	.word	0x20000058
 8012448:	e000ed04 	.word	0xe000ed04

0801244c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801244c:	b480      	push	{r7}
 801244e:	b083      	sub	sp, #12
 8012450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012452:	4b12      	ldr	r3, [pc, #72]	@ (801249c <vPortExitCritical+0x50>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d10b      	bne.n	8012472 <vPortExitCritical+0x26>
	__asm volatile
 801245a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801245e:	f383 8811 	msr	BASEPRI, r3
 8012462:	f3bf 8f6f 	isb	sy
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	607b      	str	r3, [r7, #4]
}
 801246c:	bf00      	nop
 801246e:	bf00      	nop
 8012470:	e7fd      	b.n	801246e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012472:	4b0a      	ldr	r3, [pc, #40]	@ (801249c <vPortExitCritical+0x50>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	3b01      	subs	r3, #1
 8012478:	4a08      	ldr	r2, [pc, #32]	@ (801249c <vPortExitCritical+0x50>)
 801247a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801247c:	4b07      	ldr	r3, [pc, #28]	@ (801249c <vPortExitCritical+0x50>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d105      	bne.n	8012490 <vPortExitCritical+0x44>
 8012484:	2300      	movs	r3, #0
 8012486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	f383 8811 	msr	BASEPRI, r3
}
 801248e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012490:	bf00      	nop
 8012492:	370c      	adds	r7, #12
 8012494:	46bd      	mov	sp, r7
 8012496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249a:	4770      	bx	lr
 801249c:	20000058 	.word	0x20000058

080124a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80124a0:	f3ef 8009 	mrs	r0, PSP
 80124a4:	f3bf 8f6f 	isb	sy
 80124a8:	4b15      	ldr	r3, [pc, #84]	@ (8012500 <pxCurrentTCBConst>)
 80124aa:	681a      	ldr	r2, [r3, #0]
 80124ac:	f01e 0f10 	tst.w	lr, #16
 80124b0:	bf08      	it	eq
 80124b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80124b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ba:	6010      	str	r0, [r2, #0]
 80124bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80124c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80124c4:	f380 8811 	msr	BASEPRI, r0
 80124c8:	f3bf 8f4f 	dsb	sy
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f7fe fbd8 	bl	8010c84 <vTaskSwitchContext>
 80124d4:	f04f 0000 	mov.w	r0, #0
 80124d8:	f380 8811 	msr	BASEPRI, r0
 80124dc:	bc09      	pop	{r0, r3}
 80124de:	6819      	ldr	r1, [r3, #0]
 80124e0:	6808      	ldr	r0, [r1, #0]
 80124e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e6:	f01e 0f10 	tst.w	lr, #16
 80124ea:	bf08      	it	eq
 80124ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80124f0:	f380 8809 	msr	PSP, r0
 80124f4:	f3bf 8f6f 	isb	sy
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop
 80124fc:	f3af 8000 	nop.w

08012500 <pxCurrentTCBConst>:
 8012500:	200011f8 	.word	0x200011f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012504:	bf00      	nop
 8012506:	bf00      	nop

08012508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
	__asm volatile
 801250e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012512:	f383 8811 	msr	BASEPRI, r3
 8012516:	f3bf 8f6f 	isb	sy
 801251a:	f3bf 8f4f 	dsb	sy
 801251e:	607b      	str	r3, [r7, #4]
}
 8012520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012522:	f7fe faf5 	bl	8010b10 <xTaskIncrementTick>
 8012526:	4603      	mov	r3, r0
 8012528:	2b00      	cmp	r3, #0
 801252a:	d003      	beq.n	8012534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801252c:	4b06      	ldr	r3, [pc, #24]	@ (8012548 <xPortSysTickHandler+0x40>)
 801252e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012532:	601a      	str	r2, [r3, #0]
 8012534:	2300      	movs	r3, #0
 8012536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	f383 8811 	msr	BASEPRI, r3
}
 801253e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012540:	bf00      	nop
 8012542:	3708      	adds	r7, #8
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	e000ed04 	.word	0xe000ed04

0801254c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801254c:	b480      	push	{r7}
 801254e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012550:	4b0b      	ldr	r3, [pc, #44]	@ (8012580 <vPortSetupTimerInterrupt+0x34>)
 8012552:	2200      	movs	r2, #0
 8012554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012556:	4b0b      	ldr	r3, [pc, #44]	@ (8012584 <vPortSetupTimerInterrupt+0x38>)
 8012558:	2200      	movs	r2, #0
 801255a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801255c:	4b0a      	ldr	r3, [pc, #40]	@ (8012588 <vPortSetupTimerInterrupt+0x3c>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	4a0a      	ldr	r2, [pc, #40]	@ (801258c <vPortSetupTimerInterrupt+0x40>)
 8012562:	fba2 2303 	umull	r2, r3, r2, r3
 8012566:	099b      	lsrs	r3, r3, #6
 8012568:	4a09      	ldr	r2, [pc, #36]	@ (8012590 <vPortSetupTimerInterrupt+0x44>)
 801256a:	3b01      	subs	r3, #1
 801256c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801256e:	4b04      	ldr	r3, [pc, #16]	@ (8012580 <vPortSetupTimerInterrupt+0x34>)
 8012570:	2207      	movs	r2, #7
 8012572:	601a      	str	r2, [r3, #0]
}
 8012574:	bf00      	nop
 8012576:	46bd      	mov	sp, r7
 8012578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257c:	4770      	bx	lr
 801257e:	bf00      	nop
 8012580:	e000e010 	.word	0xe000e010
 8012584:	e000e018 	.word	0xe000e018
 8012588:	20000014 	.word	0x20000014
 801258c:	10624dd3 	.word	0x10624dd3
 8012590:	e000e014 	.word	0xe000e014

08012594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80125a4 <vPortEnableVFP+0x10>
 8012598:	6801      	ldr	r1, [r0, #0]
 801259a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801259e:	6001      	str	r1, [r0, #0]
 80125a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80125a2:	bf00      	nop
 80125a4:	e000ed88 	.word	0xe000ed88

080125a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80125a8:	b480      	push	{r7}
 80125aa:	b085      	sub	sp, #20
 80125ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80125ae:	f3ef 8305 	mrs	r3, IPSR
 80125b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2b0f      	cmp	r3, #15
 80125b8:	d915      	bls.n	80125e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80125ba:	4a18      	ldr	r2, [pc, #96]	@ (801261c <vPortValidateInterruptPriority+0x74>)
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	4413      	add	r3, r2
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80125c4:	4b16      	ldr	r3, [pc, #88]	@ (8012620 <vPortValidateInterruptPriority+0x78>)
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	7afa      	ldrb	r2, [r7, #11]
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d20b      	bcs.n	80125e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80125ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125d2:	f383 8811 	msr	BASEPRI, r3
 80125d6:	f3bf 8f6f 	isb	sy
 80125da:	f3bf 8f4f 	dsb	sy
 80125de:	607b      	str	r3, [r7, #4]
}
 80125e0:	bf00      	nop
 80125e2:	bf00      	nop
 80125e4:	e7fd      	b.n	80125e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80125e6:	4b0f      	ldr	r3, [pc, #60]	@ (8012624 <vPortValidateInterruptPriority+0x7c>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80125ee:	4b0e      	ldr	r3, [pc, #56]	@ (8012628 <vPortValidateInterruptPriority+0x80>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d90b      	bls.n	801260e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80125f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125fa:	f383 8811 	msr	BASEPRI, r3
 80125fe:	f3bf 8f6f 	isb	sy
 8012602:	f3bf 8f4f 	dsb	sy
 8012606:	603b      	str	r3, [r7, #0]
}
 8012608:	bf00      	nop
 801260a:	bf00      	nop
 801260c:	e7fd      	b.n	801260a <vPortValidateInterruptPriority+0x62>
	}
 801260e:	bf00      	nop
 8012610:	3714      	adds	r7, #20
 8012612:	46bd      	mov	sp, r7
 8012614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012618:	4770      	bx	lr
 801261a:	bf00      	nop
 801261c:	e000e3f0 	.word	0xe000e3f0
 8012620:	20001824 	.word	0x20001824
 8012624:	e000ed0c 	.word	0xe000ed0c
 8012628:	20001828 	.word	0x20001828

0801262c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b08a      	sub	sp, #40	@ 0x28
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012634:	2300      	movs	r3, #0
 8012636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012638:	f7fe f9ae 	bl	8010998 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801263c:	4b5c      	ldr	r3, [pc, #368]	@ (80127b0 <pvPortMalloc+0x184>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d101      	bne.n	8012648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012644:	f000 f924 	bl	8012890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012648:	4b5a      	ldr	r3, [pc, #360]	@ (80127b4 <pvPortMalloc+0x188>)
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	4013      	ands	r3, r2
 8012650:	2b00      	cmp	r3, #0
 8012652:	f040 8095 	bne.w	8012780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d01e      	beq.n	801269a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801265c:	2208      	movs	r2, #8
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	4413      	add	r3, r2
 8012662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	f003 0307 	and.w	r3, r3, #7
 801266a:	2b00      	cmp	r3, #0
 801266c:	d015      	beq.n	801269a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f023 0307 	bic.w	r3, r3, #7
 8012674:	3308      	adds	r3, #8
 8012676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f003 0307 	and.w	r3, r3, #7
 801267e:	2b00      	cmp	r3, #0
 8012680:	d00b      	beq.n	801269a <pvPortMalloc+0x6e>
	__asm volatile
 8012682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012686:	f383 8811 	msr	BASEPRI, r3
 801268a:	f3bf 8f6f 	isb	sy
 801268e:	f3bf 8f4f 	dsb	sy
 8012692:	617b      	str	r3, [r7, #20]
}
 8012694:	bf00      	nop
 8012696:	bf00      	nop
 8012698:	e7fd      	b.n	8012696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d06f      	beq.n	8012780 <pvPortMalloc+0x154>
 80126a0:	4b45      	ldr	r3, [pc, #276]	@ (80127b8 <pvPortMalloc+0x18c>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d86a      	bhi.n	8012780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80126aa:	4b44      	ldr	r3, [pc, #272]	@ (80127bc <pvPortMalloc+0x190>)
 80126ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80126ae:	4b43      	ldr	r3, [pc, #268]	@ (80127bc <pvPortMalloc+0x190>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126b4:	e004      	b.n	80126c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80126b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80126ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80126c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d903      	bls.n	80126d2 <pvPortMalloc+0xa6>
 80126ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d1f1      	bne.n	80126b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80126d2:	4b37      	ldr	r3, [pc, #220]	@ (80127b0 <pvPortMalloc+0x184>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126d8:	429a      	cmp	r2, r3
 80126da:	d051      	beq.n	8012780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80126dc:	6a3b      	ldr	r3, [r7, #32]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2208      	movs	r2, #8
 80126e2:	4413      	add	r3, r2
 80126e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80126e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	6a3b      	ldr	r3, [r7, #32]
 80126ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80126ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f0:	685a      	ldr	r2, [r3, #4]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	1ad2      	subs	r2, r2, r3
 80126f6:	2308      	movs	r3, #8
 80126f8:	005b      	lsls	r3, r3, #1
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d920      	bls.n	8012740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80126fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	4413      	add	r3, r2
 8012704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	f003 0307 	and.w	r3, r3, #7
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00b      	beq.n	8012728 <pvPortMalloc+0xfc>
	__asm volatile
 8012710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012714:	f383 8811 	msr	BASEPRI, r3
 8012718:	f3bf 8f6f 	isb	sy
 801271c:	f3bf 8f4f 	dsb	sy
 8012720:	613b      	str	r3, [r7, #16]
}
 8012722:	bf00      	nop
 8012724:	bf00      	nop
 8012726:	e7fd      	b.n	8012724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801272a:	685a      	ldr	r2, [r3, #4]
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	1ad2      	subs	r2, r2, r3
 8012730:	69bb      	ldr	r3, [r7, #24]
 8012732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801273a:	69b8      	ldr	r0, [r7, #24]
 801273c:	f000 f90a 	bl	8012954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012740:	4b1d      	ldr	r3, [pc, #116]	@ (80127b8 <pvPortMalloc+0x18c>)
 8012742:	681a      	ldr	r2, [r3, #0]
 8012744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	1ad3      	subs	r3, r2, r3
 801274a:	4a1b      	ldr	r2, [pc, #108]	@ (80127b8 <pvPortMalloc+0x18c>)
 801274c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801274e:	4b1a      	ldr	r3, [pc, #104]	@ (80127b8 <pvPortMalloc+0x18c>)
 8012750:	681a      	ldr	r2, [r3, #0]
 8012752:	4b1b      	ldr	r3, [pc, #108]	@ (80127c0 <pvPortMalloc+0x194>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	429a      	cmp	r2, r3
 8012758:	d203      	bcs.n	8012762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801275a:	4b17      	ldr	r3, [pc, #92]	@ (80127b8 <pvPortMalloc+0x18c>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4a18      	ldr	r2, [pc, #96]	@ (80127c0 <pvPortMalloc+0x194>)
 8012760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012764:	685a      	ldr	r2, [r3, #4]
 8012766:	4b13      	ldr	r3, [pc, #76]	@ (80127b4 <pvPortMalloc+0x188>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	431a      	orrs	r2, r3
 801276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012772:	2200      	movs	r2, #0
 8012774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012776:	4b13      	ldr	r3, [pc, #76]	@ (80127c4 <pvPortMalloc+0x198>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	3301      	adds	r3, #1
 801277c:	4a11      	ldr	r2, [pc, #68]	@ (80127c4 <pvPortMalloc+0x198>)
 801277e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012780:	f7fe f918 	bl	80109b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	f003 0307 	and.w	r3, r3, #7
 801278a:	2b00      	cmp	r3, #0
 801278c:	d00b      	beq.n	80127a6 <pvPortMalloc+0x17a>
	__asm volatile
 801278e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012792:	f383 8811 	msr	BASEPRI, r3
 8012796:	f3bf 8f6f 	isb	sy
 801279a:	f3bf 8f4f 	dsb	sy
 801279e:	60fb      	str	r3, [r7, #12]
}
 80127a0:	bf00      	nop
 80127a2:	bf00      	nop
 80127a4:	e7fd      	b.n	80127a2 <pvPortMalloc+0x176>
	return pvReturn;
 80127a6:	69fb      	ldr	r3, [r7, #28]
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3728      	adds	r7, #40	@ 0x28
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	20006654 	.word	0x20006654
 80127b4:	20006668 	.word	0x20006668
 80127b8:	20006658 	.word	0x20006658
 80127bc:	2000664c 	.word	0x2000664c
 80127c0:	2000665c 	.word	0x2000665c
 80127c4:	20006660 	.word	0x20006660

080127c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b086      	sub	sp, #24
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d04f      	beq.n	801287a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80127da:	2308      	movs	r3, #8
 80127dc:	425b      	negs	r3, r3
 80127de:	697a      	ldr	r2, [r7, #20]
 80127e0:	4413      	add	r3, r2
 80127e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	685a      	ldr	r2, [r3, #4]
 80127ec:	4b25      	ldr	r3, [pc, #148]	@ (8012884 <vPortFree+0xbc>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4013      	ands	r3, r2
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d10b      	bne.n	801280e <vPortFree+0x46>
	__asm volatile
 80127f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127fa:	f383 8811 	msr	BASEPRI, r3
 80127fe:	f3bf 8f6f 	isb	sy
 8012802:	f3bf 8f4f 	dsb	sy
 8012806:	60fb      	str	r3, [r7, #12]
}
 8012808:	bf00      	nop
 801280a:	bf00      	nop
 801280c:	e7fd      	b.n	801280a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801280e:	693b      	ldr	r3, [r7, #16]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d00b      	beq.n	801282e <vPortFree+0x66>
	__asm volatile
 8012816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801281a:	f383 8811 	msr	BASEPRI, r3
 801281e:	f3bf 8f6f 	isb	sy
 8012822:	f3bf 8f4f 	dsb	sy
 8012826:	60bb      	str	r3, [r7, #8]
}
 8012828:	bf00      	nop
 801282a:	bf00      	nop
 801282c:	e7fd      	b.n	801282a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	685a      	ldr	r2, [r3, #4]
 8012832:	4b14      	ldr	r3, [pc, #80]	@ (8012884 <vPortFree+0xbc>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4013      	ands	r3, r2
 8012838:	2b00      	cmp	r3, #0
 801283a:	d01e      	beq.n	801287a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d11a      	bne.n	801287a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	685a      	ldr	r2, [r3, #4]
 8012848:	4b0e      	ldr	r3, [pc, #56]	@ (8012884 <vPortFree+0xbc>)
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	43db      	mvns	r3, r3
 801284e:	401a      	ands	r2, r3
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012854:	f7fe f8a0 	bl	8010998 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	685a      	ldr	r2, [r3, #4]
 801285c:	4b0a      	ldr	r3, [pc, #40]	@ (8012888 <vPortFree+0xc0>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4413      	add	r3, r2
 8012862:	4a09      	ldr	r2, [pc, #36]	@ (8012888 <vPortFree+0xc0>)
 8012864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012866:	6938      	ldr	r0, [r7, #16]
 8012868:	f000 f874 	bl	8012954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801286c:	4b07      	ldr	r3, [pc, #28]	@ (801288c <vPortFree+0xc4>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	3301      	adds	r3, #1
 8012872:	4a06      	ldr	r2, [pc, #24]	@ (801288c <vPortFree+0xc4>)
 8012874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012876:	f7fe f89d 	bl	80109b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801287a:	bf00      	nop
 801287c:	3718      	adds	r7, #24
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	20006668 	.word	0x20006668
 8012888:	20006658 	.word	0x20006658
 801288c:	20006664 	.word	0x20006664

08012890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012890:	b480      	push	{r7}
 8012892:	b085      	sub	sp, #20
 8012894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012896:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801289a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801289c:	4b27      	ldr	r3, [pc, #156]	@ (801293c <prvHeapInit+0xac>)
 801289e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	f003 0307 	and.w	r3, r3, #7
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d00c      	beq.n	80128c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	3307      	adds	r3, #7
 80128ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	f023 0307 	bic.w	r3, r3, #7
 80128b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80128b8:	68ba      	ldr	r2, [r7, #8]
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	1ad3      	subs	r3, r2, r3
 80128be:	4a1f      	ldr	r2, [pc, #124]	@ (801293c <prvHeapInit+0xac>)
 80128c0:	4413      	add	r3, r2
 80128c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80128c8:	4a1d      	ldr	r2, [pc, #116]	@ (8012940 <prvHeapInit+0xb0>)
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80128ce:	4b1c      	ldr	r3, [pc, #112]	@ (8012940 <prvHeapInit+0xb0>)
 80128d0:	2200      	movs	r2, #0
 80128d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	68ba      	ldr	r2, [r7, #8]
 80128d8:	4413      	add	r3, r2
 80128da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80128dc:	2208      	movs	r2, #8
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	1a9b      	subs	r3, r3, r2
 80128e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	f023 0307 	bic.w	r3, r3, #7
 80128ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	4a15      	ldr	r2, [pc, #84]	@ (8012944 <prvHeapInit+0xb4>)
 80128f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80128f2:	4b14      	ldr	r3, [pc, #80]	@ (8012944 <prvHeapInit+0xb4>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	2200      	movs	r2, #0
 80128f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80128fa:	4b12      	ldr	r3, [pc, #72]	@ (8012944 <prvHeapInit+0xb4>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	2200      	movs	r2, #0
 8012900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	68fa      	ldr	r2, [r7, #12]
 801290a:	1ad2      	subs	r2, r2, r3
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012910:	4b0c      	ldr	r3, [pc, #48]	@ (8012944 <prvHeapInit+0xb4>)
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	4a0a      	ldr	r2, [pc, #40]	@ (8012948 <prvHeapInit+0xb8>)
 801291e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	4a09      	ldr	r2, [pc, #36]	@ (801294c <prvHeapInit+0xbc>)
 8012926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012928:	4b09      	ldr	r3, [pc, #36]	@ (8012950 <prvHeapInit+0xc0>)
 801292a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801292e:	601a      	str	r2, [r3, #0]
}
 8012930:	bf00      	nop
 8012932:	3714      	adds	r7, #20
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr
 801293c:	2000182c 	.word	0x2000182c
 8012940:	2000664c 	.word	0x2000664c
 8012944:	20006654 	.word	0x20006654
 8012948:	2000665c 	.word	0x2000665c
 801294c:	20006658 	.word	0x20006658
 8012950:	20006668 	.word	0x20006668

08012954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012954:	b480      	push	{r7}
 8012956:	b085      	sub	sp, #20
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801295c:	4b28      	ldr	r3, [pc, #160]	@ (8012a00 <prvInsertBlockIntoFreeList+0xac>)
 801295e:	60fb      	str	r3, [r7, #12]
 8012960:	e002      	b.n	8012968 <prvInsertBlockIntoFreeList+0x14>
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	60fb      	str	r3, [r7, #12]
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	687a      	ldr	r2, [r7, #4]
 801296e:	429a      	cmp	r2, r3
 8012970:	d8f7      	bhi.n	8012962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	68ba      	ldr	r2, [r7, #8]
 801297c:	4413      	add	r3, r2
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	429a      	cmp	r2, r3
 8012982:	d108      	bne.n	8012996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	685a      	ldr	r2, [r3, #4]
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	441a      	add	r2, r3
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	68ba      	ldr	r2, [r7, #8]
 80129a0:	441a      	add	r2, r3
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d118      	bne.n	80129dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	4b15      	ldr	r3, [pc, #84]	@ (8012a04 <prvInsertBlockIntoFreeList+0xb0>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d00d      	beq.n	80129d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	685a      	ldr	r2, [r3, #4]
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	441a      	add	r2, r3
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	681a      	ldr	r2, [r3, #0]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	601a      	str	r2, [r3, #0]
 80129d0:	e008      	b.n	80129e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80129d2:	4b0c      	ldr	r3, [pc, #48]	@ (8012a04 <prvInsertBlockIntoFreeList+0xb0>)
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	601a      	str	r2, [r3, #0]
 80129da:	e003      	b.n	80129e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	681a      	ldr	r2, [r3, #0]
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80129e4:	68fa      	ldr	r2, [r7, #12]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d002      	beq.n	80129f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80129f2:	bf00      	nop
 80129f4:	3714      	adds	r7, #20
 80129f6:	46bd      	mov	sp, r7
 80129f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fc:	4770      	bx	lr
 80129fe:	bf00      	nop
 8012a00:	2000664c 	.word	0x2000664c
 8012a04:	20006654 	.word	0x20006654

08012a08 <atof>:
 8012a08:	2100      	movs	r1, #0
 8012a0a:	f001 bddf 	b.w	80145cc <strtod>

08012a0e <atoi>:
 8012a0e:	220a      	movs	r2, #10
 8012a10:	2100      	movs	r1, #0
 8012a12:	f001 be63 	b.w	80146dc <strtol>

08012a16 <__cvt>:
 8012a16:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a1a:	ec57 6b10 	vmov	r6, r7, d0
 8012a1e:	2f00      	cmp	r7, #0
 8012a20:	460c      	mov	r4, r1
 8012a22:	4619      	mov	r1, r3
 8012a24:	463b      	mov	r3, r7
 8012a26:	bfbb      	ittet	lt
 8012a28:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012a2c:	461f      	movlt	r7, r3
 8012a2e:	2300      	movge	r3, #0
 8012a30:	232d      	movlt	r3, #45	@ 0x2d
 8012a32:	700b      	strb	r3, [r1, #0]
 8012a34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a36:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012a3a:	4691      	mov	r9, r2
 8012a3c:	f023 0820 	bic.w	r8, r3, #32
 8012a40:	bfbc      	itt	lt
 8012a42:	4632      	movlt	r2, r6
 8012a44:	4616      	movlt	r6, r2
 8012a46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012a4a:	d005      	beq.n	8012a58 <__cvt+0x42>
 8012a4c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012a50:	d100      	bne.n	8012a54 <__cvt+0x3e>
 8012a52:	3401      	adds	r4, #1
 8012a54:	2102      	movs	r1, #2
 8012a56:	e000      	b.n	8012a5a <__cvt+0x44>
 8012a58:	2103      	movs	r1, #3
 8012a5a:	ab03      	add	r3, sp, #12
 8012a5c:	9301      	str	r3, [sp, #4]
 8012a5e:	ab02      	add	r3, sp, #8
 8012a60:	9300      	str	r3, [sp, #0]
 8012a62:	ec47 6b10 	vmov	d0, r6, r7
 8012a66:	4653      	mov	r3, sl
 8012a68:	4622      	mov	r2, r4
 8012a6a:	f002 f89d 	bl	8014ba8 <_dtoa_r>
 8012a6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012a72:	4605      	mov	r5, r0
 8012a74:	d119      	bne.n	8012aaa <__cvt+0x94>
 8012a76:	f019 0f01 	tst.w	r9, #1
 8012a7a:	d00e      	beq.n	8012a9a <__cvt+0x84>
 8012a7c:	eb00 0904 	add.w	r9, r0, r4
 8012a80:	2200      	movs	r2, #0
 8012a82:	2300      	movs	r3, #0
 8012a84:	4630      	mov	r0, r6
 8012a86:	4639      	mov	r1, r7
 8012a88:	f7ee f82e 	bl	8000ae8 <__aeabi_dcmpeq>
 8012a8c:	b108      	cbz	r0, 8012a92 <__cvt+0x7c>
 8012a8e:	f8cd 900c 	str.w	r9, [sp, #12]
 8012a92:	2230      	movs	r2, #48	@ 0x30
 8012a94:	9b03      	ldr	r3, [sp, #12]
 8012a96:	454b      	cmp	r3, r9
 8012a98:	d31e      	bcc.n	8012ad8 <__cvt+0xc2>
 8012a9a:	9b03      	ldr	r3, [sp, #12]
 8012a9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a9e:	1b5b      	subs	r3, r3, r5
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	6013      	str	r3, [r2, #0]
 8012aa4:	b004      	add	sp, #16
 8012aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aaa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012aae:	eb00 0904 	add.w	r9, r0, r4
 8012ab2:	d1e5      	bne.n	8012a80 <__cvt+0x6a>
 8012ab4:	7803      	ldrb	r3, [r0, #0]
 8012ab6:	2b30      	cmp	r3, #48	@ 0x30
 8012ab8:	d10a      	bne.n	8012ad0 <__cvt+0xba>
 8012aba:	2200      	movs	r2, #0
 8012abc:	2300      	movs	r3, #0
 8012abe:	4630      	mov	r0, r6
 8012ac0:	4639      	mov	r1, r7
 8012ac2:	f7ee f811 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ac6:	b918      	cbnz	r0, 8012ad0 <__cvt+0xba>
 8012ac8:	f1c4 0401 	rsb	r4, r4, #1
 8012acc:	f8ca 4000 	str.w	r4, [sl]
 8012ad0:	f8da 3000 	ldr.w	r3, [sl]
 8012ad4:	4499      	add	r9, r3
 8012ad6:	e7d3      	b.n	8012a80 <__cvt+0x6a>
 8012ad8:	1c59      	adds	r1, r3, #1
 8012ada:	9103      	str	r1, [sp, #12]
 8012adc:	701a      	strb	r2, [r3, #0]
 8012ade:	e7d9      	b.n	8012a94 <__cvt+0x7e>

08012ae0 <__exponent>:
 8012ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ae2:	2900      	cmp	r1, #0
 8012ae4:	bfba      	itte	lt
 8012ae6:	4249      	neglt	r1, r1
 8012ae8:	232d      	movlt	r3, #45	@ 0x2d
 8012aea:	232b      	movge	r3, #43	@ 0x2b
 8012aec:	2909      	cmp	r1, #9
 8012aee:	7002      	strb	r2, [r0, #0]
 8012af0:	7043      	strb	r3, [r0, #1]
 8012af2:	dd29      	ble.n	8012b48 <__exponent+0x68>
 8012af4:	f10d 0307 	add.w	r3, sp, #7
 8012af8:	461d      	mov	r5, r3
 8012afa:	270a      	movs	r7, #10
 8012afc:	461a      	mov	r2, r3
 8012afe:	fbb1 f6f7 	udiv	r6, r1, r7
 8012b02:	fb07 1416 	mls	r4, r7, r6, r1
 8012b06:	3430      	adds	r4, #48	@ 0x30
 8012b08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012b0c:	460c      	mov	r4, r1
 8012b0e:	2c63      	cmp	r4, #99	@ 0x63
 8012b10:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8012b14:	4631      	mov	r1, r6
 8012b16:	dcf1      	bgt.n	8012afc <__exponent+0x1c>
 8012b18:	3130      	adds	r1, #48	@ 0x30
 8012b1a:	1e94      	subs	r4, r2, #2
 8012b1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012b20:	1c41      	adds	r1, r0, #1
 8012b22:	4623      	mov	r3, r4
 8012b24:	42ab      	cmp	r3, r5
 8012b26:	d30a      	bcc.n	8012b3e <__exponent+0x5e>
 8012b28:	f10d 0309 	add.w	r3, sp, #9
 8012b2c:	1a9b      	subs	r3, r3, r2
 8012b2e:	42ac      	cmp	r4, r5
 8012b30:	bf88      	it	hi
 8012b32:	2300      	movhi	r3, #0
 8012b34:	3302      	adds	r3, #2
 8012b36:	4403      	add	r3, r0
 8012b38:	1a18      	subs	r0, r3, r0
 8012b3a:	b003      	add	sp, #12
 8012b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012b42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012b46:	e7ed      	b.n	8012b24 <__exponent+0x44>
 8012b48:	2330      	movs	r3, #48	@ 0x30
 8012b4a:	3130      	adds	r1, #48	@ 0x30
 8012b4c:	7083      	strb	r3, [r0, #2]
 8012b4e:	70c1      	strb	r1, [r0, #3]
 8012b50:	1d03      	adds	r3, r0, #4
 8012b52:	e7f1      	b.n	8012b38 <__exponent+0x58>

08012b54 <_printf_float>:
 8012b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b58:	b08d      	sub	sp, #52	@ 0x34
 8012b5a:	460c      	mov	r4, r1
 8012b5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012b60:	4616      	mov	r6, r2
 8012b62:	461f      	mov	r7, r3
 8012b64:	4605      	mov	r5, r0
 8012b66:	f001 ff3f 	bl	80149e8 <_localeconv_r>
 8012b6a:	6803      	ldr	r3, [r0, #0]
 8012b6c:	9304      	str	r3, [sp, #16]
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f7ed fb8e 	bl	8000290 <strlen>
 8012b74:	2300      	movs	r3, #0
 8012b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b78:	f8d8 3000 	ldr.w	r3, [r8]
 8012b7c:	9005      	str	r0, [sp, #20]
 8012b7e:	3307      	adds	r3, #7
 8012b80:	f023 0307 	bic.w	r3, r3, #7
 8012b84:	f103 0208 	add.w	r2, r3, #8
 8012b88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012b8c:	f8d4 b000 	ldr.w	fp, [r4]
 8012b90:	f8c8 2000 	str.w	r2, [r8]
 8012b94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012b98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012b9c:	9307      	str	r3, [sp, #28]
 8012b9e:	f8cd 8018 	str.w	r8, [sp, #24]
 8012ba2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012baa:	4b9c      	ldr	r3, [pc, #624]	@ (8012e1c <_printf_float+0x2c8>)
 8012bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012bb0:	f7ed ffcc 	bl	8000b4c <__aeabi_dcmpun>
 8012bb4:	bb70      	cbnz	r0, 8012c14 <_printf_float+0xc0>
 8012bb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bba:	4b98      	ldr	r3, [pc, #608]	@ (8012e1c <_printf_float+0x2c8>)
 8012bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012bc0:	f7ed ffa6 	bl	8000b10 <__aeabi_dcmple>
 8012bc4:	bb30      	cbnz	r0, 8012c14 <_printf_float+0xc0>
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	2300      	movs	r3, #0
 8012bca:	4640      	mov	r0, r8
 8012bcc:	4649      	mov	r1, r9
 8012bce:	f7ed ff95 	bl	8000afc <__aeabi_dcmplt>
 8012bd2:	b110      	cbz	r0, 8012bda <_printf_float+0x86>
 8012bd4:	232d      	movs	r3, #45	@ 0x2d
 8012bd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012bda:	4a91      	ldr	r2, [pc, #580]	@ (8012e20 <_printf_float+0x2cc>)
 8012bdc:	4b91      	ldr	r3, [pc, #580]	@ (8012e24 <_printf_float+0x2d0>)
 8012bde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012be2:	bf8c      	ite	hi
 8012be4:	4690      	movhi	r8, r2
 8012be6:	4698      	movls	r8, r3
 8012be8:	2303      	movs	r3, #3
 8012bea:	6123      	str	r3, [r4, #16]
 8012bec:	f02b 0304 	bic.w	r3, fp, #4
 8012bf0:	6023      	str	r3, [r4, #0]
 8012bf2:	f04f 0900 	mov.w	r9, #0
 8012bf6:	9700      	str	r7, [sp, #0]
 8012bf8:	4633      	mov	r3, r6
 8012bfa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012bfc:	4621      	mov	r1, r4
 8012bfe:	4628      	mov	r0, r5
 8012c00:	f000 f9d2 	bl	8012fa8 <_printf_common>
 8012c04:	3001      	adds	r0, #1
 8012c06:	f040 808d 	bne.w	8012d24 <_printf_float+0x1d0>
 8012c0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012c0e:	b00d      	add	sp, #52	@ 0x34
 8012c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c14:	4642      	mov	r2, r8
 8012c16:	464b      	mov	r3, r9
 8012c18:	4640      	mov	r0, r8
 8012c1a:	4649      	mov	r1, r9
 8012c1c:	f7ed ff96 	bl	8000b4c <__aeabi_dcmpun>
 8012c20:	b140      	cbz	r0, 8012c34 <_printf_float+0xe0>
 8012c22:	464b      	mov	r3, r9
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	bfbc      	itt	lt
 8012c28:	232d      	movlt	r3, #45	@ 0x2d
 8012c2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8012e28 <_printf_float+0x2d4>)
 8012c30:	4b7e      	ldr	r3, [pc, #504]	@ (8012e2c <_printf_float+0x2d8>)
 8012c32:	e7d4      	b.n	8012bde <_printf_float+0x8a>
 8012c34:	6863      	ldr	r3, [r4, #4]
 8012c36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012c3a:	9206      	str	r2, [sp, #24]
 8012c3c:	1c5a      	adds	r2, r3, #1
 8012c3e:	d13b      	bne.n	8012cb8 <_printf_float+0x164>
 8012c40:	2306      	movs	r3, #6
 8012c42:	6063      	str	r3, [r4, #4]
 8012c44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012c48:	2300      	movs	r3, #0
 8012c4a:	6022      	str	r2, [r4, #0]
 8012c4c:	9303      	str	r3, [sp, #12]
 8012c4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8012c50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012c54:	ab09      	add	r3, sp, #36	@ 0x24
 8012c56:	9300      	str	r3, [sp, #0]
 8012c58:	6861      	ldr	r1, [r4, #4]
 8012c5a:	ec49 8b10 	vmov	d0, r8, r9
 8012c5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012c62:	4628      	mov	r0, r5
 8012c64:	f7ff fed7 	bl	8012a16 <__cvt>
 8012c68:	9b06      	ldr	r3, [sp, #24]
 8012c6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012c6c:	2b47      	cmp	r3, #71	@ 0x47
 8012c6e:	4680      	mov	r8, r0
 8012c70:	d129      	bne.n	8012cc6 <_printf_float+0x172>
 8012c72:	1cc8      	adds	r0, r1, #3
 8012c74:	db02      	blt.n	8012c7c <_printf_float+0x128>
 8012c76:	6863      	ldr	r3, [r4, #4]
 8012c78:	4299      	cmp	r1, r3
 8012c7a:	dd41      	ble.n	8012d00 <_printf_float+0x1ac>
 8012c7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8012c80:	fa5f fa8a 	uxtb.w	sl, sl
 8012c84:	3901      	subs	r1, #1
 8012c86:	4652      	mov	r2, sl
 8012c88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012c8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8012c8e:	f7ff ff27 	bl	8012ae0 <__exponent>
 8012c92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012c94:	1813      	adds	r3, r2, r0
 8012c96:	2a01      	cmp	r2, #1
 8012c98:	4681      	mov	r9, r0
 8012c9a:	6123      	str	r3, [r4, #16]
 8012c9c:	dc02      	bgt.n	8012ca4 <_printf_float+0x150>
 8012c9e:	6822      	ldr	r2, [r4, #0]
 8012ca0:	07d2      	lsls	r2, r2, #31
 8012ca2:	d501      	bpl.n	8012ca8 <_printf_float+0x154>
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	6123      	str	r3, [r4, #16]
 8012ca8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d0a2      	beq.n	8012bf6 <_printf_float+0xa2>
 8012cb0:	232d      	movs	r3, #45	@ 0x2d
 8012cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012cb6:	e79e      	b.n	8012bf6 <_printf_float+0xa2>
 8012cb8:	9a06      	ldr	r2, [sp, #24]
 8012cba:	2a47      	cmp	r2, #71	@ 0x47
 8012cbc:	d1c2      	bne.n	8012c44 <_printf_float+0xf0>
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d1c0      	bne.n	8012c44 <_printf_float+0xf0>
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	e7bd      	b.n	8012c42 <_printf_float+0xee>
 8012cc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012cca:	d9db      	bls.n	8012c84 <_printf_float+0x130>
 8012ccc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012cd0:	d118      	bne.n	8012d04 <_printf_float+0x1b0>
 8012cd2:	2900      	cmp	r1, #0
 8012cd4:	6863      	ldr	r3, [r4, #4]
 8012cd6:	dd0b      	ble.n	8012cf0 <_printf_float+0x19c>
 8012cd8:	6121      	str	r1, [r4, #16]
 8012cda:	b913      	cbnz	r3, 8012ce2 <_printf_float+0x18e>
 8012cdc:	6822      	ldr	r2, [r4, #0]
 8012cde:	07d0      	lsls	r0, r2, #31
 8012ce0:	d502      	bpl.n	8012ce8 <_printf_float+0x194>
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	440b      	add	r3, r1
 8012ce6:	6123      	str	r3, [r4, #16]
 8012ce8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012cea:	f04f 0900 	mov.w	r9, #0
 8012cee:	e7db      	b.n	8012ca8 <_printf_float+0x154>
 8012cf0:	b913      	cbnz	r3, 8012cf8 <_printf_float+0x1a4>
 8012cf2:	6822      	ldr	r2, [r4, #0]
 8012cf4:	07d2      	lsls	r2, r2, #31
 8012cf6:	d501      	bpl.n	8012cfc <_printf_float+0x1a8>
 8012cf8:	3302      	adds	r3, #2
 8012cfa:	e7f4      	b.n	8012ce6 <_printf_float+0x192>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	e7f2      	b.n	8012ce6 <_printf_float+0x192>
 8012d00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012d06:	4299      	cmp	r1, r3
 8012d08:	db05      	blt.n	8012d16 <_printf_float+0x1c2>
 8012d0a:	6823      	ldr	r3, [r4, #0]
 8012d0c:	6121      	str	r1, [r4, #16]
 8012d0e:	07d8      	lsls	r0, r3, #31
 8012d10:	d5ea      	bpl.n	8012ce8 <_printf_float+0x194>
 8012d12:	1c4b      	adds	r3, r1, #1
 8012d14:	e7e7      	b.n	8012ce6 <_printf_float+0x192>
 8012d16:	2900      	cmp	r1, #0
 8012d18:	bfd4      	ite	le
 8012d1a:	f1c1 0202 	rsble	r2, r1, #2
 8012d1e:	2201      	movgt	r2, #1
 8012d20:	4413      	add	r3, r2
 8012d22:	e7e0      	b.n	8012ce6 <_printf_float+0x192>
 8012d24:	6823      	ldr	r3, [r4, #0]
 8012d26:	055a      	lsls	r2, r3, #21
 8012d28:	d407      	bmi.n	8012d3a <_printf_float+0x1e6>
 8012d2a:	6923      	ldr	r3, [r4, #16]
 8012d2c:	4642      	mov	r2, r8
 8012d2e:	4631      	mov	r1, r6
 8012d30:	4628      	mov	r0, r5
 8012d32:	47b8      	blx	r7
 8012d34:	3001      	adds	r0, #1
 8012d36:	d12b      	bne.n	8012d90 <_printf_float+0x23c>
 8012d38:	e767      	b.n	8012c0a <_printf_float+0xb6>
 8012d3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012d3e:	f240 80dd 	bls.w	8012efc <_printf_float+0x3a8>
 8012d42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012d46:	2200      	movs	r2, #0
 8012d48:	2300      	movs	r3, #0
 8012d4a:	f7ed fecd 	bl	8000ae8 <__aeabi_dcmpeq>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d033      	beq.n	8012dba <_printf_float+0x266>
 8012d52:	4a37      	ldr	r2, [pc, #220]	@ (8012e30 <_printf_float+0x2dc>)
 8012d54:	2301      	movs	r3, #1
 8012d56:	4631      	mov	r1, r6
 8012d58:	4628      	mov	r0, r5
 8012d5a:	47b8      	blx	r7
 8012d5c:	3001      	adds	r0, #1
 8012d5e:	f43f af54 	beq.w	8012c0a <_printf_float+0xb6>
 8012d62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012d66:	4543      	cmp	r3, r8
 8012d68:	db02      	blt.n	8012d70 <_printf_float+0x21c>
 8012d6a:	6823      	ldr	r3, [r4, #0]
 8012d6c:	07d8      	lsls	r0, r3, #31
 8012d6e:	d50f      	bpl.n	8012d90 <_printf_float+0x23c>
 8012d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d74:	4631      	mov	r1, r6
 8012d76:	4628      	mov	r0, r5
 8012d78:	47b8      	blx	r7
 8012d7a:	3001      	adds	r0, #1
 8012d7c:	f43f af45 	beq.w	8012c0a <_printf_float+0xb6>
 8012d80:	f04f 0900 	mov.w	r9, #0
 8012d84:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012d88:	f104 0a1a 	add.w	sl, r4, #26
 8012d8c:	45c8      	cmp	r8, r9
 8012d8e:	dc09      	bgt.n	8012da4 <_printf_float+0x250>
 8012d90:	6823      	ldr	r3, [r4, #0]
 8012d92:	079b      	lsls	r3, r3, #30
 8012d94:	f100 8103 	bmi.w	8012f9e <_printf_float+0x44a>
 8012d98:	68e0      	ldr	r0, [r4, #12]
 8012d9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012d9c:	4298      	cmp	r0, r3
 8012d9e:	bfb8      	it	lt
 8012da0:	4618      	movlt	r0, r3
 8012da2:	e734      	b.n	8012c0e <_printf_float+0xba>
 8012da4:	2301      	movs	r3, #1
 8012da6:	4652      	mov	r2, sl
 8012da8:	4631      	mov	r1, r6
 8012daa:	4628      	mov	r0, r5
 8012dac:	47b8      	blx	r7
 8012dae:	3001      	adds	r0, #1
 8012db0:	f43f af2b 	beq.w	8012c0a <_printf_float+0xb6>
 8012db4:	f109 0901 	add.w	r9, r9, #1
 8012db8:	e7e8      	b.n	8012d8c <_printf_float+0x238>
 8012dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	dc39      	bgt.n	8012e34 <_printf_float+0x2e0>
 8012dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8012e30 <_printf_float+0x2dc>)
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	4631      	mov	r1, r6
 8012dc6:	4628      	mov	r0, r5
 8012dc8:	47b8      	blx	r7
 8012dca:	3001      	adds	r0, #1
 8012dcc:	f43f af1d 	beq.w	8012c0a <_printf_float+0xb6>
 8012dd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012dd4:	ea59 0303 	orrs.w	r3, r9, r3
 8012dd8:	d102      	bne.n	8012de0 <_printf_float+0x28c>
 8012dda:	6823      	ldr	r3, [r4, #0]
 8012ddc:	07d9      	lsls	r1, r3, #31
 8012dde:	d5d7      	bpl.n	8012d90 <_printf_float+0x23c>
 8012de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012de4:	4631      	mov	r1, r6
 8012de6:	4628      	mov	r0, r5
 8012de8:	47b8      	blx	r7
 8012dea:	3001      	adds	r0, #1
 8012dec:	f43f af0d 	beq.w	8012c0a <_printf_float+0xb6>
 8012df0:	f04f 0a00 	mov.w	sl, #0
 8012df4:	f104 0b1a 	add.w	fp, r4, #26
 8012df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012dfa:	425b      	negs	r3, r3
 8012dfc:	4553      	cmp	r3, sl
 8012dfe:	dc01      	bgt.n	8012e04 <_printf_float+0x2b0>
 8012e00:	464b      	mov	r3, r9
 8012e02:	e793      	b.n	8012d2c <_printf_float+0x1d8>
 8012e04:	2301      	movs	r3, #1
 8012e06:	465a      	mov	r2, fp
 8012e08:	4631      	mov	r1, r6
 8012e0a:	4628      	mov	r0, r5
 8012e0c:	47b8      	blx	r7
 8012e0e:	3001      	adds	r0, #1
 8012e10:	f43f aefb 	beq.w	8012c0a <_printf_float+0xb6>
 8012e14:	f10a 0a01 	add.w	sl, sl, #1
 8012e18:	e7ee      	b.n	8012df8 <_printf_float+0x2a4>
 8012e1a:	bf00      	nop
 8012e1c:	7fefffff 	.word	0x7fefffff
 8012e20:	080183a4 	.word	0x080183a4
 8012e24:	080183a0 	.word	0x080183a0
 8012e28:	080183ac 	.word	0x080183ac
 8012e2c:	080183a8 	.word	0x080183a8
 8012e30:	0801858b 	.word	0x0801858b
 8012e34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012e36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012e3a:	4553      	cmp	r3, sl
 8012e3c:	bfa8      	it	ge
 8012e3e:	4653      	movge	r3, sl
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	4699      	mov	r9, r3
 8012e44:	dc36      	bgt.n	8012eb4 <_printf_float+0x360>
 8012e46:	f04f 0b00 	mov.w	fp, #0
 8012e4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e4e:	f104 021a 	add.w	r2, r4, #26
 8012e52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012e54:	9306      	str	r3, [sp, #24]
 8012e56:	eba3 0309 	sub.w	r3, r3, r9
 8012e5a:	455b      	cmp	r3, fp
 8012e5c:	dc31      	bgt.n	8012ec2 <_printf_float+0x36e>
 8012e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e60:	459a      	cmp	sl, r3
 8012e62:	dc3a      	bgt.n	8012eda <_printf_float+0x386>
 8012e64:	6823      	ldr	r3, [r4, #0]
 8012e66:	07da      	lsls	r2, r3, #31
 8012e68:	d437      	bmi.n	8012eda <_printf_float+0x386>
 8012e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e6c:	ebaa 0903 	sub.w	r9, sl, r3
 8012e70:	9b06      	ldr	r3, [sp, #24]
 8012e72:	ebaa 0303 	sub.w	r3, sl, r3
 8012e76:	4599      	cmp	r9, r3
 8012e78:	bfa8      	it	ge
 8012e7a:	4699      	movge	r9, r3
 8012e7c:	f1b9 0f00 	cmp.w	r9, #0
 8012e80:	dc33      	bgt.n	8012eea <_printf_float+0x396>
 8012e82:	f04f 0800 	mov.w	r8, #0
 8012e86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012e8a:	f104 0b1a 	add.w	fp, r4, #26
 8012e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e90:	ebaa 0303 	sub.w	r3, sl, r3
 8012e94:	eba3 0309 	sub.w	r3, r3, r9
 8012e98:	4543      	cmp	r3, r8
 8012e9a:	f77f af79 	ble.w	8012d90 <_printf_float+0x23c>
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	465a      	mov	r2, fp
 8012ea2:	4631      	mov	r1, r6
 8012ea4:	4628      	mov	r0, r5
 8012ea6:	47b8      	blx	r7
 8012ea8:	3001      	adds	r0, #1
 8012eaa:	f43f aeae 	beq.w	8012c0a <_printf_float+0xb6>
 8012eae:	f108 0801 	add.w	r8, r8, #1
 8012eb2:	e7ec      	b.n	8012e8e <_printf_float+0x33a>
 8012eb4:	4642      	mov	r2, r8
 8012eb6:	4631      	mov	r1, r6
 8012eb8:	4628      	mov	r0, r5
 8012eba:	47b8      	blx	r7
 8012ebc:	3001      	adds	r0, #1
 8012ebe:	d1c2      	bne.n	8012e46 <_printf_float+0x2f2>
 8012ec0:	e6a3      	b.n	8012c0a <_printf_float+0xb6>
 8012ec2:	2301      	movs	r3, #1
 8012ec4:	4631      	mov	r1, r6
 8012ec6:	4628      	mov	r0, r5
 8012ec8:	9206      	str	r2, [sp, #24]
 8012eca:	47b8      	blx	r7
 8012ecc:	3001      	adds	r0, #1
 8012ece:	f43f ae9c 	beq.w	8012c0a <_printf_float+0xb6>
 8012ed2:	9a06      	ldr	r2, [sp, #24]
 8012ed4:	f10b 0b01 	add.w	fp, fp, #1
 8012ed8:	e7bb      	b.n	8012e52 <_printf_float+0x2fe>
 8012eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ede:	4631      	mov	r1, r6
 8012ee0:	4628      	mov	r0, r5
 8012ee2:	47b8      	blx	r7
 8012ee4:	3001      	adds	r0, #1
 8012ee6:	d1c0      	bne.n	8012e6a <_printf_float+0x316>
 8012ee8:	e68f      	b.n	8012c0a <_printf_float+0xb6>
 8012eea:	9a06      	ldr	r2, [sp, #24]
 8012eec:	464b      	mov	r3, r9
 8012eee:	4442      	add	r2, r8
 8012ef0:	4631      	mov	r1, r6
 8012ef2:	4628      	mov	r0, r5
 8012ef4:	47b8      	blx	r7
 8012ef6:	3001      	adds	r0, #1
 8012ef8:	d1c3      	bne.n	8012e82 <_printf_float+0x32e>
 8012efa:	e686      	b.n	8012c0a <_printf_float+0xb6>
 8012efc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012f00:	f1ba 0f01 	cmp.w	sl, #1
 8012f04:	dc01      	bgt.n	8012f0a <_printf_float+0x3b6>
 8012f06:	07db      	lsls	r3, r3, #31
 8012f08:	d536      	bpl.n	8012f78 <_printf_float+0x424>
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	4642      	mov	r2, r8
 8012f0e:	4631      	mov	r1, r6
 8012f10:	4628      	mov	r0, r5
 8012f12:	47b8      	blx	r7
 8012f14:	3001      	adds	r0, #1
 8012f16:	f43f ae78 	beq.w	8012c0a <_printf_float+0xb6>
 8012f1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f1e:	4631      	mov	r1, r6
 8012f20:	4628      	mov	r0, r5
 8012f22:	47b8      	blx	r7
 8012f24:	3001      	adds	r0, #1
 8012f26:	f43f ae70 	beq.w	8012c0a <_printf_float+0xb6>
 8012f2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012f2e:	2200      	movs	r2, #0
 8012f30:	2300      	movs	r3, #0
 8012f32:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8012f36:	f7ed fdd7 	bl	8000ae8 <__aeabi_dcmpeq>
 8012f3a:	b9c0      	cbnz	r0, 8012f6e <_printf_float+0x41a>
 8012f3c:	4653      	mov	r3, sl
 8012f3e:	f108 0201 	add.w	r2, r8, #1
 8012f42:	4631      	mov	r1, r6
 8012f44:	4628      	mov	r0, r5
 8012f46:	47b8      	blx	r7
 8012f48:	3001      	adds	r0, #1
 8012f4a:	d10c      	bne.n	8012f66 <_printf_float+0x412>
 8012f4c:	e65d      	b.n	8012c0a <_printf_float+0xb6>
 8012f4e:	2301      	movs	r3, #1
 8012f50:	465a      	mov	r2, fp
 8012f52:	4631      	mov	r1, r6
 8012f54:	4628      	mov	r0, r5
 8012f56:	47b8      	blx	r7
 8012f58:	3001      	adds	r0, #1
 8012f5a:	f43f ae56 	beq.w	8012c0a <_printf_float+0xb6>
 8012f5e:	f108 0801 	add.w	r8, r8, #1
 8012f62:	45d0      	cmp	r8, sl
 8012f64:	dbf3      	blt.n	8012f4e <_printf_float+0x3fa>
 8012f66:	464b      	mov	r3, r9
 8012f68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012f6c:	e6df      	b.n	8012d2e <_printf_float+0x1da>
 8012f6e:	f04f 0800 	mov.w	r8, #0
 8012f72:	f104 0b1a 	add.w	fp, r4, #26
 8012f76:	e7f4      	b.n	8012f62 <_printf_float+0x40e>
 8012f78:	2301      	movs	r3, #1
 8012f7a:	4642      	mov	r2, r8
 8012f7c:	e7e1      	b.n	8012f42 <_printf_float+0x3ee>
 8012f7e:	2301      	movs	r3, #1
 8012f80:	464a      	mov	r2, r9
 8012f82:	4631      	mov	r1, r6
 8012f84:	4628      	mov	r0, r5
 8012f86:	47b8      	blx	r7
 8012f88:	3001      	adds	r0, #1
 8012f8a:	f43f ae3e 	beq.w	8012c0a <_printf_float+0xb6>
 8012f8e:	f108 0801 	add.w	r8, r8, #1
 8012f92:	68e3      	ldr	r3, [r4, #12]
 8012f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012f96:	1a5b      	subs	r3, r3, r1
 8012f98:	4543      	cmp	r3, r8
 8012f9a:	dcf0      	bgt.n	8012f7e <_printf_float+0x42a>
 8012f9c:	e6fc      	b.n	8012d98 <_printf_float+0x244>
 8012f9e:	f04f 0800 	mov.w	r8, #0
 8012fa2:	f104 0919 	add.w	r9, r4, #25
 8012fa6:	e7f4      	b.n	8012f92 <_printf_float+0x43e>

08012fa8 <_printf_common>:
 8012fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fac:	4616      	mov	r6, r2
 8012fae:	4698      	mov	r8, r3
 8012fb0:	688a      	ldr	r2, [r1, #8]
 8012fb2:	690b      	ldr	r3, [r1, #16]
 8012fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	bfb8      	it	lt
 8012fbc:	4613      	movlt	r3, r2
 8012fbe:	6033      	str	r3, [r6, #0]
 8012fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012fc4:	4607      	mov	r7, r0
 8012fc6:	460c      	mov	r4, r1
 8012fc8:	b10a      	cbz	r2, 8012fce <_printf_common+0x26>
 8012fca:	3301      	adds	r3, #1
 8012fcc:	6033      	str	r3, [r6, #0]
 8012fce:	6823      	ldr	r3, [r4, #0]
 8012fd0:	0699      	lsls	r1, r3, #26
 8012fd2:	bf42      	ittt	mi
 8012fd4:	6833      	ldrmi	r3, [r6, #0]
 8012fd6:	3302      	addmi	r3, #2
 8012fd8:	6033      	strmi	r3, [r6, #0]
 8012fda:	6825      	ldr	r5, [r4, #0]
 8012fdc:	f015 0506 	ands.w	r5, r5, #6
 8012fe0:	d106      	bne.n	8012ff0 <_printf_common+0x48>
 8012fe2:	f104 0a19 	add.w	sl, r4, #25
 8012fe6:	68e3      	ldr	r3, [r4, #12]
 8012fe8:	6832      	ldr	r2, [r6, #0]
 8012fea:	1a9b      	subs	r3, r3, r2
 8012fec:	42ab      	cmp	r3, r5
 8012fee:	dc26      	bgt.n	801303e <_printf_common+0x96>
 8012ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012ff4:	6822      	ldr	r2, [r4, #0]
 8012ff6:	3b00      	subs	r3, #0
 8012ff8:	bf18      	it	ne
 8012ffa:	2301      	movne	r3, #1
 8012ffc:	0692      	lsls	r2, r2, #26
 8012ffe:	d42b      	bmi.n	8013058 <_printf_common+0xb0>
 8013000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013004:	4641      	mov	r1, r8
 8013006:	4638      	mov	r0, r7
 8013008:	47c8      	blx	r9
 801300a:	3001      	adds	r0, #1
 801300c:	d01e      	beq.n	801304c <_printf_common+0xa4>
 801300e:	6823      	ldr	r3, [r4, #0]
 8013010:	6922      	ldr	r2, [r4, #16]
 8013012:	f003 0306 	and.w	r3, r3, #6
 8013016:	2b04      	cmp	r3, #4
 8013018:	bf02      	ittt	eq
 801301a:	68e5      	ldreq	r5, [r4, #12]
 801301c:	6833      	ldreq	r3, [r6, #0]
 801301e:	1aed      	subeq	r5, r5, r3
 8013020:	68a3      	ldr	r3, [r4, #8]
 8013022:	bf0c      	ite	eq
 8013024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013028:	2500      	movne	r5, #0
 801302a:	4293      	cmp	r3, r2
 801302c:	bfc4      	itt	gt
 801302e:	1a9b      	subgt	r3, r3, r2
 8013030:	18ed      	addgt	r5, r5, r3
 8013032:	2600      	movs	r6, #0
 8013034:	341a      	adds	r4, #26
 8013036:	42b5      	cmp	r5, r6
 8013038:	d11a      	bne.n	8013070 <_printf_common+0xc8>
 801303a:	2000      	movs	r0, #0
 801303c:	e008      	b.n	8013050 <_printf_common+0xa8>
 801303e:	2301      	movs	r3, #1
 8013040:	4652      	mov	r2, sl
 8013042:	4641      	mov	r1, r8
 8013044:	4638      	mov	r0, r7
 8013046:	47c8      	blx	r9
 8013048:	3001      	adds	r0, #1
 801304a:	d103      	bne.n	8013054 <_printf_common+0xac>
 801304c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013054:	3501      	adds	r5, #1
 8013056:	e7c6      	b.n	8012fe6 <_printf_common+0x3e>
 8013058:	18e1      	adds	r1, r4, r3
 801305a:	1c5a      	adds	r2, r3, #1
 801305c:	2030      	movs	r0, #48	@ 0x30
 801305e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013062:	4422      	add	r2, r4
 8013064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801306c:	3302      	adds	r3, #2
 801306e:	e7c7      	b.n	8013000 <_printf_common+0x58>
 8013070:	2301      	movs	r3, #1
 8013072:	4622      	mov	r2, r4
 8013074:	4641      	mov	r1, r8
 8013076:	4638      	mov	r0, r7
 8013078:	47c8      	blx	r9
 801307a:	3001      	adds	r0, #1
 801307c:	d0e6      	beq.n	801304c <_printf_common+0xa4>
 801307e:	3601      	adds	r6, #1
 8013080:	e7d9      	b.n	8013036 <_printf_common+0x8e>
	...

08013084 <_printf_i>:
 8013084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013088:	7e0f      	ldrb	r7, [r1, #24]
 801308a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801308c:	2f78      	cmp	r7, #120	@ 0x78
 801308e:	4691      	mov	r9, r2
 8013090:	4680      	mov	r8, r0
 8013092:	460c      	mov	r4, r1
 8013094:	469a      	mov	sl, r3
 8013096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801309a:	d807      	bhi.n	80130ac <_printf_i+0x28>
 801309c:	2f62      	cmp	r7, #98	@ 0x62
 801309e:	d80a      	bhi.n	80130b6 <_printf_i+0x32>
 80130a0:	2f00      	cmp	r7, #0
 80130a2:	f000 80d1 	beq.w	8013248 <_printf_i+0x1c4>
 80130a6:	2f58      	cmp	r7, #88	@ 0x58
 80130a8:	f000 80b8 	beq.w	801321c <_printf_i+0x198>
 80130ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80130b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80130b4:	e03a      	b.n	801312c <_printf_i+0xa8>
 80130b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80130ba:	2b15      	cmp	r3, #21
 80130bc:	d8f6      	bhi.n	80130ac <_printf_i+0x28>
 80130be:	a101      	add	r1, pc, #4	@ (adr r1, 80130c4 <_printf_i+0x40>)
 80130c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80130c4:	0801311d 	.word	0x0801311d
 80130c8:	08013131 	.word	0x08013131
 80130cc:	080130ad 	.word	0x080130ad
 80130d0:	080130ad 	.word	0x080130ad
 80130d4:	080130ad 	.word	0x080130ad
 80130d8:	080130ad 	.word	0x080130ad
 80130dc:	08013131 	.word	0x08013131
 80130e0:	080130ad 	.word	0x080130ad
 80130e4:	080130ad 	.word	0x080130ad
 80130e8:	080130ad 	.word	0x080130ad
 80130ec:	080130ad 	.word	0x080130ad
 80130f0:	0801322f 	.word	0x0801322f
 80130f4:	0801315b 	.word	0x0801315b
 80130f8:	080131e9 	.word	0x080131e9
 80130fc:	080130ad 	.word	0x080130ad
 8013100:	080130ad 	.word	0x080130ad
 8013104:	08013251 	.word	0x08013251
 8013108:	080130ad 	.word	0x080130ad
 801310c:	0801315b 	.word	0x0801315b
 8013110:	080130ad 	.word	0x080130ad
 8013114:	080130ad 	.word	0x080130ad
 8013118:	080131f1 	.word	0x080131f1
 801311c:	6833      	ldr	r3, [r6, #0]
 801311e:	1d1a      	adds	r2, r3, #4
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	6032      	str	r2, [r6, #0]
 8013124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801312c:	2301      	movs	r3, #1
 801312e:	e09c      	b.n	801326a <_printf_i+0x1e6>
 8013130:	6833      	ldr	r3, [r6, #0]
 8013132:	6820      	ldr	r0, [r4, #0]
 8013134:	1d19      	adds	r1, r3, #4
 8013136:	6031      	str	r1, [r6, #0]
 8013138:	0606      	lsls	r6, r0, #24
 801313a:	d501      	bpl.n	8013140 <_printf_i+0xbc>
 801313c:	681d      	ldr	r5, [r3, #0]
 801313e:	e003      	b.n	8013148 <_printf_i+0xc4>
 8013140:	0645      	lsls	r5, r0, #25
 8013142:	d5fb      	bpl.n	801313c <_printf_i+0xb8>
 8013144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013148:	2d00      	cmp	r5, #0
 801314a:	da03      	bge.n	8013154 <_printf_i+0xd0>
 801314c:	232d      	movs	r3, #45	@ 0x2d
 801314e:	426d      	negs	r5, r5
 8013150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013154:	4858      	ldr	r0, [pc, #352]	@ (80132b8 <_printf_i+0x234>)
 8013156:	230a      	movs	r3, #10
 8013158:	e011      	b.n	801317e <_printf_i+0xfa>
 801315a:	6821      	ldr	r1, [r4, #0]
 801315c:	6833      	ldr	r3, [r6, #0]
 801315e:	0608      	lsls	r0, r1, #24
 8013160:	f853 5b04 	ldr.w	r5, [r3], #4
 8013164:	d402      	bmi.n	801316c <_printf_i+0xe8>
 8013166:	0649      	lsls	r1, r1, #25
 8013168:	bf48      	it	mi
 801316a:	b2ad      	uxthmi	r5, r5
 801316c:	2f6f      	cmp	r7, #111	@ 0x6f
 801316e:	4852      	ldr	r0, [pc, #328]	@ (80132b8 <_printf_i+0x234>)
 8013170:	6033      	str	r3, [r6, #0]
 8013172:	bf14      	ite	ne
 8013174:	230a      	movne	r3, #10
 8013176:	2308      	moveq	r3, #8
 8013178:	2100      	movs	r1, #0
 801317a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801317e:	6866      	ldr	r6, [r4, #4]
 8013180:	60a6      	str	r6, [r4, #8]
 8013182:	2e00      	cmp	r6, #0
 8013184:	db05      	blt.n	8013192 <_printf_i+0x10e>
 8013186:	6821      	ldr	r1, [r4, #0]
 8013188:	432e      	orrs	r6, r5
 801318a:	f021 0104 	bic.w	r1, r1, #4
 801318e:	6021      	str	r1, [r4, #0]
 8013190:	d04b      	beq.n	801322a <_printf_i+0x1a6>
 8013192:	4616      	mov	r6, r2
 8013194:	fbb5 f1f3 	udiv	r1, r5, r3
 8013198:	fb03 5711 	mls	r7, r3, r1, r5
 801319c:	5dc7      	ldrb	r7, [r0, r7]
 801319e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80131a2:	462f      	mov	r7, r5
 80131a4:	42bb      	cmp	r3, r7
 80131a6:	460d      	mov	r5, r1
 80131a8:	d9f4      	bls.n	8013194 <_printf_i+0x110>
 80131aa:	2b08      	cmp	r3, #8
 80131ac:	d10b      	bne.n	80131c6 <_printf_i+0x142>
 80131ae:	6823      	ldr	r3, [r4, #0]
 80131b0:	07df      	lsls	r7, r3, #31
 80131b2:	d508      	bpl.n	80131c6 <_printf_i+0x142>
 80131b4:	6923      	ldr	r3, [r4, #16]
 80131b6:	6861      	ldr	r1, [r4, #4]
 80131b8:	4299      	cmp	r1, r3
 80131ba:	bfde      	ittt	le
 80131bc:	2330      	movle	r3, #48	@ 0x30
 80131be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80131c2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80131c6:	1b92      	subs	r2, r2, r6
 80131c8:	6122      	str	r2, [r4, #16]
 80131ca:	f8cd a000 	str.w	sl, [sp]
 80131ce:	464b      	mov	r3, r9
 80131d0:	aa03      	add	r2, sp, #12
 80131d2:	4621      	mov	r1, r4
 80131d4:	4640      	mov	r0, r8
 80131d6:	f7ff fee7 	bl	8012fa8 <_printf_common>
 80131da:	3001      	adds	r0, #1
 80131dc:	d14a      	bne.n	8013274 <_printf_i+0x1f0>
 80131de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80131e2:	b004      	add	sp, #16
 80131e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131e8:	6823      	ldr	r3, [r4, #0]
 80131ea:	f043 0320 	orr.w	r3, r3, #32
 80131ee:	6023      	str	r3, [r4, #0]
 80131f0:	4832      	ldr	r0, [pc, #200]	@ (80132bc <_printf_i+0x238>)
 80131f2:	2778      	movs	r7, #120	@ 0x78
 80131f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80131f8:	6823      	ldr	r3, [r4, #0]
 80131fa:	6831      	ldr	r1, [r6, #0]
 80131fc:	061f      	lsls	r7, r3, #24
 80131fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8013202:	d402      	bmi.n	801320a <_printf_i+0x186>
 8013204:	065f      	lsls	r7, r3, #25
 8013206:	bf48      	it	mi
 8013208:	b2ad      	uxthmi	r5, r5
 801320a:	6031      	str	r1, [r6, #0]
 801320c:	07d9      	lsls	r1, r3, #31
 801320e:	bf44      	itt	mi
 8013210:	f043 0320 	orrmi.w	r3, r3, #32
 8013214:	6023      	strmi	r3, [r4, #0]
 8013216:	b11d      	cbz	r5, 8013220 <_printf_i+0x19c>
 8013218:	2310      	movs	r3, #16
 801321a:	e7ad      	b.n	8013178 <_printf_i+0xf4>
 801321c:	4826      	ldr	r0, [pc, #152]	@ (80132b8 <_printf_i+0x234>)
 801321e:	e7e9      	b.n	80131f4 <_printf_i+0x170>
 8013220:	6823      	ldr	r3, [r4, #0]
 8013222:	f023 0320 	bic.w	r3, r3, #32
 8013226:	6023      	str	r3, [r4, #0]
 8013228:	e7f6      	b.n	8013218 <_printf_i+0x194>
 801322a:	4616      	mov	r6, r2
 801322c:	e7bd      	b.n	80131aa <_printf_i+0x126>
 801322e:	6833      	ldr	r3, [r6, #0]
 8013230:	6825      	ldr	r5, [r4, #0]
 8013232:	6961      	ldr	r1, [r4, #20]
 8013234:	1d18      	adds	r0, r3, #4
 8013236:	6030      	str	r0, [r6, #0]
 8013238:	062e      	lsls	r6, r5, #24
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	d501      	bpl.n	8013242 <_printf_i+0x1be>
 801323e:	6019      	str	r1, [r3, #0]
 8013240:	e002      	b.n	8013248 <_printf_i+0x1c4>
 8013242:	0668      	lsls	r0, r5, #25
 8013244:	d5fb      	bpl.n	801323e <_printf_i+0x1ba>
 8013246:	8019      	strh	r1, [r3, #0]
 8013248:	2300      	movs	r3, #0
 801324a:	6123      	str	r3, [r4, #16]
 801324c:	4616      	mov	r6, r2
 801324e:	e7bc      	b.n	80131ca <_printf_i+0x146>
 8013250:	6833      	ldr	r3, [r6, #0]
 8013252:	1d1a      	adds	r2, r3, #4
 8013254:	6032      	str	r2, [r6, #0]
 8013256:	681e      	ldr	r6, [r3, #0]
 8013258:	6862      	ldr	r2, [r4, #4]
 801325a:	2100      	movs	r1, #0
 801325c:	4630      	mov	r0, r6
 801325e:	f7ec ffc7 	bl	80001f0 <memchr>
 8013262:	b108      	cbz	r0, 8013268 <_printf_i+0x1e4>
 8013264:	1b80      	subs	r0, r0, r6
 8013266:	6060      	str	r0, [r4, #4]
 8013268:	6863      	ldr	r3, [r4, #4]
 801326a:	6123      	str	r3, [r4, #16]
 801326c:	2300      	movs	r3, #0
 801326e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013272:	e7aa      	b.n	80131ca <_printf_i+0x146>
 8013274:	6923      	ldr	r3, [r4, #16]
 8013276:	4632      	mov	r2, r6
 8013278:	4649      	mov	r1, r9
 801327a:	4640      	mov	r0, r8
 801327c:	47d0      	blx	sl
 801327e:	3001      	adds	r0, #1
 8013280:	d0ad      	beq.n	80131de <_printf_i+0x15a>
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	079b      	lsls	r3, r3, #30
 8013286:	d413      	bmi.n	80132b0 <_printf_i+0x22c>
 8013288:	68e0      	ldr	r0, [r4, #12]
 801328a:	9b03      	ldr	r3, [sp, #12]
 801328c:	4298      	cmp	r0, r3
 801328e:	bfb8      	it	lt
 8013290:	4618      	movlt	r0, r3
 8013292:	e7a6      	b.n	80131e2 <_printf_i+0x15e>
 8013294:	2301      	movs	r3, #1
 8013296:	4632      	mov	r2, r6
 8013298:	4649      	mov	r1, r9
 801329a:	4640      	mov	r0, r8
 801329c:	47d0      	blx	sl
 801329e:	3001      	adds	r0, #1
 80132a0:	d09d      	beq.n	80131de <_printf_i+0x15a>
 80132a2:	3501      	adds	r5, #1
 80132a4:	68e3      	ldr	r3, [r4, #12]
 80132a6:	9903      	ldr	r1, [sp, #12]
 80132a8:	1a5b      	subs	r3, r3, r1
 80132aa:	42ab      	cmp	r3, r5
 80132ac:	dcf2      	bgt.n	8013294 <_printf_i+0x210>
 80132ae:	e7eb      	b.n	8013288 <_printf_i+0x204>
 80132b0:	2500      	movs	r5, #0
 80132b2:	f104 0619 	add.w	r6, r4, #25
 80132b6:	e7f5      	b.n	80132a4 <_printf_i+0x220>
 80132b8:	080183b0 	.word	0x080183b0
 80132bc:	080183c1 	.word	0x080183c1

080132c0 <_scanf_float>:
 80132c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c4:	b087      	sub	sp, #28
 80132c6:	4691      	mov	r9, r2
 80132c8:	9303      	str	r3, [sp, #12]
 80132ca:	688b      	ldr	r3, [r1, #8]
 80132cc:	1e5a      	subs	r2, r3, #1
 80132ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80132d2:	bf81      	itttt	hi
 80132d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80132d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80132dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80132e0:	608b      	strhi	r3, [r1, #8]
 80132e2:	680b      	ldr	r3, [r1, #0]
 80132e4:	460a      	mov	r2, r1
 80132e6:	f04f 0500 	mov.w	r5, #0
 80132ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80132ee:	f842 3b1c 	str.w	r3, [r2], #28
 80132f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80132f6:	4680      	mov	r8, r0
 80132f8:	460c      	mov	r4, r1
 80132fa:	bf98      	it	ls
 80132fc:	f04f 0b00 	movls.w	fp, #0
 8013300:	9201      	str	r2, [sp, #4]
 8013302:	4616      	mov	r6, r2
 8013304:	46aa      	mov	sl, r5
 8013306:	462f      	mov	r7, r5
 8013308:	9502      	str	r5, [sp, #8]
 801330a:	68a2      	ldr	r2, [r4, #8]
 801330c:	b15a      	cbz	r2, 8013326 <_scanf_float+0x66>
 801330e:	f8d9 3000 	ldr.w	r3, [r9]
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	2b4e      	cmp	r3, #78	@ 0x4e
 8013316:	d863      	bhi.n	80133e0 <_scanf_float+0x120>
 8013318:	2b40      	cmp	r3, #64	@ 0x40
 801331a:	d83b      	bhi.n	8013394 <_scanf_float+0xd4>
 801331c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8013320:	b2c8      	uxtb	r0, r1
 8013322:	280e      	cmp	r0, #14
 8013324:	d939      	bls.n	801339a <_scanf_float+0xda>
 8013326:	b11f      	cbz	r7, 8013330 <_scanf_float+0x70>
 8013328:	6823      	ldr	r3, [r4, #0]
 801332a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801332e:	6023      	str	r3, [r4, #0]
 8013330:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8013334:	f1ba 0f01 	cmp.w	sl, #1
 8013338:	f200 8114 	bhi.w	8013564 <_scanf_float+0x2a4>
 801333c:	9b01      	ldr	r3, [sp, #4]
 801333e:	429e      	cmp	r6, r3
 8013340:	f200 8105 	bhi.w	801354e <_scanf_float+0x28e>
 8013344:	2001      	movs	r0, #1
 8013346:	b007      	add	sp, #28
 8013348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801334c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8013350:	2a0d      	cmp	r2, #13
 8013352:	d8e8      	bhi.n	8013326 <_scanf_float+0x66>
 8013354:	a101      	add	r1, pc, #4	@ (adr r1, 801335c <_scanf_float+0x9c>)
 8013356:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801335a:	bf00      	nop
 801335c:	080134a5 	.word	0x080134a5
 8013360:	08013327 	.word	0x08013327
 8013364:	08013327 	.word	0x08013327
 8013368:	08013327 	.word	0x08013327
 801336c:	08013501 	.word	0x08013501
 8013370:	080134db 	.word	0x080134db
 8013374:	08013327 	.word	0x08013327
 8013378:	08013327 	.word	0x08013327
 801337c:	080134b3 	.word	0x080134b3
 8013380:	08013327 	.word	0x08013327
 8013384:	08013327 	.word	0x08013327
 8013388:	08013327 	.word	0x08013327
 801338c:	08013327 	.word	0x08013327
 8013390:	0801346f 	.word	0x0801346f
 8013394:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013398:	e7da      	b.n	8013350 <_scanf_float+0x90>
 801339a:	290e      	cmp	r1, #14
 801339c:	d8c3      	bhi.n	8013326 <_scanf_float+0x66>
 801339e:	a001      	add	r0, pc, #4	@ (adr r0, 80133a4 <_scanf_float+0xe4>)
 80133a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80133a4:	0801345f 	.word	0x0801345f
 80133a8:	08013327 	.word	0x08013327
 80133ac:	0801345f 	.word	0x0801345f
 80133b0:	080134ef 	.word	0x080134ef
 80133b4:	08013327 	.word	0x08013327
 80133b8:	08013401 	.word	0x08013401
 80133bc:	08013445 	.word	0x08013445
 80133c0:	08013445 	.word	0x08013445
 80133c4:	08013445 	.word	0x08013445
 80133c8:	08013445 	.word	0x08013445
 80133cc:	08013445 	.word	0x08013445
 80133d0:	08013445 	.word	0x08013445
 80133d4:	08013445 	.word	0x08013445
 80133d8:	08013445 	.word	0x08013445
 80133dc:	08013445 	.word	0x08013445
 80133e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80133e2:	d809      	bhi.n	80133f8 <_scanf_float+0x138>
 80133e4:	2b60      	cmp	r3, #96	@ 0x60
 80133e6:	d8b1      	bhi.n	801334c <_scanf_float+0x8c>
 80133e8:	2b54      	cmp	r3, #84	@ 0x54
 80133ea:	d07b      	beq.n	80134e4 <_scanf_float+0x224>
 80133ec:	2b59      	cmp	r3, #89	@ 0x59
 80133ee:	d19a      	bne.n	8013326 <_scanf_float+0x66>
 80133f0:	2d07      	cmp	r5, #7
 80133f2:	d198      	bne.n	8013326 <_scanf_float+0x66>
 80133f4:	2508      	movs	r5, #8
 80133f6:	e02f      	b.n	8013458 <_scanf_float+0x198>
 80133f8:	2b74      	cmp	r3, #116	@ 0x74
 80133fa:	d073      	beq.n	80134e4 <_scanf_float+0x224>
 80133fc:	2b79      	cmp	r3, #121	@ 0x79
 80133fe:	e7f6      	b.n	80133ee <_scanf_float+0x12e>
 8013400:	6821      	ldr	r1, [r4, #0]
 8013402:	05c8      	lsls	r0, r1, #23
 8013404:	d51e      	bpl.n	8013444 <_scanf_float+0x184>
 8013406:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801340a:	6021      	str	r1, [r4, #0]
 801340c:	3701      	adds	r7, #1
 801340e:	f1bb 0f00 	cmp.w	fp, #0
 8013412:	d003      	beq.n	801341c <_scanf_float+0x15c>
 8013414:	3201      	adds	r2, #1
 8013416:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 801341a:	60a2      	str	r2, [r4, #8]
 801341c:	68a3      	ldr	r3, [r4, #8]
 801341e:	3b01      	subs	r3, #1
 8013420:	60a3      	str	r3, [r4, #8]
 8013422:	6923      	ldr	r3, [r4, #16]
 8013424:	3301      	adds	r3, #1
 8013426:	6123      	str	r3, [r4, #16]
 8013428:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801342c:	3b01      	subs	r3, #1
 801342e:	2b00      	cmp	r3, #0
 8013430:	f8c9 3004 	str.w	r3, [r9, #4]
 8013434:	f340 8082 	ble.w	801353c <_scanf_float+0x27c>
 8013438:	f8d9 3000 	ldr.w	r3, [r9]
 801343c:	3301      	adds	r3, #1
 801343e:	f8c9 3000 	str.w	r3, [r9]
 8013442:	e762      	b.n	801330a <_scanf_float+0x4a>
 8013444:	eb1a 0105 	adds.w	r1, sl, r5
 8013448:	f47f af6d 	bne.w	8013326 <_scanf_float+0x66>
 801344c:	6822      	ldr	r2, [r4, #0]
 801344e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013452:	6022      	str	r2, [r4, #0]
 8013454:	460d      	mov	r5, r1
 8013456:	468a      	mov	sl, r1
 8013458:	f806 3b01 	strb.w	r3, [r6], #1
 801345c:	e7de      	b.n	801341c <_scanf_float+0x15c>
 801345e:	6822      	ldr	r2, [r4, #0]
 8013460:	0610      	lsls	r0, r2, #24
 8013462:	f57f af60 	bpl.w	8013326 <_scanf_float+0x66>
 8013466:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801346a:	6022      	str	r2, [r4, #0]
 801346c:	e7f4      	b.n	8013458 <_scanf_float+0x198>
 801346e:	f1ba 0f00 	cmp.w	sl, #0
 8013472:	d10c      	bne.n	801348e <_scanf_float+0x1ce>
 8013474:	b977      	cbnz	r7, 8013494 <_scanf_float+0x1d4>
 8013476:	6822      	ldr	r2, [r4, #0]
 8013478:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801347c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013480:	d108      	bne.n	8013494 <_scanf_float+0x1d4>
 8013482:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013486:	6022      	str	r2, [r4, #0]
 8013488:	f04f 0a01 	mov.w	sl, #1
 801348c:	e7e4      	b.n	8013458 <_scanf_float+0x198>
 801348e:	f1ba 0f02 	cmp.w	sl, #2
 8013492:	d050      	beq.n	8013536 <_scanf_float+0x276>
 8013494:	2d01      	cmp	r5, #1
 8013496:	d002      	beq.n	801349e <_scanf_float+0x1de>
 8013498:	2d04      	cmp	r5, #4
 801349a:	f47f af44 	bne.w	8013326 <_scanf_float+0x66>
 801349e:	3501      	adds	r5, #1
 80134a0:	b2ed      	uxtb	r5, r5
 80134a2:	e7d9      	b.n	8013458 <_scanf_float+0x198>
 80134a4:	f1ba 0f01 	cmp.w	sl, #1
 80134a8:	f47f af3d 	bne.w	8013326 <_scanf_float+0x66>
 80134ac:	f04f 0a02 	mov.w	sl, #2
 80134b0:	e7d2      	b.n	8013458 <_scanf_float+0x198>
 80134b2:	b975      	cbnz	r5, 80134d2 <_scanf_float+0x212>
 80134b4:	2f00      	cmp	r7, #0
 80134b6:	f47f af37 	bne.w	8013328 <_scanf_float+0x68>
 80134ba:	6822      	ldr	r2, [r4, #0]
 80134bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80134c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80134c4:	f040 8103 	bne.w	80136ce <_scanf_float+0x40e>
 80134c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80134cc:	6022      	str	r2, [r4, #0]
 80134ce:	2501      	movs	r5, #1
 80134d0:	e7c2      	b.n	8013458 <_scanf_float+0x198>
 80134d2:	2d03      	cmp	r5, #3
 80134d4:	d0e3      	beq.n	801349e <_scanf_float+0x1de>
 80134d6:	2d05      	cmp	r5, #5
 80134d8:	e7df      	b.n	801349a <_scanf_float+0x1da>
 80134da:	2d02      	cmp	r5, #2
 80134dc:	f47f af23 	bne.w	8013326 <_scanf_float+0x66>
 80134e0:	2503      	movs	r5, #3
 80134e2:	e7b9      	b.n	8013458 <_scanf_float+0x198>
 80134e4:	2d06      	cmp	r5, #6
 80134e6:	f47f af1e 	bne.w	8013326 <_scanf_float+0x66>
 80134ea:	2507      	movs	r5, #7
 80134ec:	e7b4      	b.n	8013458 <_scanf_float+0x198>
 80134ee:	6822      	ldr	r2, [r4, #0]
 80134f0:	0591      	lsls	r1, r2, #22
 80134f2:	f57f af18 	bpl.w	8013326 <_scanf_float+0x66>
 80134f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80134fa:	6022      	str	r2, [r4, #0]
 80134fc:	9702      	str	r7, [sp, #8]
 80134fe:	e7ab      	b.n	8013458 <_scanf_float+0x198>
 8013500:	6822      	ldr	r2, [r4, #0]
 8013502:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013506:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801350a:	d005      	beq.n	8013518 <_scanf_float+0x258>
 801350c:	0550      	lsls	r0, r2, #21
 801350e:	f57f af0a 	bpl.w	8013326 <_scanf_float+0x66>
 8013512:	2f00      	cmp	r7, #0
 8013514:	f000 80db 	beq.w	80136ce <_scanf_float+0x40e>
 8013518:	0591      	lsls	r1, r2, #22
 801351a:	bf58      	it	pl
 801351c:	9902      	ldrpl	r1, [sp, #8]
 801351e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013522:	bf58      	it	pl
 8013524:	1a79      	subpl	r1, r7, r1
 8013526:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801352a:	bf58      	it	pl
 801352c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013530:	6022      	str	r2, [r4, #0]
 8013532:	2700      	movs	r7, #0
 8013534:	e790      	b.n	8013458 <_scanf_float+0x198>
 8013536:	f04f 0a03 	mov.w	sl, #3
 801353a:	e78d      	b.n	8013458 <_scanf_float+0x198>
 801353c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013540:	4649      	mov	r1, r9
 8013542:	4640      	mov	r0, r8
 8013544:	4798      	blx	r3
 8013546:	2800      	cmp	r0, #0
 8013548:	f43f aedf 	beq.w	801330a <_scanf_float+0x4a>
 801354c:	e6eb      	b.n	8013326 <_scanf_float+0x66>
 801354e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013552:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013556:	464a      	mov	r2, r9
 8013558:	4640      	mov	r0, r8
 801355a:	4798      	blx	r3
 801355c:	6923      	ldr	r3, [r4, #16]
 801355e:	3b01      	subs	r3, #1
 8013560:	6123      	str	r3, [r4, #16]
 8013562:	e6eb      	b.n	801333c <_scanf_float+0x7c>
 8013564:	1e6b      	subs	r3, r5, #1
 8013566:	2b06      	cmp	r3, #6
 8013568:	d824      	bhi.n	80135b4 <_scanf_float+0x2f4>
 801356a:	2d02      	cmp	r5, #2
 801356c:	d836      	bhi.n	80135dc <_scanf_float+0x31c>
 801356e:	9b01      	ldr	r3, [sp, #4]
 8013570:	429e      	cmp	r6, r3
 8013572:	f67f aee7 	bls.w	8013344 <_scanf_float+0x84>
 8013576:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801357a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801357e:	464a      	mov	r2, r9
 8013580:	4640      	mov	r0, r8
 8013582:	4798      	blx	r3
 8013584:	6923      	ldr	r3, [r4, #16]
 8013586:	3b01      	subs	r3, #1
 8013588:	6123      	str	r3, [r4, #16]
 801358a:	e7f0      	b.n	801356e <_scanf_float+0x2ae>
 801358c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013590:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013594:	464a      	mov	r2, r9
 8013596:	4640      	mov	r0, r8
 8013598:	4798      	blx	r3
 801359a:	6923      	ldr	r3, [r4, #16]
 801359c:	3b01      	subs	r3, #1
 801359e:	6123      	str	r3, [r4, #16]
 80135a0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80135a4:	fa5f fa8a 	uxtb.w	sl, sl
 80135a8:	f1ba 0f02 	cmp.w	sl, #2
 80135ac:	d1ee      	bne.n	801358c <_scanf_float+0x2cc>
 80135ae:	3d03      	subs	r5, #3
 80135b0:	b2ed      	uxtb	r5, r5
 80135b2:	1b76      	subs	r6, r6, r5
 80135b4:	6823      	ldr	r3, [r4, #0]
 80135b6:	05da      	lsls	r2, r3, #23
 80135b8:	d530      	bpl.n	801361c <_scanf_float+0x35c>
 80135ba:	055b      	lsls	r3, r3, #21
 80135bc:	d511      	bpl.n	80135e2 <_scanf_float+0x322>
 80135be:	9b01      	ldr	r3, [sp, #4]
 80135c0:	429e      	cmp	r6, r3
 80135c2:	f67f aebf 	bls.w	8013344 <_scanf_float+0x84>
 80135c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80135ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80135ce:	464a      	mov	r2, r9
 80135d0:	4640      	mov	r0, r8
 80135d2:	4798      	blx	r3
 80135d4:	6923      	ldr	r3, [r4, #16]
 80135d6:	3b01      	subs	r3, #1
 80135d8:	6123      	str	r3, [r4, #16]
 80135da:	e7f0      	b.n	80135be <_scanf_float+0x2fe>
 80135dc:	46aa      	mov	sl, r5
 80135de:	46b3      	mov	fp, r6
 80135e0:	e7de      	b.n	80135a0 <_scanf_float+0x2e0>
 80135e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80135e6:	6923      	ldr	r3, [r4, #16]
 80135e8:	2965      	cmp	r1, #101	@ 0x65
 80135ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80135ee:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80135f2:	6123      	str	r3, [r4, #16]
 80135f4:	d00c      	beq.n	8013610 <_scanf_float+0x350>
 80135f6:	2945      	cmp	r1, #69	@ 0x45
 80135f8:	d00a      	beq.n	8013610 <_scanf_float+0x350>
 80135fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80135fe:	464a      	mov	r2, r9
 8013600:	4640      	mov	r0, r8
 8013602:	4798      	blx	r3
 8013604:	6923      	ldr	r3, [r4, #16]
 8013606:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801360a:	3b01      	subs	r3, #1
 801360c:	1eb5      	subs	r5, r6, #2
 801360e:	6123      	str	r3, [r4, #16]
 8013610:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013614:	464a      	mov	r2, r9
 8013616:	4640      	mov	r0, r8
 8013618:	4798      	blx	r3
 801361a:	462e      	mov	r6, r5
 801361c:	6822      	ldr	r2, [r4, #0]
 801361e:	f012 0210 	ands.w	r2, r2, #16
 8013622:	d001      	beq.n	8013628 <_scanf_float+0x368>
 8013624:	2000      	movs	r0, #0
 8013626:	e68e      	b.n	8013346 <_scanf_float+0x86>
 8013628:	7032      	strb	r2, [r6, #0]
 801362a:	6823      	ldr	r3, [r4, #0]
 801362c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013634:	d125      	bne.n	8013682 <_scanf_float+0x3c2>
 8013636:	9b02      	ldr	r3, [sp, #8]
 8013638:	429f      	cmp	r7, r3
 801363a:	d00a      	beq.n	8013652 <_scanf_float+0x392>
 801363c:	1bda      	subs	r2, r3, r7
 801363e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013642:	429e      	cmp	r6, r3
 8013644:	bf28      	it	cs
 8013646:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801364a:	4922      	ldr	r1, [pc, #136]	@ (80136d4 <_scanf_float+0x414>)
 801364c:	4630      	mov	r0, r6
 801364e:	f000 f87b 	bl	8013748 <siprintf>
 8013652:	9901      	ldr	r1, [sp, #4]
 8013654:	2200      	movs	r2, #0
 8013656:	4640      	mov	r0, r8
 8013658:	f000 ffb2 	bl	80145c0 <_strtod_r>
 801365c:	9b03      	ldr	r3, [sp, #12]
 801365e:	6821      	ldr	r1, [r4, #0]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f011 0f02 	tst.w	r1, #2
 8013666:	ec57 6b10 	vmov	r6, r7, d0
 801366a:	f103 0204 	add.w	r2, r3, #4
 801366e:	d015      	beq.n	801369c <_scanf_float+0x3dc>
 8013670:	9903      	ldr	r1, [sp, #12]
 8013672:	600a      	str	r2, [r1, #0]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	e9c3 6700 	strd	r6, r7, [r3]
 801367a:	68e3      	ldr	r3, [r4, #12]
 801367c:	3301      	adds	r3, #1
 801367e:	60e3      	str	r3, [r4, #12]
 8013680:	e7d0      	b.n	8013624 <_scanf_float+0x364>
 8013682:	9b04      	ldr	r3, [sp, #16]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d0e4      	beq.n	8013652 <_scanf_float+0x392>
 8013688:	9905      	ldr	r1, [sp, #20]
 801368a:	230a      	movs	r3, #10
 801368c:	3101      	adds	r1, #1
 801368e:	4640      	mov	r0, r8
 8013690:	f001 f822 	bl	80146d8 <_strtol_r>
 8013694:	9b04      	ldr	r3, [sp, #16]
 8013696:	9e05      	ldr	r6, [sp, #20]
 8013698:	1ac2      	subs	r2, r0, r3
 801369a:	e7d0      	b.n	801363e <_scanf_float+0x37e>
 801369c:	f011 0f04 	tst.w	r1, #4
 80136a0:	9903      	ldr	r1, [sp, #12]
 80136a2:	600a      	str	r2, [r1, #0]
 80136a4:	d1e6      	bne.n	8013674 <_scanf_float+0x3b4>
 80136a6:	681d      	ldr	r5, [r3, #0]
 80136a8:	4632      	mov	r2, r6
 80136aa:	463b      	mov	r3, r7
 80136ac:	4630      	mov	r0, r6
 80136ae:	4639      	mov	r1, r7
 80136b0:	f7ed fa4c 	bl	8000b4c <__aeabi_dcmpun>
 80136b4:	b128      	cbz	r0, 80136c2 <_scanf_float+0x402>
 80136b6:	4808      	ldr	r0, [pc, #32]	@ (80136d8 <_scanf_float+0x418>)
 80136b8:	f001 f9ca 	bl	8014a50 <nanf>
 80136bc:	ed85 0a00 	vstr	s0, [r5]
 80136c0:	e7db      	b.n	801367a <_scanf_float+0x3ba>
 80136c2:	4630      	mov	r0, r6
 80136c4:	4639      	mov	r1, r7
 80136c6:	f7ed fa9f 	bl	8000c08 <__aeabi_d2f>
 80136ca:	6028      	str	r0, [r5, #0]
 80136cc:	e7d5      	b.n	801367a <_scanf_float+0x3ba>
 80136ce:	2700      	movs	r7, #0
 80136d0:	e62e      	b.n	8013330 <_scanf_float+0x70>
 80136d2:	bf00      	nop
 80136d4:	080183d2 	.word	0x080183d2
 80136d8:	0801848d 	.word	0x0801848d

080136dc <sniprintf>:
 80136dc:	b40c      	push	{r2, r3}
 80136de:	b530      	push	{r4, r5, lr}
 80136e0:	4b18      	ldr	r3, [pc, #96]	@ (8013744 <sniprintf+0x68>)
 80136e2:	1e0c      	subs	r4, r1, #0
 80136e4:	681d      	ldr	r5, [r3, #0]
 80136e6:	b09d      	sub	sp, #116	@ 0x74
 80136e8:	da08      	bge.n	80136fc <sniprintf+0x20>
 80136ea:	238b      	movs	r3, #139	@ 0x8b
 80136ec:	602b      	str	r3, [r5, #0]
 80136ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80136f2:	b01d      	add	sp, #116	@ 0x74
 80136f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80136f8:	b002      	add	sp, #8
 80136fa:	4770      	bx	lr
 80136fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013700:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013704:	f04f 0300 	mov.w	r3, #0
 8013708:	931b      	str	r3, [sp, #108]	@ 0x6c
 801370a:	bf14      	ite	ne
 801370c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8013710:	4623      	moveq	r3, r4
 8013712:	9304      	str	r3, [sp, #16]
 8013714:	9307      	str	r3, [sp, #28]
 8013716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801371a:	9002      	str	r0, [sp, #8]
 801371c:	9006      	str	r0, [sp, #24]
 801371e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013722:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013724:	ab21      	add	r3, sp, #132	@ 0x84
 8013726:	a902      	add	r1, sp, #8
 8013728:	4628      	mov	r0, r5
 801372a:	9301      	str	r3, [sp, #4]
 801372c:	f002 fbea 	bl	8015f04 <_svfiprintf_r>
 8013730:	1c43      	adds	r3, r0, #1
 8013732:	bfbc      	itt	lt
 8013734:	238b      	movlt	r3, #139	@ 0x8b
 8013736:	602b      	strlt	r3, [r5, #0]
 8013738:	2c00      	cmp	r4, #0
 801373a:	d0da      	beq.n	80136f2 <sniprintf+0x16>
 801373c:	9b02      	ldr	r3, [sp, #8]
 801373e:	2200      	movs	r2, #0
 8013740:	701a      	strb	r2, [r3, #0]
 8013742:	e7d6      	b.n	80136f2 <sniprintf+0x16>
 8013744:	200001d4 	.word	0x200001d4

08013748 <siprintf>:
 8013748:	b40e      	push	{r1, r2, r3}
 801374a:	b510      	push	{r4, lr}
 801374c:	b09d      	sub	sp, #116	@ 0x74
 801374e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8013750:	9002      	str	r0, [sp, #8]
 8013752:	9006      	str	r0, [sp, #24]
 8013754:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013758:	480a      	ldr	r0, [pc, #40]	@ (8013784 <siprintf+0x3c>)
 801375a:	9107      	str	r1, [sp, #28]
 801375c:	9104      	str	r1, [sp, #16]
 801375e:	490a      	ldr	r1, [pc, #40]	@ (8013788 <siprintf+0x40>)
 8013760:	f853 2b04 	ldr.w	r2, [r3], #4
 8013764:	9105      	str	r1, [sp, #20]
 8013766:	2400      	movs	r4, #0
 8013768:	a902      	add	r1, sp, #8
 801376a:	6800      	ldr	r0, [r0, #0]
 801376c:	9301      	str	r3, [sp, #4]
 801376e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8013770:	f002 fbc8 	bl	8015f04 <_svfiprintf_r>
 8013774:	9b02      	ldr	r3, [sp, #8]
 8013776:	701c      	strb	r4, [r3, #0]
 8013778:	b01d      	add	sp, #116	@ 0x74
 801377a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801377e:	b003      	add	sp, #12
 8013780:	4770      	bx	lr
 8013782:	bf00      	nop
 8013784:	200001d4 	.word	0x200001d4
 8013788:	ffff0208 	.word	0xffff0208

0801378c <siscanf>:
 801378c:	b40e      	push	{r1, r2, r3}
 801378e:	b570      	push	{r4, r5, r6, lr}
 8013790:	b09d      	sub	sp, #116	@ 0x74
 8013792:	ac21      	add	r4, sp, #132	@ 0x84
 8013794:	2500      	movs	r5, #0
 8013796:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801379a:	f854 6b04 	ldr.w	r6, [r4], #4
 801379e:	f8ad 2014 	strh.w	r2, [sp, #20]
 80137a2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80137a4:	9002      	str	r0, [sp, #8]
 80137a6:	9006      	str	r0, [sp, #24]
 80137a8:	f7ec fd72 	bl	8000290 <strlen>
 80137ac:	4b0b      	ldr	r3, [pc, #44]	@ (80137dc <siscanf+0x50>)
 80137ae:	9003      	str	r0, [sp, #12]
 80137b0:	9007      	str	r0, [sp, #28]
 80137b2:	480b      	ldr	r0, [pc, #44]	@ (80137e0 <siscanf+0x54>)
 80137b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80137b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80137ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80137be:	4632      	mov	r2, r6
 80137c0:	4623      	mov	r3, r4
 80137c2:	a902      	add	r1, sp, #8
 80137c4:	6800      	ldr	r0, [r0, #0]
 80137c6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80137c8:	9514      	str	r5, [sp, #80]	@ 0x50
 80137ca:	9401      	str	r4, [sp, #4]
 80137cc:	f002 fcf0 	bl	80161b0 <__ssvfiscanf_r>
 80137d0:	b01d      	add	sp, #116	@ 0x74
 80137d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137d6:	b003      	add	sp, #12
 80137d8:	4770      	bx	lr
 80137da:	bf00      	nop
 80137dc:	08013807 	.word	0x08013807
 80137e0:	200001d4 	.word	0x200001d4

080137e4 <__sread>:
 80137e4:	b510      	push	{r4, lr}
 80137e6:	460c      	mov	r4, r1
 80137e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80137ec:	f001 f8aa 	bl	8014944 <_read_r>
 80137f0:	2800      	cmp	r0, #0
 80137f2:	bfab      	itete	ge
 80137f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80137f6:	89a3      	ldrhlt	r3, [r4, #12]
 80137f8:	181b      	addge	r3, r3, r0
 80137fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80137fe:	bfac      	ite	ge
 8013800:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013802:	81a3      	strhlt	r3, [r4, #12]
 8013804:	bd10      	pop	{r4, pc}

08013806 <__seofread>:
 8013806:	2000      	movs	r0, #0
 8013808:	4770      	bx	lr

0801380a <__swrite>:
 801380a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801380e:	461f      	mov	r7, r3
 8013810:	898b      	ldrh	r3, [r1, #12]
 8013812:	05db      	lsls	r3, r3, #23
 8013814:	4605      	mov	r5, r0
 8013816:	460c      	mov	r4, r1
 8013818:	4616      	mov	r6, r2
 801381a:	d505      	bpl.n	8013828 <__swrite+0x1e>
 801381c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013820:	2302      	movs	r3, #2
 8013822:	2200      	movs	r2, #0
 8013824:	f001 f87c 	bl	8014920 <_lseek_r>
 8013828:	89a3      	ldrh	r3, [r4, #12]
 801382a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801382e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013832:	81a3      	strh	r3, [r4, #12]
 8013834:	4632      	mov	r2, r6
 8013836:	463b      	mov	r3, r7
 8013838:	4628      	mov	r0, r5
 801383a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801383e:	f001 b893 	b.w	8014968 <_write_r>

08013842 <__sseek>:
 8013842:	b510      	push	{r4, lr}
 8013844:	460c      	mov	r4, r1
 8013846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801384a:	f001 f869 	bl	8014920 <_lseek_r>
 801384e:	1c43      	adds	r3, r0, #1
 8013850:	89a3      	ldrh	r3, [r4, #12]
 8013852:	bf15      	itete	ne
 8013854:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013856:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801385a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801385e:	81a3      	strheq	r3, [r4, #12]
 8013860:	bf18      	it	ne
 8013862:	81a3      	strhne	r3, [r4, #12]
 8013864:	bd10      	pop	{r4, pc}

08013866 <__sclose>:
 8013866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801386a:	f001 b8c1 	b.w	80149f0 <_close_r>
	...

08013870 <std>:
 8013870:	2300      	movs	r3, #0
 8013872:	b510      	push	{r4, lr}
 8013874:	4604      	mov	r4, r0
 8013876:	e9c0 3300 	strd	r3, r3, [r0]
 801387a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801387e:	6083      	str	r3, [r0, #8]
 8013880:	8181      	strh	r1, [r0, #12]
 8013882:	6643      	str	r3, [r0, #100]	@ 0x64
 8013884:	81c2      	strh	r2, [r0, #14]
 8013886:	6183      	str	r3, [r0, #24]
 8013888:	4619      	mov	r1, r3
 801388a:	2208      	movs	r2, #8
 801388c:	305c      	adds	r0, #92	@ 0x5c
 801388e:	f000 ffbd 	bl	801480c <memset>
 8013892:	4b0d      	ldr	r3, [pc, #52]	@ (80138c8 <std+0x58>)
 8013894:	6263      	str	r3, [r4, #36]	@ 0x24
 8013896:	4b0d      	ldr	r3, [pc, #52]	@ (80138cc <std+0x5c>)
 8013898:	62a3      	str	r3, [r4, #40]	@ 0x28
 801389a:	4b0d      	ldr	r3, [pc, #52]	@ (80138d0 <std+0x60>)
 801389c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801389e:	4b0d      	ldr	r3, [pc, #52]	@ (80138d4 <std+0x64>)
 80138a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80138a2:	4b0d      	ldr	r3, [pc, #52]	@ (80138d8 <std+0x68>)
 80138a4:	6224      	str	r4, [r4, #32]
 80138a6:	429c      	cmp	r4, r3
 80138a8:	d006      	beq.n	80138b8 <std+0x48>
 80138aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80138ae:	4294      	cmp	r4, r2
 80138b0:	d002      	beq.n	80138b8 <std+0x48>
 80138b2:	33d0      	adds	r3, #208	@ 0xd0
 80138b4:	429c      	cmp	r4, r3
 80138b6:	d105      	bne.n	80138c4 <std+0x54>
 80138b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80138bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138c0:	f001 b88e 	b.w	80149e0 <__retarget_lock_init_recursive>
 80138c4:	bd10      	pop	{r4, pc}
 80138c6:	bf00      	nop
 80138c8:	080137e5 	.word	0x080137e5
 80138cc:	0801380b 	.word	0x0801380b
 80138d0:	08013843 	.word	0x08013843
 80138d4:	08013867 	.word	0x08013867
 80138d8:	2000666c 	.word	0x2000666c

080138dc <stdio_exit_handler>:
 80138dc:	4a02      	ldr	r2, [pc, #8]	@ (80138e8 <stdio_exit_handler+0xc>)
 80138de:	4903      	ldr	r1, [pc, #12]	@ (80138ec <stdio_exit_handler+0x10>)
 80138e0:	4803      	ldr	r0, [pc, #12]	@ (80138f0 <stdio_exit_handler+0x14>)
 80138e2:	f000 bf05 	b.w	80146f0 <_fwalk_sglue>
 80138e6:	bf00      	nop
 80138e8:	2000005c 	.word	0x2000005c
 80138ec:	08016cb1 	.word	0x08016cb1
 80138f0:	200001d8 	.word	0x200001d8

080138f4 <cleanup_stdio>:
 80138f4:	6841      	ldr	r1, [r0, #4]
 80138f6:	4b0c      	ldr	r3, [pc, #48]	@ (8013928 <cleanup_stdio+0x34>)
 80138f8:	4299      	cmp	r1, r3
 80138fa:	b510      	push	{r4, lr}
 80138fc:	4604      	mov	r4, r0
 80138fe:	d001      	beq.n	8013904 <cleanup_stdio+0x10>
 8013900:	f003 f9d6 	bl	8016cb0 <_fflush_r>
 8013904:	68a1      	ldr	r1, [r4, #8]
 8013906:	4b09      	ldr	r3, [pc, #36]	@ (801392c <cleanup_stdio+0x38>)
 8013908:	4299      	cmp	r1, r3
 801390a:	d002      	beq.n	8013912 <cleanup_stdio+0x1e>
 801390c:	4620      	mov	r0, r4
 801390e:	f003 f9cf 	bl	8016cb0 <_fflush_r>
 8013912:	68e1      	ldr	r1, [r4, #12]
 8013914:	4b06      	ldr	r3, [pc, #24]	@ (8013930 <cleanup_stdio+0x3c>)
 8013916:	4299      	cmp	r1, r3
 8013918:	d004      	beq.n	8013924 <cleanup_stdio+0x30>
 801391a:	4620      	mov	r0, r4
 801391c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013920:	f003 b9c6 	b.w	8016cb0 <_fflush_r>
 8013924:	bd10      	pop	{r4, pc}
 8013926:	bf00      	nop
 8013928:	2000666c 	.word	0x2000666c
 801392c:	200066d4 	.word	0x200066d4
 8013930:	2000673c 	.word	0x2000673c

08013934 <global_stdio_init.part.0>:
 8013934:	b510      	push	{r4, lr}
 8013936:	4b0b      	ldr	r3, [pc, #44]	@ (8013964 <global_stdio_init.part.0+0x30>)
 8013938:	4c0b      	ldr	r4, [pc, #44]	@ (8013968 <global_stdio_init.part.0+0x34>)
 801393a:	4a0c      	ldr	r2, [pc, #48]	@ (801396c <global_stdio_init.part.0+0x38>)
 801393c:	601a      	str	r2, [r3, #0]
 801393e:	4620      	mov	r0, r4
 8013940:	2200      	movs	r2, #0
 8013942:	2104      	movs	r1, #4
 8013944:	f7ff ff94 	bl	8013870 <std>
 8013948:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801394c:	2201      	movs	r2, #1
 801394e:	2109      	movs	r1, #9
 8013950:	f7ff ff8e 	bl	8013870 <std>
 8013954:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013958:	2202      	movs	r2, #2
 801395a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801395e:	2112      	movs	r1, #18
 8013960:	f7ff bf86 	b.w	8013870 <std>
 8013964:	200067a4 	.word	0x200067a4
 8013968:	2000666c 	.word	0x2000666c
 801396c:	080138dd 	.word	0x080138dd

08013970 <__sfp_lock_acquire>:
 8013970:	4801      	ldr	r0, [pc, #4]	@ (8013978 <__sfp_lock_acquire+0x8>)
 8013972:	f001 b836 	b.w	80149e2 <__retarget_lock_acquire_recursive>
 8013976:	bf00      	nop
 8013978:	200067a9 	.word	0x200067a9

0801397c <__sfp_lock_release>:
 801397c:	4801      	ldr	r0, [pc, #4]	@ (8013984 <__sfp_lock_release+0x8>)
 801397e:	f001 b831 	b.w	80149e4 <__retarget_lock_release_recursive>
 8013982:	bf00      	nop
 8013984:	200067a9 	.word	0x200067a9

08013988 <__sinit>:
 8013988:	b510      	push	{r4, lr}
 801398a:	4604      	mov	r4, r0
 801398c:	f7ff fff0 	bl	8013970 <__sfp_lock_acquire>
 8013990:	6a23      	ldr	r3, [r4, #32]
 8013992:	b11b      	cbz	r3, 801399c <__sinit+0x14>
 8013994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013998:	f7ff bff0 	b.w	801397c <__sfp_lock_release>
 801399c:	4b04      	ldr	r3, [pc, #16]	@ (80139b0 <__sinit+0x28>)
 801399e:	6223      	str	r3, [r4, #32]
 80139a0:	4b04      	ldr	r3, [pc, #16]	@ (80139b4 <__sinit+0x2c>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d1f5      	bne.n	8013994 <__sinit+0xc>
 80139a8:	f7ff ffc4 	bl	8013934 <global_stdio_init.part.0>
 80139ac:	e7f2      	b.n	8013994 <__sinit+0xc>
 80139ae:	bf00      	nop
 80139b0:	080138f5 	.word	0x080138f5
 80139b4:	200067a4 	.word	0x200067a4

080139b8 <sulp>:
 80139b8:	b570      	push	{r4, r5, r6, lr}
 80139ba:	4604      	mov	r4, r0
 80139bc:	460d      	mov	r5, r1
 80139be:	ec45 4b10 	vmov	d0, r4, r5
 80139c2:	4616      	mov	r6, r2
 80139c4:	f003 fd14 	bl	80173f0 <__ulp>
 80139c8:	ec51 0b10 	vmov	r0, r1, d0
 80139cc:	b17e      	cbz	r6, 80139ee <sulp+0x36>
 80139ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80139d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	dd09      	ble.n	80139ee <sulp+0x36>
 80139da:	051b      	lsls	r3, r3, #20
 80139dc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80139e0:	2400      	movs	r4, #0
 80139e2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80139e6:	4622      	mov	r2, r4
 80139e8:	462b      	mov	r3, r5
 80139ea:	f7ec fe15 	bl	8000618 <__aeabi_dmul>
 80139ee:	ec41 0b10 	vmov	d0, r0, r1
 80139f2:	bd70      	pop	{r4, r5, r6, pc}
 80139f4:	0000      	movs	r0, r0
	...

080139f8 <_strtod_l>:
 80139f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139fc:	b09f      	sub	sp, #124	@ 0x7c
 80139fe:	460c      	mov	r4, r1
 8013a00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013a02:	2200      	movs	r2, #0
 8013a04:	921a      	str	r2, [sp, #104]	@ 0x68
 8013a06:	9005      	str	r0, [sp, #20]
 8013a08:	f04f 0a00 	mov.w	sl, #0
 8013a0c:	f04f 0b00 	mov.w	fp, #0
 8013a10:	460a      	mov	r2, r1
 8013a12:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a14:	7811      	ldrb	r1, [r2, #0]
 8013a16:	292b      	cmp	r1, #43	@ 0x2b
 8013a18:	d04a      	beq.n	8013ab0 <_strtod_l+0xb8>
 8013a1a:	d838      	bhi.n	8013a8e <_strtod_l+0x96>
 8013a1c:	290d      	cmp	r1, #13
 8013a1e:	d832      	bhi.n	8013a86 <_strtod_l+0x8e>
 8013a20:	2908      	cmp	r1, #8
 8013a22:	d832      	bhi.n	8013a8a <_strtod_l+0x92>
 8013a24:	2900      	cmp	r1, #0
 8013a26:	d03b      	beq.n	8013aa0 <_strtod_l+0xa8>
 8013a28:	2200      	movs	r2, #0
 8013a2a:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013a2e:	782a      	ldrb	r2, [r5, #0]
 8013a30:	2a30      	cmp	r2, #48	@ 0x30
 8013a32:	f040 80b2 	bne.w	8013b9a <_strtod_l+0x1a2>
 8013a36:	786a      	ldrb	r2, [r5, #1]
 8013a38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013a3c:	2a58      	cmp	r2, #88	@ 0x58
 8013a3e:	d16e      	bne.n	8013b1e <_strtod_l+0x126>
 8013a40:	9302      	str	r3, [sp, #8]
 8013a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a44:	9301      	str	r3, [sp, #4]
 8013a46:	ab1a      	add	r3, sp, #104	@ 0x68
 8013a48:	9300      	str	r3, [sp, #0]
 8013a4a:	4a8f      	ldr	r2, [pc, #572]	@ (8013c88 <_strtod_l+0x290>)
 8013a4c:	9805      	ldr	r0, [sp, #20]
 8013a4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013a50:	a919      	add	r1, sp, #100	@ 0x64
 8013a52:	f001 ff2b 	bl	80158ac <__gethex>
 8013a56:	f010 060f 	ands.w	r6, r0, #15
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	d005      	beq.n	8013a6a <_strtod_l+0x72>
 8013a5e:	2e06      	cmp	r6, #6
 8013a60:	d128      	bne.n	8013ab4 <_strtod_l+0xbc>
 8013a62:	3501      	adds	r5, #1
 8013a64:	2300      	movs	r3, #0
 8013a66:	9519      	str	r5, [sp, #100]	@ 0x64
 8013a68:	930e      	str	r3, [sp, #56]	@ 0x38
 8013a6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	f040 858e 	bne.w	801458e <_strtod_l+0xb96>
 8013a72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a74:	b1cb      	cbz	r3, 8013aaa <_strtod_l+0xb2>
 8013a76:	4652      	mov	r2, sl
 8013a78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013a7c:	ec43 2b10 	vmov	d0, r2, r3
 8013a80:	b01f      	add	sp, #124	@ 0x7c
 8013a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a86:	2920      	cmp	r1, #32
 8013a88:	d1ce      	bne.n	8013a28 <_strtod_l+0x30>
 8013a8a:	3201      	adds	r2, #1
 8013a8c:	e7c1      	b.n	8013a12 <_strtod_l+0x1a>
 8013a8e:	292d      	cmp	r1, #45	@ 0x2d
 8013a90:	d1ca      	bne.n	8013a28 <_strtod_l+0x30>
 8013a92:	2101      	movs	r1, #1
 8013a94:	910e      	str	r1, [sp, #56]	@ 0x38
 8013a96:	1c51      	adds	r1, r2, #1
 8013a98:	9119      	str	r1, [sp, #100]	@ 0x64
 8013a9a:	7852      	ldrb	r2, [r2, #1]
 8013a9c:	2a00      	cmp	r2, #0
 8013a9e:	d1c5      	bne.n	8013a2c <_strtod_l+0x34>
 8013aa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013aa2:	9419      	str	r4, [sp, #100]	@ 0x64
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	f040 8570 	bne.w	801458a <_strtod_l+0xb92>
 8013aaa:	4652      	mov	r2, sl
 8013aac:	465b      	mov	r3, fp
 8013aae:	e7e5      	b.n	8013a7c <_strtod_l+0x84>
 8013ab0:	2100      	movs	r1, #0
 8013ab2:	e7ef      	b.n	8013a94 <_strtod_l+0x9c>
 8013ab4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013ab6:	b13a      	cbz	r2, 8013ac8 <_strtod_l+0xd0>
 8013ab8:	2135      	movs	r1, #53	@ 0x35
 8013aba:	a81c      	add	r0, sp, #112	@ 0x70
 8013abc:	f003 fd92 	bl	80175e4 <__copybits>
 8013ac0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013ac2:	9805      	ldr	r0, [sp, #20]
 8013ac4:	f003 f968 	bl	8016d98 <_Bfree>
 8013ac8:	3e01      	subs	r6, #1
 8013aca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013acc:	2e04      	cmp	r6, #4
 8013ace:	d806      	bhi.n	8013ade <_strtod_l+0xe6>
 8013ad0:	e8df f006 	tbb	[pc, r6]
 8013ad4:	201d0314 	.word	0x201d0314
 8013ad8:	14          	.byte	0x14
 8013ad9:	00          	.byte	0x00
 8013ada:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013ade:	05e1      	lsls	r1, r4, #23
 8013ae0:	bf48      	it	mi
 8013ae2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013ae6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013aea:	0d1b      	lsrs	r3, r3, #20
 8013aec:	051b      	lsls	r3, r3, #20
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d1bb      	bne.n	8013a6a <_strtod_l+0x72>
 8013af2:	f000 ff4b 	bl	801498c <__errno>
 8013af6:	2322      	movs	r3, #34	@ 0x22
 8013af8:	6003      	str	r3, [r0, #0]
 8013afa:	e7b6      	b.n	8013a6a <_strtod_l+0x72>
 8013afc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013b00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013b04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013b08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013b0c:	e7e7      	b.n	8013ade <_strtod_l+0xe6>
 8013b0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8013c90 <_strtod_l+0x298>
 8013b12:	e7e4      	b.n	8013ade <_strtod_l+0xe6>
 8013b14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013b18:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8013b1c:	e7df      	b.n	8013ade <_strtod_l+0xe6>
 8013b1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013b20:	1c5a      	adds	r2, r3, #1
 8013b22:	9219      	str	r2, [sp, #100]	@ 0x64
 8013b24:	785b      	ldrb	r3, [r3, #1]
 8013b26:	2b30      	cmp	r3, #48	@ 0x30
 8013b28:	d0f9      	beq.n	8013b1e <_strtod_l+0x126>
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d09d      	beq.n	8013a6a <_strtod_l+0x72>
 8013b2e:	2301      	movs	r3, #1
 8013b30:	2700      	movs	r7, #0
 8013b32:	9308      	str	r3, [sp, #32]
 8013b34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013b36:	930c      	str	r3, [sp, #48]	@ 0x30
 8013b38:	970b      	str	r7, [sp, #44]	@ 0x2c
 8013b3a:	46b9      	mov	r9, r7
 8013b3c:	220a      	movs	r2, #10
 8013b3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013b40:	7805      	ldrb	r5, [r0, #0]
 8013b42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013b46:	b2d9      	uxtb	r1, r3
 8013b48:	2909      	cmp	r1, #9
 8013b4a:	d928      	bls.n	8013b9e <_strtod_l+0x1a6>
 8013b4c:	494f      	ldr	r1, [pc, #316]	@ (8013c8c <_strtod_l+0x294>)
 8013b4e:	2201      	movs	r2, #1
 8013b50:	f000 fe64 	bl	801481c <strncmp>
 8013b54:	2800      	cmp	r0, #0
 8013b56:	d032      	beq.n	8013bbe <_strtod_l+0x1c6>
 8013b58:	2000      	movs	r0, #0
 8013b5a:	462a      	mov	r2, r5
 8013b5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8013b5e:	464d      	mov	r5, r9
 8013b60:	4603      	mov	r3, r0
 8013b62:	2a65      	cmp	r2, #101	@ 0x65
 8013b64:	d001      	beq.n	8013b6a <_strtod_l+0x172>
 8013b66:	2a45      	cmp	r2, #69	@ 0x45
 8013b68:	d114      	bne.n	8013b94 <_strtod_l+0x19c>
 8013b6a:	b91d      	cbnz	r5, 8013b74 <_strtod_l+0x17c>
 8013b6c:	9a08      	ldr	r2, [sp, #32]
 8013b6e:	4302      	orrs	r2, r0
 8013b70:	d096      	beq.n	8013aa0 <_strtod_l+0xa8>
 8013b72:	2500      	movs	r5, #0
 8013b74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013b76:	1c62      	adds	r2, r4, #1
 8013b78:	9219      	str	r2, [sp, #100]	@ 0x64
 8013b7a:	7862      	ldrb	r2, [r4, #1]
 8013b7c:	2a2b      	cmp	r2, #43	@ 0x2b
 8013b7e:	d07a      	beq.n	8013c76 <_strtod_l+0x27e>
 8013b80:	2a2d      	cmp	r2, #45	@ 0x2d
 8013b82:	d07e      	beq.n	8013c82 <_strtod_l+0x28a>
 8013b84:	f04f 0c00 	mov.w	ip, #0
 8013b88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013b8c:	2909      	cmp	r1, #9
 8013b8e:	f240 8085 	bls.w	8013c9c <_strtod_l+0x2a4>
 8013b92:	9419      	str	r4, [sp, #100]	@ 0x64
 8013b94:	f04f 0800 	mov.w	r8, #0
 8013b98:	e0a5      	b.n	8013ce6 <_strtod_l+0x2ee>
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	e7c8      	b.n	8013b30 <_strtod_l+0x138>
 8013b9e:	f1b9 0f08 	cmp.w	r9, #8
 8013ba2:	bfd8      	it	le
 8013ba4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8013ba6:	f100 0001 	add.w	r0, r0, #1
 8013baa:	bfda      	itte	le
 8013bac:	fb02 3301 	mlale	r3, r2, r1, r3
 8013bb0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8013bb2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8013bb6:	f109 0901 	add.w	r9, r9, #1
 8013bba:	9019      	str	r0, [sp, #100]	@ 0x64
 8013bbc:	e7bf      	b.n	8013b3e <_strtod_l+0x146>
 8013bbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bc0:	1c5a      	adds	r2, r3, #1
 8013bc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8013bc4:	785a      	ldrb	r2, [r3, #1]
 8013bc6:	f1b9 0f00 	cmp.w	r9, #0
 8013bca:	d03b      	beq.n	8013c44 <_strtod_l+0x24c>
 8013bcc:	900a      	str	r0, [sp, #40]	@ 0x28
 8013bce:	464d      	mov	r5, r9
 8013bd0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013bd4:	2b09      	cmp	r3, #9
 8013bd6:	d912      	bls.n	8013bfe <_strtod_l+0x206>
 8013bd8:	2301      	movs	r3, #1
 8013bda:	e7c2      	b.n	8013b62 <_strtod_l+0x16a>
 8013bdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bde:	1c5a      	adds	r2, r3, #1
 8013be0:	9219      	str	r2, [sp, #100]	@ 0x64
 8013be2:	785a      	ldrb	r2, [r3, #1]
 8013be4:	3001      	adds	r0, #1
 8013be6:	2a30      	cmp	r2, #48	@ 0x30
 8013be8:	d0f8      	beq.n	8013bdc <_strtod_l+0x1e4>
 8013bea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013bee:	2b08      	cmp	r3, #8
 8013bf0:	f200 84d2 	bhi.w	8014598 <_strtod_l+0xba0>
 8013bf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bf6:	900a      	str	r0, [sp, #40]	@ 0x28
 8013bf8:	2000      	movs	r0, #0
 8013bfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8013bfc:	4605      	mov	r5, r0
 8013bfe:	3a30      	subs	r2, #48	@ 0x30
 8013c00:	f100 0301 	add.w	r3, r0, #1
 8013c04:	d018      	beq.n	8013c38 <_strtod_l+0x240>
 8013c06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013c08:	4419      	add	r1, r3
 8013c0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8013c0c:	462e      	mov	r6, r5
 8013c0e:	f04f 0e0a 	mov.w	lr, #10
 8013c12:	1c71      	adds	r1, r6, #1
 8013c14:	eba1 0c05 	sub.w	ip, r1, r5
 8013c18:	4563      	cmp	r3, ip
 8013c1a:	dc15      	bgt.n	8013c48 <_strtod_l+0x250>
 8013c1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8013c20:	182b      	adds	r3, r5, r0
 8013c22:	2b08      	cmp	r3, #8
 8013c24:	f105 0501 	add.w	r5, r5, #1
 8013c28:	4405      	add	r5, r0
 8013c2a:	dc1a      	bgt.n	8013c62 <_strtod_l+0x26a>
 8013c2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013c2e:	230a      	movs	r3, #10
 8013c30:	fb03 2301 	mla	r3, r3, r1, r2
 8013c34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013c36:	2300      	movs	r3, #0
 8013c38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013c3a:	1c51      	adds	r1, r2, #1
 8013c3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8013c3e:	7852      	ldrb	r2, [r2, #1]
 8013c40:	4618      	mov	r0, r3
 8013c42:	e7c5      	b.n	8013bd0 <_strtod_l+0x1d8>
 8013c44:	4648      	mov	r0, r9
 8013c46:	e7ce      	b.n	8013be6 <_strtod_l+0x1ee>
 8013c48:	2e08      	cmp	r6, #8
 8013c4a:	dc05      	bgt.n	8013c58 <_strtod_l+0x260>
 8013c4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8013c4e:	fb0e f606 	mul.w	r6, lr, r6
 8013c52:	960b      	str	r6, [sp, #44]	@ 0x2c
 8013c54:	460e      	mov	r6, r1
 8013c56:	e7dc      	b.n	8013c12 <_strtod_l+0x21a>
 8013c58:	2910      	cmp	r1, #16
 8013c5a:	bfd8      	it	le
 8013c5c:	fb0e f707 	mulle.w	r7, lr, r7
 8013c60:	e7f8      	b.n	8013c54 <_strtod_l+0x25c>
 8013c62:	2b0f      	cmp	r3, #15
 8013c64:	bfdc      	itt	le
 8013c66:	230a      	movle	r3, #10
 8013c68:	fb03 2707 	mlale	r7, r3, r7, r2
 8013c6c:	e7e3      	b.n	8013c36 <_strtod_l+0x23e>
 8013c6e:	2300      	movs	r3, #0
 8013c70:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c72:	2301      	movs	r3, #1
 8013c74:	e77a      	b.n	8013b6c <_strtod_l+0x174>
 8013c76:	f04f 0c00 	mov.w	ip, #0
 8013c7a:	1ca2      	adds	r2, r4, #2
 8013c7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8013c7e:	78a2      	ldrb	r2, [r4, #2]
 8013c80:	e782      	b.n	8013b88 <_strtod_l+0x190>
 8013c82:	f04f 0c01 	mov.w	ip, #1
 8013c86:	e7f8      	b.n	8013c7a <_strtod_l+0x282>
 8013c88:	08018600 	.word	0x08018600
 8013c8c:	080183d7 	.word	0x080183d7
 8013c90:	7ff00000 	.word	0x7ff00000
 8013c94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013c96:	1c51      	adds	r1, r2, #1
 8013c98:	9119      	str	r1, [sp, #100]	@ 0x64
 8013c9a:	7852      	ldrb	r2, [r2, #1]
 8013c9c:	2a30      	cmp	r2, #48	@ 0x30
 8013c9e:	d0f9      	beq.n	8013c94 <_strtod_l+0x29c>
 8013ca0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013ca4:	2908      	cmp	r1, #8
 8013ca6:	f63f af75 	bhi.w	8013b94 <_strtod_l+0x19c>
 8013caa:	3a30      	subs	r2, #48	@ 0x30
 8013cac:	9209      	str	r2, [sp, #36]	@ 0x24
 8013cae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013cb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013cb2:	f04f 080a 	mov.w	r8, #10
 8013cb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013cb8:	1c56      	adds	r6, r2, #1
 8013cba:	9619      	str	r6, [sp, #100]	@ 0x64
 8013cbc:	7852      	ldrb	r2, [r2, #1]
 8013cbe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013cc2:	f1be 0f09 	cmp.w	lr, #9
 8013cc6:	d939      	bls.n	8013d3c <_strtod_l+0x344>
 8013cc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013cca:	1a76      	subs	r6, r6, r1
 8013ccc:	2e08      	cmp	r6, #8
 8013cce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013cd2:	dc03      	bgt.n	8013cdc <_strtod_l+0x2e4>
 8013cd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013cd6:	4588      	cmp	r8, r1
 8013cd8:	bfa8      	it	ge
 8013cda:	4688      	movge	r8, r1
 8013cdc:	f1bc 0f00 	cmp.w	ip, #0
 8013ce0:	d001      	beq.n	8013ce6 <_strtod_l+0x2ee>
 8013ce2:	f1c8 0800 	rsb	r8, r8, #0
 8013ce6:	2d00      	cmp	r5, #0
 8013ce8:	d14e      	bne.n	8013d88 <_strtod_l+0x390>
 8013cea:	9908      	ldr	r1, [sp, #32]
 8013cec:	4308      	orrs	r0, r1
 8013cee:	f47f aebc 	bne.w	8013a6a <_strtod_l+0x72>
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	f47f aed4 	bne.w	8013aa0 <_strtod_l+0xa8>
 8013cf8:	2a69      	cmp	r2, #105	@ 0x69
 8013cfa:	d028      	beq.n	8013d4e <_strtod_l+0x356>
 8013cfc:	dc25      	bgt.n	8013d4a <_strtod_l+0x352>
 8013cfe:	2a49      	cmp	r2, #73	@ 0x49
 8013d00:	d025      	beq.n	8013d4e <_strtod_l+0x356>
 8013d02:	2a4e      	cmp	r2, #78	@ 0x4e
 8013d04:	f47f aecc 	bne.w	8013aa0 <_strtod_l+0xa8>
 8013d08:	499a      	ldr	r1, [pc, #616]	@ (8013f74 <_strtod_l+0x57c>)
 8013d0a:	a819      	add	r0, sp, #100	@ 0x64
 8013d0c:	f001 fff0 	bl	8015cf0 <__match>
 8013d10:	2800      	cmp	r0, #0
 8013d12:	f43f aec5 	beq.w	8013aa0 <_strtod_l+0xa8>
 8013d16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013d18:	781b      	ldrb	r3, [r3, #0]
 8013d1a:	2b28      	cmp	r3, #40	@ 0x28
 8013d1c:	d12e      	bne.n	8013d7c <_strtod_l+0x384>
 8013d1e:	4996      	ldr	r1, [pc, #600]	@ (8013f78 <_strtod_l+0x580>)
 8013d20:	aa1c      	add	r2, sp, #112	@ 0x70
 8013d22:	a819      	add	r0, sp, #100	@ 0x64
 8013d24:	f001 fff8 	bl	8015d18 <__hexnan>
 8013d28:	2805      	cmp	r0, #5
 8013d2a:	d127      	bne.n	8013d7c <_strtod_l+0x384>
 8013d2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013d2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013d32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013d36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013d3a:	e696      	b.n	8013a6a <_strtod_l+0x72>
 8013d3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013d3e:	fb08 2101 	mla	r1, r8, r1, r2
 8013d42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013d46:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d48:	e7b5      	b.n	8013cb6 <_strtod_l+0x2be>
 8013d4a:	2a6e      	cmp	r2, #110	@ 0x6e
 8013d4c:	e7da      	b.n	8013d04 <_strtod_l+0x30c>
 8013d4e:	498b      	ldr	r1, [pc, #556]	@ (8013f7c <_strtod_l+0x584>)
 8013d50:	a819      	add	r0, sp, #100	@ 0x64
 8013d52:	f001 ffcd 	bl	8015cf0 <__match>
 8013d56:	2800      	cmp	r0, #0
 8013d58:	f43f aea2 	beq.w	8013aa0 <_strtod_l+0xa8>
 8013d5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013d5e:	4988      	ldr	r1, [pc, #544]	@ (8013f80 <_strtod_l+0x588>)
 8013d60:	3b01      	subs	r3, #1
 8013d62:	a819      	add	r0, sp, #100	@ 0x64
 8013d64:	9319      	str	r3, [sp, #100]	@ 0x64
 8013d66:	f001 ffc3 	bl	8015cf0 <__match>
 8013d6a:	b910      	cbnz	r0, 8013d72 <_strtod_l+0x37a>
 8013d6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013d6e:	3301      	adds	r3, #1
 8013d70:	9319      	str	r3, [sp, #100]	@ 0x64
 8013d72:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8013f90 <_strtod_l+0x598>
 8013d76:	f04f 0a00 	mov.w	sl, #0
 8013d7a:	e676      	b.n	8013a6a <_strtod_l+0x72>
 8013d7c:	4881      	ldr	r0, [pc, #516]	@ (8013f84 <_strtod_l+0x58c>)
 8013d7e:	f000 fe5f 	bl	8014a40 <nan>
 8013d82:	ec5b ab10 	vmov	sl, fp, d0
 8013d86:	e670      	b.n	8013a6a <_strtod_l+0x72>
 8013d88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013d8c:	eba8 0303 	sub.w	r3, r8, r3
 8013d90:	f1b9 0f00 	cmp.w	r9, #0
 8013d94:	bf08      	it	eq
 8013d96:	46a9      	moveq	r9, r5
 8013d98:	2d10      	cmp	r5, #16
 8013d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d9c:	462c      	mov	r4, r5
 8013d9e:	bfa8      	it	ge
 8013da0:	2410      	movge	r4, #16
 8013da2:	f7ec fbbf 	bl	8000524 <__aeabi_ui2d>
 8013da6:	2d09      	cmp	r5, #9
 8013da8:	4682      	mov	sl, r0
 8013daa:	468b      	mov	fp, r1
 8013dac:	dc13      	bgt.n	8013dd6 <_strtod_l+0x3de>
 8013dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	f43f ae5a 	beq.w	8013a6a <_strtod_l+0x72>
 8013db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013db8:	dd78      	ble.n	8013eac <_strtod_l+0x4b4>
 8013dba:	2b16      	cmp	r3, #22
 8013dbc:	dc5f      	bgt.n	8013e7e <_strtod_l+0x486>
 8013dbe:	4972      	ldr	r1, [pc, #456]	@ (8013f88 <_strtod_l+0x590>)
 8013dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013dc8:	4652      	mov	r2, sl
 8013dca:	465b      	mov	r3, fp
 8013dcc:	f7ec fc24 	bl	8000618 <__aeabi_dmul>
 8013dd0:	4682      	mov	sl, r0
 8013dd2:	468b      	mov	fp, r1
 8013dd4:	e649      	b.n	8013a6a <_strtod_l+0x72>
 8013dd6:	4b6c      	ldr	r3, [pc, #432]	@ (8013f88 <_strtod_l+0x590>)
 8013dd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013ddc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013de0:	f7ec fc1a 	bl	8000618 <__aeabi_dmul>
 8013de4:	4682      	mov	sl, r0
 8013de6:	4638      	mov	r0, r7
 8013de8:	468b      	mov	fp, r1
 8013dea:	f7ec fb9b 	bl	8000524 <__aeabi_ui2d>
 8013dee:	4602      	mov	r2, r0
 8013df0:	460b      	mov	r3, r1
 8013df2:	4650      	mov	r0, sl
 8013df4:	4659      	mov	r1, fp
 8013df6:	f7ec fa59 	bl	80002ac <__adddf3>
 8013dfa:	2d0f      	cmp	r5, #15
 8013dfc:	4682      	mov	sl, r0
 8013dfe:	468b      	mov	fp, r1
 8013e00:	ddd5      	ble.n	8013dae <_strtod_l+0x3b6>
 8013e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e04:	1b2c      	subs	r4, r5, r4
 8013e06:	441c      	add	r4, r3
 8013e08:	2c00      	cmp	r4, #0
 8013e0a:	f340 8093 	ble.w	8013f34 <_strtod_l+0x53c>
 8013e0e:	f014 030f 	ands.w	r3, r4, #15
 8013e12:	d00a      	beq.n	8013e2a <_strtod_l+0x432>
 8013e14:	495c      	ldr	r1, [pc, #368]	@ (8013f88 <_strtod_l+0x590>)
 8013e16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013e1a:	4652      	mov	r2, sl
 8013e1c:	465b      	mov	r3, fp
 8013e1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e22:	f7ec fbf9 	bl	8000618 <__aeabi_dmul>
 8013e26:	4682      	mov	sl, r0
 8013e28:	468b      	mov	fp, r1
 8013e2a:	f034 040f 	bics.w	r4, r4, #15
 8013e2e:	d073      	beq.n	8013f18 <_strtod_l+0x520>
 8013e30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013e34:	dd49      	ble.n	8013eca <_strtod_l+0x4d2>
 8013e36:	2400      	movs	r4, #0
 8013e38:	46a0      	mov	r8, r4
 8013e3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013e3c:	46a1      	mov	r9, r4
 8013e3e:	9a05      	ldr	r2, [sp, #20]
 8013e40:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8013f90 <_strtod_l+0x598>
 8013e44:	2322      	movs	r3, #34	@ 0x22
 8013e46:	6013      	str	r3, [r2, #0]
 8013e48:	f04f 0a00 	mov.w	sl, #0
 8013e4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	f43f ae0b 	beq.w	8013a6a <_strtod_l+0x72>
 8013e54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013e56:	9805      	ldr	r0, [sp, #20]
 8013e58:	f002 ff9e 	bl	8016d98 <_Bfree>
 8013e5c:	9805      	ldr	r0, [sp, #20]
 8013e5e:	4649      	mov	r1, r9
 8013e60:	f002 ff9a 	bl	8016d98 <_Bfree>
 8013e64:	9805      	ldr	r0, [sp, #20]
 8013e66:	4641      	mov	r1, r8
 8013e68:	f002 ff96 	bl	8016d98 <_Bfree>
 8013e6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013e6e:	9805      	ldr	r0, [sp, #20]
 8013e70:	f002 ff92 	bl	8016d98 <_Bfree>
 8013e74:	9805      	ldr	r0, [sp, #20]
 8013e76:	4621      	mov	r1, r4
 8013e78:	f002 ff8e 	bl	8016d98 <_Bfree>
 8013e7c:	e5f5      	b.n	8013a6a <_strtod_l+0x72>
 8013e7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013e84:	4293      	cmp	r3, r2
 8013e86:	dbbc      	blt.n	8013e02 <_strtod_l+0x40a>
 8013e88:	4c3f      	ldr	r4, [pc, #252]	@ (8013f88 <_strtod_l+0x590>)
 8013e8a:	f1c5 050f 	rsb	r5, r5, #15
 8013e8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013e92:	4652      	mov	r2, sl
 8013e94:	465b      	mov	r3, fp
 8013e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e9a:	f7ec fbbd 	bl	8000618 <__aeabi_dmul>
 8013e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ea0:	1b5d      	subs	r5, r3, r5
 8013ea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013ea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013eaa:	e78f      	b.n	8013dcc <_strtod_l+0x3d4>
 8013eac:	3316      	adds	r3, #22
 8013eae:	dba8      	blt.n	8013e02 <_strtod_l+0x40a>
 8013eb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013eb2:	eba3 0808 	sub.w	r8, r3, r8
 8013eb6:	4b34      	ldr	r3, [pc, #208]	@ (8013f88 <_strtod_l+0x590>)
 8013eb8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013ebc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013ec0:	4650      	mov	r0, sl
 8013ec2:	4659      	mov	r1, fp
 8013ec4:	f7ec fcd2 	bl	800086c <__aeabi_ddiv>
 8013ec8:	e782      	b.n	8013dd0 <_strtod_l+0x3d8>
 8013eca:	2300      	movs	r3, #0
 8013ecc:	4f2f      	ldr	r7, [pc, #188]	@ (8013f8c <_strtod_l+0x594>)
 8013ece:	1124      	asrs	r4, r4, #4
 8013ed0:	4650      	mov	r0, sl
 8013ed2:	4659      	mov	r1, fp
 8013ed4:	461e      	mov	r6, r3
 8013ed6:	2c01      	cmp	r4, #1
 8013ed8:	dc21      	bgt.n	8013f1e <_strtod_l+0x526>
 8013eda:	b10b      	cbz	r3, 8013ee0 <_strtod_l+0x4e8>
 8013edc:	4682      	mov	sl, r0
 8013ede:	468b      	mov	fp, r1
 8013ee0:	492a      	ldr	r1, [pc, #168]	@ (8013f8c <_strtod_l+0x594>)
 8013ee2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013ee6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013eea:	4652      	mov	r2, sl
 8013eec:	465b      	mov	r3, fp
 8013eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ef2:	f7ec fb91 	bl	8000618 <__aeabi_dmul>
 8013ef6:	4b26      	ldr	r3, [pc, #152]	@ (8013f90 <_strtod_l+0x598>)
 8013ef8:	460a      	mov	r2, r1
 8013efa:	400b      	ands	r3, r1
 8013efc:	4925      	ldr	r1, [pc, #148]	@ (8013f94 <_strtod_l+0x59c>)
 8013efe:	428b      	cmp	r3, r1
 8013f00:	4682      	mov	sl, r0
 8013f02:	d898      	bhi.n	8013e36 <_strtod_l+0x43e>
 8013f04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013f08:	428b      	cmp	r3, r1
 8013f0a:	bf86      	itte	hi
 8013f0c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8013f98 <_strtod_l+0x5a0>
 8013f10:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8013f14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013f18:	2300      	movs	r3, #0
 8013f1a:	9308      	str	r3, [sp, #32]
 8013f1c:	e076      	b.n	801400c <_strtod_l+0x614>
 8013f1e:	07e2      	lsls	r2, r4, #31
 8013f20:	d504      	bpl.n	8013f2c <_strtod_l+0x534>
 8013f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013f26:	f7ec fb77 	bl	8000618 <__aeabi_dmul>
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	3601      	adds	r6, #1
 8013f2e:	1064      	asrs	r4, r4, #1
 8013f30:	3708      	adds	r7, #8
 8013f32:	e7d0      	b.n	8013ed6 <_strtod_l+0x4de>
 8013f34:	d0f0      	beq.n	8013f18 <_strtod_l+0x520>
 8013f36:	4264      	negs	r4, r4
 8013f38:	f014 020f 	ands.w	r2, r4, #15
 8013f3c:	d00a      	beq.n	8013f54 <_strtod_l+0x55c>
 8013f3e:	4b12      	ldr	r3, [pc, #72]	@ (8013f88 <_strtod_l+0x590>)
 8013f40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013f44:	4650      	mov	r0, sl
 8013f46:	4659      	mov	r1, fp
 8013f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f4c:	f7ec fc8e 	bl	800086c <__aeabi_ddiv>
 8013f50:	4682      	mov	sl, r0
 8013f52:	468b      	mov	fp, r1
 8013f54:	1124      	asrs	r4, r4, #4
 8013f56:	d0df      	beq.n	8013f18 <_strtod_l+0x520>
 8013f58:	2c1f      	cmp	r4, #31
 8013f5a:	dd1f      	ble.n	8013f9c <_strtod_l+0x5a4>
 8013f5c:	2400      	movs	r4, #0
 8013f5e:	46a0      	mov	r8, r4
 8013f60:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013f62:	46a1      	mov	r9, r4
 8013f64:	9a05      	ldr	r2, [sp, #20]
 8013f66:	2322      	movs	r3, #34	@ 0x22
 8013f68:	f04f 0a00 	mov.w	sl, #0
 8013f6c:	f04f 0b00 	mov.w	fp, #0
 8013f70:	6013      	str	r3, [r2, #0]
 8013f72:	e76b      	b.n	8013e4c <_strtod_l+0x454>
 8013f74:	080183ad 	.word	0x080183ad
 8013f78:	080185ec 	.word	0x080185ec
 8013f7c:	080183a5 	.word	0x080183a5
 8013f80:	08018491 	.word	0x08018491
 8013f84:	0801848d 	.word	0x0801848d
 8013f88:	08018778 	.word	0x08018778
 8013f8c:	08018750 	.word	0x08018750
 8013f90:	7ff00000 	.word	0x7ff00000
 8013f94:	7ca00000 	.word	0x7ca00000
 8013f98:	7fefffff 	.word	0x7fefffff
 8013f9c:	f014 0310 	ands.w	r3, r4, #16
 8013fa0:	bf18      	it	ne
 8013fa2:	236a      	movne	r3, #106	@ 0x6a
 8013fa4:	4ea9      	ldr	r6, [pc, #676]	@ (801424c <_strtod_l+0x854>)
 8013fa6:	9308      	str	r3, [sp, #32]
 8013fa8:	4650      	mov	r0, sl
 8013faa:	4659      	mov	r1, fp
 8013fac:	2300      	movs	r3, #0
 8013fae:	07e7      	lsls	r7, r4, #31
 8013fb0:	d504      	bpl.n	8013fbc <_strtod_l+0x5c4>
 8013fb2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013fb6:	f7ec fb2f 	bl	8000618 <__aeabi_dmul>
 8013fba:	2301      	movs	r3, #1
 8013fbc:	1064      	asrs	r4, r4, #1
 8013fbe:	f106 0608 	add.w	r6, r6, #8
 8013fc2:	d1f4      	bne.n	8013fae <_strtod_l+0x5b6>
 8013fc4:	b10b      	cbz	r3, 8013fca <_strtod_l+0x5d2>
 8013fc6:	4682      	mov	sl, r0
 8013fc8:	468b      	mov	fp, r1
 8013fca:	9b08      	ldr	r3, [sp, #32]
 8013fcc:	b1b3      	cbz	r3, 8013ffc <_strtod_l+0x604>
 8013fce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013fd2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	4659      	mov	r1, fp
 8013fda:	dd0f      	ble.n	8013ffc <_strtod_l+0x604>
 8013fdc:	2b1f      	cmp	r3, #31
 8013fde:	dd56      	ble.n	801408e <_strtod_l+0x696>
 8013fe0:	2b34      	cmp	r3, #52	@ 0x34
 8013fe2:	bfde      	ittt	le
 8013fe4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8013fe8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013fec:	4093      	lslle	r3, r2
 8013fee:	f04f 0a00 	mov.w	sl, #0
 8013ff2:	bfcc      	ite	gt
 8013ff4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013ff8:	ea03 0b01 	andle.w	fp, r3, r1
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	2300      	movs	r3, #0
 8014000:	4650      	mov	r0, sl
 8014002:	4659      	mov	r1, fp
 8014004:	f7ec fd70 	bl	8000ae8 <__aeabi_dcmpeq>
 8014008:	2800      	cmp	r0, #0
 801400a:	d1a7      	bne.n	8013f5c <_strtod_l+0x564>
 801400c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801400e:	9300      	str	r3, [sp, #0]
 8014010:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014012:	9805      	ldr	r0, [sp, #20]
 8014014:	462b      	mov	r3, r5
 8014016:	464a      	mov	r2, r9
 8014018:	f002 ff26 	bl	8016e68 <__s2b>
 801401c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801401e:	2800      	cmp	r0, #0
 8014020:	f43f af09 	beq.w	8013e36 <_strtod_l+0x43e>
 8014024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014026:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014028:	2a00      	cmp	r2, #0
 801402a:	eba3 0308 	sub.w	r3, r3, r8
 801402e:	bfa8      	it	ge
 8014030:	2300      	movge	r3, #0
 8014032:	9312      	str	r3, [sp, #72]	@ 0x48
 8014034:	2400      	movs	r4, #0
 8014036:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801403a:	9316      	str	r3, [sp, #88]	@ 0x58
 801403c:	46a0      	mov	r8, r4
 801403e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014040:	9805      	ldr	r0, [sp, #20]
 8014042:	6859      	ldr	r1, [r3, #4]
 8014044:	f002 fe68 	bl	8016d18 <_Balloc>
 8014048:	4681      	mov	r9, r0
 801404a:	2800      	cmp	r0, #0
 801404c:	f43f aef7 	beq.w	8013e3e <_strtod_l+0x446>
 8014050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014052:	691a      	ldr	r2, [r3, #16]
 8014054:	3202      	adds	r2, #2
 8014056:	f103 010c 	add.w	r1, r3, #12
 801405a:	0092      	lsls	r2, r2, #2
 801405c:	300c      	adds	r0, #12
 801405e:	f000 fcdf 	bl	8014a20 <memcpy>
 8014062:	ec4b ab10 	vmov	d0, sl, fp
 8014066:	9805      	ldr	r0, [sp, #20]
 8014068:	aa1c      	add	r2, sp, #112	@ 0x70
 801406a:	a91b      	add	r1, sp, #108	@ 0x6c
 801406c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8014070:	f003 fa2e 	bl	80174d0 <__d2b>
 8014074:	901a      	str	r0, [sp, #104]	@ 0x68
 8014076:	2800      	cmp	r0, #0
 8014078:	f43f aee1 	beq.w	8013e3e <_strtod_l+0x446>
 801407c:	9805      	ldr	r0, [sp, #20]
 801407e:	2101      	movs	r1, #1
 8014080:	f002 ff88 	bl	8016f94 <__i2b>
 8014084:	4680      	mov	r8, r0
 8014086:	b948      	cbnz	r0, 801409c <_strtod_l+0x6a4>
 8014088:	f04f 0800 	mov.w	r8, #0
 801408c:	e6d7      	b.n	8013e3e <_strtod_l+0x446>
 801408e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014092:	fa02 f303 	lsl.w	r3, r2, r3
 8014096:	ea03 0a0a 	and.w	sl, r3, sl
 801409a:	e7af      	b.n	8013ffc <_strtod_l+0x604>
 801409c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801409e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80140a0:	2d00      	cmp	r5, #0
 80140a2:	bfab      	itete	ge
 80140a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80140a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80140a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80140aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80140ac:	bfac      	ite	ge
 80140ae:	18ef      	addge	r7, r5, r3
 80140b0:	1b5e      	sublt	r6, r3, r5
 80140b2:	9b08      	ldr	r3, [sp, #32]
 80140b4:	1aed      	subs	r5, r5, r3
 80140b6:	4415      	add	r5, r2
 80140b8:	4b65      	ldr	r3, [pc, #404]	@ (8014250 <_strtod_l+0x858>)
 80140ba:	3d01      	subs	r5, #1
 80140bc:	429d      	cmp	r5, r3
 80140be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80140c2:	da50      	bge.n	8014166 <_strtod_l+0x76e>
 80140c4:	1b5b      	subs	r3, r3, r5
 80140c6:	2b1f      	cmp	r3, #31
 80140c8:	eba2 0203 	sub.w	r2, r2, r3
 80140cc:	f04f 0101 	mov.w	r1, #1
 80140d0:	dc3d      	bgt.n	801414e <_strtod_l+0x756>
 80140d2:	fa01 f303 	lsl.w	r3, r1, r3
 80140d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80140d8:	2300      	movs	r3, #0
 80140da:	9310      	str	r3, [sp, #64]	@ 0x40
 80140dc:	18bd      	adds	r5, r7, r2
 80140de:	9b08      	ldr	r3, [sp, #32]
 80140e0:	42af      	cmp	r7, r5
 80140e2:	4416      	add	r6, r2
 80140e4:	441e      	add	r6, r3
 80140e6:	463b      	mov	r3, r7
 80140e8:	bfa8      	it	ge
 80140ea:	462b      	movge	r3, r5
 80140ec:	42b3      	cmp	r3, r6
 80140ee:	bfa8      	it	ge
 80140f0:	4633      	movge	r3, r6
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	bfc2      	ittt	gt
 80140f6:	1aed      	subgt	r5, r5, r3
 80140f8:	1af6      	subgt	r6, r6, r3
 80140fa:	1aff      	subgt	r7, r7, r3
 80140fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80140fe:	2b00      	cmp	r3, #0
 8014100:	dd16      	ble.n	8014130 <_strtod_l+0x738>
 8014102:	4641      	mov	r1, r8
 8014104:	9805      	ldr	r0, [sp, #20]
 8014106:	461a      	mov	r2, r3
 8014108:	f002 fffc 	bl	8017104 <__pow5mult>
 801410c:	4680      	mov	r8, r0
 801410e:	2800      	cmp	r0, #0
 8014110:	d0ba      	beq.n	8014088 <_strtod_l+0x690>
 8014112:	4601      	mov	r1, r0
 8014114:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014116:	9805      	ldr	r0, [sp, #20]
 8014118:	f002 ff52 	bl	8016fc0 <__multiply>
 801411c:	900a      	str	r0, [sp, #40]	@ 0x28
 801411e:	2800      	cmp	r0, #0
 8014120:	f43f ae8d 	beq.w	8013e3e <_strtod_l+0x446>
 8014124:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014126:	9805      	ldr	r0, [sp, #20]
 8014128:	f002 fe36 	bl	8016d98 <_Bfree>
 801412c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801412e:	931a      	str	r3, [sp, #104]	@ 0x68
 8014130:	2d00      	cmp	r5, #0
 8014132:	dc1d      	bgt.n	8014170 <_strtod_l+0x778>
 8014134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014136:	2b00      	cmp	r3, #0
 8014138:	dd23      	ble.n	8014182 <_strtod_l+0x78a>
 801413a:	4649      	mov	r1, r9
 801413c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801413e:	9805      	ldr	r0, [sp, #20]
 8014140:	f002 ffe0 	bl	8017104 <__pow5mult>
 8014144:	4681      	mov	r9, r0
 8014146:	b9e0      	cbnz	r0, 8014182 <_strtod_l+0x78a>
 8014148:	f04f 0900 	mov.w	r9, #0
 801414c:	e677      	b.n	8013e3e <_strtod_l+0x446>
 801414e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8014152:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8014156:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801415a:	35e2      	adds	r5, #226	@ 0xe2
 801415c:	fa01 f305 	lsl.w	r3, r1, r5
 8014160:	9310      	str	r3, [sp, #64]	@ 0x40
 8014162:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014164:	e7ba      	b.n	80140dc <_strtod_l+0x6e4>
 8014166:	2300      	movs	r3, #0
 8014168:	9310      	str	r3, [sp, #64]	@ 0x40
 801416a:	2301      	movs	r3, #1
 801416c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801416e:	e7b5      	b.n	80140dc <_strtod_l+0x6e4>
 8014170:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014172:	9805      	ldr	r0, [sp, #20]
 8014174:	462a      	mov	r2, r5
 8014176:	f003 f81f 	bl	80171b8 <__lshift>
 801417a:	901a      	str	r0, [sp, #104]	@ 0x68
 801417c:	2800      	cmp	r0, #0
 801417e:	d1d9      	bne.n	8014134 <_strtod_l+0x73c>
 8014180:	e65d      	b.n	8013e3e <_strtod_l+0x446>
 8014182:	2e00      	cmp	r6, #0
 8014184:	dd07      	ble.n	8014196 <_strtod_l+0x79e>
 8014186:	4649      	mov	r1, r9
 8014188:	9805      	ldr	r0, [sp, #20]
 801418a:	4632      	mov	r2, r6
 801418c:	f003 f814 	bl	80171b8 <__lshift>
 8014190:	4681      	mov	r9, r0
 8014192:	2800      	cmp	r0, #0
 8014194:	d0d8      	beq.n	8014148 <_strtod_l+0x750>
 8014196:	2f00      	cmp	r7, #0
 8014198:	dd08      	ble.n	80141ac <_strtod_l+0x7b4>
 801419a:	4641      	mov	r1, r8
 801419c:	9805      	ldr	r0, [sp, #20]
 801419e:	463a      	mov	r2, r7
 80141a0:	f003 f80a 	bl	80171b8 <__lshift>
 80141a4:	4680      	mov	r8, r0
 80141a6:	2800      	cmp	r0, #0
 80141a8:	f43f ae49 	beq.w	8013e3e <_strtod_l+0x446>
 80141ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80141ae:	9805      	ldr	r0, [sp, #20]
 80141b0:	464a      	mov	r2, r9
 80141b2:	f003 f889 	bl	80172c8 <__mdiff>
 80141b6:	4604      	mov	r4, r0
 80141b8:	2800      	cmp	r0, #0
 80141ba:	f43f ae40 	beq.w	8013e3e <_strtod_l+0x446>
 80141be:	68c3      	ldr	r3, [r0, #12]
 80141c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80141c2:	2300      	movs	r3, #0
 80141c4:	60c3      	str	r3, [r0, #12]
 80141c6:	4641      	mov	r1, r8
 80141c8:	f003 f862 	bl	8017290 <__mcmp>
 80141cc:	2800      	cmp	r0, #0
 80141ce:	da45      	bge.n	801425c <_strtod_l+0x864>
 80141d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80141d2:	ea53 030a 	orrs.w	r3, r3, sl
 80141d6:	d16b      	bne.n	80142b0 <_strtod_l+0x8b8>
 80141d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d167      	bne.n	80142b0 <_strtod_l+0x8b8>
 80141e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80141e4:	0d1b      	lsrs	r3, r3, #20
 80141e6:	051b      	lsls	r3, r3, #20
 80141e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80141ec:	d960      	bls.n	80142b0 <_strtod_l+0x8b8>
 80141ee:	6963      	ldr	r3, [r4, #20]
 80141f0:	b913      	cbnz	r3, 80141f8 <_strtod_l+0x800>
 80141f2:	6923      	ldr	r3, [r4, #16]
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	dd5b      	ble.n	80142b0 <_strtod_l+0x8b8>
 80141f8:	4621      	mov	r1, r4
 80141fa:	2201      	movs	r2, #1
 80141fc:	9805      	ldr	r0, [sp, #20]
 80141fe:	f002 ffdb 	bl	80171b8 <__lshift>
 8014202:	4641      	mov	r1, r8
 8014204:	4604      	mov	r4, r0
 8014206:	f003 f843 	bl	8017290 <__mcmp>
 801420a:	2800      	cmp	r0, #0
 801420c:	dd50      	ble.n	80142b0 <_strtod_l+0x8b8>
 801420e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014212:	9a08      	ldr	r2, [sp, #32]
 8014214:	0d1b      	lsrs	r3, r3, #20
 8014216:	051b      	lsls	r3, r3, #20
 8014218:	2a00      	cmp	r2, #0
 801421a:	d06a      	beq.n	80142f2 <_strtod_l+0x8fa>
 801421c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8014220:	d867      	bhi.n	80142f2 <_strtod_l+0x8fa>
 8014222:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8014226:	f67f ae9d 	bls.w	8013f64 <_strtod_l+0x56c>
 801422a:	4b0a      	ldr	r3, [pc, #40]	@ (8014254 <_strtod_l+0x85c>)
 801422c:	4650      	mov	r0, sl
 801422e:	4659      	mov	r1, fp
 8014230:	2200      	movs	r2, #0
 8014232:	f7ec f9f1 	bl	8000618 <__aeabi_dmul>
 8014236:	4b08      	ldr	r3, [pc, #32]	@ (8014258 <_strtod_l+0x860>)
 8014238:	400b      	ands	r3, r1
 801423a:	4682      	mov	sl, r0
 801423c:	468b      	mov	fp, r1
 801423e:	2b00      	cmp	r3, #0
 8014240:	f47f ae08 	bne.w	8013e54 <_strtod_l+0x45c>
 8014244:	9a05      	ldr	r2, [sp, #20]
 8014246:	2322      	movs	r3, #34	@ 0x22
 8014248:	6013      	str	r3, [r2, #0]
 801424a:	e603      	b.n	8013e54 <_strtod_l+0x45c>
 801424c:	08018618 	.word	0x08018618
 8014250:	fffffc02 	.word	0xfffffc02
 8014254:	39500000 	.word	0x39500000
 8014258:	7ff00000 	.word	0x7ff00000
 801425c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8014260:	d165      	bne.n	801432e <_strtod_l+0x936>
 8014262:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014264:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014268:	b35a      	cbz	r2, 80142c2 <_strtod_l+0x8ca>
 801426a:	4a9f      	ldr	r2, [pc, #636]	@ (80144e8 <_strtod_l+0xaf0>)
 801426c:	4293      	cmp	r3, r2
 801426e:	d12b      	bne.n	80142c8 <_strtod_l+0x8d0>
 8014270:	9b08      	ldr	r3, [sp, #32]
 8014272:	4651      	mov	r1, sl
 8014274:	b303      	cbz	r3, 80142b8 <_strtod_l+0x8c0>
 8014276:	4b9d      	ldr	r3, [pc, #628]	@ (80144ec <_strtod_l+0xaf4>)
 8014278:	465a      	mov	r2, fp
 801427a:	4013      	ands	r3, r2
 801427c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014280:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014284:	d81b      	bhi.n	80142be <_strtod_l+0x8c6>
 8014286:	0d1b      	lsrs	r3, r3, #20
 8014288:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801428c:	fa02 f303 	lsl.w	r3, r2, r3
 8014290:	4299      	cmp	r1, r3
 8014292:	d119      	bne.n	80142c8 <_strtod_l+0x8d0>
 8014294:	4b96      	ldr	r3, [pc, #600]	@ (80144f0 <_strtod_l+0xaf8>)
 8014296:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014298:	429a      	cmp	r2, r3
 801429a:	d102      	bne.n	80142a2 <_strtod_l+0x8aa>
 801429c:	3101      	adds	r1, #1
 801429e:	f43f adce 	beq.w	8013e3e <_strtod_l+0x446>
 80142a2:	4b92      	ldr	r3, [pc, #584]	@ (80144ec <_strtod_l+0xaf4>)
 80142a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80142a6:	401a      	ands	r2, r3
 80142a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80142ac:	f04f 0a00 	mov.w	sl, #0
 80142b0:	9b08      	ldr	r3, [sp, #32]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d1b9      	bne.n	801422a <_strtod_l+0x832>
 80142b6:	e5cd      	b.n	8013e54 <_strtod_l+0x45c>
 80142b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142bc:	e7e8      	b.n	8014290 <_strtod_l+0x898>
 80142be:	4613      	mov	r3, r2
 80142c0:	e7e6      	b.n	8014290 <_strtod_l+0x898>
 80142c2:	ea53 030a 	orrs.w	r3, r3, sl
 80142c6:	d0a2      	beq.n	801420e <_strtod_l+0x816>
 80142c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80142ca:	b1db      	cbz	r3, 8014304 <_strtod_l+0x90c>
 80142cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80142ce:	4213      	tst	r3, r2
 80142d0:	d0ee      	beq.n	80142b0 <_strtod_l+0x8b8>
 80142d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142d4:	9a08      	ldr	r2, [sp, #32]
 80142d6:	4650      	mov	r0, sl
 80142d8:	4659      	mov	r1, fp
 80142da:	b1bb      	cbz	r3, 801430c <_strtod_l+0x914>
 80142dc:	f7ff fb6c 	bl	80139b8 <sulp>
 80142e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80142e4:	ec53 2b10 	vmov	r2, r3, d0
 80142e8:	f7eb ffe0 	bl	80002ac <__adddf3>
 80142ec:	4682      	mov	sl, r0
 80142ee:	468b      	mov	fp, r1
 80142f0:	e7de      	b.n	80142b0 <_strtod_l+0x8b8>
 80142f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80142f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80142fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80142fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8014302:	e7d5      	b.n	80142b0 <_strtod_l+0x8b8>
 8014304:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014306:	ea13 0f0a 	tst.w	r3, sl
 801430a:	e7e1      	b.n	80142d0 <_strtod_l+0x8d8>
 801430c:	f7ff fb54 	bl	80139b8 <sulp>
 8014310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014314:	ec53 2b10 	vmov	r2, r3, d0
 8014318:	f7eb ffc6 	bl	80002a8 <__aeabi_dsub>
 801431c:	2200      	movs	r2, #0
 801431e:	2300      	movs	r3, #0
 8014320:	4682      	mov	sl, r0
 8014322:	468b      	mov	fp, r1
 8014324:	f7ec fbe0 	bl	8000ae8 <__aeabi_dcmpeq>
 8014328:	2800      	cmp	r0, #0
 801432a:	d0c1      	beq.n	80142b0 <_strtod_l+0x8b8>
 801432c:	e61a      	b.n	8013f64 <_strtod_l+0x56c>
 801432e:	4641      	mov	r1, r8
 8014330:	4620      	mov	r0, r4
 8014332:	f003 f925 	bl	8017580 <__ratio>
 8014336:	ec57 6b10 	vmov	r6, r7, d0
 801433a:	2200      	movs	r2, #0
 801433c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014340:	4630      	mov	r0, r6
 8014342:	4639      	mov	r1, r7
 8014344:	f7ec fbe4 	bl	8000b10 <__aeabi_dcmple>
 8014348:	2800      	cmp	r0, #0
 801434a:	d06f      	beq.n	801442c <_strtod_l+0xa34>
 801434c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801434e:	2b00      	cmp	r3, #0
 8014350:	d17a      	bne.n	8014448 <_strtod_l+0xa50>
 8014352:	f1ba 0f00 	cmp.w	sl, #0
 8014356:	d158      	bne.n	801440a <_strtod_l+0xa12>
 8014358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801435a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801435e:	2b00      	cmp	r3, #0
 8014360:	d15a      	bne.n	8014418 <_strtod_l+0xa20>
 8014362:	4b64      	ldr	r3, [pc, #400]	@ (80144f4 <_strtod_l+0xafc>)
 8014364:	2200      	movs	r2, #0
 8014366:	4630      	mov	r0, r6
 8014368:	4639      	mov	r1, r7
 801436a:	f7ec fbc7 	bl	8000afc <__aeabi_dcmplt>
 801436e:	2800      	cmp	r0, #0
 8014370:	d159      	bne.n	8014426 <_strtod_l+0xa2e>
 8014372:	4630      	mov	r0, r6
 8014374:	4639      	mov	r1, r7
 8014376:	4b60      	ldr	r3, [pc, #384]	@ (80144f8 <_strtod_l+0xb00>)
 8014378:	2200      	movs	r2, #0
 801437a:	f7ec f94d 	bl	8000618 <__aeabi_dmul>
 801437e:	4606      	mov	r6, r0
 8014380:	460f      	mov	r7, r1
 8014382:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8014386:	9606      	str	r6, [sp, #24]
 8014388:	9307      	str	r3, [sp, #28]
 801438a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801438e:	4d57      	ldr	r5, [pc, #348]	@ (80144ec <_strtod_l+0xaf4>)
 8014390:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014396:	401d      	ands	r5, r3
 8014398:	4b58      	ldr	r3, [pc, #352]	@ (80144fc <_strtod_l+0xb04>)
 801439a:	429d      	cmp	r5, r3
 801439c:	f040 80b2 	bne.w	8014504 <_strtod_l+0xb0c>
 80143a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80143a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80143a6:	ec4b ab10 	vmov	d0, sl, fp
 80143aa:	f003 f821 	bl	80173f0 <__ulp>
 80143ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80143b2:	ec51 0b10 	vmov	r0, r1, d0
 80143b6:	f7ec f92f 	bl	8000618 <__aeabi_dmul>
 80143ba:	4652      	mov	r2, sl
 80143bc:	465b      	mov	r3, fp
 80143be:	f7eb ff75 	bl	80002ac <__adddf3>
 80143c2:	460b      	mov	r3, r1
 80143c4:	4949      	ldr	r1, [pc, #292]	@ (80144ec <_strtod_l+0xaf4>)
 80143c6:	4a4e      	ldr	r2, [pc, #312]	@ (8014500 <_strtod_l+0xb08>)
 80143c8:	4019      	ands	r1, r3
 80143ca:	4291      	cmp	r1, r2
 80143cc:	4682      	mov	sl, r0
 80143ce:	d942      	bls.n	8014456 <_strtod_l+0xa5e>
 80143d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80143d2:	4b47      	ldr	r3, [pc, #284]	@ (80144f0 <_strtod_l+0xaf8>)
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d103      	bne.n	80143e0 <_strtod_l+0x9e8>
 80143d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80143da:	3301      	adds	r3, #1
 80143dc:	f43f ad2f 	beq.w	8013e3e <_strtod_l+0x446>
 80143e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80144f0 <_strtod_l+0xaf8>
 80143e4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80143e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80143ea:	9805      	ldr	r0, [sp, #20]
 80143ec:	f002 fcd4 	bl	8016d98 <_Bfree>
 80143f0:	9805      	ldr	r0, [sp, #20]
 80143f2:	4649      	mov	r1, r9
 80143f4:	f002 fcd0 	bl	8016d98 <_Bfree>
 80143f8:	9805      	ldr	r0, [sp, #20]
 80143fa:	4641      	mov	r1, r8
 80143fc:	f002 fccc 	bl	8016d98 <_Bfree>
 8014400:	9805      	ldr	r0, [sp, #20]
 8014402:	4621      	mov	r1, r4
 8014404:	f002 fcc8 	bl	8016d98 <_Bfree>
 8014408:	e619      	b.n	801403e <_strtod_l+0x646>
 801440a:	f1ba 0f01 	cmp.w	sl, #1
 801440e:	d103      	bne.n	8014418 <_strtod_l+0xa20>
 8014410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014412:	2b00      	cmp	r3, #0
 8014414:	f43f ada6 	beq.w	8013f64 <_strtod_l+0x56c>
 8014418:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80144c8 <_strtod_l+0xad0>
 801441c:	4f35      	ldr	r7, [pc, #212]	@ (80144f4 <_strtod_l+0xafc>)
 801441e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014422:	2600      	movs	r6, #0
 8014424:	e7b1      	b.n	801438a <_strtod_l+0x992>
 8014426:	4f34      	ldr	r7, [pc, #208]	@ (80144f8 <_strtod_l+0xb00>)
 8014428:	2600      	movs	r6, #0
 801442a:	e7aa      	b.n	8014382 <_strtod_l+0x98a>
 801442c:	4b32      	ldr	r3, [pc, #200]	@ (80144f8 <_strtod_l+0xb00>)
 801442e:	4630      	mov	r0, r6
 8014430:	4639      	mov	r1, r7
 8014432:	2200      	movs	r2, #0
 8014434:	f7ec f8f0 	bl	8000618 <__aeabi_dmul>
 8014438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801443a:	4606      	mov	r6, r0
 801443c:	460f      	mov	r7, r1
 801443e:	2b00      	cmp	r3, #0
 8014440:	d09f      	beq.n	8014382 <_strtod_l+0x98a>
 8014442:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014446:	e7a0      	b.n	801438a <_strtod_l+0x992>
 8014448:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80144d0 <_strtod_l+0xad8>
 801444c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014450:	ec57 6b17 	vmov	r6, r7, d7
 8014454:	e799      	b.n	801438a <_strtod_l+0x992>
 8014456:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801445a:	9b08      	ldr	r3, [sp, #32]
 801445c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8014460:	2b00      	cmp	r3, #0
 8014462:	d1c1      	bne.n	80143e8 <_strtod_l+0x9f0>
 8014464:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014468:	0d1b      	lsrs	r3, r3, #20
 801446a:	051b      	lsls	r3, r3, #20
 801446c:	429d      	cmp	r5, r3
 801446e:	d1bb      	bne.n	80143e8 <_strtod_l+0x9f0>
 8014470:	4630      	mov	r0, r6
 8014472:	4639      	mov	r1, r7
 8014474:	f7ec fc30 	bl	8000cd8 <__aeabi_d2lz>
 8014478:	f7ec f8a0 	bl	80005bc <__aeabi_l2d>
 801447c:	4602      	mov	r2, r0
 801447e:	460b      	mov	r3, r1
 8014480:	4630      	mov	r0, r6
 8014482:	4639      	mov	r1, r7
 8014484:	f7eb ff10 	bl	80002a8 <__aeabi_dsub>
 8014488:	460b      	mov	r3, r1
 801448a:	4602      	mov	r2, r0
 801448c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014490:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8014494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014496:	ea46 060a 	orr.w	r6, r6, sl
 801449a:	431e      	orrs	r6, r3
 801449c:	d06f      	beq.n	801457e <_strtod_l+0xb86>
 801449e:	a30e      	add	r3, pc, #56	@ (adr r3, 80144d8 <_strtod_l+0xae0>)
 80144a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a4:	f7ec fb2a 	bl	8000afc <__aeabi_dcmplt>
 80144a8:	2800      	cmp	r0, #0
 80144aa:	f47f acd3 	bne.w	8013e54 <_strtod_l+0x45c>
 80144ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80144e0 <_strtod_l+0xae8>)
 80144b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80144b8:	f7ec fb3e 	bl	8000b38 <__aeabi_dcmpgt>
 80144bc:	2800      	cmp	r0, #0
 80144be:	d093      	beq.n	80143e8 <_strtod_l+0x9f0>
 80144c0:	e4c8      	b.n	8013e54 <_strtod_l+0x45c>
 80144c2:	bf00      	nop
 80144c4:	f3af 8000 	nop.w
 80144c8:	00000000 	.word	0x00000000
 80144cc:	bff00000 	.word	0xbff00000
 80144d0:	00000000 	.word	0x00000000
 80144d4:	3ff00000 	.word	0x3ff00000
 80144d8:	94a03595 	.word	0x94a03595
 80144dc:	3fdfffff 	.word	0x3fdfffff
 80144e0:	35afe535 	.word	0x35afe535
 80144e4:	3fe00000 	.word	0x3fe00000
 80144e8:	000fffff 	.word	0x000fffff
 80144ec:	7ff00000 	.word	0x7ff00000
 80144f0:	7fefffff 	.word	0x7fefffff
 80144f4:	3ff00000 	.word	0x3ff00000
 80144f8:	3fe00000 	.word	0x3fe00000
 80144fc:	7fe00000 	.word	0x7fe00000
 8014500:	7c9fffff 	.word	0x7c9fffff
 8014504:	9b08      	ldr	r3, [sp, #32]
 8014506:	b323      	cbz	r3, 8014552 <_strtod_l+0xb5a>
 8014508:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801450c:	d821      	bhi.n	8014552 <_strtod_l+0xb5a>
 801450e:	a328      	add	r3, pc, #160	@ (adr r3, 80145b0 <_strtod_l+0xbb8>)
 8014510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014514:	4630      	mov	r0, r6
 8014516:	4639      	mov	r1, r7
 8014518:	f7ec fafa 	bl	8000b10 <__aeabi_dcmple>
 801451c:	b1a0      	cbz	r0, 8014548 <_strtod_l+0xb50>
 801451e:	4639      	mov	r1, r7
 8014520:	4630      	mov	r0, r6
 8014522:	f7ec fb51 	bl	8000bc8 <__aeabi_d2uiz>
 8014526:	2801      	cmp	r0, #1
 8014528:	bf38      	it	cc
 801452a:	2001      	movcc	r0, #1
 801452c:	f7eb fffa 	bl	8000524 <__aeabi_ui2d>
 8014530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014532:	4606      	mov	r6, r0
 8014534:	460f      	mov	r7, r1
 8014536:	b9fb      	cbnz	r3, 8014578 <_strtod_l+0xb80>
 8014538:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801453c:	9014      	str	r0, [sp, #80]	@ 0x50
 801453e:	9315      	str	r3, [sp, #84]	@ 0x54
 8014540:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8014544:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014548:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801454a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801454e:	1b5b      	subs	r3, r3, r5
 8014550:	9311      	str	r3, [sp, #68]	@ 0x44
 8014552:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014556:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801455a:	f002 ff49 	bl	80173f0 <__ulp>
 801455e:	4650      	mov	r0, sl
 8014560:	ec53 2b10 	vmov	r2, r3, d0
 8014564:	4659      	mov	r1, fp
 8014566:	f7ec f857 	bl	8000618 <__aeabi_dmul>
 801456a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801456e:	f7eb fe9d 	bl	80002ac <__adddf3>
 8014572:	4682      	mov	sl, r0
 8014574:	468b      	mov	fp, r1
 8014576:	e770      	b.n	801445a <_strtod_l+0xa62>
 8014578:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801457c:	e7e0      	b.n	8014540 <_strtod_l+0xb48>
 801457e:	a30e      	add	r3, pc, #56	@ (adr r3, 80145b8 <_strtod_l+0xbc0>)
 8014580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014584:	f7ec faba 	bl	8000afc <__aeabi_dcmplt>
 8014588:	e798      	b.n	80144bc <_strtod_l+0xac4>
 801458a:	2300      	movs	r3, #0
 801458c:	930e      	str	r3, [sp, #56]	@ 0x38
 801458e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014590:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014592:	6013      	str	r3, [r2, #0]
 8014594:	f7ff ba6d 	b.w	8013a72 <_strtod_l+0x7a>
 8014598:	2a65      	cmp	r2, #101	@ 0x65
 801459a:	f43f ab68 	beq.w	8013c6e <_strtod_l+0x276>
 801459e:	2a45      	cmp	r2, #69	@ 0x45
 80145a0:	f43f ab65 	beq.w	8013c6e <_strtod_l+0x276>
 80145a4:	2301      	movs	r3, #1
 80145a6:	f7ff bba0 	b.w	8013cea <_strtod_l+0x2f2>
 80145aa:	bf00      	nop
 80145ac:	f3af 8000 	nop.w
 80145b0:	ffc00000 	.word	0xffc00000
 80145b4:	41dfffff 	.word	0x41dfffff
 80145b8:	94a03595 	.word	0x94a03595
 80145bc:	3fcfffff 	.word	0x3fcfffff

080145c0 <_strtod_r>:
 80145c0:	4b01      	ldr	r3, [pc, #4]	@ (80145c8 <_strtod_r+0x8>)
 80145c2:	f7ff ba19 	b.w	80139f8 <_strtod_l>
 80145c6:	bf00      	nop
 80145c8:	20000068 	.word	0x20000068

080145cc <strtod>:
 80145cc:	460a      	mov	r2, r1
 80145ce:	4601      	mov	r1, r0
 80145d0:	4802      	ldr	r0, [pc, #8]	@ (80145dc <strtod+0x10>)
 80145d2:	4b03      	ldr	r3, [pc, #12]	@ (80145e0 <strtod+0x14>)
 80145d4:	6800      	ldr	r0, [r0, #0]
 80145d6:	f7ff ba0f 	b.w	80139f8 <_strtod_l>
 80145da:	bf00      	nop
 80145dc:	200001d4 	.word	0x200001d4
 80145e0:	20000068 	.word	0x20000068

080145e4 <_strtol_l.isra.0>:
 80145e4:	2b24      	cmp	r3, #36	@ 0x24
 80145e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145ea:	4686      	mov	lr, r0
 80145ec:	4690      	mov	r8, r2
 80145ee:	d801      	bhi.n	80145f4 <_strtol_l.isra.0+0x10>
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d106      	bne.n	8014602 <_strtol_l.isra.0+0x1e>
 80145f4:	f000 f9ca 	bl	801498c <__errno>
 80145f8:	2316      	movs	r3, #22
 80145fa:	6003      	str	r3, [r0, #0]
 80145fc:	2000      	movs	r0, #0
 80145fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014602:	4834      	ldr	r0, [pc, #208]	@ (80146d4 <_strtol_l.isra.0+0xf0>)
 8014604:	460d      	mov	r5, r1
 8014606:	462a      	mov	r2, r5
 8014608:	f815 4b01 	ldrb.w	r4, [r5], #1
 801460c:	5d06      	ldrb	r6, [r0, r4]
 801460e:	f016 0608 	ands.w	r6, r6, #8
 8014612:	d1f8      	bne.n	8014606 <_strtol_l.isra.0+0x22>
 8014614:	2c2d      	cmp	r4, #45	@ 0x2d
 8014616:	d110      	bne.n	801463a <_strtol_l.isra.0+0x56>
 8014618:	782c      	ldrb	r4, [r5, #0]
 801461a:	2601      	movs	r6, #1
 801461c:	1c95      	adds	r5, r2, #2
 801461e:	f033 0210 	bics.w	r2, r3, #16
 8014622:	d115      	bne.n	8014650 <_strtol_l.isra.0+0x6c>
 8014624:	2c30      	cmp	r4, #48	@ 0x30
 8014626:	d10d      	bne.n	8014644 <_strtol_l.isra.0+0x60>
 8014628:	782a      	ldrb	r2, [r5, #0]
 801462a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801462e:	2a58      	cmp	r2, #88	@ 0x58
 8014630:	d108      	bne.n	8014644 <_strtol_l.isra.0+0x60>
 8014632:	786c      	ldrb	r4, [r5, #1]
 8014634:	3502      	adds	r5, #2
 8014636:	2310      	movs	r3, #16
 8014638:	e00a      	b.n	8014650 <_strtol_l.isra.0+0x6c>
 801463a:	2c2b      	cmp	r4, #43	@ 0x2b
 801463c:	bf04      	itt	eq
 801463e:	782c      	ldrbeq	r4, [r5, #0]
 8014640:	1c95      	addeq	r5, r2, #2
 8014642:	e7ec      	b.n	801461e <_strtol_l.isra.0+0x3a>
 8014644:	2b00      	cmp	r3, #0
 8014646:	d1f6      	bne.n	8014636 <_strtol_l.isra.0+0x52>
 8014648:	2c30      	cmp	r4, #48	@ 0x30
 801464a:	bf14      	ite	ne
 801464c:	230a      	movne	r3, #10
 801464e:	2308      	moveq	r3, #8
 8014650:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014654:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8014658:	2200      	movs	r2, #0
 801465a:	fbbc f9f3 	udiv	r9, ip, r3
 801465e:	4610      	mov	r0, r2
 8014660:	fb03 ca19 	mls	sl, r3, r9, ip
 8014664:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014668:	2f09      	cmp	r7, #9
 801466a:	d80f      	bhi.n	801468c <_strtol_l.isra.0+0xa8>
 801466c:	463c      	mov	r4, r7
 801466e:	42a3      	cmp	r3, r4
 8014670:	dd1b      	ble.n	80146aa <_strtol_l.isra.0+0xc6>
 8014672:	1c57      	adds	r7, r2, #1
 8014674:	d007      	beq.n	8014686 <_strtol_l.isra.0+0xa2>
 8014676:	4581      	cmp	r9, r0
 8014678:	d314      	bcc.n	80146a4 <_strtol_l.isra.0+0xc0>
 801467a:	d101      	bne.n	8014680 <_strtol_l.isra.0+0x9c>
 801467c:	45a2      	cmp	sl, r4
 801467e:	db11      	blt.n	80146a4 <_strtol_l.isra.0+0xc0>
 8014680:	fb00 4003 	mla	r0, r0, r3, r4
 8014684:	2201      	movs	r2, #1
 8014686:	f815 4b01 	ldrb.w	r4, [r5], #1
 801468a:	e7eb      	b.n	8014664 <_strtol_l.isra.0+0x80>
 801468c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014690:	2f19      	cmp	r7, #25
 8014692:	d801      	bhi.n	8014698 <_strtol_l.isra.0+0xb4>
 8014694:	3c37      	subs	r4, #55	@ 0x37
 8014696:	e7ea      	b.n	801466e <_strtol_l.isra.0+0x8a>
 8014698:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801469c:	2f19      	cmp	r7, #25
 801469e:	d804      	bhi.n	80146aa <_strtol_l.isra.0+0xc6>
 80146a0:	3c57      	subs	r4, #87	@ 0x57
 80146a2:	e7e4      	b.n	801466e <_strtol_l.isra.0+0x8a>
 80146a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80146a8:	e7ed      	b.n	8014686 <_strtol_l.isra.0+0xa2>
 80146aa:	1c53      	adds	r3, r2, #1
 80146ac:	d108      	bne.n	80146c0 <_strtol_l.isra.0+0xdc>
 80146ae:	2322      	movs	r3, #34	@ 0x22
 80146b0:	f8ce 3000 	str.w	r3, [lr]
 80146b4:	4660      	mov	r0, ip
 80146b6:	f1b8 0f00 	cmp.w	r8, #0
 80146ba:	d0a0      	beq.n	80145fe <_strtol_l.isra.0+0x1a>
 80146bc:	1e69      	subs	r1, r5, #1
 80146be:	e006      	b.n	80146ce <_strtol_l.isra.0+0xea>
 80146c0:	b106      	cbz	r6, 80146c4 <_strtol_l.isra.0+0xe0>
 80146c2:	4240      	negs	r0, r0
 80146c4:	f1b8 0f00 	cmp.w	r8, #0
 80146c8:	d099      	beq.n	80145fe <_strtol_l.isra.0+0x1a>
 80146ca:	2a00      	cmp	r2, #0
 80146cc:	d1f6      	bne.n	80146bc <_strtol_l.isra.0+0xd8>
 80146ce:	f8c8 1000 	str.w	r1, [r8]
 80146d2:	e794      	b.n	80145fe <_strtol_l.isra.0+0x1a>
 80146d4:	08018641 	.word	0x08018641

080146d8 <_strtol_r>:
 80146d8:	f7ff bf84 	b.w	80145e4 <_strtol_l.isra.0>

080146dc <strtol>:
 80146dc:	4613      	mov	r3, r2
 80146de:	460a      	mov	r2, r1
 80146e0:	4601      	mov	r1, r0
 80146e2:	4802      	ldr	r0, [pc, #8]	@ (80146ec <strtol+0x10>)
 80146e4:	6800      	ldr	r0, [r0, #0]
 80146e6:	f7ff bf7d 	b.w	80145e4 <_strtol_l.isra.0>
 80146ea:	bf00      	nop
 80146ec:	200001d4 	.word	0x200001d4

080146f0 <_fwalk_sglue>:
 80146f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146f4:	4607      	mov	r7, r0
 80146f6:	4688      	mov	r8, r1
 80146f8:	4614      	mov	r4, r2
 80146fa:	2600      	movs	r6, #0
 80146fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014700:	f1b9 0901 	subs.w	r9, r9, #1
 8014704:	d505      	bpl.n	8014712 <_fwalk_sglue+0x22>
 8014706:	6824      	ldr	r4, [r4, #0]
 8014708:	2c00      	cmp	r4, #0
 801470a:	d1f7      	bne.n	80146fc <_fwalk_sglue+0xc>
 801470c:	4630      	mov	r0, r6
 801470e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014712:	89ab      	ldrh	r3, [r5, #12]
 8014714:	2b01      	cmp	r3, #1
 8014716:	d907      	bls.n	8014728 <_fwalk_sglue+0x38>
 8014718:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801471c:	3301      	adds	r3, #1
 801471e:	d003      	beq.n	8014728 <_fwalk_sglue+0x38>
 8014720:	4629      	mov	r1, r5
 8014722:	4638      	mov	r0, r7
 8014724:	47c0      	blx	r8
 8014726:	4306      	orrs	r6, r0
 8014728:	3568      	adds	r5, #104	@ 0x68
 801472a:	e7e9      	b.n	8014700 <_fwalk_sglue+0x10>

0801472c <iprintf>:
 801472c:	b40f      	push	{r0, r1, r2, r3}
 801472e:	b507      	push	{r0, r1, r2, lr}
 8014730:	4906      	ldr	r1, [pc, #24]	@ (801474c <iprintf+0x20>)
 8014732:	ab04      	add	r3, sp, #16
 8014734:	6808      	ldr	r0, [r1, #0]
 8014736:	f853 2b04 	ldr.w	r2, [r3], #4
 801473a:	6881      	ldr	r1, [r0, #8]
 801473c:	9301      	str	r3, [sp, #4]
 801473e:	f001 fed7 	bl	80164f0 <_vfiprintf_r>
 8014742:	b003      	add	sp, #12
 8014744:	f85d eb04 	ldr.w	lr, [sp], #4
 8014748:	b004      	add	sp, #16
 801474a:	4770      	bx	lr
 801474c:	200001d4 	.word	0x200001d4

08014750 <_puts_r>:
 8014750:	6a03      	ldr	r3, [r0, #32]
 8014752:	b570      	push	{r4, r5, r6, lr}
 8014754:	6884      	ldr	r4, [r0, #8]
 8014756:	4605      	mov	r5, r0
 8014758:	460e      	mov	r6, r1
 801475a:	b90b      	cbnz	r3, 8014760 <_puts_r+0x10>
 801475c:	f7ff f914 	bl	8013988 <__sinit>
 8014760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014762:	07db      	lsls	r3, r3, #31
 8014764:	d405      	bmi.n	8014772 <_puts_r+0x22>
 8014766:	89a3      	ldrh	r3, [r4, #12]
 8014768:	0598      	lsls	r0, r3, #22
 801476a:	d402      	bmi.n	8014772 <_puts_r+0x22>
 801476c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801476e:	f000 f938 	bl	80149e2 <__retarget_lock_acquire_recursive>
 8014772:	89a3      	ldrh	r3, [r4, #12]
 8014774:	0719      	lsls	r1, r3, #28
 8014776:	d502      	bpl.n	801477e <_puts_r+0x2e>
 8014778:	6923      	ldr	r3, [r4, #16]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d135      	bne.n	80147ea <_puts_r+0x9a>
 801477e:	4621      	mov	r1, r4
 8014780:	4628      	mov	r0, r5
 8014782:	f003 f89b 	bl	80178bc <__swsetup_r>
 8014786:	b380      	cbz	r0, 80147ea <_puts_r+0x9a>
 8014788:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801478c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801478e:	07da      	lsls	r2, r3, #31
 8014790:	d405      	bmi.n	801479e <_puts_r+0x4e>
 8014792:	89a3      	ldrh	r3, [r4, #12]
 8014794:	059b      	lsls	r3, r3, #22
 8014796:	d402      	bmi.n	801479e <_puts_r+0x4e>
 8014798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801479a:	f000 f923 	bl	80149e4 <__retarget_lock_release_recursive>
 801479e:	4628      	mov	r0, r5
 80147a0:	bd70      	pop	{r4, r5, r6, pc}
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	da04      	bge.n	80147b0 <_puts_r+0x60>
 80147a6:	69a2      	ldr	r2, [r4, #24]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	dc17      	bgt.n	80147dc <_puts_r+0x8c>
 80147ac:	290a      	cmp	r1, #10
 80147ae:	d015      	beq.n	80147dc <_puts_r+0x8c>
 80147b0:	6823      	ldr	r3, [r4, #0]
 80147b2:	1c5a      	adds	r2, r3, #1
 80147b4:	6022      	str	r2, [r4, #0]
 80147b6:	7019      	strb	r1, [r3, #0]
 80147b8:	68a3      	ldr	r3, [r4, #8]
 80147ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80147be:	3b01      	subs	r3, #1
 80147c0:	60a3      	str	r3, [r4, #8]
 80147c2:	2900      	cmp	r1, #0
 80147c4:	d1ed      	bne.n	80147a2 <_puts_r+0x52>
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	da11      	bge.n	80147ee <_puts_r+0x9e>
 80147ca:	4622      	mov	r2, r4
 80147cc:	210a      	movs	r1, #10
 80147ce:	4628      	mov	r0, r5
 80147d0:	f002 ffc6 	bl	8017760 <__swbuf_r>
 80147d4:	3001      	adds	r0, #1
 80147d6:	d0d7      	beq.n	8014788 <_puts_r+0x38>
 80147d8:	250a      	movs	r5, #10
 80147da:	e7d7      	b.n	801478c <_puts_r+0x3c>
 80147dc:	4622      	mov	r2, r4
 80147de:	4628      	mov	r0, r5
 80147e0:	f002 ffbe 	bl	8017760 <__swbuf_r>
 80147e4:	3001      	adds	r0, #1
 80147e6:	d1e7      	bne.n	80147b8 <_puts_r+0x68>
 80147e8:	e7ce      	b.n	8014788 <_puts_r+0x38>
 80147ea:	3e01      	subs	r6, #1
 80147ec:	e7e4      	b.n	80147b8 <_puts_r+0x68>
 80147ee:	6823      	ldr	r3, [r4, #0]
 80147f0:	1c5a      	adds	r2, r3, #1
 80147f2:	6022      	str	r2, [r4, #0]
 80147f4:	220a      	movs	r2, #10
 80147f6:	701a      	strb	r2, [r3, #0]
 80147f8:	e7ee      	b.n	80147d8 <_puts_r+0x88>
	...

080147fc <puts>:
 80147fc:	4b02      	ldr	r3, [pc, #8]	@ (8014808 <puts+0xc>)
 80147fe:	4601      	mov	r1, r0
 8014800:	6818      	ldr	r0, [r3, #0]
 8014802:	f7ff bfa5 	b.w	8014750 <_puts_r>
 8014806:	bf00      	nop
 8014808:	200001d4 	.word	0x200001d4

0801480c <memset>:
 801480c:	4402      	add	r2, r0
 801480e:	4603      	mov	r3, r0
 8014810:	4293      	cmp	r3, r2
 8014812:	d100      	bne.n	8014816 <memset+0xa>
 8014814:	4770      	bx	lr
 8014816:	f803 1b01 	strb.w	r1, [r3], #1
 801481a:	e7f9      	b.n	8014810 <memset+0x4>

0801481c <strncmp>:
 801481c:	b510      	push	{r4, lr}
 801481e:	b16a      	cbz	r2, 801483c <strncmp+0x20>
 8014820:	3901      	subs	r1, #1
 8014822:	1884      	adds	r4, r0, r2
 8014824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014828:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801482c:	429a      	cmp	r2, r3
 801482e:	d103      	bne.n	8014838 <strncmp+0x1c>
 8014830:	42a0      	cmp	r0, r4
 8014832:	d001      	beq.n	8014838 <strncmp+0x1c>
 8014834:	2a00      	cmp	r2, #0
 8014836:	d1f5      	bne.n	8014824 <strncmp+0x8>
 8014838:	1ad0      	subs	r0, r2, r3
 801483a:	bd10      	pop	{r4, pc}
 801483c:	4610      	mov	r0, r2
 801483e:	e7fc      	b.n	801483a <strncmp+0x1e>

08014840 <strncpy>:
 8014840:	b510      	push	{r4, lr}
 8014842:	3901      	subs	r1, #1
 8014844:	4603      	mov	r3, r0
 8014846:	b132      	cbz	r2, 8014856 <strncpy+0x16>
 8014848:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801484c:	f803 4b01 	strb.w	r4, [r3], #1
 8014850:	3a01      	subs	r2, #1
 8014852:	2c00      	cmp	r4, #0
 8014854:	d1f7      	bne.n	8014846 <strncpy+0x6>
 8014856:	441a      	add	r2, r3
 8014858:	2100      	movs	r1, #0
 801485a:	4293      	cmp	r3, r2
 801485c:	d100      	bne.n	8014860 <strncpy+0x20>
 801485e:	bd10      	pop	{r4, pc}
 8014860:	f803 1b01 	strb.w	r1, [r3], #1
 8014864:	e7f9      	b.n	801485a <strncpy+0x1a>
	...

08014868 <strtok>:
 8014868:	4b16      	ldr	r3, [pc, #88]	@ (80148c4 <strtok+0x5c>)
 801486a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801486e:	681f      	ldr	r7, [r3, #0]
 8014870:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014872:	4605      	mov	r5, r0
 8014874:	460e      	mov	r6, r1
 8014876:	b9ec      	cbnz	r4, 80148b4 <strtok+0x4c>
 8014878:	2050      	movs	r0, #80	@ 0x50
 801487a:	f001 ff51 	bl	8016720 <malloc>
 801487e:	4602      	mov	r2, r0
 8014880:	6478      	str	r0, [r7, #68]	@ 0x44
 8014882:	b920      	cbnz	r0, 801488e <strtok+0x26>
 8014884:	4b10      	ldr	r3, [pc, #64]	@ (80148c8 <strtok+0x60>)
 8014886:	4811      	ldr	r0, [pc, #68]	@ (80148cc <strtok+0x64>)
 8014888:	215b      	movs	r1, #91	@ 0x5b
 801488a:	f000 f8e7 	bl	8014a5c <__assert_func>
 801488e:	e9c0 4400 	strd	r4, r4, [r0]
 8014892:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014896:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801489a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801489e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80148a2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80148a6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80148aa:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80148ae:	6184      	str	r4, [r0, #24]
 80148b0:	7704      	strb	r4, [r0, #28]
 80148b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80148b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80148b6:	4631      	mov	r1, r6
 80148b8:	4628      	mov	r0, r5
 80148ba:	2301      	movs	r3, #1
 80148bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148c0:	f000 b806 	b.w	80148d0 <__strtok_r>
 80148c4:	200001d4 	.word	0x200001d4
 80148c8:	080183d9 	.word	0x080183d9
 80148cc:	080183f0 	.word	0x080183f0

080148d0 <__strtok_r>:
 80148d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148d2:	4604      	mov	r4, r0
 80148d4:	b908      	cbnz	r0, 80148da <__strtok_r+0xa>
 80148d6:	6814      	ldr	r4, [r2, #0]
 80148d8:	b144      	cbz	r4, 80148ec <__strtok_r+0x1c>
 80148da:	4620      	mov	r0, r4
 80148dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80148e0:	460f      	mov	r7, r1
 80148e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80148e6:	b91e      	cbnz	r6, 80148f0 <__strtok_r+0x20>
 80148e8:	b965      	cbnz	r5, 8014904 <__strtok_r+0x34>
 80148ea:	6015      	str	r5, [r2, #0]
 80148ec:	2000      	movs	r0, #0
 80148ee:	e005      	b.n	80148fc <__strtok_r+0x2c>
 80148f0:	42b5      	cmp	r5, r6
 80148f2:	d1f6      	bne.n	80148e2 <__strtok_r+0x12>
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d1f0      	bne.n	80148da <__strtok_r+0xa>
 80148f8:	6014      	str	r4, [r2, #0]
 80148fa:	7003      	strb	r3, [r0, #0]
 80148fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148fe:	461c      	mov	r4, r3
 8014900:	e00c      	b.n	801491c <__strtok_r+0x4c>
 8014902:	b91d      	cbnz	r5, 801490c <__strtok_r+0x3c>
 8014904:	4627      	mov	r7, r4
 8014906:	f814 3b01 	ldrb.w	r3, [r4], #1
 801490a:	460e      	mov	r6, r1
 801490c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014910:	42ab      	cmp	r3, r5
 8014912:	d1f6      	bne.n	8014902 <__strtok_r+0x32>
 8014914:	2b00      	cmp	r3, #0
 8014916:	d0f2      	beq.n	80148fe <__strtok_r+0x2e>
 8014918:	2300      	movs	r3, #0
 801491a:	703b      	strb	r3, [r7, #0]
 801491c:	6014      	str	r4, [r2, #0]
 801491e:	e7ed      	b.n	80148fc <__strtok_r+0x2c>

08014920 <_lseek_r>:
 8014920:	b538      	push	{r3, r4, r5, lr}
 8014922:	4d07      	ldr	r5, [pc, #28]	@ (8014940 <_lseek_r+0x20>)
 8014924:	4604      	mov	r4, r0
 8014926:	4608      	mov	r0, r1
 8014928:	4611      	mov	r1, r2
 801492a:	2200      	movs	r2, #0
 801492c:	602a      	str	r2, [r5, #0]
 801492e:	461a      	mov	r2, r3
 8014930:	f7ee fcf7 	bl	8003322 <_lseek>
 8014934:	1c43      	adds	r3, r0, #1
 8014936:	d102      	bne.n	801493e <_lseek_r+0x1e>
 8014938:	682b      	ldr	r3, [r5, #0]
 801493a:	b103      	cbz	r3, 801493e <_lseek_r+0x1e>
 801493c:	6023      	str	r3, [r4, #0]
 801493e:	bd38      	pop	{r3, r4, r5, pc}
 8014940:	200067ac 	.word	0x200067ac

08014944 <_read_r>:
 8014944:	b538      	push	{r3, r4, r5, lr}
 8014946:	4d07      	ldr	r5, [pc, #28]	@ (8014964 <_read_r+0x20>)
 8014948:	4604      	mov	r4, r0
 801494a:	4608      	mov	r0, r1
 801494c:	4611      	mov	r1, r2
 801494e:	2200      	movs	r2, #0
 8014950:	602a      	str	r2, [r5, #0]
 8014952:	461a      	mov	r2, r3
 8014954:	f7ee fca1 	bl	800329a <_read>
 8014958:	1c43      	adds	r3, r0, #1
 801495a:	d102      	bne.n	8014962 <_read_r+0x1e>
 801495c:	682b      	ldr	r3, [r5, #0]
 801495e:	b103      	cbz	r3, 8014962 <_read_r+0x1e>
 8014960:	6023      	str	r3, [r4, #0]
 8014962:	bd38      	pop	{r3, r4, r5, pc}
 8014964:	200067ac 	.word	0x200067ac

08014968 <_write_r>:
 8014968:	b538      	push	{r3, r4, r5, lr}
 801496a:	4d07      	ldr	r5, [pc, #28]	@ (8014988 <_write_r+0x20>)
 801496c:	4604      	mov	r4, r0
 801496e:	4608      	mov	r0, r1
 8014970:	4611      	mov	r1, r2
 8014972:	2200      	movs	r2, #0
 8014974:	602a      	str	r2, [r5, #0]
 8014976:	461a      	mov	r2, r3
 8014978:	f7ee ff7a 	bl	8003870 <_write>
 801497c:	1c43      	adds	r3, r0, #1
 801497e:	d102      	bne.n	8014986 <_write_r+0x1e>
 8014980:	682b      	ldr	r3, [r5, #0]
 8014982:	b103      	cbz	r3, 8014986 <_write_r+0x1e>
 8014984:	6023      	str	r3, [r4, #0]
 8014986:	bd38      	pop	{r3, r4, r5, pc}
 8014988:	200067ac 	.word	0x200067ac

0801498c <__errno>:
 801498c:	4b01      	ldr	r3, [pc, #4]	@ (8014994 <__errno+0x8>)
 801498e:	6818      	ldr	r0, [r3, #0]
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop
 8014994:	200001d4 	.word	0x200001d4

08014998 <__libc_init_array>:
 8014998:	b570      	push	{r4, r5, r6, lr}
 801499a:	4d0d      	ldr	r5, [pc, #52]	@ (80149d0 <__libc_init_array+0x38>)
 801499c:	4c0d      	ldr	r4, [pc, #52]	@ (80149d4 <__libc_init_array+0x3c>)
 801499e:	1b64      	subs	r4, r4, r5
 80149a0:	10a4      	asrs	r4, r4, #2
 80149a2:	2600      	movs	r6, #0
 80149a4:	42a6      	cmp	r6, r4
 80149a6:	d109      	bne.n	80149bc <__libc_init_array+0x24>
 80149a8:	4d0b      	ldr	r5, [pc, #44]	@ (80149d8 <__libc_init_array+0x40>)
 80149aa:	4c0c      	ldr	r4, [pc, #48]	@ (80149dc <__libc_init_array+0x44>)
 80149ac:	f003 f900 	bl	8017bb0 <_init>
 80149b0:	1b64      	subs	r4, r4, r5
 80149b2:	10a4      	asrs	r4, r4, #2
 80149b4:	2600      	movs	r6, #0
 80149b6:	42a6      	cmp	r6, r4
 80149b8:	d105      	bne.n	80149c6 <__libc_init_array+0x2e>
 80149ba:	bd70      	pop	{r4, r5, r6, pc}
 80149bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80149c0:	4798      	blx	r3
 80149c2:	3601      	adds	r6, #1
 80149c4:	e7ee      	b.n	80149a4 <__libc_init_array+0xc>
 80149c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80149ca:	4798      	blx	r3
 80149cc:	3601      	adds	r6, #1
 80149ce:	e7f2      	b.n	80149b6 <__libc_init_array+0x1e>
 80149d0:	08018848 	.word	0x08018848
 80149d4:	08018848 	.word	0x08018848
 80149d8:	08018848 	.word	0x08018848
 80149dc:	0801884c 	.word	0x0801884c

080149e0 <__retarget_lock_init_recursive>:
 80149e0:	4770      	bx	lr

080149e2 <__retarget_lock_acquire_recursive>:
 80149e2:	4770      	bx	lr

080149e4 <__retarget_lock_release_recursive>:
 80149e4:	4770      	bx	lr
	...

080149e8 <_localeconv_r>:
 80149e8:	4800      	ldr	r0, [pc, #0]	@ (80149ec <_localeconv_r+0x4>)
 80149ea:	4770      	bx	lr
 80149ec:	20000158 	.word	0x20000158

080149f0 <_close_r>:
 80149f0:	b538      	push	{r3, r4, r5, lr}
 80149f2:	4d06      	ldr	r5, [pc, #24]	@ (8014a0c <_close_r+0x1c>)
 80149f4:	2300      	movs	r3, #0
 80149f6:	4604      	mov	r4, r0
 80149f8:	4608      	mov	r0, r1
 80149fa:	602b      	str	r3, [r5, #0]
 80149fc:	f7ee fc6a 	bl	80032d4 <_close>
 8014a00:	1c43      	adds	r3, r0, #1
 8014a02:	d102      	bne.n	8014a0a <_close_r+0x1a>
 8014a04:	682b      	ldr	r3, [r5, #0]
 8014a06:	b103      	cbz	r3, 8014a0a <_close_r+0x1a>
 8014a08:	6023      	str	r3, [r4, #0]
 8014a0a:	bd38      	pop	{r3, r4, r5, pc}
 8014a0c:	200067ac 	.word	0x200067ac

08014a10 <strcpy>:
 8014a10:	4603      	mov	r3, r0
 8014a12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014a16:	f803 2b01 	strb.w	r2, [r3], #1
 8014a1a:	2a00      	cmp	r2, #0
 8014a1c:	d1f9      	bne.n	8014a12 <strcpy+0x2>
 8014a1e:	4770      	bx	lr

08014a20 <memcpy>:
 8014a20:	440a      	add	r2, r1
 8014a22:	4291      	cmp	r1, r2
 8014a24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8014a28:	d100      	bne.n	8014a2c <memcpy+0xc>
 8014a2a:	4770      	bx	lr
 8014a2c:	b510      	push	{r4, lr}
 8014a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a36:	4291      	cmp	r1, r2
 8014a38:	d1f9      	bne.n	8014a2e <memcpy+0xe>
 8014a3a:	bd10      	pop	{r4, pc}
 8014a3c:	0000      	movs	r0, r0
	...

08014a40 <nan>:
 8014a40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014a48 <nan+0x8>
 8014a44:	4770      	bx	lr
 8014a46:	bf00      	nop
 8014a48:	00000000 	.word	0x00000000
 8014a4c:	7ff80000 	.word	0x7ff80000

08014a50 <nanf>:
 8014a50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014a58 <nanf+0x8>
 8014a54:	4770      	bx	lr
 8014a56:	bf00      	nop
 8014a58:	7fc00000 	.word	0x7fc00000

08014a5c <__assert_func>:
 8014a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a5e:	4614      	mov	r4, r2
 8014a60:	461a      	mov	r2, r3
 8014a62:	4b09      	ldr	r3, [pc, #36]	@ (8014a88 <__assert_func+0x2c>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	4605      	mov	r5, r0
 8014a68:	68d8      	ldr	r0, [r3, #12]
 8014a6a:	b14c      	cbz	r4, 8014a80 <__assert_func+0x24>
 8014a6c:	4b07      	ldr	r3, [pc, #28]	@ (8014a8c <__assert_func+0x30>)
 8014a6e:	9100      	str	r1, [sp, #0]
 8014a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014a74:	4906      	ldr	r1, [pc, #24]	@ (8014a90 <__assert_func+0x34>)
 8014a76:	462b      	mov	r3, r5
 8014a78:	f002 fe32 	bl	80176e0 <fiprintf>
 8014a7c:	f003 f830 	bl	8017ae0 <abort>
 8014a80:	4b04      	ldr	r3, [pc, #16]	@ (8014a94 <__assert_func+0x38>)
 8014a82:	461c      	mov	r4, r3
 8014a84:	e7f3      	b.n	8014a6e <__assert_func+0x12>
 8014a86:	bf00      	nop
 8014a88:	200001d4 	.word	0x200001d4
 8014a8c:	08018452 	.word	0x08018452
 8014a90:	0801845f 	.word	0x0801845f
 8014a94:	0801848d 	.word	0x0801848d

08014a98 <quorem>:
 8014a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a9c:	6903      	ldr	r3, [r0, #16]
 8014a9e:	690c      	ldr	r4, [r1, #16]
 8014aa0:	42a3      	cmp	r3, r4
 8014aa2:	4607      	mov	r7, r0
 8014aa4:	db7e      	blt.n	8014ba4 <quorem+0x10c>
 8014aa6:	3c01      	subs	r4, #1
 8014aa8:	f101 0814 	add.w	r8, r1, #20
 8014aac:	00a3      	lsls	r3, r4, #2
 8014aae:	f100 0514 	add.w	r5, r0, #20
 8014ab2:	9300      	str	r3, [sp, #0]
 8014ab4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014ab8:	9301      	str	r3, [sp, #4]
 8014aba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014abe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ac2:	3301      	adds	r3, #1
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014aca:	fbb2 f6f3 	udiv	r6, r2, r3
 8014ace:	d32e      	bcc.n	8014b2e <quorem+0x96>
 8014ad0:	f04f 0a00 	mov.w	sl, #0
 8014ad4:	46c4      	mov	ip, r8
 8014ad6:	46ae      	mov	lr, r5
 8014ad8:	46d3      	mov	fp, sl
 8014ada:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014ade:	b298      	uxth	r0, r3
 8014ae0:	fb06 a000 	mla	r0, r6, r0, sl
 8014ae4:	0c02      	lsrs	r2, r0, #16
 8014ae6:	0c1b      	lsrs	r3, r3, #16
 8014ae8:	fb06 2303 	mla	r3, r6, r3, r2
 8014aec:	f8de 2000 	ldr.w	r2, [lr]
 8014af0:	b280      	uxth	r0, r0
 8014af2:	b292      	uxth	r2, r2
 8014af4:	1a12      	subs	r2, r2, r0
 8014af6:	445a      	add	r2, fp
 8014af8:	f8de 0000 	ldr.w	r0, [lr]
 8014afc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014b06:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014b0a:	b292      	uxth	r2, r2
 8014b0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014b10:	45e1      	cmp	r9, ip
 8014b12:	f84e 2b04 	str.w	r2, [lr], #4
 8014b16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014b1a:	d2de      	bcs.n	8014ada <quorem+0x42>
 8014b1c:	9b00      	ldr	r3, [sp, #0]
 8014b1e:	58eb      	ldr	r3, [r5, r3]
 8014b20:	b92b      	cbnz	r3, 8014b2e <quorem+0x96>
 8014b22:	9b01      	ldr	r3, [sp, #4]
 8014b24:	3b04      	subs	r3, #4
 8014b26:	429d      	cmp	r5, r3
 8014b28:	461a      	mov	r2, r3
 8014b2a:	d32f      	bcc.n	8014b8c <quorem+0xf4>
 8014b2c:	613c      	str	r4, [r7, #16]
 8014b2e:	4638      	mov	r0, r7
 8014b30:	f002 fbae 	bl	8017290 <__mcmp>
 8014b34:	2800      	cmp	r0, #0
 8014b36:	db25      	blt.n	8014b84 <quorem+0xec>
 8014b38:	4629      	mov	r1, r5
 8014b3a:	2000      	movs	r0, #0
 8014b3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014b40:	f8d1 c000 	ldr.w	ip, [r1]
 8014b44:	fa1f fe82 	uxth.w	lr, r2
 8014b48:	fa1f f38c 	uxth.w	r3, ip
 8014b4c:	eba3 030e 	sub.w	r3, r3, lr
 8014b50:	4403      	add	r3, r0
 8014b52:	0c12      	lsrs	r2, r2, #16
 8014b54:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014b58:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014b5c:	b29b      	uxth	r3, r3
 8014b5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b62:	45c1      	cmp	r9, r8
 8014b64:	f841 3b04 	str.w	r3, [r1], #4
 8014b68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014b6c:	d2e6      	bcs.n	8014b3c <quorem+0xa4>
 8014b6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b76:	b922      	cbnz	r2, 8014b82 <quorem+0xea>
 8014b78:	3b04      	subs	r3, #4
 8014b7a:	429d      	cmp	r5, r3
 8014b7c:	461a      	mov	r2, r3
 8014b7e:	d30b      	bcc.n	8014b98 <quorem+0x100>
 8014b80:	613c      	str	r4, [r7, #16]
 8014b82:	3601      	adds	r6, #1
 8014b84:	4630      	mov	r0, r6
 8014b86:	b003      	add	sp, #12
 8014b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b8c:	6812      	ldr	r2, [r2, #0]
 8014b8e:	3b04      	subs	r3, #4
 8014b90:	2a00      	cmp	r2, #0
 8014b92:	d1cb      	bne.n	8014b2c <quorem+0x94>
 8014b94:	3c01      	subs	r4, #1
 8014b96:	e7c6      	b.n	8014b26 <quorem+0x8e>
 8014b98:	6812      	ldr	r2, [r2, #0]
 8014b9a:	3b04      	subs	r3, #4
 8014b9c:	2a00      	cmp	r2, #0
 8014b9e:	d1ef      	bne.n	8014b80 <quorem+0xe8>
 8014ba0:	3c01      	subs	r4, #1
 8014ba2:	e7ea      	b.n	8014b7a <quorem+0xe2>
 8014ba4:	2000      	movs	r0, #0
 8014ba6:	e7ee      	b.n	8014b86 <quorem+0xee>

08014ba8 <_dtoa_r>:
 8014ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bac:	69c7      	ldr	r7, [r0, #28]
 8014bae:	b097      	sub	sp, #92	@ 0x5c
 8014bb0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8014bb4:	ec55 4b10 	vmov	r4, r5, d0
 8014bb8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8014bba:	9107      	str	r1, [sp, #28]
 8014bbc:	4681      	mov	r9, r0
 8014bbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8014bc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8014bc2:	b97f      	cbnz	r7, 8014be4 <_dtoa_r+0x3c>
 8014bc4:	2010      	movs	r0, #16
 8014bc6:	f001 fdab 	bl	8016720 <malloc>
 8014bca:	4602      	mov	r2, r0
 8014bcc:	f8c9 001c 	str.w	r0, [r9, #28]
 8014bd0:	b920      	cbnz	r0, 8014bdc <_dtoa_r+0x34>
 8014bd2:	4ba9      	ldr	r3, [pc, #676]	@ (8014e78 <_dtoa_r+0x2d0>)
 8014bd4:	21ef      	movs	r1, #239	@ 0xef
 8014bd6:	48a9      	ldr	r0, [pc, #676]	@ (8014e7c <_dtoa_r+0x2d4>)
 8014bd8:	f7ff ff40 	bl	8014a5c <__assert_func>
 8014bdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014be0:	6007      	str	r7, [r0, #0]
 8014be2:	60c7      	str	r7, [r0, #12]
 8014be4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014be8:	6819      	ldr	r1, [r3, #0]
 8014bea:	b159      	cbz	r1, 8014c04 <_dtoa_r+0x5c>
 8014bec:	685a      	ldr	r2, [r3, #4]
 8014bee:	604a      	str	r2, [r1, #4]
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	4093      	lsls	r3, r2
 8014bf4:	608b      	str	r3, [r1, #8]
 8014bf6:	4648      	mov	r0, r9
 8014bf8:	f002 f8ce 	bl	8016d98 <_Bfree>
 8014bfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014c00:	2200      	movs	r2, #0
 8014c02:	601a      	str	r2, [r3, #0]
 8014c04:	1e2b      	subs	r3, r5, #0
 8014c06:	bfb9      	ittee	lt
 8014c08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014c0c:	9305      	strlt	r3, [sp, #20]
 8014c0e:	2300      	movge	r3, #0
 8014c10:	6033      	strge	r3, [r6, #0]
 8014c12:	9f05      	ldr	r7, [sp, #20]
 8014c14:	4b9a      	ldr	r3, [pc, #616]	@ (8014e80 <_dtoa_r+0x2d8>)
 8014c16:	bfbc      	itt	lt
 8014c18:	2201      	movlt	r2, #1
 8014c1a:	6032      	strlt	r2, [r6, #0]
 8014c1c:	43bb      	bics	r3, r7
 8014c1e:	d112      	bne.n	8014c46 <_dtoa_r+0x9e>
 8014c20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014c22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014c26:	6013      	str	r3, [r2, #0]
 8014c28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014c2c:	4323      	orrs	r3, r4
 8014c2e:	f000 855a 	beq.w	80156e6 <_dtoa_r+0xb3e>
 8014c32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014c34:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8014e94 <_dtoa_r+0x2ec>
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	f000 855c 	beq.w	80156f6 <_dtoa_r+0xb4e>
 8014c3e:	f10a 0303 	add.w	r3, sl, #3
 8014c42:	f000 bd56 	b.w	80156f2 <_dtoa_r+0xb4a>
 8014c46:	ed9d 7b04 	vldr	d7, [sp, #16]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	ec51 0b17 	vmov	r0, r1, d7
 8014c50:	2300      	movs	r3, #0
 8014c52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8014c56:	f7eb ff47 	bl	8000ae8 <__aeabi_dcmpeq>
 8014c5a:	4680      	mov	r8, r0
 8014c5c:	b158      	cbz	r0, 8014c76 <_dtoa_r+0xce>
 8014c5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8014c60:	2301      	movs	r3, #1
 8014c62:	6013      	str	r3, [r2, #0]
 8014c64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014c66:	b113      	cbz	r3, 8014c6e <_dtoa_r+0xc6>
 8014c68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8014c6a:	4b86      	ldr	r3, [pc, #536]	@ (8014e84 <_dtoa_r+0x2dc>)
 8014c6c:	6013      	str	r3, [r2, #0]
 8014c6e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8014e98 <_dtoa_r+0x2f0>
 8014c72:	f000 bd40 	b.w	80156f6 <_dtoa_r+0xb4e>
 8014c76:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8014c7a:	aa14      	add	r2, sp, #80	@ 0x50
 8014c7c:	a915      	add	r1, sp, #84	@ 0x54
 8014c7e:	4648      	mov	r0, r9
 8014c80:	f002 fc26 	bl	80174d0 <__d2b>
 8014c84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014c88:	9002      	str	r0, [sp, #8]
 8014c8a:	2e00      	cmp	r6, #0
 8014c8c:	d078      	beq.n	8014d80 <_dtoa_r+0x1d8>
 8014c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c90:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8014c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014c9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014ca0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014ca4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014ca8:	4619      	mov	r1, r3
 8014caa:	2200      	movs	r2, #0
 8014cac:	4b76      	ldr	r3, [pc, #472]	@ (8014e88 <_dtoa_r+0x2e0>)
 8014cae:	f7eb fafb 	bl	80002a8 <__aeabi_dsub>
 8014cb2:	a36b      	add	r3, pc, #428	@ (adr r3, 8014e60 <_dtoa_r+0x2b8>)
 8014cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb8:	f7eb fcae 	bl	8000618 <__aeabi_dmul>
 8014cbc:	a36a      	add	r3, pc, #424	@ (adr r3, 8014e68 <_dtoa_r+0x2c0>)
 8014cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc2:	f7eb faf3 	bl	80002ac <__adddf3>
 8014cc6:	4604      	mov	r4, r0
 8014cc8:	4630      	mov	r0, r6
 8014cca:	460d      	mov	r5, r1
 8014ccc:	f7eb fc3a 	bl	8000544 <__aeabi_i2d>
 8014cd0:	a367      	add	r3, pc, #412	@ (adr r3, 8014e70 <_dtoa_r+0x2c8>)
 8014cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd6:	f7eb fc9f 	bl	8000618 <__aeabi_dmul>
 8014cda:	4602      	mov	r2, r0
 8014cdc:	460b      	mov	r3, r1
 8014cde:	4620      	mov	r0, r4
 8014ce0:	4629      	mov	r1, r5
 8014ce2:	f7eb fae3 	bl	80002ac <__adddf3>
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	460d      	mov	r5, r1
 8014cea:	f7eb ff45 	bl	8000b78 <__aeabi_d2iz>
 8014cee:	2200      	movs	r2, #0
 8014cf0:	4607      	mov	r7, r0
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	4629      	mov	r1, r5
 8014cf8:	f7eb ff00 	bl	8000afc <__aeabi_dcmplt>
 8014cfc:	b140      	cbz	r0, 8014d10 <_dtoa_r+0x168>
 8014cfe:	4638      	mov	r0, r7
 8014d00:	f7eb fc20 	bl	8000544 <__aeabi_i2d>
 8014d04:	4622      	mov	r2, r4
 8014d06:	462b      	mov	r3, r5
 8014d08:	f7eb feee 	bl	8000ae8 <__aeabi_dcmpeq>
 8014d0c:	b900      	cbnz	r0, 8014d10 <_dtoa_r+0x168>
 8014d0e:	3f01      	subs	r7, #1
 8014d10:	2f16      	cmp	r7, #22
 8014d12:	d852      	bhi.n	8014dba <_dtoa_r+0x212>
 8014d14:	4b5d      	ldr	r3, [pc, #372]	@ (8014e8c <_dtoa_r+0x2e4>)
 8014d16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014d22:	f7eb feeb 	bl	8000afc <__aeabi_dcmplt>
 8014d26:	2800      	cmp	r0, #0
 8014d28:	d049      	beq.n	8014dbe <_dtoa_r+0x216>
 8014d2a:	3f01      	subs	r7, #1
 8014d2c:	2300      	movs	r3, #0
 8014d2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014d30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8014d32:	1b9b      	subs	r3, r3, r6
 8014d34:	1e5a      	subs	r2, r3, #1
 8014d36:	bf45      	ittet	mi
 8014d38:	f1c3 0301 	rsbmi	r3, r3, #1
 8014d3c:	9300      	strmi	r3, [sp, #0]
 8014d3e:	2300      	movpl	r3, #0
 8014d40:	2300      	movmi	r3, #0
 8014d42:	9206      	str	r2, [sp, #24]
 8014d44:	bf54      	ite	pl
 8014d46:	9300      	strpl	r3, [sp, #0]
 8014d48:	9306      	strmi	r3, [sp, #24]
 8014d4a:	2f00      	cmp	r7, #0
 8014d4c:	db39      	blt.n	8014dc2 <_dtoa_r+0x21a>
 8014d4e:	9b06      	ldr	r3, [sp, #24]
 8014d50:	970d      	str	r7, [sp, #52]	@ 0x34
 8014d52:	443b      	add	r3, r7
 8014d54:	9306      	str	r3, [sp, #24]
 8014d56:	2300      	movs	r3, #0
 8014d58:	9308      	str	r3, [sp, #32]
 8014d5a:	9b07      	ldr	r3, [sp, #28]
 8014d5c:	2b09      	cmp	r3, #9
 8014d5e:	d863      	bhi.n	8014e28 <_dtoa_r+0x280>
 8014d60:	2b05      	cmp	r3, #5
 8014d62:	bfc4      	itt	gt
 8014d64:	3b04      	subgt	r3, #4
 8014d66:	9307      	strgt	r3, [sp, #28]
 8014d68:	9b07      	ldr	r3, [sp, #28]
 8014d6a:	f1a3 0302 	sub.w	r3, r3, #2
 8014d6e:	bfcc      	ite	gt
 8014d70:	2400      	movgt	r4, #0
 8014d72:	2401      	movle	r4, #1
 8014d74:	2b03      	cmp	r3, #3
 8014d76:	d863      	bhi.n	8014e40 <_dtoa_r+0x298>
 8014d78:	e8df f003 	tbb	[pc, r3]
 8014d7c:	2b375452 	.word	0x2b375452
 8014d80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8014d84:	441e      	add	r6, r3
 8014d86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014d8a:	2b20      	cmp	r3, #32
 8014d8c:	bfc1      	itttt	gt
 8014d8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014d92:	409f      	lslgt	r7, r3
 8014d94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014d98:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014d9c:	bfd6      	itet	le
 8014d9e:	f1c3 0320 	rsble	r3, r3, #32
 8014da2:	ea47 0003 	orrgt.w	r0, r7, r3
 8014da6:	fa04 f003 	lslle.w	r0, r4, r3
 8014daa:	f7eb fbbb 	bl	8000524 <__aeabi_ui2d>
 8014dae:	2201      	movs	r2, #1
 8014db0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014db4:	3e01      	subs	r6, #1
 8014db6:	9212      	str	r2, [sp, #72]	@ 0x48
 8014db8:	e776      	b.n	8014ca8 <_dtoa_r+0x100>
 8014dba:	2301      	movs	r3, #1
 8014dbc:	e7b7      	b.n	8014d2e <_dtoa_r+0x186>
 8014dbe:	9010      	str	r0, [sp, #64]	@ 0x40
 8014dc0:	e7b6      	b.n	8014d30 <_dtoa_r+0x188>
 8014dc2:	9b00      	ldr	r3, [sp, #0]
 8014dc4:	1bdb      	subs	r3, r3, r7
 8014dc6:	9300      	str	r3, [sp, #0]
 8014dc8:	427b      	negs	r3, r7
 8014dca:	9308      	str	r3, [sp, #32]
 8014dcc:	2300      	movs	r3, #0
 8014dce:	930d      	str	r3, [sp, #52]	@ 0x34
 8014dd0:	e7c3      	b.n	8014d5a <_dtoa_r+0x1b2>
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014dd8:	eb07 0b03 	add.w	fp, r7, r3
 8014ddc:	f10b 0301 	add.w	r3, fp, #1
 8014de0:	2b01      	cmp	r3, #1
 8014de2:	9303      	str	r3, [sp, #12]
 8014de4:	bfb8      	it	lt
 8014de6:	2301      	movlt	r3, #1
 8014de8:	e006      	b.n	8014df8 <_dtoa_r+0x250>
 8014dea:	2301      	movs	r3, #1
 8014dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8014dee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	dd28      	ble.n	8014e46 <_dtoa_r+0x29e>
 8014df4:	469b      	mov	fp, r3
 8014df6:	9303      	str	r3, [sp, #12]
 8014df8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8014dfc:	2100      	movs	r1, #0
 8014dfe:	2204      	movs	r2, #4
 8014e00:	f102 0514 	add.w	r5, r2, #20
 8014e04:	429d      	cmp	r5, r3
 8014e06:	d926      	bls.n	8014e56 <_dtoa_r+0x2ae>
 8014e08:	6041      	str	r1, [r0, #4]
 8014e0a:	4648      	mov	r0, r9
 8014e0c:	f001 ff84 	bl	8016d18 <_Balloc>
 8014e10:	4682      	mov	sl, r0
 8014e12:	2800      	cmp	r0, #0
 8014e14:	d142      	bne.n	8014e9c <_dtoa_r+0x2f4>
 8014e16:	4b1e      	ldr	r3, [pc, #120]	@ (8014e90 <_dtoa_r+0x2e8>)
 8014e18:	4602      	mov	r2, r0
 8014e1a:	f240 11af 	movw	r1, #431	@ 0x1af
 8014e1e:	e6da      	b.n	8014bd6 <_dtoa_r+0x2e>
 8014e20:	2300      	movs	r3, #0
 8014e22:	e7e3      	b.n	8014dec <_dtoa_r+0x244>
 8014e24:	2300      	movs	r3, #0
 8014e26:	e7d5      	b.n	8014dd4 <_dtoa_r+0x22c>
 8014e28:	2401      	movs	r4, #1
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	9307      	str	r3, [sp, #28]
 8014e2e:	9409      	str	r4, [sp, #36]	@ 0x24
 8014e30:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8014e34:	2200      	movs	r2, #0
 8014e36:	f8cd b00c 	str.w	fp, [sp, #12]
 8014e3a:	2312      	movs	r3, #18
 8014e3c:	920c      	str	r2, [sp, #48]	@ 0x30
 8014e3e:	e7db      	b.n	8014df8 <_dtoa_r+0x250>
 8014e40:	2301      	movs	r3, #1
 8014e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8014e44:	e7f4      	b.n	8014e30 <_dtoa_r+0x288>
 8014e46:	f04f 0b01 	mov.w	fp, #1
 8014e4a:	f8cd b00c 	str.w	fp, [sp, #12]
 8014e4e:	465b      	mov	r3, fp
 8014e50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8014e54:	e7d0      	b.n	8014df8 <_dtoa_r+0x250>
 8014e56:	3101      	adds	r1, #1
 8014e58:	0052      	lsls	r2, r2, #1
 8014e5a:	e7d1      	b.n	8014e00 <_dtoa_r+0x258>
 8014e5c:	f3af 8000 	nop.w
 8014e60:	636f4361 	.word	0x636f4361
 8014e64:	3fd287a7 	.word	0x3fd287a7
 8014e68:	8b60c8b3 	.word	0x8b60c8b3
 8014e6c:	3fc68a28 	.word	0x3fc68a28
 8014e70:	509f79fb 	.word	0x509f79fb
 8014e74:	3fd34413 	.word	0x3fd34413
 8014e78:	080183d9 	.word	0x080183d9
 8014e7c:	0801849b 	.word	0x0801849b
 8014e80:	7ff00000 	.word	0x7ff00000
 8014e84:	0801858c 	.word	0x0801858c
 8014e88:	3ff80000 	.word	0x3ff80000
 8014e8c:	08018778 	.word	0x08018778
 8014e90:	080184f3 	.word	0x080184f3
 8014e94:	08018497 	.word	0x08018497
 8014e98:	0801858b 	.word	0x0801858b
 8014e9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8014ea0:	6018      	str	r0, [r3, #0]
 8014ea2:	9b03      	ldr	r3, [sp, #12]
 8014ea4:	2b0e      	cmp	r3, #14
 8014ea6:	f200 80a1 	bhi.w	8014fec <_dtoa_r+0x444>
 8014eaa:	2c00      	cmp	r4, #0
 8014eac:	f000 809e 	beq.w	8014fec <_dtoa_r+0x444>
 8014eb0:	2f00      	cmp	r7, #0
 8014eb2:	dd33      	ble.n	8014f1c <_dtoa_r+0x374>
 8014eb4:	4b9c      	ldr	r3, [pc, #624]	@ (8015128 <_dtoa_r+0x580>)
 8014eb6:	f007 020f 	and.w	r2, r7, #15
 8014eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ebe:	ed93 7b00 	vldr	d7, [r3]
 8014ec2:	05f8      	lsls	r0, r7, #23
 8014ec4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8014ec8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8014ecc:	d516      	bpl.n	8014efc <_dtoa_r+0x354>
 8014ece:	4b97      	ldr	r3, [pc, #604]	@ (801512c <_dtoa_r+0x584>)
 8014ed0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014ed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ed8:	f7eb fcc8 	bl	800086c <__aeabi_ddiv>
 8014edc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ee0:	f004 040f 	and.w	r4, r4, #15
 8014ee4:	2603      	movs	r6, #3
 8014ee6:	4d91      	ldr	r5, [pc, #580]	@ (801512c <_dtoa_r+0x584>)
 8014ee8:	b954      	cbnz	r4, 8014f00 <_dtoa_r+0x358>
 8014eea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8014eee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014ef2:	f7eb fcbb 	bl	800086c <__aeabi_ddiv>
 8014ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014efa:	e028      	b.n	8014f4e <_dtoa_r+0x3a6>
 8014efc:	2602      	movs	r6, #2
 8014efe:	e7f2      	b.n	8014ee6 <_dtoa_r+0x33e>
 8014f00:	07e1      	lsls	r1, r4, #31
 8014f02:	d508      	bpl.n	8014f16 <_dtoa_r+0x36e>
 8014f04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8014f08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014f0c:	f7eb fb84 	bl	8000618 <__aeabi_dmul>
 8014f10:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8014f14:	3601      	adds	r6, #1
 8014f16:	1064      	asrs	r4, r4, #1
 8014f18:	3508      	adds	r5, #8
 8014f1a:	e7e5      	b.n	8014ee8 <_dtoa_r+0x340>
 8014f1c:	f000 80af 	beq.w	801507e <_dtoa_r+0x4d6>
 8014f20:	427c      	negs	r4, r7
 8014f22:	4b81      	ldr	r3, [pc, #516]	@ (8015128 <_dtoa_r+0x580>)
 8014f24:	4d81      	ldr	r5, [pc, #516]	@ (801512c <_dtoa_r+0x584>)
 8014f26:	f004 020f 	and.w	r2, r4, #15
 8014f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8014f36:	f7eb fb6f 	bl	8000618 <__aeabi_dmul>
 8014f3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f3e:	1124      	asrs	r4, r4, #4
 8014f40:	2300      	movs	r3, #0
 8014f42:	2602      	movs	r6, #2
 8014f44:	2c00      	cmp	r4, #0
 8014f46:	f040 808f 	bne.w	8015068 <_dtoa_r+0x4c0>
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d1d3      	bne.n	8014ef6 <_dtoa_r+0x34e>
 8014f4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014f50:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	f000 8094 	beq.w	8015082 <_dtoa_r+0x4da>
 8014f5a:	4b75      	ldr	r3, [pc, #468]	@ (8015130 <_dtoa_r+0x588>)
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	4620      	mov	r0, r4
 8014f60:	4629      	mov	r1, r5
 8014f62:	f7eb fdcb 	bl	8000afc <__aeabi_dcmplt>
 8014f66:	2800      	cmp	r0, #0
 8014f68:	f000 808b 	beq.w	8015082 <_dtoa_r+0x4da>
 8014f6c:	9b03      	ldr	r3, [sp, #12]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	f000 8087 	beq.w	8015082 <_dtoa_r+0x4da>
 8014f74:	f1bb 0f00 	cmp.w	fp, #0
 8014f78:	dd34      	ble.n	8014fe4 <_dtoa_r+0x43c>
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	4b6d      	ldr	r3, [pc, #436]	@ (8015134 <_dtoa_r+0x58c>)
 8014f7e:	2200      	movs	r2, #0
 8014f80:	4629      	mov	r1, r5
 8014f82:	f7eb fb49 	bl	8000618 <__aeabi_dmul>
 8014f86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f8a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8014f8e:	3601      	adds	r6, #1
 8014f90:	465c      	mov	r4, fp
 8014f92:	4630      	mov	r0, r6
 8014f94:	f7eb fad6 	bl	8000544 <__aeabi_i2d>
 8014f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f9c:	f7eb fb3c 	bl	8000618 <__aeabi_dmul>
 8014fa0:	4b65      	ldr	r3, [pc, #404]	@ (8015138 <_dtoa_r+0x590>)
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	f7eb f982 	bl	80002ac <__adddf3>
 8014fa8:	4605      	mov	r5, r0
 8014faa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8014fae:	2c00      	cmp	r4, #0
 8014fb0:	d16a      	bne.n	8015088 <_dtoa_r+0x4e0>
 8014fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014fb6:	4b61      	ldr	r3, [pc, #388]	@ (801513c <_dtoa_r+0x594>)
 8014fb8:	2200      	movs	r2, #0
 8014fba:	f7eb f975 	bl	80002a8 <__aeabi_dsub>
 8014fbe:	4602      	mov	r2, r0
 8014fc0:	460b      	mov	r3, r1
 8014fc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014fc6:	462a      	mov	r2, r5
 8014fc8:	4633      	mov	r3, r6
 8014fca:	f7eb fdb5 	bl	8000b38 <__aeabi_dcmpgt>
 8014fce:	2800      	cmp	r0, #0
 8014fd0:	f040 8298 	bne.w	8015504 <_dtoa_r+0x95c>
 8014fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014fd8:	462a      	mov	r2, r5
 8014fda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014fde:	f7eb fd8d 	bl	8000afc <__aeabi_dcmplt>
 8014fe2:	bb38      	cbnz	r0, 8015034 <_dtoa_r+0x48c>
 8014fe4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8014fe8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8014fec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	f2c0 8157 	blt.w	80152a2 <_dtoa_r+0x6fa>
 8014ff4:	2f0e      	cmp	r7, #14
 8014ff6:	f300 8154 	bgt.w	80152a2 <_dtoa_r+0x6fa>
 8014ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8015128 <_dtoa_r+0x580>)
 8014ffc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015000:	ed93 7b00 	vldr	d7, [r3]
 8015004:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015006:	2b00      	cmp	r3, #0
 8015008:	ed8d 7b00 	vstr	d7, [sp]
 801500c:	f280 80e5 	bge.w	80151da <_dtoa_r+0x632>
 8015010:	9b03      	ldr	r3, [sp, #12]
 8015012:	2b00      	cmp	r3, #0
 8015014:	f300 80e1 	bgt.w	80151da <_dtoa_r+0x632>
 8015018:	d10c      	bne.n	8015034 <_dtoa_r+0x48c>
 801501a:	4b48      	ldr	r3, [pc, #288]	@ (801513c <_dtoa_r+0x594>)
 801501c:	2200      	movs	r2, #0
 801501e:	ec51 0b17 	vmov	r0, r1, d7
 8015022:	f7eb faf9 	bl	8000618 <__aeabi_dmul>
 8015026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801502a:	f7eb fd7b 	bl	8000b24 <__aeabi_dcmpge>
 801502e:	2800      	cmp	r0, #0
 8015030:	f000 8266 	beq.w	8015500 <_dtoa_r+0x958>
 8015034:	2400      	movs	r4, #0
 8015036:	4625      	mov	r5, r4
 8015038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801503a:	4656      	mov	r6, sl
 801503c:	ea6f 0803 	mvn.w	r8, r3
 8015040:	2700      	movs	r7, #0
 8015042:	4621      	mov	r1, r4
 8015044:	4648      	mov	r0, r9
 8015046:	f001 fea7 	bl	8016d98 <_Bfree>
 801504a:	2d00      	cmp	r5, #0
 801504c:	f000 80bd 	beq.w	80151ca <_dtoa_r+0x622>
 8015050:	b12f      	cbz	r7, 801505e <_dtoa_r+0x4b6>
 8015052:	42af      	cmp	r7, r5
 8015054:	d003      	beq.n	801505e <_dtoa_r+0x4b6>
 8015056:	4639      	mov	r1, r7
 8015058:	4648      	mov	r0, r9
 801505a:	f001 fe9d 	bl	8016d98 <_Bfree>
 801505e:	4629      	mov	r1, r5
 8015060:	4648      	mov	r0, r9
 8015062:	f001 fe99 	bl	8016d98 <_Bfree>
 8015066:	e0b0      	b.n	80151ca <_dtoa_r+0x622>
 8015068:	07e2      	lsls	r2, r4, #31
 801506a:	d505      	bpl.n	8015078 <_dtoa_r+0x4d0>
 801506c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015070:	f7eb fad2 	bl	8000618 <__aeabi_dmul>
 8015074:	3601      	adds	r6, #1
 8015076:	2301      	movs	r3, #1
 8015078:	1064      	asrs	r4, r4, #1
 801507a:	3508      	adds	r5, #8
 801507c:	e762      	b.n	8014f44 <_dtoa_r+0x39c>
 801507e:	2602      	movs	r6, #2
 8015080:	e765      	b.n	8014f4e <_dtoa_r+0x3a6>
 8015082:	9c03      	ldr	r4, [sp, #12]
 8015084:	46b8      	mov	r8, r7
 8015086:	e784      	b.n	8014f92 <_dtoa_r+0x3ea>
 8015088:	4b27      	ldr	r3, [pc, #156]	@ (8015128 <_dtoa_r+0x580>)
 801508a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801508c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015090:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015094:	4454      	add	r4, sl
 8015096:	2900      	cmp	r1, #0
 8015098:	d054      	beq.n	8015144 <_dtoa_r+0x59c>
 801509a:	4929      	ldr	r1, [pc, #164]	@ (8015140 <_dtoa_r+0x598>)
 801509c:	2000      	movs	r0, #0
 801509e:	f7eb fbe5 	bl	800086c <__aeabi_ddiv>
 80150a2:	4633      	mov	r3, r6
 80150a4:	462a      	mov	r2, r5
 80150a6:	f7eb f8ff 	bl	80002a8 <__aeabi_dsub>
 80150aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80150ae:	4656      	mov	r6, sl
 80150b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150b4:	f7eb fd60 	bl	8000b78 <__aeabi_d2iz>
 80150b8:	4605      	mov	r5, r0
 80150ba:	f7eb fa43 	bl	8000544 <__aeabi_i2d>
 80150be:	4602      	mov	r2, r0
 80150c0:	460b      	mov	r3, r1
 80150c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150c6:	f7eb f8ef 	bl	80002a8 <__aeabi_dsub>
 80150ca:	3530      	adds	r5, #48	@ 0x30
 80150cc:	4602      	mov	r2, r0
 80150ce:	460b      	mov	r3, r1
 80150d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80150d4:	f806 5b01 	strb.w	r5, [r6], #1
 80150d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80150dc:	f7eb fd0e 	bl	8000afc <__aeabi_dcmplt>
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d172      	bne.n	80151ca <_dtoa_r+0x622>
 80150e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150e8:	4911      	ldr	r1, [pc, #68]	@ (8015130 <_dtoa_r+0x588>)
 80150ea:	2000      	movs	r0, #0
 80150ec:	f7eb f8dc 	bl	80002a8 <__aeabi_dsub>
 80150f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80150f4:	f7eb fd02 	bl	8000afc <__aeabi_dcmplt>
 80150f8:	2800      	cmp	r0, #0
 80150fa:	f040 80b4 	bne.w	8015266 <_dtoa_r+0x6be>
 80150fe:	42a6      	cmp	r6, r4
 8015100:	f43f af70 	beq.w	8014fe4 <_dtoa_r+0x43c>
 8015104:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8015108:	4b0a      	ldr	r3, [pc, #40]	@ (8015134 <_dtoa_r+0x58c>)
 801510a:	2200      	movs	r2, #0
 801510c:	f7eb fa84 	bl	8000618 <__aeabi_dmul>
 8015110:	4b08      	ldr	r3, [pc, #32]	@ (8015134 <_dtoa_r+0x58c>)
 8015112:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015116:	2200      	movs	r2, #0
 8015118:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801511c:	f7eb fa7c 	bl	8000618 <__aeabi_dmul>
 8015120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015124:	e7c4      	b.n	80150b0 <_dtoa_r+0x508>
 8015126:	bf00      	nop
 8015128:	08018778 	.word	0x08018778
 801512c:	08018750 	.word	0x08018750
 8015130:	3ff00000 	.word	0x3ff00000
 8015134:	40240000 	.word	0x40240000
 8015138:	401c0000 	.word	0x401c0000
 801513c:	40140000 	.word	0x40140000
 8015140:	3fe00000 	.word	0x3fe00000
 8015144:	4631      	mov	r1, r6
 8015146:	4628      	mov	r0, r5
 8015148:	f7eb fa66 	bl	8000618 <__aeabi_dmul>
 801514c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8015150:	9413      	str	r4, [sp, #76]	@ 0x4c
 8015152:	4656      	mov	r6, sl
 8015154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015158:	f7eb fd0e 	bl	8000b78 <__aeabi_d2iz>
 801515c:	4605      	mov	r5, r0
 801515e:	f7eb f9f1 	bl	8000544 <__aeabi_i2d>
 8015162:	4602      	mov	r2, r0
 8015164:	460b      	mov	r3, r1
 8015166:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801516a:	f7eb f89d 	bl	80002a8 <__aeabi_dsub>
 801516e:	3530      	adds	r5, #48	@ 0x30
 8015170:	f806 5b01 	strb.w	r5, [r6], #1
 8015174:	4602      	mov	r2, r0
 8015176:	460b      	mov	r3, r1
 8015178:	42a6      	cmp	r6, r4
 801517a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801517e:	f04f 0200 	mov.w	r2, #0
 8015182:	d124      	bne.n	80151ce <_dtoa_r+0x626>
 8015184:	4baf      	ldr	r3, [pc, #700]	@ (8015444 <_dtoa_r+0x89c>)
 8015186:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801518a:	f7eb f88f 	bl	80002ac <__adddf3>
 801518e:	4602      	mov	r2, r0
 8015190:	460b      	mov	r3, r1
 8015192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015196:	f7eb fccf 	bl	8000b38 <__aeabi_dcmpgt>
 801519a:	2800      	cmp	r0, #0
 801519c:	d163      	bne.n	8015266 <_dtoa_r+0x6be>
 801519e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80151a2:	49a8      	ldr	r1, [pc, #672]	@ (8015444 <_dtoa_r+0x89c>)
 80151a4:	2000      	movs	r0, #0
 80151a6:	f7eb f87f 	bl	80002a8 <__aeabi_dsub>
 80151aa:	4602      	mov	r2, r0
 80151ac:	460b      	mov	r3, r1
 80151ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80151b2:	f7eb fca3 	bl	8000afc <__aeabi_dcmplt>
 80151b6:	2800      	cmp	r0, #0
 80151b8:	f43f af14 	beq.w	8014fe4 <_dtoa_r+0x43c>
 80151bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80151be:	1e73      	subs	r3, r6, #1
 80151c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80151c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80151c6:	2b30      	cmp	r3, #48	@ 0x30
 80151c8:	d0f8      	beq.n	80151bc <_dtoa_r+0x614>
 80151ca:	4647      	mov	r7, r8
 80151cc:	e03b      	b.n	8015246 <_dtoa_r+0x69e>
 80151ce:	4b9e      	ldr	r3, [pc, #632]	@ (8015448 <_dtoa_r+0x8a0>)
 80151d0:	f7eb fa22 	bl	8000618 <__aeabi_dmul>
 80151d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80151d8:	e7bc      	b.n	8015154 <_dtoa_r+0x5ac>
 80151da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80151de:	4656      	mov	r6, sl
 80151e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151e4:	4620      	mov	r0, r4
 80151e6:	4629      	mov	r1, r5
 80151e8:	f7eb fb40 	bl	800086c <__aeabi_ddiv>
 80151ec:	f7eb fcc4 	bl	8000b78 <__aeabi_d2iz>
 80151f0:	4680      	mov	r8, r0
 80151f2:	f7eb f9a7 	bl	8000544 <__aeabi_i2d>
 80151f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151fa:	f7eb fa0d 	bl	8000618 <__aeabi_dmul>
 80151fe:	4602      	mov	r2, r0
 8015200:	460b      	mov	r3, r1
 8015202:	4620      	mov	r0, r4
 8015204:	4629      	mov	r1, r5
 8015206:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801520a:	f7eb f84d 	bl	80002a8 <__aeabi_dsub>
 801520e:	f806 4b01 	strb.w	r4, [r6], #1
 8015212:	9d03      	ldr	r5, [sp, #12]
 8015214:	eba6 040a 	sub.w	r4, r6, sl
 8015218:	42a5      	cmp	r5, r4
 801521a:	4602      	mov	r2, r0
 801521c:	460b      	mov	r3, r1
 801521e:	d133      	bne.n	8015288 <_dtoa_r+0x6e0>
 8015220:	f7eb f844 	bl	80002ac <__adddf3>
 8015224:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015228:	4604      	mov	r4, r0
 801522a:	460d      	mov	r5, r1
 801522c:	f7eb fc84 	bl	8000b38 <__aeabi_dcmpgt>
 8015230:	b9c0      	cbnz	r0, 8015264 <_dtoa_r+0x6bc>
 8015232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015236:	4620      	mov	r0, r4
 8015238:	4629      	mov	r1, r5
 801523a:	f7eb fc55 	bl	8000ae8 <__aeabi_dcmpeq>
 801523e:	b110      	cbz	r0, 8015246 <_dtoa_r+0x69e>
 8015240:	f018 0f01 	tst.w	r8, #1
 8015244:	d10e      	bne.n	8015264 <_dtoa_r+0x6bc>
 8015246:	9902      	ldr	r1, [sp, #8]
 8015248:	4648      	mov	r0, r9
 801524a:	f001 fda5 	bl	8016d98 <_Bfree>
 801524e:	2300      	movs	r3, #0
 8015250:	7033      	strb	r3, [r6, #0]
 8015252:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015254:	3701      	adds	r7, #1
 8015256:	601f      	str	r7, [r3, #0]
 8015258:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801525a:	2b00      	cmp	r3, #0
 801525c:	f000 824b 	beq.w	80156f6 <_dtoa_r+0xb4e>
 8015260:	601e      	str	r6, [r3, #0]
 8015262:	e248      	b.n	80156f6 <_dtoa_r+0xb4e>
 8015264:	46b8      	mov	r8, r7
 8015266:	4633      	mov	r3, r6
 8015268:	461e      	mov	r6, r3
 801526a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801526e:	2a39      	cmp	r2, #57	@ 0x39
 8015270:	d106      	bne.n	8015280 <_dtoa_r+0x6d8>
 8015272:	459a      	cmp	sl, r3
 8015274:	d1f8      	bne.n	8015268 <_dtoa_r+0x6c0>
 8015276:	2230      	movs	r2, #48	@ 0x30
 8015278:	f108 0801 	add.w	r8, r8, #1
 801527c:	f88a 2000 	strb.w	r2, [sl]
 8015280:	781a      	ldrb	r2, [r3, #0]
 8015282:	3201      	adds	r2, #1
 8015284:	701a      	strb	r2, [r3, #0]
 8015286:	e7a0      	b.n	80151ca <_dtoa_r+0x622>
 8015288:	4b6f      	ldr	r3, [pc, #444]	@ (8015448 <_dtoa_r+0x8a0>)
 801528a:	2200      	movs	r2, #0
 801528c:	f7eb f9c4 	bl	8000618 <__aeabi_dmul>
 8015290:	2200      	movs	r2, #0
 8015292:	2300      	movs	r3, #0
 8015294:	4604      	mov	r4, r0
 8015296:	460d      	mov	r5, r1
 8015298:	f7eb fc26 	bl	8000ae8 <__aeabi_dcmpeq>
 801529c:	2800      	cmp	r0, #0
 801529e:	d09f      	beq.n	80151e0 <_dtoa_r+0x638>
 80152a0:	e7d1      	b.n	8015246 <_dtoa_r+0x69e>
 80152a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152a4:	2a00      	cmp	r2, #0
 80152a6:	f000 80ea 	beq.w	801547e <_dtoa_r+0x8d6>
 80152aa:	9a07      	ldr	r2, [sp, #28]
 80152ac:	2a01      	cmp	r2, #1
 80152ae:	f300 80cd 	bgt.w	801544c <_dtoa_r+0x8a4>
 80152b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80152b4:	2a00      	cmp	r2, #0
 80152b6:	f000 80c1 	beq.w	801543c <_dtoa_r+0x894>
 80152ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80152be:	9c08      	ldr	r4, [sp, #32]
 80152c0:	9e00      	ldr	r6, [sp, #0]
 80152c2:	9a00      	ldr	r2, [sp, #0]
 80152c4:	441a      	add	r2, r3
 80152c6:	9200      	str	r2, [sp, #0]
 80152c8:	9a06      	ldr	r2, [sp, #24]
 80152ca:	2101      	movs	r1, #1
 80152cc:	441a      	add	r2, r3
 80152ce:	4648      	mov	r0, r9
 80152d0:	9206      	str	r2, [sp, #24]
 80152d2:	f001 fe5f 	bl	8016f94 <__i2b>
 80152d6:	4605      	mov	r5, r0
 80152d8:	b166      	cbz	r6, 80152f4 <_dtoa_r+0x74c>
 80152da:	9b06      	ldr	r3, [sp, #24]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	dd09      	ble.n	80152f4 <_dtoa_r+0x74c>
 80152e0:	42b3      	cmp	r3, r6
 80152e2:	9a00      	ldr	r2, [sp, #0]
 80152e4:	bfa8      	it	ge
 80152e6:	4633      	movge	r3, r6
 80152e8:	1ad2      	subs	r2, r2, r3
 80152ea:	9200      	str	r2, [sp, #0]
 80152ec:	9a06      	ldr	r2, [sp, #24]
 80152ee:	1af6      	subs	r6, r6, r3
 80152f0:	1ad3      	subs	r3, r2, r3
 80152f2:	9306      	str	r3, [sp, #24]
 80152f4:	9b08      	ldr	r3, [sp, #32]
 80152f6:	b30b      	cbz	r3, 801533c <_dtoa_r+0x794>
 80152f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	f000 80c6 	beq.w	801548c <_dtoa_r+0x8e4>
 8015300:	2c00      	cmp	r4, #0
 8015302:	f000 80c0 	beq.w	8015486 <_dtoa_r+0x8de>
 8015306:	4629      	mov	r1, r5
 8015308:	4622      	mov	r2, r4
 801530a:	4648      	mov	r0, r9
 801530c:	f001 fefa 	bl	8017104 <__pow5mult>
 8015310:	9a02      	ldr	r2, [sp, #8]
 8015312:	4601      	mov	r1, r0
 8015314:	4605      	mov	r5, r0
 8015316:	4648      	mov	r0, r9
 8015318:	f001 fe52 	bl	8016fc0 <__multiply>
 801531c:	9902      	ldr	r1, [sp, #8]
 801531e:	4680      	mov	r8, r0
 8015320:	4648      	mov	r0, r9
 8015322:	f001 fd39 	bl	8016d98 <_Bfree>
 8015326:	9b08      	ldr	r3, [sp, #32]
 8015328:	1b1b      	subs	r3, r3, r4
 801532a:	9308      	str	r3, [sp, #32]
 801532c:	f000 80b1 	beq.w	8015492 <_dtoa_r+0x8ea>
 8015330:	9a08      	ldr	r2, [sp, #32]
 8015332:	4641      	mov	r1, r8
 8015334:	4648      	mov	r0, r9
 8015336:	f001 fee5 	bl	8017104 <__pow5mult>
 801533a:	9002      	str	r0, [sp, #8]
 801533c:	2101      	movs	r1, #1
 801533e:	4648      	mov	r0, r9
 8015340:	f001 fe28 	bl	8016f94 <__i2b>
 8015344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015346:	4604      	mov	r4, r0
 8015348:	2b00      	cmp	r3, #0
 801534a:	f000 81d8 	beq.w	80156fe <_dtoa_r+0xb56>
 801534e:	461a      	mov	r2, r3
 8015350:	4601      	mov	r1, r0
 8015352:	4648      	mov	r0, r9
 8015354:	f001 fed6 	bl	8017104 <__pow5mult>
 8015358:	9b07      	ldr	r3, [sp, #28]
 801535a:	2b01      	cmp	r3, #1
 801535c:	4604      	mov	r4, r0
 801535e:	f300 809f 	bgt.w	80154a0 <_dtoa_r+0x8f8>
 8015362:	9b04      	ldr	r3, [sp, #16]
 8015364:	2b00      	cmp	r3, #0
 8015366:	f040 8097 	bne.w	8015498 <_dtoa_r+0x8f0>
 801536a:	9b05      	ldr	r3, [sp, #20]
 801536c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015370:	2b00      	cmp	r3, #0
 8015372:	f040 8093 	bne.w	801549c <_dtoa_r+0x8f4>
 8015376:	9b05      	ldr	r3, [sp, #20]
 8015378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801537c:	0d1b      	lsrs	r3, r3, #20
 801537e:	051b      	lsls	r3, r3, #20
 8015380:	b133      	cbz	r3, 8015390 <_dtoa_r+0x7e8>
 8015382:	9b00      	ldr	r3, [sp, #0]
 8015384:	3301      	adds	r3, #1
 8015386:	9300      	str	r3, [sp, #0]
 8015388:	9b06      	ldr	r3, [sp, #24]
 801538a:	3301      	adds	r3, #1
 801538c:	9306      	str	r3, [sp, #24]
 801538e:	2301      	movs	r3, #1
 8015390:	9308      	str	r3, [sp, #32]
 8015392:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015394:	2b00      	cmp	r3, #0
 8015396:	f000 81b8 	beq.w	801570a <_dtoa_r+0xb62>
 801539a:	6923      	ldr	r3, [r4, #16]
 801539c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80153a0:	6918      	ldr	r0, [r3, #16]
 80153a2:	f001 fdab 	bl	8016efc <__hi0bits>
 80153a6:	f1c0 0020 	rsb	r0, r0, #32
 80153aa:	9b06      	ldr	r3, [sp, #24]
 80153ac:	4418      	add	r0, r3
 80153ae:	f010 001f 	ands.w	r0, r0, #31
 80153b2:	f000 8082 	beq.w	80154ba <_dtoa_r+0x912>
 80153b6:	f1c0 0320 	rsb	r3, r0, #32
 80153ba:	2b04      	cmp	r3, #4
 80153bc:	dd73      	ble.n	80154a6 <_dtoa_r+0x8fe>
 80153be:	9b00      	ldr	r3, [sp, #0]
 80153c0:	f1c0 001c 	rsb	r0, r0, #28
 80153c4:	4403      	add	r3, r0
 80153c6:	9300      	str	r3, [sp, #0]
 80153c8:	9b06      	ldr	r3, [sp, #24]
 80153ca:	4403      	add	r3, r0
 80153cc:	4406      	add	r6, r0
 80153ce:	9306      	str	r3, [sp, #24]
 80153d0:	9b00      	ldr	r3, [sp, #0]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	dd05      	ble.n	80153e2 <_dtoa_r+0x83a>
 80153d6:	9902      	ldr	r1, [sp, #8]
 80153d8:	461a      	mov	r2, r3
 80153da:	4648      	mov	r0, r9
 80153dc:	f001 feec 	bl	80171b8 <__lshift>
 80153e0:	9002      	str	r0, [sp, #8]
 80153e2:	9b06      	ldr	r3, [sp, #24]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	dd05      	ble.n	80153f4 <_dtoa_r+0x84c>
 80153e8:	4621      	mov	r1, r4
 80153ea:	461a      	mov	r2, r3
 80153ec:	4648      	mov	r0, r9
 80153ee:	f001 fee3 	bl	80171b8 <__lshift>
 80153f2:	4604      	mov	r4, r0
 80153f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d061      	beq.n	80154be <_dtoa_r+0x916>
 80153fa:	9802      	ldr	r0, [sp, #8]
 80153fc:	4621      	mov	r1, r4
 80153fe:	f001 ff47 	bl	8017290 <__mcmp>
 8015402:	2800      	cmp	r0, #0
 8015404:	da5b      	bge.n	80154be <_dtoa_r+0x916>
 8015406:	2300      	movs	r3, #0
 8015408:	9902      	ldr	r1, [sp, #8]
 801540a:	220a      	movs	r2, #10
 801540c:	4648      	mov	r0, r9
 801540e:	f001 fce5 	bl	8016ddc <__multadd>
 8015412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015414:	9002      	str	r0, [sp, #8]
 8015416:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 801541a:	2b00      	cmp	r3, #0
 801541c:	f000 8177 	beq.w	801570e <_dtoa_r+0xb66>
 8015420:	4629      	mov	r1, r5
 8015422:	2300      	movs	r3, #0
 8015424:	220a      	movs	r2, #10
 8015426:	4648      	mov	r0, r9
 8015428:	f001 fcd8 	bl	8016ddc <__multadd>
 801542c:	f1bb 0f00 	cmp.w	fp, #0
 8015430:	4605      	mov	r5, r0
 8015432:	dc6f      	bgt.n	8015514 <_dtoa_r+0x96c>
 8015434:	9b07      	ldr	r3, [sp, #28]
 8015436:	2b02      	cmp	r3, #2
 8015438:	dc49      	bgt.n	80154ce <_dtoa_r+0x926>
 801543a:	e06b      	b.n	8015514 <_dtoa_r+0x96c>
 801543c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801543e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015442:	e73c      	b.n	80152be <_dtoa_r+0x716>
 8015444:	3fe00000 	.word	0x3fe00000
 8015448:	40240000 	.word	0x40240000
 801544c:	9b03      	ldr	r3, [sp, #12]
 801544e:	1e5c      	subs	r4, r3, #1
 8015450:	9b08      	ldr	r3, [sp, #32]
 8015452:	42a3      	cmp	r3, r4
 8015454:	db09      	blt.n	801546a <_dtoa_r+0x8c2>
 8015456:	1b1c      	subs	r4, r3, r4
 8015458:	9b03      	ldr	r3, [sp, #12]
 801545a:	2b00      	cmp	r3, #0
 801545c:	f6bf af30 	bge.w	80152c0 <_dtoa_r+0x718>
 8015460:	9b00      	ldr	r3, [sp, #0]
 8015462:	9a03      	ldr	r2, [sp, #12]
 8015464:	1a9e      	subs	r6, r3, r2
 8015466:	2300      	movs	r3, #0
 8015468:	e72b      	b.n	80152c2 <_dtoa_r+0x71a>
 801546a:	9b08      	ldr	r3, [sp, #32]
 801546c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801546e:	9408      	str	r4, [sp, #32]
 8015470:	1ae3      	subs	r3, r4, r3
 8015472:	441a      	add	r2, r3
 8015474:	9e00      	ldr	r6, [sp, #0]
 8015476:	9b03      	ldr	r3, [sp, #12]
 8015478:	920d      	str	r2, [sp, #52]	@ 0x34
 801547a:	2400      	movs	r4, #0
 801547c:	e721      	b.n	80152c2 <_dtoa_r+0x71a>
 801547e:	9c08      	ldr	r4, [sp, #32]
 8015480:	9e00      	ldr	r6, [sp, #0]
 8015482:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8015484:	e728      	b.n	80152d8 <_dtoa_r+0x730>
 8015486:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801548a:	e751      	b.n	8015330 <_dtoa_r+0x788>
 801548c:	9a08      	ldr	r2, [sp, #32]
 801548e:	9902      	ldr	r1, [sp, #8]
 8015490:	e750      	b.n	8015334 <_dtoa_r+0x78c>
 8015492:	f8cd 8008 	str.w	r8, [sp, #8]
 8015496:	e751      	b.n	801533c <_dtoa_r+0x794>
 8015498:	2300      	movs	r3, #0
 801549a:	e779      	b.n	8015390 <_dtoa_r+0x7e8>
 801549c:	9b04      	ldr	r3, [sp, #16]
 801549e:	e777      	b.n	8015390 <_dtoa_r+0x7e8>
 80154a0:	2300      	movs	r3, #0
 80154a2:	9308      	str	r3, [sp, #32]
 80154a4:	e779      	b.n	801539a <_dtoa_r+0x7f2>
 80154a6:	d093      	beq.n	80153d0 <_dtoa_r+0x828>
 80154a8:	9a00      	ldr	r2, [sp, #0]
 80154aa:	331c      	adds	r3, #28
 80154ac:	441a      	add	r2, r3
 80154ae:	9200      	str	r2, [sp, #0]
 80154b0:	9a06      	ldr	r2, [sp, #24]
 80154b2:	441a      	add	r2, r3
 80154b4:	441e      	add	r6, r3
 80154b6:	9206      	str	r2, [sp, #24]
 80154b8:	e78a      	b.n	80153d0 <_dtoa_r+0x828>
 80154ba:	4603      	mov	r3, r0
 80154bc:	e7f4      	b.n	80154a8 <_dtoa_r+0x900>
 80154be:	9b03      	ldr	r3, [sp, #12]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	46b8      	mov	r8, r7
 80154c4:	dc20      	bgt.n	8015508 <_dtoa_r+0x960>
 80154c6:	469b      	mov	fp, r3
 80154c8:	9b07      	ldr	r3, [sp, #28]
 80154ca:	2b02      	cmp	r3, #2
 80154cc:	dd1e      	ble.n	801550c <_dtoa_r+0x964>
 80154ce:	f1bb 0f00 	cmp.w	fp, #0
 80154d2:	f47f adb1 	bne.w	8015038 <_dtoa_r+0x490>
 80154d6:	4621      	mov	r1, r4
 80154d8:	465b      	mov	r3, fp
 80154da:	2205      	movs	r2, #5
 80154dc:	4648      	mov	r0, r9
 80154de:	f001 fc7d 	bl	8016ddc <__multadd>
 80154e2:	4601      	mov	r1, r0
 80154e4:	4604      	mov	r4, r0
 80154e6:	9802      	ldr	r0, [sp, #8]
 80154e8:	f001 fed2 	bl	8017290 <__mcmp>
 80154ec:	2800      	cmp	r0, #0
 80154ee:	f77f ada3 	ble.w	8015038 <_dtoa_r+0x490>
 80154f2:	4656      	mov	r6, sl
 80154f4:	2331      	movs	r3, #49	@ 0x31
 80154f6:	f806 3b01 	strb.w	r3, [r6], #1
 80154fa:	f108 0801 	add.w	r8, r8, #1
 80154fe:	e59f      	b.n	8015040 <_dtoa_r+0x498>
 8015500:	9c03      	ldr	r4, [sp, #12]
 8015502:	46b8      	mov	r8, r7
 8015504:	4625      	mov	r5, r4
 8015506:	e7f4      	b.n	80154f2 <_dtoa_r+0x94a>
 8015508:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801550c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801550e:	2b00      	cmp	r3, #0
 8015510:	f000 8101 	beq.w	8015716 <_dtoa_r+0xb6e>
 8015514:	2e00      	cmp	r6, #0
 8015516:	dd05      	ble.n	8015524 <_dtoa_r+0x97c>
 8015518:	4629      	mov	r1, r5
 801551a:	4632      	mov	r2, r6
 801551c:	4648      	mov	r0, r9
 801551e:	f001 fe4b 	bl	80171b8 <__lshift>
 8015522:	4605      	mov	r5, r0
 8015524:	9b08      	ldr	r3, [sp, #32]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d05c      	beq.n	80155e4 <_dtoa_r+0xa3c>
 801552a:	6869      	ldr	r1, [r5, #4]
 801552c:	4648      	mov	r0, r9
 801552e:	f001 fbf3 	bl	8016d18 <_Balloc>
 8015532:	4606      	mov	r6, r0
 8015534:	b928      	cbnz	r0, 8015542 <_dtoa_r+0x99a>
 8015536:	4b82      	ldr	r3, [pc, #520]	@ (8015740 <_dtoa_r+0xb98>)
 8015538:	4602      	mov	r2, r0
 801553a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801553e:	f7ff bb4a 	b.w	8014bd6 <_dtoa_r+0x2e>
 8015542:	692a      	ldr	r2, [r5, #16]
 8015544:	3202      	adds	r2, #2
 8015546:	0092      	lsls	r2, r2, #2
 8015548:	f105 010c 	add.w	r1, r5, #12
 801554c:	300c      	adds	r0, #12
 801554e:	f7ff fa67 	bl	8014a20 <memcpy>
 8015552:	2201      	movs	r2, #1
 8015554:	4631      	mov	r1, r6
 8015556:	4648      	mov	r0, r9
 8015558:	f001 fe2e 	bl	80171b8 <__lshift>
 801555c:	f10a 0301 	add.w	r3, sl, #1
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	eb0a 030b 	add.w	r3, sl, fp
 8015566:	9308      	str	r3, [sp, #32]
 8015568:	9b04      	ldr	r3, [sp, #16]
 801556a:	f003 0301 	and.w	r3, r3, #1
 801556e:	462f      	mov	r7, r5
 8015570:	9306      	str	r3, [sp, #24]
 8015572:	4605      	mov	r5, r0
 8015574:	9b00      	ldr	r3, [sp, #0]
 8015576:	9802      	ldr	r0, [sp, #8]
 8015578:	4621      	mov	r1, r4
 801557a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801557e:	f7ff fa8b 	bl	8014a98 <quorem>
 8015582:	4603      	mov	r3, r0
 8015584:	3330      	adds	r3, #48	@ 0x30
 8015586:	9003      	str	r0, [sp, #12]
 8015588:	4639      	mov	r1, r7
 801558a:	9802      	ldr	r0, [sp, #8]
 801558c:	9309      	str	r3, [sp, #36]	@ 0x24
 801558e:	f001 fe7f 	bl	8017290 <__mcmp>
 8015592:	462a      	mov	r2, r5
 8015594:	9004      	str	r0, [sp, #16]
 8015596:	4621      	mov	r1, r4
 8015598:	4648      	mov	r0, r9
 801559a:	f001 fe95 	bl	80172c8 <__mdiff>
 801559e:	68c2      	ldr	r2, [r0, #12]
 80155a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155a2:	4606      	mov	r6, r0
 80155a4:	bb02      	cbnz	r2, 80155e8 <_dtoa_r+0xa40>
 80155a6:	4601      	mov	r1, r0
 80155a8:	9802      	ldr	r0, [sp, #8]
 80155aa:	f001 fe71 	bl	8017290 <__mcmp>
 80155ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155b0:	4602      	mov	r2, r0
 80155b2:	4631      	mov	r1, r6
 80155b4:	4648      	mov	r0, r9
 80155b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80155b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80155ba:	f001 fbed 	bl	8016d98 <_Bfree>
 80155be:	9b07      	ldr	r3, [sp, #28]
 80155c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80155c2:	9e00      	ldr	r6, [sp, #0]
 80155c4:	ea42 0103 	orr.w	r1, r2, r3
 80155c8:	9b06      	ldr	r3, [sp, #24]
 80155ca:	4319      	orrs	r1, r3
 80155cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155ce:	d10d      	bne.n	80155ec <_dtoa_r+0xa44>
 80155d0:	2b39      	cmp	r3, #57	@ 0x39
 80155d2:	d027      	beq.n	8015624 <_dtoa_r+0xa7c>
 80155d4:	9a04      	ldr	r2, [sp, #16]
 80155d6:	2a00      	cmp	r2, #0
 80155d8:	dd01      	ble.n	80155de <_dtoa_r+0xa36>
 80155da:	9b03      	ldr	r3, [sp, #12]
 80155dc:	3331      	adds	r3, #49	@ 0x31
 80155de:	f88b 3000 	strb.w	r3, [fp]
 80155e2:	e52e      	b.n	8015042 <_dtoa_r+0x49a>
 80155e4:	4628      	mov	r0, r5
 80155e6:	e7b9      	b.n	801555c <_dtoa_r+0x9b4>
 80155e8:	2201      	movs	r2, #1
 80155ea:	e7e2      	b.n	80155b2 <_dtoa_r+0xa0a>
 80155ec:	9904      	ldr	r1, [sp, #16]
 80155ee:	2900      	cmp	r1, #0
 80155f0:	db04      	blt.n	80155fc <_dtoa_r+0xa54>
 80155f2:	9807      	ldr	r0, [sp, #28]
 80155f4:	4301      	orrs	r1, r0
 80155f6:	9806      	ldr	r0, [sp, #24]
 80155f8:	4301      	orrs	r1, r0
 80155fa:	d120      	bne.n	801563e <_dtoa_r+0xa96>
 80155fc:	2a00      	cmp	r2, #0
 80155fe:	ddee      	ble.n	80155de <_dtoa_r+0xa36>
 8015600:	9902      	ldr	r1, [sp, #8]
 8015602:	9300      	str	r3, [sp, #0]
 8015604:	2201      	movs	r2, #1
 8015606:	4648      	mov	r0, r9
 8015608:	f001 fdd6 	bl	80171b8 <__lshift>
 801560c:	4621      	mov	r1, r4
 801560e:	9002      	str	r0, [sp, #8]
 8015610:	f001 fe3e 	bl	8017290 <__mcmp>
 8015614:	2800      	cmp	r0, #0
 8015616:	9b00      	ldr	r3, [sp, #0]
 8015618:	dc02      	bgt.n	8015620 <_dtoa_r+0xa78>
 801561a:	d1e0      	bne.n	80155de <_dtoa_r+0xa36>
 801561c:	07da      	lsls	r2, r3, #31
 801561e:	d5de      	bpl.n	80155de <_dtoa_r+0xa36>
 8015620:	2b39      	cmp	r3, #57	@ 0x39
 8015622:	d1da      	bne.n	80155da <_dtoa_r+0xa32>
 8015624:	2339      	movs	r3, #57	@ 0x39
 8015626:	f88b 3000 	strb.w	r3, [fp]
 801562a:	4633      	mov	r3, r6
 801562c:	461e      	mov	r6, r3
 801562e:	3b01      	subs	r3, #1
 8015630:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8015634:	2a39      	cmp	r2, #57	@ 0x39
 8015636:	d04e      	beq.n	80156d6 <_dtoa_r+0xb2e>
 8015638:	3201      	adds	r2, #1
 801563a:	701a      	strb	r2, [r3, #0]
 801563c:	e501      	b.n	8015042 <_dtoa_r+0x49a>
 801563e:	2a00      	cmp	r2, #0
 8015640:	dd03      	ble.n	801564a <_dtoa_r+0xaa2>
 8015642:	2b39      	cmp	r3, #57	@ 0x39
 8015644:	d0ee      	beq.n	8015624 <_dtoa_r+0xa7c>
 8015646:	3301      	adds	r3, #1
 8015648:	e7c9      	b.n	80155de <_dtoa_r+0xa36>
 801564a:	9a00      	ldr	r2, [sp, #0]
 801564c:	9908      	ldr	r1, [sp, #32]
 801564e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015652:	428a      	cmp	r2, r1
 8015654:	d028      	beq.n	80156a8 <_dtoa_r+0xb00>
 8015656:	9902      	ldr	r1, [sp, #8]
 8015658:	2300      	movs	r3, #0
 801565a:	220a      	movs	r2, #10
 801565c:	4648      	mov	r0, r9
 801565e:	f001 fbbd 	bl	8016ddc <__multadd>
 8015662:	42af      	cmp	r7, r5
 8015664:	9002      	str	r0, [sp, #8]
 8015666:	f04f 0300 	mov.w	r3, #0
 801566a:	f04f 020a 	mov.w	r2, #10
 801566e:	4639      	mov	r1, r7
 8015670:	4648      	mov	r0, r9
 8015672:	d107      	bne.n	8015684 <_dtoa_r+0xadc>
 8015674:	f001 fbb2 	bl	8016ddc <__multadd>
 8015678:	4607      	mov	r7, r0
 801567a:	4605      	mov	r5, r0
 801567c:	9b00      	ldr	r3, [sp, #0]
 801567e:	3301      	adds	r3, #1
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	e777      	b.n	8015574 <_dtoa_r+0x9cc>
 8015684:	f001 fbaa 	bl	8016ddc <__multadd>
 8015688:	4629      	mov	r1, r5
 801568a:	4607      	mov	r7, r0
 801568c:	2300      	movs	r3, #0
 801568e:	220a      	movs	r2, #10
 8015690:	4648      	mov	r0, r9
 8015692:	f001 fba3 	bl	8016ddc <__multadd>
 8015696:	4605      	mov	r5, r0
 8015698:	e7f0      	b.n	801567c <_dtoa_r+0xad4>
 801569a:	f1bb 0f00 	cmp.w	fp, #0
 801569e:	bfcc      	ite	gt
 80156a0:	465e      	movgt	r6, fp
 80156a2:	2601      	movle	r6, #1
 80156a4:	4456      	add	r6, sl
 80156a6:	2700      	movs	r7, #0
 80156a8:	9902      	ldr	r1, [sp, #8]
 80156aa:	9300      	str	r3, [sp, #0]
 80156ac:	2201      	movs	r2, #1
 80156ae:	4648      	mov	r0, r9
 80156b0:	f001 fd82 	bl	80171b8 <__lshift>
 80156b4:	4621      	mov	r1, r4
 80156b6:	9002      	str	r0, [sp, #8]
 80156b8:	f001 fdea 	bl	8017290 <__mcmp>
 80156bc:	2800      	cmp	r0, #0
 80156be:	dcb4      	bgt.n	801562a <_dtoa_r+0xa82>
 80156c0:	d102      	bne.n	80156c8 <_dtoa_r+0xb20>
 80156c2:	9b00      	ldr	r3, [sp, #0]
 80156c4:	07db      	lsls	r3, r3, #31
 80156c6:	d4b0      	bmi.n	801562a <_dtoa_r+0xa82>
 80156c8:	4633      	mov	r3, r6
 80156ca:	461e      	mov	r6, r3
 80156cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80156d0:	2a30      	cmp	r2, #48	@ 0x30
 80156d2:	d0fa      	beq.n	80156ca <_dtoa_r+0xb22>
 80156d4:	e4b5      	b.n	8015042 <_dtoa_r+0x49a>
 80156d6:	459a      	cmp	sl, r3
 80156d8:	d1a8      	bne.n	801562c <_dtoa_r+0xa84>
 80156da:	2331      	movs	r3, #49	@ 0x31
 80156dc:	f108 0801 	add.w	r8, r8, #1
 80156e0:	f88a 3000 	strb.w	r3, [sl]
 80156e4:	e4ad      	b.n	8015042 <_dtoa_r+0x49a>
 80156e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80156e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8015744 <_dtoa_r+0xb9c>
 80156ec:	b11b      	cbz	r3, 80156f6 <_dtoa_r+0xb4e>
 80156ee:	f10a 0308 	add.w	r3, sl, #8
 80156f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80156f4:	6013      	str	r3, [r2, #0]
 80156f6:	4650      	mov	r0, sl
 80156f8:	b017      	add	sp, #92	@ 0x5c
 80156fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156fe:	9b07      	ldr	r3, [sp, #28]
 8015700:	2b01      	cmp	r3, #1
 8015702:	f77f ae2e 	ble.w	8015362 <_dtoa_r+0x7ba>
 8015706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015708:	9308      	str	r3, [sp, #32]
 801570a:	2001      	movs	r0, #1
 801570c:	e64d      	b.n	80153aa <_dtoa_r+0x802>
 801570e:	f1bb 0f00 	cmp.w	fp, #0
 8015712:	f77f aed9 	ble.w	80154c8 <_dtoa_r+0x920>
 8015716:	4656      	mov	r6, sl
 8015718:	9802      	ldr	r0, [sp, #8]
 801571a:	4621      	mov	r1, r4
 801571c:	f7ff f9bc 	bl	8014a98 <quorem>
 8015720:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8015724:	f806 3b01 	strb.w	r3, [r6], #1
 8015728:	eba6 020a 	sub.w	r2, r6, sl
 801572c:	4593      	cmp	fp, r2
 801572e:	ddb4      	ble.n	801569a <_dtoa_r+0xaf2>
 8015730:	9902      	ldr	r1, [sp, #8]
 8015732:	2300      	movs	r3, #0
 8015734:	220a      	movs	r2, #10
 8015736:	4648      	mov	r0, r9
 8015738:	f001 fb50 	bl	8016ddc <__multadd>
 801573c:	9002      	str	r0, [sp, #8]
 801573e:	e7eb      	b.n	8015718 <_dtoa_r+0xb70>
 8015740:	080184f3 	.word	0x080184f3
 8015744:	0801848e 	.word	0x0801848e

08015748 <_free_r>:
 8015748:	b538      	push	{r3, r4, r5, lr}
 801574a:	4605      	mov	r5, r0
 801574c:	2900      	cmp	r1, #0
 801574e:	d041      	beq.n	80157d4 <_free_r+0x8c>
 8015750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015754:	1f0c      	subs	r4, r1, #4
 8015756:	2b00      	cmp	r3, #0
 8015758:	bfb8      	it	lt
 801575a:	18e4      	addlt	r4, r4, r3
 801575c:	f001 fad0 	bl	8016d00 <__malloc_lock>
 8015760:	4a1d      	ldr	r2, [pc, #116]	@ (80157d8 <_free_r+0x90>)
 8015762:	6813      	ldr	r3, [r2, #0]
 8015764:	b933      	cbnz	r3, 8015774 <_free_r+0x2c>
 8015766:	6063      	str	r3, [r4, #4]
 8015768:	6014      	str	r4, [r2, #0]
 801576a:	4628      	mov	r0, r5
 801576c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015770:	f001 bacc 	b.w	8016d0c <__malloc_unlock>
 8015774:	42a3      	cmp	r3, r4
 8015776:	d908      	bls.n	801578a <_free_r+0x42>
 8015778:	6820      	ldr	r0, [r4, #0]
 801577a:	1821      	adds	r1, r4, r0
 801577c:	428b      	cmp	r3, r1
 801577e:	bf01      	itttt	eq
 8015780:	6819      	ldreq	r1, [r3, #0]
 8015782:	685b      	ldreq	r3, [r3, #4]
 8015784:	1809      	addeq	r1, r1, r0
 8015786:	6021      	streq	r1, [r4, #0]
 8015788:	e7ed      	b.n	8015766 <_free_r+0x1e>
 801578a:	461a      	mov	r2, r3
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	b10b      	cbz	r3, 8015794 <_free_r+0x4c>
 8015790:	42a3      	cmp	r3, r4
 8015792:	d9fa      	bls.n	801578a <_free_r+0x42>
 8015794:	6811      	ldr	r1, [r2, #0]
 8015796:	1850      	adds	r0, r2, r1
 8015798:	42a0      	cmp	r0, r4
 801579a:	d10b      	bne.n	80157b4 <_free_r+0x6c>
 801579c:	6820      	ldr	r0, [r4, #0]
 801579e:	4401      	add	r1, r0
 80157a0:	1850      	adds	r0, r2, r1
 80157a2:	4283      	cmp	r3, r0
 80157a4:	6011      	str	r1, [r2, #0]
 80157a6:	d1e0      	bne.n	801576a <_free_r+0x22>
 80157a8:	6818      	ldr	r0, [r3, #0]
 80157aa:	685b      	ldr	r3, [r3, #4]
 80157ac:	6053      	str	r3, [r2, #4]
 80157ae:	4408      	add	r0, r1
 80157b0:	6010      	str	r0, [r2, #0]
 80157b2:	e7da      	b.n	801576a <_free_r+0x22>
 80157b4:	d902      	bls.n	80157bc <_free_r+0x74>
 80157b6:	230c      	movs	r3, #12
 80157b8:	602b      	str	r3, [r5, #0]
 80157ba:	e7d6      	b.n	801576a <_free_r+0x22>
 80157bc:	6820      	ldr	r0, [r4, #0]
 80157be:	1821      	adds	r1, r4, r0
 80157c0:	428b      	cmp	r3, r1
 80157c2:	bf04      	itt	eq
 80157c4:	6819      	ldreq	r1, [r3, #0]
 80157c6:	685b      	ldreq	r3, [r3, #4]
 80157c8:	6063      	str	r3, [r4, #4]
 80157ca:	bf04      	itt	eq
 80157cc:	1809      	addeq	r1, r1, r0
 80157ce:	6021      	streq	r1, [r4, #0]
 80157d0:	6054      	str	r4, [r2, #4]
 80157d2:	e7ca      	b.n	801576a <_free_r+0x22>
 80157d4:	bd38      	pop	{r3, r4, r5, pc}
 80157d6:	bf00      	nop
 80157d8:	200067b4 	.word	0x200067b4

080157dc <rshift>:
 80157dc:	6903      	ldr	r3, [r0, #16]
 80157de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80157e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80157ea:	f100 0414 	add.w	r4, r0, #20
 80157ee:	dd45      	ble.n	801587c <rshift+0xa0>
 80157f0:	f011 011f 	ands.w	r1, r1, #31
 80157f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80157f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80157fc:	d10c      	bne.n	8015818 <rshift+0x3c>
 80157fe:	f100 0710 	add.w	r7, r0, #16
 8015802:	4629      	mov	r1, r5
 8015804:	42b1      	cmp	r1, r6
 8015806:	d334      	bcc.n	8015872 <rshift+0x96>
 8015808:	1a9b      	subs	r3, r3, r2
 801580a:	009b      	lsls	r3, r3, #2
 801580c:	1eea      	subs	r2, r5, #3
 801580e:	4296      	cmp	r6, r2
 8015810:	bf38      	it	cc
 8015812:	2300      	movcc	r3, #0
 8015814:	4423      	add	r3, r4
 8015816:	e015      	b.n	8015844 <rshift+0x68>
 8015818:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801581c:	f1c1 0820 	rsb	r8, r1, #32
 8015820:	40cf      	lsrs	r7, r1
 8015822:	f105 0e04 	add.w	lr, r5, #4
 8015826:	46a1      	mov	r9, r4
 8015828:	4576      	cmp	r6, lr
 801582a:	46f4      	mov	ip, lr
 801582c:	d815      	bhi.n	801585a <rshift+0x7e>
 801582e:	1a9a      	subs	r2, r3, r2
 8015830:	0092      	lsls	r2, r2, #2
 8015832:	3a04      	subs	r2, #4
 8015834:	3501      	adds	r5, #1
 8015836:	42ae      	cmp	r6, r5
 8015838:	bf38      	it	cc
 801583a:	2200      	movcc	r2, #0
 801583c:	18a3      	adds	r3, r4, r2
 801583e:	50a7      	str	r7, [r4, r2]
 8015840:	b107      	cbz	r7, 8015844 <rshift+0x68>
 8015842:	3304      	adds	r3, #4
 8015844:	1b1a      	subs	r2, r3, r4
 8015846:	42a3      	cmp	r3, r4
 8015848:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801584c:	bf08      	it	eq
 801584e:	2300      	moveq	r3, #0
 8015850:	6102      	str	r2, [r0, #16]
 8015852:	bf08      	it	eq
 8015854:	6143      	streq	r3, [r0, #20]
 8015856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801585a:	f8dc c000 	ldr.w	ip, [ip]
 801585e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015862:	ea4c 0707 	orr.w	r7, ip, r7
 8015866:	f849 7b04 	str.w	r7, [r9], #4
 801586a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801586e:	40cf      	lsrs	r7, r1
 8015870:	e7da      	b.n	8015828 <rshift+0x4c>
 8015872:	f851 cb04 	ldr.w	ip, [r1], #4
 8015876:	f847 cf04 	str.w	ip, [r7, #4]!
 801587a:	e7c3      	b.n	8015804 <rshift+0x28>
 801587c:	4623      	mov	r3, r4
 801587e:	e7e1      	b.n	8015844 <rshift+0x68>

08015880 <__hexdig_fun>:
 8015880:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015884:	2b09      	cmp	r3, #9
 8015886:	d802      	bhi.n	801588e <__hexdig_fun+0xe>
 8015888:	3820      	subs	r0, #32
 801588a:	b2c0      	uxtb	r0, r0
 801588c:	4770      	bx	lr
 801588e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015892:	2b05      	cmp	r3, #5
 8015894:	d801      	bhi.n	801589a <__hexdig_fun+0x1a>
 8015896:	3847      	subs	r0, #71	@ 0x47
 8015898:	e7f7      	b.n	801588a <__hexdig_fun+0xa>
 801589a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801589e:	2b05      	cmp	r3, #5
 80158a0:	d801      	bhi.n	80158a6 <__hexdig_fun+0x26>
 80158a2:	3827      	subs	r0, #39	@ 0x27
 80158a4:	e7f1      	b.n	801588a <__hexdig_fun+0xa>
 80158a6:	2000      	movs	r0, #0
 80158a8:	4770      	bx	lr
	...

080158ac <__gethex>:
 80158ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b0:	b085      	sub	sp, #20
 80158b2:	468a      	mov	sl, r1
 80158b4:	9302      	str	r3, [sp, #8]
 80158b6:	680b      	ldr	r3, [r1, #0]
 80158b8:	9001      	str	r0, [sp, #4]
 80158ba:	4690      	mov	r8, r2
 80158bc:	1c9c      	adds	r4, r3, #2
 80158be:	46a1      	mov	r9, r4
 80158c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80158c4:	2830      	cmp	r0, #48	@ 0x30
 80158c6:	d0fa      	beq.n	80158be <__gethex+0x12>
 80158c8:	eba9 0303 	sub.w	r3, r9, r3
 80158cc:	f1a3 0b02 	sub.w	fp, r3, #2
 80158d0:	f7ff ffd6 	bl	8015880 <__hexdig_fun>
 80158d4:	4605      	mov	r5, r0
 80158d6:	2800      	cmp	r0, #0
 80158d8:	d168      	bne.n	80159ac <__gethex+0x100>
 80158da:	49a0      	ldr	r1, [pc, #640]	@ (8015b5c <__gethex+0x2b0>)
 80158dc:	2201      	movs	r2, #1
 80158de:	4648      	mov	r0, r9
 80158e0:	f7fe ff9c 	bl	801481c <strncmp>
 80158e4:	4607      	mov	r7, r0
 80158e6:	2800      	cmp	r0, #0
 80158e8:	d167      	bne.n	80159ba <__gethex+0x10e>
 80158ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 80158ee:	4626      	mov	r6, r4
 80158f0:	f7ff ffc6 	bl	8015880 <__hexdig_fun>
 80158f4:	2800      	cmp	r0, #0
 80158f6:	d062      	beq.n	80159be <__gethex+0x112>
 80158f8:	4623      	mov	r3, r4
 80158fa:	7818      	ldrb	r0, [r3, #0]
 80158fc:	2830      	cmp	r0, #48	@ 0x30
 80158fe:	4699      	mov	r9, r3
 8015900:	f103 0301 	add.w	r3, r3, #1
 8015904:	d0f9      	beq.n	80158fa <__gethex+0x4e>
 8015906:	f7ff ffbb 	bl	8015880 <__hexdig_fun>
 801590a:	fab0 f580 	clz	r5, r0
 801590e:	096d      	lsrs	r5, r5, #5
 8015910:	f04f 0b01 	mov.w	fp, #1
 8015914:	464a      	mov	r2, r9
 8015916:	4616      	mov	r6, r2
 8015918:	3201      	adds	r2, #1
 801591a:	7830      	ldrb	r0, [r6, #0]
 801591c:	f7ff ffb0 	bl	8015880 <__hexdig_fun>
 8015920:	2800      	cmp	r0, #0
 8015922:	d1f8      	bne.n	8015916 <__gethex+0x6a>
 8015924:	498d      	ldr	r1, [pc, #564]	@ (8015b5c <__gethex+0x2b0>)
 8015926:	2201      	movs	r2, #1
 8015928:	4630      	mov	r0, r6
 801592a:	f7fe ff77 	bl	801481c <strncmp>
 801592e:	2800      	cmp	r0, #0
 8015930:	d13f      	bne.n	80159b2 <__gethex+0x106>
 8015932:	b944      	cbnz	r4, 8015946 <__gethex+0x9a>
 8015934:	1c74      	adds	r4, r6, #1
 8015936:	4622      	mov	r2, r4
 8015938:	4616      	mov	r6, r2
 801593a:	3201      	adds	r2, #1
 801593c:	7830      	ldrb	r0, [r6, #0]
 801593e:	f7ff ff9f 	bl	8015880 <__hexdig_fun>
 8015942:	2800      	cmp	r0, #0
 8015944:	d1f8      	bne.n	8015938 <__gethex+0x8c>
 8015946:	1ba4      	subs	r4, r4, r6
 8015948:	00a7      	lsls	r7, r4, #2
 801594a:	7833      	ldrb	r3, [r6, #0]
 801594c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015950:	2b50      	cmp	r3, #80	@ 0x50
 8015952:	d13e      	bne.n	80159d2 <__gethex+0x126>
 8015954:	7873      	ldrb	r3, [r6, #1]
 8015956:	2b2b      	cmp	r3, #43	@ 0x2b
 8015958:	d033      	beq.n	80159c2 <__gethex+0x116>
 801595a:	2b2d      	cmp	r3, #45	@ 0x2d
 801595c:	d034      	beq.n	80159c8 <__gethex+0x11c>
 801595e:	1c71      	adds	r1, r6, #1
 8015960:	2400      	movs	r4, #0
 8015962:	7808      	ldrb	r0, [r1, #0]
 8015964:	f7ff ff8c 	bl	8015880 <__hexdig_fun>
 8015968:	1e43      	subs	r3, r0, #1
 801596a:	b2db      	uxtb	r3, r3
 801596c:	2b18      	cmp	r3, #24
 801596e:	d830      	bhi.n	80159d2 <__gethex+0x126>
 8015970:	f1a0 0210 	sub.w	r2, r0, #16
 8015974:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015978:	f7ff ff82 	bl	8015880 <__hexdig_fun>
 801597c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8015980:	fa5f fc8c 	uxtb.w	ip, ip
 8015984:	f1bc 0f18 	cmp.w	ip, #24
 8015988:	f04f 030a 	mov.w	r3, #10
 801598c:	d91e      	bls.n	80159cc <__gethex+0x120>
 801598e:	b104      	cbz	r4, 8015992 <__gethex+0xe6>
 8015990:	4252      	negs	r2, r2
 8015992:	4417      	add	r7, r2
 8015994:	f8ca 1000 	str.w	r1, [sl]
 8015998:	b1ed      	cbz	r5, 80159d6 <__gethex+0x12a>
 801599a:	f1bb 0f00 	cmp.w	fp, #0
 801599e:	bf0c      	ite	eq
 80159a0:	2506      	moveq	r5, #6
 80159a2:	2500      	movne	r5, #0
 80159a4:	4628      	mov	r0, r5
 80159a6:	b005      	add	sp, #20
 80159a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159ac:	2500      	movs	r5, #0
 80159ae:	462c      	mov	r4, r5
 80159b0:	e7b0      	b.n	8015914 <__gethex+0x68>
 80159b2:	2c00      	cmp	r4, #0
 80159b4:	d1c7      	bne.n	8015946 <__gethex+0x9a>
 80159b6:	4627      	mov	r7, r4
 80159b8:	e7c7      	b.n	801594a <__gethex+0x9e>
 80159ba:	464e      	mov	r6, r9
 80159bc:	462f      	mov	r7, r5
 80159be:	2501      	movs	r5, #1
 80159c0:	e7c3      	b.n	801594a <__gethex+0x9e>
 80159c2:	2400      	movs	r4, #0
 80159c4:	1cb1      	adds	r1, r6, #2
 80159c6:	e7cc      	b.n	8015962 <__gethex+0xb6>
 80159c8:	2401      	movs	r4, #1
 80159ca:	e7fb      	b.n	80159c4 <__gethex+0x118>
 80159cc:	fb03 0002 	mla	r0, r3, r2, r0
 80159d0:	e7ce      	b.n	8015970 <__gethex+0xc4>
 80159d2:	4631      	mov	r1, r6
 80159d4:	e7de      	b.n	8015994 <__gethex+0xe8>
 80159d6:	eba6 0309 	sub.w	r3, r6, r9
 80159da:	3b01      	subs	r3, #1
 80159dc:	4629      	mov	r1, r5
 80159de:	2b07      	cmp	r3, #7
 80159e0:	dc0a      	bgt.n	80159f8 <__gethex+0x14c>
 80159e2:	9801      	ldr	r0, [sp, #4]
 80159e4:	f001 f998 	bl	8016d18 <_Balloc>
 80159e8:	4604      	mov	r4, r0
 80159ea:	b940      	cbnz	r0, 80159fe <__gethex+0x152>
 80159ec:	4b5c      	ldr	r3, [pc, #368]	@ (8015b60 <__gethex+0x2b4>)
 80159ee:	4602      	mov	r2, r0
 80159f0:	21e4      	movs	r1, #228	@ 0xe4
 80159f2:	485c      	ldr	r0, [pc, #368]	@ (8015b64 <__gethex+0x2b8>)
 80159f4:	f7ff f832 	bl	8014a5c <__assert_func>
 80159f8:	3101      	adds	r1, #1
 80159fa:	105b      	asrs	r3, r3, #1
 80159fc:	e7ef      	b.n	80159de <__gethex+0x132>
 80159fe:	f100 0a14 	add.w	sl, r0, #20
 8015a02:	2300      	movs	r3, #0
 8015a04:	4655      	mov	r5, sl
 8015a06:	469b      	mov	fp, r3
 8015a08:	45b1      	cmp	r9, r6
 8015a0a:	d337      	bcc.n	8015a7c <__gethex+0x1d0>
 8015a0c:	f845 bb04 	str.w	fp, [r5], #4
 8015a10:	eba5 050a 	sub.w	r5, r5, sl
 8015a14:	10ad      	asrs	r5, r5, #2
 8015a16:	6125      	str	r5, [r4, #16]
 8015a18:	4658      	mov	r0, fp
 8015a1a:	f001 fa6f 	bl	8016efc <__hi0bits>
 8015a1e:	016d      	lsls	r5, r5, #5
 8015a20:	f8d8 6000 	ldr.w	r6, [r8]
 8015a24:	1a2d      	subs	r5, r5, r0
 8015a26:	42b5      	cmp	r5, r6
 8015a28:	dd54      	ble.n	8015ad4 <__gethex+0x228>
 8015a2a:	1bad      	subs	r5, r5, r6
 8015a2c:	4629      	mov	r1, r5
 8015a2e:	4620      	mov	r0, r4
 8015a30:	f001 fdfb 	bl	801762a <__any_on>
 8015a34:	4681      	mov	r9, r0
 8015a36:	b178      	cbz	r0, 8015a58 <__gethex+0x1ac>
 8015a38:	1e6b      	subs	r3, r5, #1
 8015a3a:	1159      	asrs	r1, r3, #5
 8015a3c:	f003 021f 	and.w	r2, r3, #31
 8015a40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8015a44:	f04f 0901 	mov.w	r9, #1
 8015a48:	fa09 f202 	lsl.w	r2, r9, r2
 8015a4c:	420a      	tst	r2, r1
 8015a4e:	d003      	beq.n	8015a58 <__gethex+0x1ac>
 8015a50:	454b      	cmp	r3, r9
 8015a52:	dc36      	bgt.n	8015ac2 <__gethex+0x216>
 8015a54:	f04f 0902 	mov.w	r9, #2
 8015a58:	4629      	mov	r1, r5
 8015a5a:	4620      	mov	r0, r4
 8015a5c:	f7ff febe 	bl	80157dc <rshift>
 8015a60:	442f      	add	r7, r5
 8015a62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a66:	42bb      	cmp	r3, r7
 8015a68:	da42      	bge.n	8015af0 <__gethex+0x244>
 8015a6a:	9801      	ldr	r0, [sp, #4]
 8015a6c:	4621      	mov	r1, r4
 8015a6e:	f001 f993 	bl	8016d98 <_Bfree>
 8015a72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015a74:	2300      	movs	r3, #0
 8015a76:	6013      	str	r3, [r2, #0]
 8015a78:	25a3      	movs	r5, #163	@ 0xa3
 8015a7a:	e793      	b.n	80159a4 <__gethex+0xf8>
 8015a7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015a80:	2a2e      	cmp	r2, #46	@ 0x2e
 8015a82:	d012      	beq.n	8015aaa <__gethex+0x1fe>
 8015a84:	2b20      	cmp	r3, #32
 8015a86:	d104      	bne.n	8015a92 <__gethex+0x1e6>
 8015a88:	f845 bb04 	str.w	fp, [r5], #4
 8015a8c:	f04f 0b00 	mov.w	fp, #0
 8015a90:	465b      	mov	r3, fp
 8015a92:	7830      	ldrb	r0, [r6, #0]
 8015a94:	9303      	str	r3, [sp, #12]
 8015a96:	f7ff fef3 	bl	8015880 <__hexdig_fun>
 8015a9a:	9b03      	ldr	r3, [sp, #12]
 8015a9c:	f000 000f 	and.w	r0, r0, #15
 8015aa0:	4098      	lsls	r0, r3
 8015aa2:	ea4b 0b00 	orr.w	fp, fp, r0
 8015aa6:	3304      	adds	r3, #4
 8015aa8:	e7ae      	b.n	8015a08 <__gethex+0x15c>
 8015aaa:	45b1      	cmp	r9, r6
 8015aac:	d8ea      	bhi.n	8015a84 <__gethex+0x1d8>
 8015aae:	492b      	ldr	r1, [pc, #172]	@ (8015b5c <__gethex+0x2b0>)
 8015ab0:	9303      	str	r3, [sp, #12]
 8015ab2:	2201      	movs	r2, #1
 8015ab4:	4630      	mov	r0, r6
 8015ab6:	f7fe feb1 	bl	801481c <strncmp>
 8015aba:	9b03      	ldr	r3, [sp, #12]
 8015abc:	2800      	cmp	r0, #0
 8015abe:	d1e1      	bne.n	8015a84 <__gethex+0x1d8>
 8015ac0:	e7a2      	b.n	8015a08 <__gethex+0x15c>
 8015ac2:	1ea9      	subs	r1, r5, #2
 8015ac4:	4620      	mov	r0, r4
 8015ac6:	f001 fdb0 	bl	801762a <__any_on>
 8015aca:	2800      	cmp	r0, #0
 8015acc:	d0c2      	beq.n	8015a54 <__gethex+0x1a8>
 8015ace:	f04f 0903 	mov.w	r9, #3
 8015ad2:	e7c1      	b.n	8015a58 <__gethex+0x1ac>
 8015ad4:	da09      	bge.n	8015aea <__gethex+0x23e>
 8015ad6:	1b75      	subs	r5, r6, r5
 8015ad8:	4621      	mov	r1, r4
 8015ada:	9801      	ldr	r0, [sp, #4]
 8015adc:	462a      	mov	r2, r5
 8015ade:	f001 fb6b 	bl	80171b8 <__lshift>
 8015ae2:	1b7f      	subs	r7, r7, r5
 8015ae4:	4604      	mov	r4, r0
 8015ae6:	f100 0a14 	add.w	sl, r0, #20
 8015aea:	f04f 0900 	mov.w	r9, #0
 8015aee:	e7b8      	b.n	8015a62 <__gethex+0x1b6>
 8015af0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015af4:	42bd      	cmp	r5, r7
 8015af6:	dd6f      	ble.n	8015bd8 <__gethex+0x32c>
 8015af8:	1bed      	subs	r5, r5, r7
 8015afa:	42ae      	cmp	r6, r5
 8015afc:	dc34      	bgt.n	8015b68 <__gethex+0x2bc>
 8015afe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015b02:	2b02      	cmp	r3, #2
 8015b04:	d022      	beq.n	8015b4c <__gethex+0x2a0>
 8015b06:	2b03      	cmp	r3, #3
 8015b08:	d024      	beq.n	8015b54 <__gethex+0x2a8>
 8015b0a:	2b01      	cmp	r3, #1
 8015b0c:	d115      	bne.n	8015b3a <__gethex+0x28e>
 8015b0e:	42ae      	cmp	r6, r5
 8015b10:	d113      	bne.n	8015b3a <__gethex+0x28e>
 8015b12:	2e01      	cmp	r6, #1
 8015b14:	d10b      	bne.n	8015b2e <__gethex+0x282>
 8015b16:	9a02      	ldr	r2, [sp, #8]
 8015b18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015b1c:	6013      	str	r3, [r2, #0]
 8015b1e:	2301      	movs	r3, #1
 8015b20:	6123      	str	r3, [r4, #16]
 8015b22:	f8ca 3000 	str.w	r3, [sl]
 8015b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b28:	2562      	movs	r5, #98	@ 0x62
 8015b2a:	601c      	str	r4, [r3, #0]
 8015b2c:	e73a      	b.n	80159a4 <__gethex+0xf8>
 8015b2e:	1e71      	subs	r1, r6, #1
 8015b30:	4620      	mov	r0, r4
 8015b32:	f001 fd7a 	bl	801762a <__any_on>
 8015b36:	2800      	cmp	r0, #0
 8015b38:	d1ed      	bne.n	8015b16 <__gethex+0x26a>
 8015b3a:	9801      	ldr	r0, [sp, #4]
 8015b3c:	4621      	mov	r1, r4
 8015b3e:	f001 f92b 	bl	8016d98 <_Bfree>
 8015b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015b44:	2300      	movs	r3, #0
 8015b46:	6013      	str	r3, [r2, #0]
 8015b48:	2550      	movs	r5, #80	@ 0x50
 8015b4a:	e72b      	b.n	80159a4 <__gethex+0xf8>
 8015b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d1f3      	bne.n	8015b3a <__gethex+0x28e>
 8015b52:	e7e0      	b.n	8015b16 <__gethex+0x26a>
 8015b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d1dd      	bne.n	8015b16 <__gethex+0x26a>
 8015b5a:	e7ee      	b.n	8015b3a <__gethex+0x28e>
 8015b5c:	080183d7 	.word	0x080183d7
 8015b60:	080184f3 	.word	0x080184f3
 8015b64:	08018504 	.word	0x08018504
 8015b68:	1e6f      	subs	r7, r5, #1
 8015b6a:	f1b9 0f00 	cmp.w	r9, #0
 8015b6e:	d130      	bne.n	8015bd2 <__gethex+0x326>
 8015b70:	b127      	cbz	r7, 8015b7c <__gethex+0x2d0>
 8015b72:	4639      	mov	r1, r7
 8015b74:	4620      	mov	r0, r4
 8015b76:	f001 fd58 	bl	801762a <__any_on>
 8015b7a:	4681      	mov	r9, r0
 8015b7c:	117a      	asrs	r2, r7, #5
 8015b7e:	2301      	movs	r3, #1
 8015b80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015b84:	f007 071f 	and.w	r7, r7, #31
 8015b88:	40bb      	lsls	r3, r7
 8015b8a:	4213      	tst	r3, r2
 8015b8c:	4629      	mov	r1, r5
 8015b8e:	4620      	mov	r0, r4
 8015b90:	bf18      	it	ne
 8015b92:	f049 0902 	orrne.w	r9, r9, #2
 8015b96:	f7ff fe21 	bl	80157dc <rshift>
 8015b9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015b9e:	1b76      	subs	r6, r6, r5
 8015ba0:	2502      	movs	r5, #2
 8015ba2:	f1b9 0f00 	cmp.w	r9, #0
 8015ba6:	d047      	beq.n	8015c38 <__gethex+0x38c>
 8015ba8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015bac:	2b02      	cmp	r3, #2
 8015bae:	d015      	beq.n	8015bdc <__gethex+0x330>
 8015bb0:	2b03      	cmp	r3, #3
 8015bb2:	d017      	beq.n	8015be4 <__gethex+0x338>
 8015bb4:	2b01      	cmp	r3, #1
 8015bb6:	d109      	bne.n	8015bcc <__gethex+0x320>
 8015bb8:	f019 0f02 	tst.w	r9, #2
 8015bbc:	d006      	beq.n	8015bcc <__gethex+0x320>
 8015bbe:	f8da 3000 	ldr.w	r3, [sl]
 8015bc2:	ea49 0903 	orr.w	r9, r9, r3
 8015bc6:	f019 0f01 	tst.w	r9, #1
 8015bca:	d10e      	bne.n	8015bea <__gethex+0x33e>
 8015bcc:	f045 0510 	orr.w	r5, r5, #16
 8015bd0:	e032      	b.n	8015c38 <__gethex+0x38c>
 8015bd2:	f04f 0901 	mov.w	r9, #1
 8015bd6:	e7d1      	b.n	8015b7c <__gethex+0x2d0>
 8015bd8:	2501      	movs	r5, #1
 8015bda:	e7e2      	b.n	8015ba2 <__gethex+0x2f6>
 8015bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015bde:	f1c3 0301 	rsb	r3, r3, #1
 8015be2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d0f0      	beq.n	8015bcc <__gethex+0x320>
 8015bea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015bee:	f104 0314 	add.w	r3, r4, #20
 8015bf2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015bf6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015bfa:	f04f 0c00 	mov.w	ip, #0
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c04:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8015c08:	d01b      	beq.n	8015c42 <__gethex+0x396>
 8015c0a:	3201      	adds	r2, #1
 8015c0c:	6002      	str	r2, [r0, #0]
 8015c0e:	2d02      	cmp	r5, #2
 8015c10:	f104 0314 	add.w	r3, r4, #20
 8015c14:	d13c      	bne.n	8015c90 <__gethex+0x3e4>
 8015c16:	f8d8 2000 	ldr.w	r2, [r8]
 8015c1a:	3a01      	subs	r2, #1
 8015c1c:	42b2      	cmp	r2, r6
 8015c1e:	d109      	bne.n	8015c34 <__gethex+0x388>
 8015c20:	1171      	asrs	r1, r6, #5
 8015c22:	2201      	movs	r2, #1
 8015c24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015c28:	f006 061f 	and.w	r6, r6, #31
 8015c2c:	fa02 f606 	lsl.w	r6, r2, r6
 8015c30:	421e      	tst	r6, r3
 8015c32:	d13a      	bne.n	8015caa <__gethex+0x3fe>
 8015c34:	f045 0520 	orr.w	r5, r5, #32
 8015c38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c3a:	601c      	str	r4, [r3, #0]
 8015c3c:	9b02      	ldr	r3, [sp, #8]
 8015c3e:	601f      	str	r7, [r3, #0]
 8015c40:	e6b0      	b.n	80159a4 <__gethex+0xf8>
 8015c42:	4299      	cmp	r1, r3
 8015c44:	f843 cc04 	str.w	ip, [r3, #-4]
 8015c48:	d8d9      	bhi.n	8015bfe <__gethex+0x352>
 8015c4a:	68a3      	ldr	r3, [r4, #8]
 8015c4c:	459b      	cmp	fp, r3
 8015c4e:	db17      	blt.n	8015c80 <__gethex+0x3d4>
 8015c50:	6861      	ldr	r1, [r4, #4]
 8015c52:	9801      	ldr	r0, [sp, #4]
 8015c54:	3101      	adds	r1, #1
 8015c56:	f001 f85f 	bl	8016d18 <_Balloc>
 8015c5a:	4681      	mov	r9, r0
 8015c5c:	b918      	cbnz	r0, 8015c66 <__gethex+0x3ba>
 8015c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8015cc8 <__gethex+0x41c>)
 8015c60:	4602      	mov	r2, r0
 8015c62:	2184      	movs	r1, #132	@ 0x84
 8015c64:	e6c5      	b.n	80159f2 <__gethex+0x146>
 8015c66:	6922      	ldr	r2, [r4, #16]
 8015c68:	3202      	adds	r2, #2
 8015c6a:	f104 010c 	add.w	r1, r4, #12
 8015c6e:	0092      	lsls	r2, r2, #2
 8015c70:	300c      	adds	r0, #12
 8015c72:	f7fe fed5 	bl	8014a20 <memcpy>
 8015c76:	4621      	mov	r1, r4
 8015c78:	9801      	ldr	r0, [sp, #4]
 8015c7a:	f001 f88d 	bl	8016d98 <_Bfree>
 8015c7e:	464c      	mov	r4, r9
 8015c80:	6923      	ldr	r3, [r4, #16]
 8015c82:	1c5a      	adds	r2, r3, #1
 8015c84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015c88:	6122      	str	r2, [r4, #16]
 8015c8a:	2201      	movs	r2, #1
 8015c8c:	615a      	str	r2, [r3, #20]
 8015c8e:	e7be      	b.n	8015c0e <__gethex+0x362>
 8015c90:	6922      	ldr	r2, [r4, #16]
 8015c92:	455a      	cmp	r2, fp
 8015c94:	dd0b      	ble.n	8015cae <__gethex+0x402>
 8015c96:	2101      	movs	r1, #1
 8015c98:	4620      	mov	r0, r4
 8015c9a:	f7ff fd9f 	bl	80157dc <rshift>
 8015c9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ca2:	3701      	adds	r7, #1
 8015ca4:	42bb      	cmp	r3, r7
 8015ca6:	f6ff aee0 	blt.w	8015a6a <__gethex+0x1be>
 8015caa:	2501      	movs	r5, #1
 8015cac:	e7c2      	b.n	8015c34 <__gethex+0x388>
 8015cae:	f016 061f 	ands.w	r6, r6, #31
 8015cb2:	d0fa      	beq.n	8015caa <__gethex+0x3fe>
 8015cb4:	4453      	add	r3, sl
 8015cb6:	f1c6 0620 	rsb	r6, r6, #32
 8015cba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015cbe:	f001 f91d 	bl	8016efc <__hi0bits>
 8015cc2:	42b0      	cmp	r0, r6
 8015cc4:	dbe7      	blt.n	8015c96 <__gethex+0x3ea>
 8015cc6:	e7f0      	b.n	8015caa <__gethex+0x3fe>
 8015cc8:	080184f3 	.word	0x080184f3

08015ccc <L_shift>:
 8015ccc:	f1c2 0208 	rsb	r2, r2, #8
 8015cd0:	0092      	lsls	r2, r2, #2
 8015cd2:	b570      	push	{r4, r5, r6, lr}
 8015cd4:	f1c2 0620 	rsb	r6, r2, #32
 8015cd8:	6843      	ldr	r3, [r0, #4]
 8015cda:	6804      	ldr	r4, [r0, #0]
 8015cdc:	fa03 f506 	lsl.w	r5, r3, r6
 8015ce0:	432c      	orrs	r4, r5
 8015ce2:	40d3      	lsrs	r3, r2
 8015ce4:	6004      	str	r4, [r0, #0]
 8015ce6:	f840 3f04 	str.w	r3, [r0, #4]!
 8015cea:	4288      	cmp	r0, r1
 8015cec:	d3f4      	bcc.n	8015cd8 <L_shift+0xc>
 8015cee:	bd70      	pop	{r4, r5, r6, pc}

08015cf0 <__match>:
 8015cf0:	b530      	push	{r4, r5, lr}
 8015cf2:	6803      	ldr	r3, [r0, #0]
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cfa:	b914      	cbnz	r4, 8015d02 <__match+0x12>
 8015cfc:	6003      	str	r3, [r0, #0]
 8015cfe:	2001      	movs	r0, #1
 8015d00:	bd30      	pop	{r4, r5, pc}
 8015d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015d0a:	2d19      	cmp	r5, #25
 8015d0c:	bf98      	it	ls
 8015d0e:	3220      	addls	r2, #32
 8015d10:	42a2      	cmp	r2, r4
 8015d12:	d0f0      	beq.n	8015cf6 <__match+0x6>
 8015d14:	2000      	movs	r0, #0
 8015d16:	e7f3      	b.n	8015d00 <__match+0x10>

08015d18 <__hexnan>:
 8015d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d1c:	680b      	ldr	r3, [r1, #0]
 8015d1e:	6801      	ldr	r1, [r0, #0]
 8015d20:	115e      	asrs	r6, r3, #5
 8015d22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015d26:	f013 031f 	ands.w	r3, r3, #31
 8015d2a:	b087      	sub	sp, #28
 8015d2c:	bf18      	it	ne
 8015d2e:	3604      	addne	r6, #4
 8015d30:	2500      	movs	r5, #0
 8015d32:	1f37      	subs	r7, r6, #4
 8015d34:	4682      	mov	sl, r0
 8015d36:	4690      	mov	r8, r2
 8015d38:	9301      	str	r3, [sp, #4]
 8015d3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8015d3e:	46b9      	mov	r9, r7
 8015d40:	463c      	mov	r4, r7
 8015d42:	9502      	str	r5, [sp, #8]
 8015d44:	46ab      	mov	fp, r5
 8015d46:	784a      	ldrb	r2, [r1, #1]
 8015d48:	1c4b      	adds	r3, r1, #1
 8015d4a:	9303      	str	r3, [sp, #12]
 8015d4c:	b342      	cbz	r2, 8015da0 <__hexnan+0x88>
 8015d4e:	4610      	mov	r0, r2
 8015d50:	9105      	str	r1, [sp, #20]
 8015d52:	9204      	str	r2, [sp, #16]
 8015d54:	f7ff fd94 	bl	8015880 <__hexdig_fun>
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	d151      	bne.n	8015e00 <__hexnan+0xe8>
 8015d5c:	9a04      	ldr	r2, [sp, #16]
 8015d5e:	9905      	ldr	r1, [sp, #20]
 8015d60:	2a20      	cmp	r2, #32
 8015d62:	d818      	bhi.n	8015d96 <__hexnan+0x7e>
 8015d64:	9b02      	ldr	r3, [sp, #8]
 8015d66:	459b      	cmp	fp, r3
 8015d68:	dd13      	ble.n	8015d92 <__hexnan+0x7a>
 8015d6a:	454c      	cmp	r4, r9
 8015d6c:	d206      	bcs.n	8015d7c <__hexnan+0x64>
 8015d6e:	2d07      	cmp	r5, #7
 8015d70:	dc04      	bgt.n	8015d7c <__hexnan+0x64>
 8015d72:	462a      	mov	r2, r5
 8015d74:	4649      	mov	r1, r9
 8015d76:	4620      	mov	r0, r4
 8015d78:	f7ff ffa8 	bl	8015ccc <L_shift>
 8015d7c:	4544      	cmp	r4, r8
 8015d7e:	d952      	bls.n	8015e26 <__hexnan+0x10e>
 8015d80:	2300      	movs	r3, #0
 8015d82:	f1a4 0904 	sub.w	r9, r4, #4
 8015d86:	f844 3c04 	str.w	r3, [r4, #-4]
 8015d8a:	f8cd b008 	str.w	fp, [sp, #8]
 8015d8e:	464c      	mov	r4, r9
 8015d90:	461d      	mov	r5, r3
 8015d92:	9903      	ldr	r1, [sp, #12]
 8015d94:	e7d7      	b.n	8015d46 <__hexnan+0x2e>
 8015d96:	2a29      	cmp	r2, #41	@ 0x29
 8015d98:	d157      	bne.n	8015e4a <__hexnan+0x132>
 8015d9a:	3102      	adds	r1, #2
 8015d9c:	f8ca 1000 	str.w	r1, [sl]
 8015da0:	f1bb 0f00 	cmp.w	fp, #0
 8015da4:	d051      	beq.n	8015e4a <__hexnan+0x132>
 8015da6:	454c      	cmp	r4, r9
 8015da8:	d206      	bcs.n	8015db8 <__hexnan+0xa0>
 8015daa:	2d07      	cmp	r5, #7
 8015dac:	dc04      	bgt.n	8015db8 <__hexnan+0xa0>
 8015dae:	462a      	mov	r2, r5
 8015db0:	4649      	mov	r1, r9
 8015db2:	4620      	mov	r0, r4
 8015db4:	f7ff ff8a 	bl	8015ccc <L_shift>
 8015db8:	4544      	cmp	r4, r8
 8015dba:	d936      	bls.n	8015e2a <__hexnan+0x112>
 8015dbc:	f1a8 0204 	sub.w	r2, r8, #4
 8015dc0:	4623      	mov	r3, r4
 8015dc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8015dc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8015dca:	429f      	cmp	r7, r3
 8015dcc:	d2f9      	bcs.n	8015dc2 <__hexnan+0xaa>
 8015dce:	1b3b      	subs	r3, r7, r4
 8015dd0:	f023 0303 	bic.w	r3, r3, #3
 8015dd4:	3304      	adds	r3, #4
 8015dd6:	3401      	adds	r4, #1
 8015dd8:	3e03      	subs	r6, #3
 8015dda:	42b4      	cmp	r4, r6
 8015ddc:	bf88      	it	hi
 8015dde:	2304      	movhi	r3, #4
 8015de0:	4443      	add	r3, r8
 8015de2:	2200      	movs	r2, #0
 8015de4:	f843 2b04 	str.w	r2, [r3], #4
 8015de8:	429f      	cmp	r7, r3
 8015dea:	d2fb      	bcs.n	8015de4 <__hexnan+0xcc>
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	b91b      	cbnz	r3, 8015df8 <__hexnan+0xe0>
 8015df0:	4547      	cmp	r7, r8
 8015df2:	d128      	bne.n	8015e46 <__hexnan+0x12e>
 8015df4:	2301      	movs	r3, #1
 8015df6:	603b      	str	r3, [r7, #0]
 8015df8:	2005      	movs	r0, #5
 8015dfa:	b007      	add	sp, #28
 8015dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e00:	3501      	adds	r5, #1
 8015e02:	2d08      	cmp	r5, #8
 8015e04:	f10b 0b01 	add.w	fp, fp, #1
 8015e08:	dd06      	ble.n	8015e18 <__hexnan+0x100>
 8015e0a:	4544      	cmp	r4, r8
 8015e0c:	d9c1      	bls.n	8015d92 <__hexnan+0x7a>
 8015e0e:	2300      	movs	r3, #0
 8015e10:	f844 3c04 	str.w	r3, [r4, #-4]
 8015e14:	2501      	movs	r5, #1
 8015e16:	3c04      	subs	r4, #4
 8015e18:	6822      	ldr	r2, [r4, #0]
 8015e1a:	f000 000f 	and.w	r0, r0, #15
 8015e1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015e22:	6020      	str	r0, [r4, #0]
 8015e24:	e7b5      	b.n	8015d92 <__hexnan+0x7a>
 8015e26:	2508      	movs	r5, #8
 8015e28:	e7b3      	b.n	8015d92 <__hexnan+0x7a>
 8015e2a:	9b01      	ldr	r3, [sp, #4]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d0dd      	beq.n	8015dec <__hexnan+0xd4>
 8015e30:	f1c3 0320 	rsb	r3, r3, #32
 8015e34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015e38:	40da      	lsrs	r2, r3
 8015e3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015e3e:	4013      	ands	r3, r2
 8015e40:	f846 3c04 	str.w	r3, [r6, #-4]
 8015e44:	e7d2      	b.n	8015dec <__hexnan+0xd4>
 8015e46:	3f04      	subs	r7, #4
 8015e48:	e7d0      	b.n	8015dec <__hexnan+0xd4>
 8015e4a:	2004      	movs	r0, #4
 8015e4c:	e7d5      	b.n	8015dfa <__hexnan+0xe2>

08015e4e <__ssputs_r>:
 8015e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e52:	688e      	ldr	r6, [r1, #8]
 8015e54:	461f      	mov	r7, r3
 8015e56:	42be      	cmp	r6, r7
 8015e58:	680b      	ldr	r3, [r1, #0]
 8015e5a:	4682      	mov	sl, r0
 8015e5c:	460c      	mov	r4, r1
 8015e5e:	4690      	mov	r8, r2
 8015e60:	d82d      	bhi.n	8015ebe <__ssputs_r+0x70>
 8015e62:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015e66:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015e6a:	d026      	beq.n	8015eba <__ssputs_r+0x6c>
 8015e6c:	6965      	ldr	r5, [r4, #20]
 8015e6e:	6909      	ldr	r1, [r1, #16]
 8015e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e74:	eba3 0901 	sub.w	r9, r3, r1
 8015e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015e7c:	1c7b      	adds	r3, r7, #1
 8015e7e:	444b      	add	r3, r9
 8015e80:	106d      	asrs	r5, r5, #1
 8015e82:	429d      	cmp	r5, r3
 8015e84:	bf38      	it	cc
 8015e86:	461d      	movcc	r5, r3
 8015e88:	0553      	lsls	r3, r2, #21
 8015e8a:	d527      	bpl.n	8015edc <__ssputs_r+0x8e>
 8015e8c:	4629      	mov	r1, r5
 8015e8e:	f000 fc71 	bl	8016774 <_malloc_r>
 8015e92:	4606      	mov	r6, r0
 8015e94:	b360      	cbz	r0, 8015ef0 <__ssputs_r+0xa2>
 8015e96:	6921      	ldr	r1, [r4, #16]
 8015e98:	464a      	mov	r2, r9
 8015e9a:	f7fe fdc1 	bl	8014a20 <memcpy>
 8015e9e:	89a3      	ldrh	r3, [r4, #12]
 8015ea0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015ea4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015ea8:	81a3      	strh	r3, [r4, #12]
 8015eaa:	6126      	str	r6, [r4, #16]
 8015eac:	6165      	str	r5, [r4, #20]
 8015eae:	444e      	add	r6, r9
 8015eb0:	eba5 0509 	sub.w	r5, r5, r9
 8015eb4:	6026      	str	r6, [r4, #0]
 8015eb6:	60a5      	str	r5, [r4, #8]
 8015eb8:	463e      	mov	r6, r7
 8015eba:	42be      	cmp	r6, r7
 8015ebc:	d900      	bls.n	8015ec0 <__ssputs_r+0x72>
 8015ebe:	463e      	mov	r6, r7
 8015ec0:	6820      	ldr	r0, [r4, #0]
 8015ec2:	4632      	mov	r2, r6
 8015ec4:	4641      	mov	r1, r8
 8015ec6:	f001 fdbe 	bl	8017a46 <memmove>
 8015eca:	68a3      	ldr	r3, [r4, #8]
 8015ecc:	1b9b      	subs	r3, r3, r6
 8015ece:	60a3      	str	r3, [r4, #8]
 8015ed0:	6823      	ldr	r3, [r4, #0]
 8015ed2:	4433      	add	r3, r6
 8015ed4:	6023      	str	r3, [r4, #0]
 8015ed6:	2000      	movs	r0, #0
 8015ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015edc:	462a      	mov	r2, r5
 8015ede:	f001 fc11 	bl	8017704 <_realloc_r>
 8015ee2:	4606      	mov	r6, r0
 8015ee4:	2800      	cmp	r0, #0
 8015ee6:	d1e0      	bne.n	8015eaa <__ssputs_r+0x5c>
 8015ee8:	6921      	ldr	r1, [r4, #16]
 8015eea:	4650      	mov	r0, sl
 8015eec:	f7ff fc2c 	bl	8015748 <_free_r>
 8015ef0:	230c      	movs	r3, #12
 8015ef2:	f8ca 3000 	str.w	r3, [sl]
 8015ef6:	89a3      	ldrh	r3, [r4, #12]
 8015ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015efc:	81a3      	strh	r3, [r4, #12]
 8015efe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f02:	e7e9      	b.n	8015ed8 <__ssputs_r+0x8a>

08015f04 <_svfiprintf_r>:
 8015f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f08:	4698      	mov	r8, r3
 8015f0a:	898b      	ldrh	r3, [r1, #12]
 8015f0c:	061b      	lsls	r3, r3, #24
 8015f0e:	b09d      	sub	sp, #116	@ 0x74
 8015f10:	4607      	mov	r7, r0
 8015f12:	460d      	mov	r5, r1
 8015f14:	4614      	mov	r4, r2
 8015f16:	d510      	bpl.n	8015f3a <_svfiprintf_r+0x36>
 8015f18:	690b      	ldr	r3, [r1, #16]
 8015f1a:	b973      	cbnz	r3, 8015f3a <_svfiprintf_r+0x36>
 8015f1c:	2140      	movs	r1, #64	@ 0x40
 8015f1e:	f000 fc29 	bl	8016774 <_malloc_r>
 8015f22:	6028      	str	r0, [r5, #0]
 8015f24:	6128      	str	r0, [r5, #16]
 8015f26:	b930      	cbnz	r0, 8015f36 <_svfiprintf_r+0x32>
 8015f28:	230c      	movs	r3, #12
 8015f2a:	603b      	str	r3, [r7, #0]
 8015f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f30:	b01d      	add	sp, #116	@ 0x74
 8015f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f36:	2340      	movs	r3, #64	@ 0x40
 8015f38:	616b      	str	r3, [r5, #20]
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f3e:	2320      	movs	r3, #32
 8015f40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f44:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f48:	2330      	movs	r3, #48	@ 0x30
 8015f4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80160e8 <_svfiprintf_r+0x1e4>
 8015f4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f52:	f04f 0901 	mov.w	r9, #1
 8015f56:	4623      	mov	r3, r4
 8015f58:	469a      	mov	sl, r3
 8015f5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f5e:	b10a      	cbz	r2, 8015f64 <_svfiprintf_r+0x60>
 8015f60:	2a25      	cmp	r2, #37	@ 0x25
 8015f62:	d1f9      	bne.n	8015f58 <_svfiprintf_r+0x54>
 8015f64:	ebba 0b04 	subs.w	fp, sl, r4
 8015f68:	d00b      	beq.n	8015f82 <_svfiprintf_r+0x7e>
 8015f6a:	465b      	mov	r3, fp
 8015f6c:	4622      	mov	r2, r4
 8015f6e:	4629      	mov	r1, r5
 8015f70:	4638      	mov	r0, r7
 8015f72:	f7ff ff6c 	bl	8015e4e <__ssputs_r>
 8015f76:	3001      	adds	r0, #1
 8015f78:	f000 80a7 	beq.w	80160ca <_svfiprintf_r+0x1c6>
 8015f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015f7e:	445a      	add	r2, fp
 8015f80:	9209      	str	r2, [sp, #36]	@ 0x24
 8015f82:	f89a 3000 	ldrb.w	r3, [sl]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	f000 809f 	beq.w	80160ca <_svfiprintf_r+0x1c6>
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015f92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f96:	f10a 0a01 	add.w	sl, sl, #1
 8015f9a:	9304      	str	r3, [sp, #16]
 8015f9c:	9307      	str	r3, [sp, #28]
 8015f9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015fa2:	931a      	str	r3, [sp, #104]	@ 0x68
 8015fa4:	4654      	mov	r4, sl
 8015fa6:	2205      	movs	r2, #5
 8015fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fac:	484e      	ldr	r0, [pc, #312]	@ (80160e8 <_svfiprintf_r+0x1e4>)
 8015fae:	f7ea f91f 	bl	80001f0 <memchr>
 8015fb2:	9a04      	ldr	r2, [sp, #16]
 8015fb4:	b9d8      	cbnz	r0, 8015fee <_svfiprintf_r+0xea>
 8015fb6:	06d0      	lsls	r0, r2, #27
 8015fb8:	bf44      	itt	mi
 8015fba:	2320      	movmi	r3, #32
 8015fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fc0:	0711      	lsls	r1, r2, #28
 8015fc2:	bf44      	itt	mi
 8015fc4:	232b      	movmi	r3, #43	@ 0x2b
 8015fc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015fca:	f89a 3000 	ldrb.w	r3, [sl]
 8015fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fd0:	d015      	beq.n	8015ffe <_svfiprintf_r+0xfa>
 8015fd2:	9a07      	ldr	r2, [sp, #28]
 8015fd4:	4654      	mov	r4, sl
 8015fd6:	2000      	movs	r0, #0
 8015fd8:	f04f 0c0a 	mov.w	ip, #10
 8015fdc:	4621      	mov	r1, r4
 8015fde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fe2:	3b30      	subs	r3, #48	@ 0x30
 8015fe4:	2b09      	cmp	r3, #9
 8015fe6:	d94b      	bls.n	8016080 <_svfiprintf_r+0x17c>
 8015fe8:	b1b0      	cbz	r0, 8016018 <_svfiprintf_r+0x114>
 8015fea:	9207      	str	r2, [sp, #28]
 8015fec:	e014      	b.n	8016018 <_svfiprintf_r+0x114>
 8015fee:	eba0 0308 	sub.w	r3, r0, r8
 8015ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8015ff6:	4313      	orrs	r3, r2
 8015ff8:	9304      	str	r3, [sp, #16]
 8015ffa:	46a2      	mov	sl, r4
 8015ffc:	e7d2      	b.n	8015fa4 <_svfiprintf_r+0xa0>
 8015ffe:	9b03      	ldr	r3, [sp, #12]
 8016000:	1d19      	adds	r1, r3, #4
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	9103      	str	r1, [sp, #12]
 8016006:	2b00      	cmp	r3, #0
 8016008:	bfbb      	ittet	lt
 801600a:	425b      	neglt	r3, r3
 801600c:	f042 0202 	orrlt.w	r2, r2, #2
 8016010:	9307      	strge	r3, [sp, #28]
 8016012:	9307      	strlt	r3, [sp, #28]
 8016014:	bfb8      	it	lt
 8016016:	9204      	strlt	r2, [sp, #16]
 8016018:	7823      	ldrb	r3, [r4, #0]
 801601a:	2b2e      	cmp	r3, #46	@ 0x2e
 801601c:	d10a      	bne.n	8016034 <_svfiprintf_r+0x130>
 801601e:	7863      	ldrb	r3, [r4, #1]
 8016020:	2b2a      	cmp	r3, #42	@ 0x2a
 8016022:	d132      	bne.n	801608a <_svfiprintf_r+0x186>
 8016024:	9b03      	ldr	r3, [sp, #12]
 8016026:	1d1a      	adds	r2, r3, #4
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	9203      	str	r2, [sp, #12]
 801602c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016030:	3402      	adds	r4, #2
 8016032:	9305      	str	r3, [sp, #20]
 8016034:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80160f8 <_svfiprintf_r+0x1f4>
 8016038:	7821      	ldrb	r1, [r4, #0]
 801603a:	2203      	movs	r2, #3
 801603c:	4650      	mov	r0, sl
 801603e:	f7ea f8d7 	bl	80001f0 <memchr>
 8016042:	b138      	cbz	r0, 8016054 <_svfiprintf_r+0x150>
 8016044:	9b04      	ldr	r3, [sp, #16]
 8016046:	eba0 000a 	sub.w	r0, r0, sl
 801604a:	2240      	movs	r2, #64	@ 0x40
 801604c:	4082      	lsls	r2, r0
 801604e:	4313      	orrs	r3, r2
 8016050:	3401      	adds	r4, #1
 8016052:	9304      	str	r3, [sp, #16]
 8016054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016058:	4824      	ldr	r0, [pc, #144]	@ (80160ec <_svfiprintf_r+0x1e8>)
 801605a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801605e:	2206      	movs	r2, #6
 8016060:	f7ea f8c6 	bl	80001f0 <memchr>
 8016064:	2800      	cmp	r0, #0
 8016066:	d036      	beq.n	80160d6 <_svfiprintf_r+0x1d2>
 8016068:	4b21      	ldr	r3, [pc, #132]	@ (80160f0 <_svfiprintf_r+0x1ec>)
 801606a:	bb1b      	cbnz	r3, 80160b4 <_svfiprintf_r+0x1b0>
 801606c:	9b03      	ldr	r3, [sp, #12]
 801606e:	3307      	adds	r3, #7
 8016070:	f023 0307 	bic.w	r3, r3, #7
 8016074:	3308      	adds	r3, #8
 8016076:	9303      	str	r3, [sp, #12]
 8016078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801607a:	4433      	add	r3, r6
 801607c:	9309      	str	r3, [sp, #36]	@ 0x24
 801607e:	e76a      	b.n	8015f56 <_svfiprintf_r+0x52>
 8016080:	fb0c 3202 	mla	r2, ip, r2, r3
 8016084:	460c      	mov	r4, r1
 8016086:	2001      	movs	r0, #1
 8016088:	e7a8      	b.n	8015fdc <_svfiprintf_r+0xd8>
 801608a:	2300      	movs	r3, #0
 801608c:	3401      	adds	r4, #1
 801608e:	9305      	str	r3, [sp, #20]
 8016090:	4619      	mov	r1, r3
 8016092:	f04f 0c0a 	mov.w	ip, #10
 8016096:	4620      	mov	r0, r4
 8016098:	f810 2b01 	ldrb.w	r2, [r0], #1
 801609c:	3a30      	subs	r2, #48	@ 0x30
 801609e:	2a09      	cmp	r2, #9
 80160a0:	d903      	bls.n	80160aa <_svfiprintf_r+0x1a6>
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d0c6      	beq.n	8016034 <_svfiprintf_r+0x130>
 80160a6:	9105      	str	r1, [sp, #20]
 80160a8:	e7c4      	b.n	8016034 <_svfiprintf_r+0x130>
 80160aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80160ae:	4604      	mov	r4, r0
 80160b0:	2301      	movs	r3, #1
 80160b2:	e7f0      	b.n	8016096 <_svfiprintf_r+0x192>
 80160b4:	ab03      	add	r3, sp, #12
 80160b6:	9300      	str	r3, [sp, #0]
 80160b8:	462a      	mov	r2, r5
 80160ba:	4b0e      	ldr	r3, [pc, #56]	@ (80160f4 <_svfiprintf_r+0x1f0>)
 80160bc:	a904      	add	r1, sp, #16
 80160be:	4638      	mov	r0, r7
 80160c0:	f7fc fd48 	bl	8012b54 <_printf_float>
 80160c4:	1c42      	adds	r2, r0, #1
 80160c6:	4606      	mov	r6, r0
 80160c8:	d1d6      	bne.n	8016078 <_svfiprintf_r+0x174>
 80160ca:	89ab      	ldrh	r3, [r5, #12]
 80160cc:	065b      	lsls	r3, r3, #25
 80160ce:	f53f af2d 	bmi.w	8015f2c <_svfiprintf_r+0x28>
 80160d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160d4:	e72c      	b.n	8015f30 <_svfiprintf_r+0x2c>
 80160d6:	ab03      	add	r3, sp, #12
 80160d8:	9300      	str	r3, [sp, #0]
 80160da:	462a      	mov	r2, r5
 80160dc:	4b05      	ldr	r3, [pc, #20]	@ (80160f4 <_svfiprintf_r+0x1f0>)
 80160de:	a904      	add	r1, sp, #16
 80160e0:	4638      	mov	r0, r7
 80160e2:	f7fc ffcf 	bl	8013084 <_printf_i>
 80160e6:	e7ed      	b.n	80160c4 <_svfiprintf_r+0x1c0>
 80160e8:	08018564 	.word	0x08018564
 80160ec:	0801856e 	.word	0x0801856e
 80160f0:	08012b55 	.word	0x08012b55
 80160f4:	08015e4f 	.word	0x08015e4f
 80160f8:	0801856a 	.word	0x0801856a

080160fc <_sungetc_r>:
 80160fc:	b538      	push	{r3, r4, r5, lr}
 80160fe:	1c4b      	adds	r3, r1, #1
 8016100:	4614      	mov	r4, r2
 8016102:	d103      	bne.n	801610c <_sungetc_r+0x10>
 8016104:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8016108:	4628      	mov	r0, r5
 801610a:	bd38      	pop	{r3, r4, r5, pc}
 801610c:	8993      	ldrh	r3, [r2, #12]
 801610e:	f023 0320 	bic.w	r3, r3, #32
 8016112:	8193      	strh	r3, [r2, #12]
 8016114:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016116:	6852      	ldr	r2, [r2, #4]
 8016118:	b2cd      	uxtb	r5, r1
 801611a:	b18b      	cbz	r3, 8016140 <_sungetc_r+0x44>
 801611c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801611e:	4293      	cmp	r3, r2
 8016120:	dd08      	ble.n	8016134 <_sungetc_r+0x38>
 8016122:	6823      	ldr	r3, [r4, #0]
 8016124:	1e5a      	subs	r2, r3, #1
 8016126:	6022      	str	r2, [r4, #0]
 8016128:	f803 5c01 	strb.w	r5, [r3, #-1]
 801612c:	6863      	ldr	r3, [r4, #4]
 801612e:	3301      	adds	r3, #1
 8016130:	6063      	str	r3, [r4, #4]
 8016132:	e7e9      	b.n	8016108 <_sungetc_r+0xc>
 8016134:	4621      	mov	r1, r4
 8016136:	f001 fa99 	bl	801766c <__submore>
 801613a:	2800      	cmp	r0, #0
 801613c:	d0f1      	beq.n	8016122 <_sungetc_r+0x26>
 801613e:	e7e1      	b.n	8016104 <_sungetc_r+0x8>
 8016140:	6921      	ldr	r1, [r4, #16]
 8016142:	6823      	ldr	r3, [r4, #0]
 8016144:	b151      	cbz	r1, 801615c <_sungetc_r+0x60>
 8016146:	4299      	cmp	r1, r3
 8016148:	d208      	bcs.n	801615c <_sungetc_r+0x60>
 801614a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801614e:	42a9      	cmp	r1, r5
 8016150:	d104      	bne.n	801615c <_sungetc_r+0x60>
 8016152:	3b01      	subs	r3, #1
 8016154:	3201      	adds	r2, #1
 8016156:	6023      	str	r3, [r4, #0]
 8016158:	6062      	str	r2, [r4, #4]
 801615a:	e7d5      	b.n	8016108 <_sungetc_r+0xc>
 801615c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8016160:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016164:	6363      	str	r3, [r4, #52]	@ 0x34
 8016166:	2303      	movs	r3, #3
 8016168:	63a3      	str	r3, [r4, #56]	@ 0x38
 801616a:	4623      	mov	r3, r4
 801616c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016170:	6023      	str	r3, [r4, #0]
 8016172:	2301      	movs	r3, #1
 8016174:	e7dc      	b.n	8016130 <_sungetc_r+0x34>

08016176 <__ssrefill_r>:
 8016176:	b510      	push	{r4, lr}
 8016178:	460c      	mov	r4, r1
 801617a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801617c:	b169      	cbz	r1, 801619a <__ssrefill_r+0x24>
 801617e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016182:	4299      	cmp	r1, r3
 8016184:	d001      	beq.n	801618a <__ssrefill_r+0x14>
 8016186:	f7ff fadf 	bl	8015748 <_free_r>
 801618a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801618c:	6063      	str	r3, [r4, #4]
 801618e:	2000      	movs	r0, #0
 8016190:	6360      	str	r0, [r4, #52]	@ 0x34
 8016192:	b113      	cbz	r3, 801619a <__ssrefill_r+0x24>
 8016194:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8016196:	6023      	str	r3, [r4, #0]
 8016198:	bd10      	pop	{r4, pc}
 801619a:	6923      	ldr	r3, [r4, #16]
 801619c:	6023      	str	r3, [r4, #0]
 801619e:	2300      	movs	r3, #0
 80161a0:	6063      	str	r3, [r4, #4]
 80161a2:	89a3      	ldrh	r3, [r4, #12]
 80161a4:	f043 0320 	orr.w	r3, r3, #32
 80161a8:	81a3      	strh	r3, [r4, #12]
 80161aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80161ae:	e7f3      	b.n	8016198 <__ssrefill_r+0x22>

080161b0 <__ssvfiscanf_r>:
 80161b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161b4:	460c      	mov	r4, r1
 80161b6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80161ba:	2100      	movs	r1, #0
 80161bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80161c0:	49a6      	ldr	r1, [pc, #664]	@ (801645c <__ssvfiscanf_r+0x2ac>)
 80161c2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80161c4:	f10d 0804 	add.w	r8, sp, #4
 80161c8:	49a5      	ldr	r1, [pc, #660]	@ (8016460 <__ssvfiscanf_r+0x2b0>)
 80161ca:	4fa6      	ldr	r7, [pc, #664]	@ (8016464 <__ssvfiscanf_r+0x2b4>)
 80161cc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80161d0:	4606      	mov	r6, r0
 80161d2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80161d4:	9300      	str	r3, [sp, #0]
 80161d6:	f892 9000 	ldrb.w	r9, [r2]
 80161da:	f1b9 0f00 	cmp.w	r9, #0
 80161de:	f000 8158 	beq.w	8016492 <__ssvfiscanf_r+0x2e2>
 80161e2:	f817 3009 	ldrb.w	r3, [r7, r9]
 80161e6:	f013 0308 	ands.w	r3, r3, #8
 80161ea:	f102 0501 	add.w	r5, r2, #1
 80161ee:	d019      	beq.n	8016224 <__ssvfiscanf_r+0x74>
 80161f0:	6863      	ldr	r3, [r4, #4]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	dd0f      	ble.n	8016216 <__ssvfiscanf_r+0x66>
 80161f6:	6823      	ldr	r3, [r4, #0]
 80161f8:	781a      	ldrb	r2, [r3, #0]
 80161fa:	5cba      	ldrb	r2, [r7, r2]
 80161fc:	0712      	lsls	r2, r2, #28
 80161fe:	d401      	bmi.n	8016204 <__ssvfiscanf_r+0x54>
 8016200:	462a      	mov	r2, r5
 8016202:	e7e8      	b.n	80161d6 <__ssvfiscanf_r+0x26>
 8016204:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016206:	3201      	adds	r2, #1
 8016208:	9245      	str	r2, [sp, #276]	@ 0x114
 801620a:	6862      	ldr	r2, [r4, #4]
 801620c:	3301      	adds	r3, #1
 801620e:	3a01      	subs	r2, #1
 8016210:	6062      	str	r2, [r4, #4]
 8016212:	6023      	str	r3, [r4, #0]
 8016214:	e7ec      	b.n	80161f0 <__ssvfiscanf_r+0x40>
 8016216:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016218:	4621      	mov	r1, r4
 801621a:	4630      	mov	r0, r6
 801621c:	4798      	blx	r3
 801621e:	2800      	cmp	r0, #0
 8016220:	d0e9      	beq.n	80161f6 <__ssvfiscanf_r+0x46>
 8016222:	e7ed      	b.n	8016200 <__ssvfiscanf_r+0x50>
 8016224:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8016228:	f040 8085 	bne.w	8016336 <__ssvfiscanf_r+0x186>
 801622c:	9341      	str	r3, [sp, #260]	@ 0x104
 801622e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8016230:	7853      	ldrb	r3, [r2, #1]
 8016232:	2b2a      	cmp	r3, #42	@ 0x2a
 8016234:	bf02      	ittt	eq
 8016236:	2310      	moveq	r3, #16
 8016238:	1c95      	addeq	r5, r2, #2
 801623a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801623c:	220a      	movs	r2, #10
 801623e:	46aa      	mov	sl, r5
 8016240:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016244:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016248:	2b09      	cmp	r3, #9
 801624a:	d91e      	bls.n	801628a <__ssvfiscanf_r+0xda>
 801624c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8016468 <__ssvfiscanf_r+0x2b8>
 8016250:	2203      	movs	r2, #3
 8016252:	4658      	mov	r0, fp
 8016254:	f7e9 ffcc 	bl	80001f0 <memchr>
 8016258:	b138      	cbz	r0, 801626a <__ssvfiscanf_r+0xba>
 801625a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801625c:	eba0 000b 	sub.w	r0, r0, fp
 8016260:	2301      	movs	r3, #1
 8016262:	4083      	lsls	r3, r0
 8016264:	4313      	orrs	r3, r2
 8016266:	9341      	str	r3, [sp, #260]	@ 0x104
 8016268:	4655      	mov	r5, sl
 801626a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801626e:	2b78      	cmp	r3, #120	@ 0x78
 8016270:	d806      	bhi.n	8016280 <__ssvfiscanf_r+0xd0>
 8016272:	2b57      	cmp	r3, #87	@ 0x57
 8016274:	d810      	bhi.n	8016298 <__ssvfiscanf_r+0xe8>
 8016276:	2b25      	cmp	r3, #37	@ 0x25
 8016278:	d05d      	beq.n	8016336 <__ssvfiscanf_r+0x186>
 801627a:	d857      	bhi.n	801632c <__ssvfiscanf_r+0x17c>
 801627c:	2b00      	cmp	r3, #0
 801627e:	d075      	beq.n	801636c <__ssvfiscanf_r+0x1bc>
 8016280:	2303      	movs	r3, #3
 8016282:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016284:	230a      	movs	r3, #10
 8016286:	9342      	str	r3, [sp, #264]	@ 0x108
 8016288:	e088      	b.n	801639c <__ssvfiscanf_r+0x1ec>
 801628a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801628c:	fb02 1103 	mla	r1, r2, r3, r1
 8016290:	3930      	subs	r1, #48	@ 0x30
 8016292:	9143      	str	r1, [sp, #268]	@ 0x10c
 8016294:	4655      	mov	r5, sl
 8016296:	e7d2      	b.n	801623e <__ssvfiscanf_r+0x8e>
 8016298:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801629c:	2a20      	cmp	r2, #32
 801629e:	d8ef      	bhi.n	8016280 <__ssvfiscanf_r+0xd0>
 80162a0:	a101      	add	r1, pc, #4	@ (adr r1, 80162a8 <__ssvfiscanf_r+0xf8>)
 80162a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80162a6:	bf00      	nop
 80162a8:	0801637b 	.word	0x0801637b
 80162ac:	08016281 	.word	0x08016281
 80162b0:	08016281 	.word	0x08016281
 80162b4:	080163d5 	.word	0x080163d5
 80162b8:	08016281 	.word	0x08016281
 80162bc:	08016281 	.word	0x08016281
 80162c0:	08016281 	.word	0x08016281
 80162c4:	08016281 	.word	0x08016281
 80162c8:	08016281 	.word	0x08016281
 80162cc:	08016281 	.word	0x08016281
 80162d0:	08016281 	.word	0x08016281
 80162d4:	080163eb 	.word	0x080163eb
 80162d8:	080163d1 	.word	0x080163d1
 80162dc:	08016333 	.word	0x08016333
 80162e0:	08016333 	.word	0x08016333
 80162e4:	08016333 	.word	0x08016333
 80162e8:	08016281 	.word	0x08016281
 80162ec:	0801638d 	.word	0x0801638d
 80162f0:	08016281 	.word	0x08016281
 80162f4:	08016281 	.word	0x08016281
 80162f8:	08016281 	.word	0x08016281
 80162fc:	08016281 	.word	0x08016281
 8016300:	080163fb 	.word	0x080163fb
 8016304:	08016395 	.word	0x08016395
 8016308:	08016373 	.word	0x08016373
 801630c:	08016281 	.word	0x08016281
 8016310:	08016281 	.word	0x08016281
 8016314:	080163f7 	.word	0x080163f7
 8016318:	08016281 	.word	0x08016281
 801631c:	080163d1 	.word	0x080163d1
 8016320:	08016281 	.word	0x08016281
 8016324:	08016281 	.word	0x08016281
 8016328:	0801637b 	.word	0x0801637b
 801632c:	3b45      	subs	r3, #69	@ 0x45
 801632e:	2b02      	cmp	r3, #2
 8016330:	d8a6      	bhi.n	8016280 <__ssvfiscanf_r+0xd0>
 8016332:	2305      	movs	r3, #5
 8016334:	e031      	b.n	801639a <__ssvfiscanf_r+0x1ea>
 8016336:	6863      	ldr	r3, [r4, #4]
 8016338:	2b00      	cmp	r3, #0
 801633a:	dd0d      	ble.n	8016358 <__ssvfiscanf_r+0x1a8>
 801633c:	6823      	ldr	r3, [r4, #0]
 801633e:	781a      	ldrb	r2, [r3, #0]
 8016340:	454a      	cmp	r2, r9
 8016342:	f040 80a6 	bne.w	8016492 <__ssvfiscanf_r+0x2e2>
 8016346:	3301      	adds	r3, #1
 8016348:	6862      	ldr	r2, [r4, #4]
 801634a:	6023      	str	r3, [r4, #0]
 801634c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801634e:	3a01      	subs	r2, #1
 8016350:	3301      	adds	r3, #1
 8016352:	6062      	str	r2, [r4, #4]
 8016354:	9345      	str	r3, [sp, #276]	@ 0x114
 8016356:	e753      	b.n	8016200 <__ssvfiscanf_r+0x50>
 8016358:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801635a:	4621      	mov	r1, r4
 801635c:	4630      	mov	r0, r6
 801635e:	4798      	blx	r3
 8016360:	2800      	cmp	r0, #0
 8016362:	d0eb      	beq.n	801633c <__ssvfiscanf_r+0x18c>
 8016364:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016366:	2800      	cmp	r0, #0
 8016368:	f040 808b 	bne.w	8016482 <__ssvfiscanf_r+0x2d2>
 801636c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016370:	e08b      	b.n	801648a <__ssvfiscanf_r+0x2da>
 8016372:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8016374:	f042 0220 	orr.w	r2, r2, #32
 8016378:	9241      	str	r2, [sp, #260]	@ 0x104
 801637a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801637c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016380:	9241      	str	r2, [sp, #260]	@ 0x104
 8016382:	2210      	movs	r2, #16
 8016384:	2b6e      	cmp	r3, #110	@ 0x6e
 8016386:	9242      	str	r2, [sp, #264]	@ 0x108
 8016388:	d902      	bls.n	8016390 <__ssvfiscanf_r+0x1e0>
 801638a:	e005      	b.n	8016398 <__ssvfiscanf_r+0x1e8>
 801638c:	2300      	movs	r3, #0
 801638e:	9342      	str	r3, [sp, #264]	@ 0x108
 8016390:	2303      	movs	r3, #3
 8016392:	e002      	b.n	801639a <__ssvfiscanf_r+0x1ea>
 8016394:	2308      	movs	r3, #8
 8016396:	9342      	str	r3, [sp, #264]	@ 0x108
 8016398:	2304      	movs	r3, #4
 801639a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801639c:	6863      	ldr	r3, [r4, #4]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	dd39      	ble.n	8016416 <__ssvfiscanf_r+0x266>
 80163a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80163a4:	0659      	lsls	r1, r3, #25
 80163a6:	d404      	bmi.n	80163b2 <__ssvfiscanf_r+0x202>
 80163a8:	6823      	ldr	r3, [r4, #0]
 80163aa:	781a      	ldrb	r2, [r3, #0]
 80163ac:	5cba      	ldrb	r2, [r7, r2]
 80163ae:	0712      	lsls	r2, r2, #28
 80163b0:	d438      	bmi.n	8016424 <__ssvfiscanf_r+0x274>
 80163b2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80163b4:	2b02      	cmp	r3, #2
 80163b6:	dc47      	bgt.n	8016448 <__ssvfiscanf_r+0x298>
 80163b8:	466b      	mov	r3, sp
 80163ba:	4622      	mov	r2, r4
 80163bc:	a941      	add	r1, sp, #260	@ 0x104
 80163be:	4630      	mov	r0, r6
 80163c0:	f000 fa6a 	bl	8016898 <_scanf_chars>
 80163c4:	2801      	cmp	r0, #1
 80163c6:	d064      	beq.n	8016492 <__ssvfiscanf_r+0x2e2>
 80163c8:	2802      	cmp	r0, #2
 80163ca:	f47f af19 	bne.w	8016200 <__ssvfiscanf_r+0x50>
 80163ce:	e7c9      	b.n	8016364 <__ssvfiscanf_r+0x1b4>
 80163d0:	220a      	movs	r2, #10
 80163d2:	e7d7      	b.n	8016384 <__ssvfiscanf_r+0x1d4>
 80163d4:	4629      	mov	r1, r5
 80163d6:	4640      	mov	r0, r8
 80163d8:	f000 fbac 	bl	8016b34 <__sccl>
 80163dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80163de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80163e4:	4605      	mov	r5, r0
 80163e6:	2301      	movs	r3, #1
 80163e8:	e7d7      	b.n	801639a <__ssvfiscanf_r+0x1ea>
 80163ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80163ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80163f0:	9341      	str	r3, [sp, #260]	@ 0x104
 80163f2:	2300      	movs	r3, #0
 80163f4:	e7d1      	b.n	801639a <__ssvfiscanf_r+0x1ea>
 80163f6:	2302      	movs	r3, #2
 80163f8:	e7cf      	b.n	801639a <__ssvfiscanf_r+0x1ea>
 80163fa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80163fc:	06c3      	lsls	r3, r0, #27
 80163fe:	f53f aeff 	bmi.w	8016200 <__ssvfiscanf_r+0x50>
 8016402:	9b00      	ldr	r3, [sp, #0]
 8016404:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016406:	1d19      	adds	r1, r3, #4
 8016408:	9100      	str	r1, [sp, #0]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	07c0      	lsls	r0, r0, #31
 801640e:	bf4c      	ite	mi
 8016410:	801a      	strhmi	r2, [r3, #0]
 8016412:	601a      	strpl	r2, [r3, #0]
 8016414:	e6f4      	b.n	8016200 <__ssvfiscanf_r+0x50>
 8016416:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016418:	4621      	mov	r1, r4
 801641a:	4630      	mov	r0, r6
 801641c:	4798      	blx	r3
 801641e:	2800      	cmp	r0, #0
 8016420:	d0bf      	beq.n	80163a2 <__ssvfiscanf_r+0x1f2>
 8016422:	e79f      	b.n	8016364 <__ssvfiscanf_r+0x1b4>
 8016424:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8016426:	3201      	adds	r2, #1
 8016428:	9245      	str	r2, [sp, #276]	@ 0x114
 801642a:	6862      	ldr	r2, [r4, #4]
 801642c:	3a01      	subs	r2, #1
 801642e:	2a00      	cmp	r2, #0
 8016430:	6062      	str	r2, [r4, #4]
 8016432:	dd02      	ble.n	801643a <__ssvfiscanf_r+0x28a>
 8016434:	3301      	adds	r3, #1
 8016436:	6023      	str	r3, [r4, #0]
 8016438:	e7b6      	b.n	80163a8 <__ssvfiscanf_r+0x1f8>
 801643a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801643c:	4621      	mov	r1, r4
 801643e:	4630      	mov	r0, r6
 8016440:	4798      	blx	r3
 8016442:	2800      	cmp	r0, #0
 8016444:	d0b0      	beq.n	80163a8 <__ssvfiscanf_r+0x1f8>
 8016446:	e78d      	b.n	8016364 <__ssvfiscanf_r+0x1b4>
 8016448:	2b04      	cmp	r3, #4
 801644a:	dc0f      	bgt.n	801646c <__ssvfiscanf_r+0x2bc>
 801644c:	466b      	mov	r3, sp
 801644e:	4622      	mov	r2, r4
 8016450:	a941      	add	r1, sp, #260	@ 0x104
 8016452:	4630      	mov	r0, r6
 8016454:	f000 fa7a 	bl	801694c <_scanf_i>
 8016458:	e7b4      	b.n	80163c4 <__ssvfiscanf_r+0x214>
 801645a:	bf00      	nop
 801645c:	080160fd 	.word	0x080160fd
 8016460:	08016177 	.word	0x08016177
 8016464:	08018641 	.word	0x08018641
 8016468:	0801856a 	.word	0x0801856a
 801646c:	4b0a      	ldr	r3, [pc, #40]	@ (8016498 <__ssvfiscanf_r+0x2e8>)
 801646e:	2b00      	cmp	r3, #0
 8016470:	f43f aec6 	beq.w	8016200 <__ssvfiscanf_r+0x50>
 8016474:	466b      	mov	r3, sp
 8016476:	4622      	mov	r2, r4
 8016478:	a941      	add	r1, sp, #260	@ 0x104
 801647a:	4630      	mov	r0, r6
 801647c:	f7fc ff20 	bl	80132c0 <_scanf_float>
 8016480:	e7a0      	b.n	80163c4 <__ssvfiscanf_r+0x214>
 8016482:	89a3      	ldrh	r3, [r4, #12]
 8016484:	065b      	lsls	r3, r3, #25
 8016486:	f53f af71 	bmi.w	801636c <__ssvfiscanf_r+0x1bc>
 801648a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801648e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016492:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8016494:	e7f9      	b.n	801648a <__ssvfiscanf_r+0x2da>
 8016496:	bf00      	nop
 8016498:	080132c1 	.word	0x080132c1

0801649c <__sfputc_r>:
 801649c:	6893      	ldr	r3, [r2, #8]
 801649e:	3b01      	subs	r3, #1
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	b410      	push	{r4}
 80164a4:	6093      	str	r3, [r2, #8]
 80164a6:	da08      	bge.n	80164ba <__sfputc_r+0x1e>
 80164a8:	6994      	ldr	r4, [r2, #24]
 80164aa:	42a3      	cmp	r3, r4
 80164ac:	db01      	blt.n	80164b2 <__sfputc_r+0x16>
 80164ae:	290a      	cmp	r1, #10
 80164b0:	d103      	bne.n	80164ba <__sfputc_r+0x1e>
 80164b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164b6:	f001 b953 	b.w	8017760 <__swbuf_r>
 80164ba:	6813      	ldr	r3, [r2, #0]
 80164bc:	1c58      	adds	r0, r3, #1
 80164be:	6010      	str	r0, [r2, #0]
 80164c0:	7019      	strb	r1, [r3, #0]
 80164c2:	4608      	mov	r0, r1
 80164c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164c8:	4770      	bx	lr

080164ca <__sfputs_r>:
 80164ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164cc:	4606      	mov	r6, r0
 80164ce:	460f      	mov	r7, r1
 80164d0:	4614      	mov	r4, r2
 80164d2:	18d5      	adds	r5, r2, r3
 80164d4:	42ac      	cmp	r4, r5
 80164d6:	d101      	bne.n	80164dc <__sfputs_r+0x12>
 80164d8:	2000      	movs	r0, #0
 80164da:	e007      	b.n	80164ec <__sfputs_r+0x22>
 80164dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164e0:	463a      	mov	r2, r7
 80164e2:	4630      	mov	r0, r6
 80164e4:	f7ff ffda 	bl	801649c <__sfputc_r>
 80164e8:	1c43      	adds	r3, r0, #1
 80164ea:	d1f3      	bne.n	80164d4 <__sfputs_r+0xa>
 80164ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080164f0 <_vfiprintf_r>:
 80164f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164f4:	460d      	mov	r5, r1
 80164f6:	b09d      	sub	sp, #116	@ 0x74
 80164f8:	4614      	mov	r4, r2
 80164fa:	4698      	mov	r8, r3
 80164fc:	4606      	mov	r6, r0
 80164fe:	b118      	cbz	r0, 8016508 <_vfiprintf_r+0x18>
 8016500:	6a03      	ldr	r3, [r0, #32]
 8016502:	b90b      	cbnz	r3, 8016508 <_vfiprintf_r+0x18>
 8016504:	f7fd fa40 	bl	8013988 <__sinit>
 8016508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801650a:	07d9      	lsls	r1, r3, #31
 801650c:	d405      	bmi.n	801651a <_vfiprintf_r+0x2a>
 801650e:	89ab      	ldrh	r3, [r5, #12]
 8016510:	059a      	lsls	r2, r3, #22
 8016512:	d402      	bmi.n	801651a <_vfiprintf_r+0x2a>
 8016514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016516:	f7fe fa64 	bl	80149e2 <__retarget_lock_acquire_recursive>
 801651a:	89ab      	ldrh	r3, [r5, #12]
 801651c:	071b      	lsls	r3, r3, #28
 801651e:	d501      	bpl.n	8016524 <_vfiprintf_r+0x34>
 8016520:	692b      	ldr	r3, [r5, #16]
 8016522:	b99b      	cbnz	r3, 801654c <_vfiprintf_r+0x5c>
 8016524:	4629      	mov	r1, r5
 8016526:	4630      	mov	r0, r6
 8016528:	f001 f9c8 	bl	80178bc <__swsetup_r>
 801652c:	b170      	cbz	r0, 801654c <_vfiprintf_r+0x5c>
 801652e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016530:	07dc      	lsls	r4, r3, #31
 8016532:	d504      	bpl.n	801653e <_vfiprintf_r+0x4e>
 8016534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016538:	b01d      	add	sp, #116	@ 0x74
 801653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801653e:	89ab      	ldrh	r3, [r5, #12]
 8016540:	0598      	lsls	r0, r3, #22
 8016542:	d4f7      	bmi.n	8016534 <_vfiprintf_r+0x44>
 8016544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016546:	f7fe fa4d 	bl	80149e4 <__retarget_lock_release_recursive>
 801654a:	e7f3      	b.n	8016534 <_vfiprintf_r+0x44>
 801654c:	2300      	movs	r3, #0
 801654e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016550:	2320      	movs	r3, #32
 8016552:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016556:	f8cd 800c 	str.w	r8, [sp, #12]
 801655a:	2330      	movs	r3, #48	@ 0x30
 801655c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801670c <_vfiprintf_r+0x21c>
 8016560:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016564:	f04f 0901 	mov.w	r9, #1
 8016568:	4623      	mov	r3, r4
 801656a:	469a      	mov	sl, r3
 801656c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016570:	b10a      	cbz	r2, 8016576 <_vfiprintf_r+0x86>
 8016572:	2a25      	cmp	r2, #37	@ 0x25
 8016574:	d1f9      	bne.n	801656a <_vfiprintf_r+0x7a>
 8016576:	ebba 0b04 	subs.w	fp, sl, r4
 801657a:	d00b      	beq.n	8016594 <_vfiprintf_r+0xa4>
 801657c:	465b      	mov	r3, fp
 801657e:	4622      	mov	r2, r4
 8016580:	4629      	mov	r1, r5
 8016582:	4630      	mov	r0, r6
 8016584:	f7ff ffa1 	bl	80164ca <__sfputs_r>
 8016588:	3001      	adds	r0, #1
 801658a:	f000 80a7 	beq.w	80166dc <_vfiprintf_r+0x1ec>
 801658e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016590:	445a      	add	r2, fp
 8016592:	9209      	str	r2, [sp, #36]	@ 0x24
 8016594:	f89a 3000 	ldrb.w	r3, [sl]
 8016598:	2b00      	cmp	r3, #0
 801659a:	f000 809f 	beq.w	80166dc <_vfiprintf_r+0x1ec>
 801659e:	2300      	movs	r3, #0
 80165a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80165a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165a8:	f10a 0a01 	add.w	sl, sl, #1
 80165ac:	9304      	str	r3, [sp, #16]
 80165ae:	9307      	str	r3, [sp, #28]
 80165b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80165b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80165b6:	4654      	mov	r4, sl
 80165b8:	2205      	movs	r2, #5
 80165ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165be:	4853      	ldr	r0, [pc, #332]	@ (801670c <_vfiprintf_r+0x21c>)
 80165c0:	f7e9 fe16 	bl	80001f0 <memchr>
 80165c4:	9a04      	ldr	r2, [sp, #16]
 80165c6:	b9d8      	cbnz	r0, 8016600 <_vfiprintf_r+0x110>
 80165c8:	06d1      	lsls	r1, r2, #27
 80165ca:	bf44      	itt	mi
 80165cc:	2320      	movmi	r3, #32
 80165ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165d2:	0713      	lsls	r3, r2, #28
 80165d4:	bf44      	itt	mi
 80165d6:	232b      	movmi	r3, #43	@ 0x2b
 80165d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165dc:	f89a 3000 	ldrb.w	r3, [sl]
 80165e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80165e2:	d015      	beq.n	8016610 <_vfiprintf_r+0x120>
 80165e4:	9a07      	ldr	r2, [sp, #28]
 80165e6:	4654      	mov	r4, sl
 80165e8:	2000      	movs	r0, #0
 80165ea:	f04f 0c0a 	mov.w	ip, #10
 80165ee:	4621      	mov	r1, r4
 80165f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80165f4:	3b30      	subs	r3, #48	@ 0x30
 80165f6:	2b09      	cmp	r3, #9
 80165f8:	d94b      	bls.n	8016692 <_vfiprintf_r+0x1a2>
 80165fa:	b1b0      	cbz	r0, 801662a <_vfiprintf_r+0x13a>
 80165fc:	9207      	str	r2, [sp, #28]
 80165fe:	e014      	b.n	801662a <_vfiprintf_r+0x13a>
 8016600:	eba0 0308 	sub.w	r3, r0, r8
 8016604:	fa09 f303 	lsl.w	r3, r9, r3
 8016608:	4313      	orrs	r3, r2
 801660a:	9304      	str	r3, [sp, #16]
 801660c:	46a2      	mov	sl, r4
 801660e:	e7d2      	b.n	80165b6 <_vfiprintf_r+0xc6>
 8016610:	9b03      	ldr	r3, [sp, #12]
 8016612:	1d19      	adds	r1, r3, #4
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	9103      	str	r1, [sp, #12]
 8016618:	2b00      	cmp	r3, #0
 801661a:	bfbb      	ittet	lt
 801661c:	425b      	neglt	r3, r3
 801661e:	f042 0202 	orrlt.w	r2, r2, #2
 8016622:	9307      	strge	r3, [sp, #28]
 8016624:	9307      	strlt	r3, [sp, #28]
 8016626:	bfb8      	it	lt
 8016628:	9204      	strlt	r2, [sp, #16]
 801662a:	7823      	ldrb	r3, [r4, #0]
 801662c:	2b2e      	cmp	r3, #46	@ 0x2e
 801662e:	d10a      	bne.n	8016646 <_vfiprintf_r+0x156>
 8016630:	7863      	ldrb	r3, [r4, #1]
 8016632:	2b2a      	cmp	r3, #42	@ 0x2a
 8016634:	d132      	bne.n	801669c <_vfiprintf_r+0x1ac>
 8016636:	9b03      	ldr	r3, [sp, #12]
 8016638:	1d1a      	adds	r2, r3, #4
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	9203      	str	r2, [sp, #12]
 801663e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016642:	3402      	adds	r4, #2
 8016644:	9305      	str	r3, [sp, #20]
 8016646:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801671c <_vfiprintf_r+0x22c>
 801664a:	7821      	ldrb	r1, [r4, #0]
 801664c:	2203      	movs	r2, #3
 801664e:	4650      	mov	r0, sl
 8016650:	f7e9 fdce 	bl	80001f0 <memchr>
 8016654:	b138      	cbz	r0, 8016666 <_vfiprintf_r+0x176>
 8016656:	9b04      	ldr	r3, [sp, #16]
 8016658:	eba0 000a 	sub.w	r0, r0, sl
 801665c:	2240      	movs	r2, #64	@ 0x40
 801665e:	4082      	lsls	r2, r0
 8016660:	4313      	orrs	r3, r2
 8016662:	3401      	adds	r4, #1
 8016664:	9304      	str	r3, [sp, #16]
 8016666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801666a:	4829      	ldr	r0, [pc, #164]	@ (8016710 <_vfiprintf_r+0x220>)
 801666c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016670:	2206      	movs	r2, #6
 8016672:	f7e9 fdbd 	bl	80001f0 <memchr>
 8016676:	2800      	cmp	r0, #0
 8016678:	d03f      	beq.n	80166fa <_vfiprintf_r+0x20a>
 801667a:	4b26      	ldr	r3, [pc, #152]	@ (8016714 <_vfiprintf_r+0x224>)
 801667c:	bb1b      	cbnz	r3, 80166c6 <_vfiprintf_r+0x1d6>
 801667e:	9b03      	ldr	r3, [sp, #12]
 8016680:	3307      	adds	r3, #7
 8016682:	f023 0307 	bic.w	r3, r3, #7
 8016686:	3308      	adds	r3, #8
 8016688:	9303      	str	r3, [sp, #12]
 801668a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801668c:	443b      	add	r3, r7
 801668e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016690:	e76a      	b.n	8016568 <_vfiprintf_r+0x78>
 8016692:	fb0c 3202 	mla	r2, ip, r2, r3
 8016696:	460c      	mov	r4, r1
 8016698:	2001      	movs	r0, #1
 801669a:	e7a8      	b.n	80165ee <_vfiprintf_r+0xfe>
 801669c:	2300      	movs	r3, #0
 801669e:	3401      	adds	r4, #1
 80166a0:	9305      	str	r3, [sp, #20]
 80166a2:	4619      	mov	r1, r3
 80166a4:	f04f 0c0a 	mov.w	ip, #10
 80166a8:	4620      	mov	r0, r4
 80166aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166ae:	3a30      	subs	r2, #48	@ 0x30
 80166b0:	2a09      	cmp	r2, #9
 80166b2:	d903      	bls.n	80166bc <_vfiprintf_r+0x1cc>
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d0c6      	beq.n	8016646 <_vfiprintf_r+0x156>
 80166b8:	9105      	str	r1, [sp, #20]
 80166ba:	e7c4      	b.n	8016646 <_vfiprintf_r+0x156>
 80166bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80166c0:	4604      	mov	r4, r0
 80166c2:	2301      	movs	r3, #1
 80166c4:	e7f0      	b.n	80166a8 <_vfiprintf_r+0x1b8>
 80166c6:	ab03      	add	r3, sp, #12
 80166c8:	9300      	str	r3, [sp, #0]
 80166ca:	462a      	mov	r2, r5
 80166cc:	4b12      	ldr	r3, [pc, #72]	@ (8016718 <_vfiprintf_r+0x228>)
 80166ce:	a904      	add	r1, sp, #16
 80166d0:	4630      	mov	r0, r6
 80166d2:	f7fc fa3f 	bl	8012b54 <_printf_float>
 80166d6:	4607      	mov	r7, r0
 80166d8:	1c78      	adds	r0, r7, #1
 80166da:	d1d6      	bne.n	801668a <_vfiprintf_r+0x19a>
 80166dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80166de:	07d9      	lsls	r1, r3, #31
 80166e0:	d405      	bmi.n	80166ee <_vfiprintf_r+0x1fe>
 80166e2:	89ab      	ldrh	r3, [r5, #12]
 80166e4:	059a      	lsls	r2, r3, #22
 80166e6:	d402      	bmi.n	80166ee <_vfiprintf_r+0x1fe>
 80166e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80166ea:	f7fe f97b 	bl	80149e4 <__retarget_lock_release_recursive>
 80166ee:	89ab      	ldrh	r3, [r5, #12]
 80166f0:	065b      	lsls	r3, r3, #25
 80166f2:	f53f af1f 	bmi.w	8016534 <_vfiprintf_r+0x44>
 80166f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80166f8:	e71e      	b.n	8016538 <_vfiprintf_r+0x48>
 80166fa:	ab03      	add	r3, sp, #12
 80166fc:	9300      	str	r3, [sp, #0]
 80166fe:	462a      	mov	r2, r5
 8016700:	4b05      	ldr	r3, [pc, #20]	@ (8016718 <_vfiprintf_r+0x228>)
 8016702:	a904      	add	r1, sp, #16
 8016704:	4630      	mov	r0, r6
 8016706:	f7fc fcbd 	bl	8013084 <_printf_i>
 801670a:	e7e4      	b.n	80166d6 <_vfiprintf_r+0x1e6>
 801670c:	08018564 	.word	0x08018564
 8016710:	0801856e 	.word	0x0801856e
 8016714:	08012b55 	.word	0x08012b55
 8016718:	080164cb 	.word	0x080164cb
 801671c:	0801856a 	.word	0x0801856a

08016720 <malloc>:
 8016720:	4b02      	ldr	r3, [pc, #8]	@ (801672c <malloc+0xc>)
 8016722:	4601      	mov	r1, r0
 8016724:	6818      	ldr	r0, [r3, #0]
 8016726:	f000 b825 	b.w	8016774 <_malloc_r>
 801672a:	bf00      	nop
 801672c:	200001d4 	.word	0x200001d4

08016730 <sbrk_aligned>:
 8016730:	b570      	push	{r4, r5, r6, lr}
 8016732:	4e0f      	ldr	r6, [pc, #60]	@ (8016770 <sbrk_aligned+0x40>)
 8016734:	460c      	mov	r4, r1
 8016736:	6831      	ldr	r1, [r6, #0]
 8016738:	4605      	mov	r5, r0
 801673a:	b911      	cbnz	r1, 8016742 <sbrk_aligned+0x12>
 801673c:	f001 f9ae 	bl	8017a9c <_sbrk_r>
 8016740:	6030      	str	r0, [r6, #0]
 8016742:	4621      	mov	r1, r4
 8016744:	4628      	mov	r0, r5
 8016746:	f001 f9a9 	bl	8017a9c <_sbrk_r>
 801674a:	1c43      	adds	r3, r0, #1
 801674c:	d103      	bne.n	8016756 <sbrk_aligned+0x26>
 801674e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8016752:	4620      	mov	r0, r4
 8016754:	bd70      	pop	{r4, r5, r6, pc}
 8016756:	1cc4      	adds	r4, r0, #3
 8016758:	f024 0403 	bic.w	r4, r4, #3
 801675c:	42a0      	cmp	r0, r4
 801675e:	d0f8      	beq.n	8016752 <sbrk_aligned+0x22>
 8016760:	1a21      	subs	r1, r4, r0
 8016762:	4628      	mov	r0, r5
 8016764:	f001 f99a 	bl	8017a9c <_sbrk_r>
 8016768:	3001      	adds	r0, #1
 801676a:	d1f2      	bne.n	8016752 <sbrk_aligned+0x22>
 801676c:	e7ef      	b.n	801674e <sbrk_aligned+0x1e>
 801676e:	bf00      	nop
 8016770:	200067b0 	.word	0x200067b0

08016774 <_malloc_r>:
 8016774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016778:	1ccd      	adds	r5, r1, #3
 801677a:	f025 0503 	bic.w	r5, r5, #3
 801677e:	3508      	adds	r5, #8
 8016780:	2d0c      	cmp	r5, #12
 8016782:	bf38      	it	cc
 8016784:	250c      	movcc	r5, #12
 8016786:	2d00      	cmp	r5, #0
 8016788:	4606      	mov	r6, r0
 801678a:	db01      	blt.n	8016790 <_malloc_r+0x1c>
 801678c:	42a9      	cmp	r1, r5
 801678e:	d904      	bls.n	801679a <_malloc_r+0x26>
 8016790:	230c      	movs	r3, #12
 8016792:	6033      	str	r3, [r6, #0]
 8016794:	2000      	movs	r0, #0
 8016796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801679a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016870 <_malloc_r+0xfc>
 801679e:	f000 faaf 	bl	8016d00 <__malloc_lock>
 80167a2:	f8d8 3000 	ldr.w	r3, [r8]
 80167a6:	461c      	mov	r4, r3
 80167a8:	bb44      	cbnz	r4, 80167fc <_malloc_r+0x88>
 80167aa:	4629      	mov	r1, r5
 80167ac:	4630      	mov	r0, r6
 80167ae:	f7ff ffbf 	bl	8016730 <sbrk_aligned>
 80167b2:	1c43      	adds	r3, r0, #1
 80167b4:	4604      	mov	r4, r0
 80167b6:	d158      	bne.n	801686a <_malloc_r+0xf6>
 80167b8:	f8d8 4000 	ldr.w	r4, [r8]
 80167bc:	4627      	mov	r7, r4
 80167be:	2f00      	cmp	r7, #0
 80167c0:	d143      	bne.n	801684a <_malloc_r+0xd6>
 80167c2:	2c00      	cmp	r4, #0
 80167c4:	d04b      	beq.n	801685e <_malloc_r+0xea>
 80167c6:	6823      	ldr	r3, [r4, #0]
 80167c8:	4639      	mov	r1, r7
 80167ca:	4630      	mov	r0, r6
 80167cc:	eb04 0903 	add.w	r9, r4, r3
 80167d0:	f001 f964 	bl	8017a9c <_sbrk_r>
 80167d4:	4581      	cmp	r9, r0
 80167d6:	d142      	bne.n	801685e <_malloc_r+0xea>
 80167d8:	6821      	ldr	r1, [r4, #0]
 80167da:	1a6d      	subs	r5, r5, r1
 80167dc:	4629      	mov	r1, r5
 80167de:	4630      	mov	r0, r6
 80167e0:	f7ff ffa6 	bl	8016730 <sbrk_aligned>
 80167e4:	3001      	adds	r0, #1
 80167e6:	d03a      	beq.n	801685e <_malloc_r+0xea>
 80167e8:	6823      	ldr	r3, [r4, #0]
 80167ea:	442b      	add	r3, r5
 80167ec:	6023      	str	r3, [r4, #0]
 80167ee:	f8d8 3000 	ldr.w	r3, [r8]
 80167f2:	685a      	ldr	r2, [r3, #4]
 80167f4:	bb62      	cbnz	r2, 8016850 <_malloc_r+0xdc>
 80167f6:	f8c8 7000 	str.w	r7, [r8]
 80167fa:	e00f      	b.n	801681c <_malloc_r+0xa8>
 80167fc:	6822      	ldr	r2, [r4, #0]
 80167fe:	1b52      	subs	r2, r2, r5
 8016800:	d420      	bmi.n	8016844 <_malloc_r+0xd0>
 8016802:	2a0b      	cmp	r2, #11
 8016804:	d917      	bls.n	8016836 <_malloc_r+0xc2>
 8016806:	1961      	adds	r1, r4, r5
 8016808:	42a3      	cmp	r3, r4
 801680a:	6025      	str	r5, [r4, #0]
 801680c:	bf18      	it	ne
 801680e:	6059      	strne	r1, [r3, #4]
 8016810:	6863      	ldr	r3, [r4, #4]
 8016812:	bf08      	it	eq
 8016814:	f8c8 1000 	streq.w	r1, [r8]
 8016818:	5162      	str	r2, [r4, r5]
 801681a:	604b      	str	r3, [r1, #4]
 801681c:	4630      	mov	r0, r6
 801681e:	f000 fa75 	bl	8016d0c <__malloc_unlock>
 8016822:	f104 000b 	add.w	r0, r4, #11
 8016826:	1d23      	adds	r3, r4, #4
 8016828:	f020 0007 	bic.w	r0, r0, #7
 801682c:	1ac2      	subs	r2, r0, r3
 801682e:	bf1c      	itt	ne
 8016830:	1a1b      	subne	r3, r3, r0
 8016832:	50a3      	strne	r3, [r4, r2]
 8016834:	e7af      	b.n	8016796 <_malloc_r+0x22>
 8016836:	6862      	ldr	r2, [r4, #4]
 8016838:	42a3      	cmp	r3, r4
 801683a:	bf0c      	ite	eq
 801683c:	f8c8 2000 	streq.w	r2, [r8]
 8016840:	605a      	strne	r2, [r3, #4]
 8016842:	e7eb      	b.n	801681c <_malloc_r+0xa8>
 8016844:	4623      	mov	r3, r4
 8016846:	6864      	ldr	r4, [r4, #4]
 8016848:	e7ae      	b.n	80167a8 <_malloc_r+0x34>
 801684a:	463c      	mov	r4, r7
 801684c:	687f      	ldr	r7, [r7, #4]
 801684e:	e7b6      	b.n	80167be <_malloc_r+0x4a>
 8016850:	461a      	mov	r2, r3
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	42a3      	cmp	r3, r4
 8016856:	d1fb      	bne.n	8016850 <_malloc_r+0xdc>
 8016858:	2300      	movs	r3, #0
 801685a:	6053      	str	r3, [r2, #4]
 801685c:	e7de      	b.n	801681c <_malloc_r+0xa8>
 801685e:	230c      	movs	r3, #12
 8016860:	6033      	str	r3, [r6, #0]
 8016862:	4630      	mov	r0, r6
 8016864:	f000 fa52 	bl	8016d0c <__malloc_unlock>
 8016868:	e794      	b.n	8016794 <_malloc_r+0x20>
 801686a:	6005      	str	r5, [r0, #0]
 801686c:	e7d6      	b.n	801681c <_malloc_r+0xa8>
 801686e:	bf00      	nop
 8016870:	200067b4 	.word	0x200067b4

08016874 <__ascii_mbtowc>:
 8016874:	b082      	sub	sp, #8
 8016876:	b901      	cbnz	r1, 801687a <__ascii_mbtowc+0x6>
 8016878:	a901      	add	r1, sp, #4
 801687a:	b142      	cbz	r2, 801688e <__ascii_mbtowc+0x1a>
 801687c:	b14b      	cbz	r3, 8016892 <__ascii_mbtowc+0x1e>
 801687e:	7813      	ldrb	r3, [r2, #0]
 8016880:	600b      	str	r3, [r1, #0]
 8016882:	7812      	ldrb	r2, [r2, #0]
 8016884:	1e10      	subs	r0, r2, #0
 8016886:	bf18      	it	ne
 8016888:	2001      	movne	r0, #1
 801688a:	b002      	add	sp, #8
 801688c:	4770      	bx	lr
 801688e:	4610      	mov	r0, r2
 8016890:	e7fb      	b.n	801688a <__ascii_mbtowc+0x16>
 8016892:	f06f 0001 	mvn.w	r0, #1
 8016896:	e7f8      	b.n	801688a <__ascii_mbtowc+0x16>

08016898 <_scanf_chars>:
 8016898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801689c:	4615      	mov	r5, r2
 801689e:	688a      	ldr	r2, [r1, #8]
 80168a0:	4680      	mov	r8, r0
 80168a2:	460c      	mov	r4, r1
 80168a4:	b932      	cbnz	r2, 80168b4 <_scanf_chars+0x1c>
 80168a6:	698a      	ldr	r2, [r1, #24]
 80168a8:	2a00      	cmp	r2, #0
 80168aa:	bf14      	ite	ne
 80168ac:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80168b0:	2201      	moveq	r2, #1
 80168b2:	608a      	str	r2, [r1, #8]
 80168b4:	6822      	ldr	r2, [r4, #0]
 80168b6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8016948 <_scanf_chars+0xb0>
 80168ba:	06d1      	lsls	r1, r2, #27
 80168bc:	bf5f      	itttt	pl
 80168be:	681a      	ldrpl	r2, [r3, #0]
 80168c0:	1d11      	addpl	r1, r2, #4
 80168c2:	6019      	strpl	r1, [r3, #0]
 80168c4:	6816      	ldrpl	r6, [r2, #0]
 80168c6:	2700      	movs	r7, #0
 80168c8:	69a0      	ldr	r0, [r4, #24]
 80168ca:	b188      	cbz	r0, 80168f0 <_scanf_chars+0x58>
 80168cc:	2801      	cmp	r0, #1
 80168ce:	d107      	bne.n	80168e0 <_scanf_chars+0x48>
 80168d0:	682b      	ldr	r3, [r5, #0]
 80168d2:	781a      	ldrb	r2, [r3, #0]
 80168d4:	6963      	ldr	r3, [r4, #20]
 80168d6:	5c9b      	ldrb	r3, [r3, r2]
 80168d8:	b953      	cbnz	r3, 80168f0 <_scanf_chars+0x58>
 80168da:	2f00      	cmp	r7, #0
 80168dc:	d031      	beq.n	8016942 <_scanf_chars+0xaa>
 80168de:	e022      	b.n	8016926 <_scanf_chars+0x8e>
 80168e0:	2802      	cmp	r0, #2
 80168e2:	d120      	bne.n	8016926 <_scanf_chars+0x8e>
 80168e4:	682b      	ldr	r3, [r5, #0]
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80168ec:	071b      	lsls	r3, r3, #28
 80168ee:	d41a      	bmi.n	8016926 <_scanf_chars+0x8e>
 80168f0:	6823      	ldr	r3, [r4, #0]
 80168f2:	06da      	lsls	r2, r3, #27
 80168f4:	bf5e      	ittt	pl
 80168f6:	682b      	ldrpl	r3, [r5, #0]
 80168f8:	781b      	ldrbpl	r3, [r3, #0]
 80168fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80168fe:	682a      	ldr	r2, [r5, #0]
 8016900:	686b      	ldr	r3, [r5, #4]
 8016902:	3201      	adds	r2, #1
 8016904:	602a      	str	r2, [r5, #0]
 8016906:	68a2      	ldr	r2, [r4, #8]
 8016908:	3b01      	subs	r3, #1
 801690a:	3a01      	subs	r2, #1
 801690c:	606b      	str	r3, [r5, #4]
 801690e:	3701      	adds	r7, #1
 8016910:	60a2      	str	r2, [r4, #8]
 8016912:	b142      	cbz	r2, 8016926 <_scanf_chars+0x8e>
 8016914:	2b00      	cmp	r3, #0
 8016916:	dcd7      	bgt.n	80168c8 <_scanf_chars+0x30>
 8016918:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801691c:	4629      	mov	r1, r5
 801691e:	4640      	mov	r0, r8
 8016920:	4798      	blx	r3
 8016922:	2800      	cmp	r0, #0
 8016924:	d0d0      	beq.n	80168c8 <_scanf_chars+0x30>
 8016926:	6823      	ldr	r3, [r4, #0]
 8016928:	f013 0310 	ands.w	r3, r3, #16
 801692c:	d105      	bne.n	801693a <_scanf_chars+0xa2>
 801692e:	68e2      	ldr	r2, [r4, #12]
 8016930:	3201      	adds	r2, #1
 8016932:	60e2      	str	r2, [r4, #12]
 8016934:	69a2      	ldr	r2, [r4, #24]
 8016936:	b102      	cbz	r2, 801693a <_scanf_chars+0xa2>
 8016938:	7033      	strb	r3, [r6, #0]
 801693a:	6923      	ldr	r3, [r4, #16]
 801693c:	443b      	add	r3, r7
 801693e:	6123      	str	r3, [r4, #16]
 8016940:	2000      	movs	r0, #0
 8016942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016946:	bf00      	nop
 8016948:	08018641 	.word	0x08018641

0801694c <_scanf_i>:
 801694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016950:	4698      	mov	r8, r3
 8016952:	4b74      	ldr	r3, [pc, #464]	@ (8016b24 <_scanf_i+0x1d8>)
 8016954:	460c      	mov	r4, r1
 8016956:	4682      	mov	sl, r0
 8016958:	4616      	mov	r6, r2
 801695a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801695e:	b087      	sub	sp, #28
 8016960:	ab03      	add	r3, sp, #12
 8016962:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016966:	4b70      	ldr	r3, [pc, #448]	@ (8016b28 <_scanf_i+0x1dc>)
 8016968:	69a1      	ldr	r1, [r4, #24]
 801696a:	4a70      	ldr	r2, [pc, #448]	@ (8016b2c <_scanf_i+0x1e0>)
 801696c:	2903      	cmp	r1, #3
 801696e:	bf08      	it	eq
 8016970:	461a      	moveq	r2, r3
 8016972:	68a3      	ldr	r3, [r4, #8]
 8016974:	9201      	str	r2, [sp, #4]
 8016976:	1e5a      	subs	r2, r3, #1
 8016978:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801697c:	bf88      	it	hi
 801697e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016982:	4627      	mov	r7, r4
 8016984:	bf82      	ittt	hi
 8016986:	eb03 0905 	addhi.w	r9, r3, r5
 801698a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801698e:	60a3      	strhi	r3, [r4, #8]
 8016990:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016994:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016998:	bf98      	it	ls
 801699a:	f04f 0900 	movls.w	r9, #0
 801699e:	6023      	str	r3, [r4, #0]
 80169a0:	463d      	mov	r5, r7
 80169a2:	f04f 0b00 	mov.w	fp, #0
 80169a6:	6831      	ldr	r1, [r6, #0]
 80169a8:	ab03      	add	r3, sp, #12
 80169aa:	7809      	ldrb	r1, [r1, #0]
 80169ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80169b0:	2202      	movs	r2, #2
 80169b2:	f7e9 fc1d 	bl	80001f0 <memchr>
 80169b6:	b328      	cbz	r0, 8016a04 <_scanf_i+0xb8>
 80169b8:	f1bb 0f01 	cmp.w	fp, #1
 80169bc:	d159      	bne.n	8016a72 <_scanf_i+0x126>
 80169be:	6862      	ldr	r2, [r4, #4]
 80169c0:	b92a      	cbnz	r2, 80169ce <_scanf_i+0x82>
 80169c2:	6822      	ldr	r2, [r4, #0]
 80169c4:	2108      	movs	r1, #8
 80169c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80169ca:	6061      	str	r1, [r4, #4]
 80169cc:	6022      	str	r2, [r4, #0]
 80169ce:	6822      	ldr	r2, [r4, #0]
 80169d0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80169d4:	6022      	str	r2, [r4, #0]
 80169d6:	68a2      	ldr	r2, [r4, #8]
 80169d8:	1e51      	subs	r1, r2, #1
 80169da:	60a1      	str	r1, [r4, #8]
 80169dc:	b192      	cbz	r2, 8016a04 <_scanf_i+0xb8>
 80169de:	6832      	ldr	r2, [r6, #0]
 80169e0:	1c51      	adds	r1, r2, #1
 80169e2:	6031      	str	r1, [r6, #0]
 80169e4:	7812      	ldrb	r2, [r2, #0]
 80169e6:	f805 2b01 	strb.w	r2, [r5], #1
 80169ea:	6872      	ldr	r2, [r6, #4]
 80169ec:	3a01      	subs	r2, #1
 80169ee:	2a00      	cmp	r2, #0
 80169f0:	6072      	str	r2, [r6, #4]
 80169f2:	dc07      	bgt.n	8016a04 <_scanf_i+0xb8>
 80169f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80169f8:	4631      	mov	r1, r6
 80169fa:	4650      	mov	r0, sl
 80169fc:	4790      	blx	r2
 80169fe:	2800      	cmp	r0, #0
 8016a00:	f040 8085 	bne.w	8016b0e <_scanf_i+0x1c2>
 8016a04:	f10b 0b01 	add.w	fp, fp, #1
 8016a08:	f1bb 0f03 	cmp.w	fp, #3
 8016a0c:	d1cb      	bne.n	80169a6 <_scanf_i+0x5a>
 8016a0e:	6863      	ldr	r3, [r4, #4]
 8016a10:	b90b      	cbnz	r3, 8016a16 <_scanf_i+0xca>
 8016a12:	230a      	movs	r3, #10
 8016a14:	6063      	str	r3, [r4, #4]
 8016a16:	6863      	ldr	r3, [r4, #4]
 8016a18:	4945      	ldr	r1, [pc, #276]	@ (8016b30 <_scanf_i+0x1e4>)
 8016a1a:	6960      	ldr	r0, [r4, #20]
 8016a1c:	1ac9      	subs	r1, r1, r3
 8016a1e:	f000 f889 	bl	8016b34 <__sccl>
 8016a22:	f04f 0b00 	mov.w	fp, #0
 8016a26:	68a3      	ldr	r3, [r4, #8]
 8016a28:	6822      	ldr	r2, [r4, #0]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d03d      	beq.n	8016aaa <_scanf_i+0x15e>
 8016a2e:	6831      	ldr	r1, [r6, #0]
 8016a30:	6960      	ldr	r0, [r4, #20]
 8016a32:	f891 c000 	ldrb.w	ip, [r1]
 8016a36:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016a3a:	2800      	cmp	r0, #0
 8016a3c:	d035      	beq.n	8016aaa <_scanf_i+0x15e>
 8016a3e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8016a42:	d124      	bne.n	8016a8e <_scanf_i+0x142>
 8016a44:	0510      	lsls	r0, r2, #20
 8016a46:	d522      	bpl.n	8016a8e <_scanf_i+0x142>
 8016a48:	f10b 0b01 	add.w	fp, fp, #1
 8016a4c:	f1b9 0f00 	cmp.w	r9, #0
 8016a50:	d003      	beq.n	8016a5a <_scanf_i+0x10e>
 8016a52:	3301      	adds	r3, #1
 8016a54:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8016a58:	60a3      	str	r3, [r4, #8]
 8016a5a:	6873      	ldr	r3, [r6, #4]
 8016a5c:	3b01      	subs	r3, #1
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	6073      	str	r3, [r6, #4]
 8016a62:	dd1b      	ble.n	8016a9c <_scanf_i+0x150>
 8016a64:	6833      	ldr	r3, [r6, #0]
 8016a66:	3301      	adds	r3, #1
 8016a68:	6033      	str	r3, [r6, #0]
 8016a6a:	68a3      	ldr	r3, [r4, #8]
 8016a6c:	3b01      	subs	r3, #1
 8016a6e:	60a3      	str	r3, [r4, #8]
 8016a70:	e7d9      	b.n	8016a26 <_scanf_i+0xda>
 8016a72:	f1bb 0f02 	cmp.w	fp, #2
 8016a76:	d1ae      	bne.n	80169d6 <_scanf_i+0x8a>
 8016a78:	6822      	ldr	r2, [r4, #0]
 8016a7a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8016a7e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8016a82:	d1c4      	bne.n	8016a0e <_scanf_i+0xc2>
 8016a84:	2110      	movs	r1, #16
 8016a86:	6061      	str	r1, [r4, #4]
 8016a88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016a8c:	e7a2      	b.n	80169d4 <_scanf_i+0x88>
 8016a8e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8016a92:	6022      	str	r2, [r4, #0]
 8016a94:	780b      	ldrb	r3, [r1, #0]
 8016a96:	f805 3b01 	strb.w	r3, [r5], #1
 8016a9a:	e7de      	b.n	8016a5a <_scanf_i+0x10e>
 8016a9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016aa0:	4631      	mov	r1, r6
 8016aa2:	4650      	mov	r0, sl
 8016aa4:	4798      	blx	r3
 8016aa6:	2800      	cmp	r0, #0
 8016aa8:	d0df      	beq.n	8016a6a <_scanf_i+0x11e>
 8016aaa:	6823      	ldr	r3, [r4, #0]
 8016aac:	05d9      	lsls	r1, r3, #23
 8016aae:	d50d      	bpl.n	8016acc <_scanf_i+0x180>
 8016ab0:	42bd      	cmp	r5, r7
 8016ab2:	d909      	bls.n	8016ac8 <_scanf_i+0x17c>
 8016ab4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016abc:	4632      	mov	r2, r6
 8016abe:	4650      	mov	r0, sl
 8016ac0:	4798      	blx	r3
 8016ac2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8016ac6:	464d      	mov	r5, r9
 8016ac8:	42bd      	cmp	r5, r7
 8016aca:	d028      	beq.n	8016b1e <_scanf_i+0x1d2>
 8016acc:	6822      	ldr	r2, [r4, #0]
 8016ace:	f012 0210 	ands.w	r2, r2, #16
 8016ad2:	d113      	bne.n	8016afc <_scanf_i+0x1b0>
 8016ad4:	702a      	strb	r2, [r5, #0]
 8016ad6:	6863      	ldr	r3, [r4, #4]
 8016ad8:	9e01      	ldr	r6, [sp, #4]
 8016ada:	4639      	mov	r1, r7
 8016adc:	4650      	mov	r0, sl
 8016ade:	47b0      	blx	r6
 8016ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8016ae4:	6821      	ldr	r1, [r4, #0]
 8016ae6:	1d1a      	adds	r2, r3, #4
 8016ae8:	f8c8 2000 	str.w	r2, [r8]
 8016aec:	f011 0f20 	tst.w	r1, #32
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	d00f      	beq.n	8016b14 <_scanf_i+0x1c8>
 8016af4:	6018      	str	r0, [r3, #0]
 8016af6:	68e3      	ldr	r3, [r4, #12]
 8016af8:	3301      	adds	r3, #1
 8016afa:	60e3      	str	r3, [r4, #12]
 8016afc:	6923      	ldr	r3, [r4, #16]
 8016afe:	1bed      	subs	r5, r5, r7
 8016b00:	445d      	add	r5, fp
 8016b02:	442b      	add	r3, r5
 8016b04:	6123      	str	r3, [r4, #16]
 8016b06:	2000      	movs	r0, #0
 8016b08:	b007      	add	sp, #28
 8016b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b0e:	f04f 0b00 	mov.w	fp, #0
 8016b12:	e7ca      	b.n	8016aaa <_scanf_i+0x15e>
 8016b14:	07ca      	lsls	r2, r1, #31
 8016b16:	bf4c      	ite	mi
 8016b18:	8018      	strhmi	r0, [r3, #0]
 8016b1a:	6018      	strpl	r0, [r3, #0]
 8016b1c:	e7eb      	b.n	8016af6 <_scanf_i+0x1aa>
 8016b1e:	2001      	movs	r0, #1
 8016b20:	e7f2      	b.n	8016b08 <_scanf_i+0x1bc>
 8016b22:	bf00      	nop
 8016b24:	080181b4 	.word	0x080181b4
 8016b28:	080146d9 	.word	0x080146d9
 8016b2c:	080178b9 	.word	0x080178b9
 8016b30:	08018585 	.word	0x08018585

08016b34 <__sccl>:
 8016b34:	b570      	push	{r4, r5, r6, lr}
 8016b36:	780b      	ldrb	r3, [r1, #0]
 8016b38:	4604      	mov	r4, r0
 8016b3a:	2b5e      	cmp	r3, #94	@ 0x5e
 8016b3c:	bf0b      	itete	eq
 8016b3e:	784b      	ldrbeq	r3, [r1, #1]
 8016b40:	1c4a      	addne	r2, r1, #1
 8016b42:	1c8a      	addeq	r2, r1, #2
 8016b44:	2100      	movne	r1, #0
 8016b46:	bf08      	it	eq
 8016b48:	2101      	moveq	r1, #1
 8016b4a:	3801      	subs	r0, #1
 8016b4c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016b50:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016b54:	42a8      	cmp	r0, r5
 8016b56:	d1fb      	bne.n	8016b50 <__sccl+0x1c>
 8016b58:	b90b      	cbnz	r3, 8016b5e <__sccl+0x2a>
 8016b5a:	1e50      	subs	r0, r2, #1
 8016b5c:	bd70      	pop	{r4, r5, r6, pc}
 8016b5e:	f081 0101 	eor.w	r1, r1, #1
 8016b62:	54e1      	strb	r1, [r4, r3]
 8016b64:	4610      	mov	r0, r2
 8016b66:	4602      	mov	r2, r0
 8016b68:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016b6c:	2d2d      	cmp	r5, #45	@ 0x2d
 8016b6e:	d005      	beq.n	8016b7c <__sccl+0x48>
 8016b70:	2d5d      	cmp	r5, #93	@ 0x5d
 8016b72:	d016      	beq.n	8016ba2 <__sccl+0x6e>
 8016b74:	2d00      	cmp	r5, #0
 8016b76:	d0f1      	beq.n	8016b5c <__sccl+0x28>
 8016b78:	462b      	mov	r3, r5
 8016b7a:	e7f2      	b.n	8016b62 <__sccl+0x2e>
 8016b7c:	7846      	ldrb	r6, [r0, #1]
 8016b7e:	2e5d      	cmp	r6, #93	@ 0x5d
 8016b80:	d0fa      	beq.n	8016b78 <__sccl+0x44>
 8016b82:	42b3      	cmp	r3, r6
 8016b84:	dcf8      	bgt.n	8016b78 <__sccl+0x44>
 8016b86:	3002      	adds	r0, #2
 8016b88:	461a      	mov	r2, r3
 8016b8a:	3201      	adds	r2, #1
 8016b8c:	4296      	cmp	r6, r2
 8016b8e:	54a1      	strb	r1, [r4, r2]
 8016b90:	dcfb      	bgt.n	8016b8a <__sccl+0x56>
 8016b92:	1af2      	subs	r2, r6, r3
 8016b94:	3a01      	subs	r2, #1
 8016b96:	1c5d      	adds	r5, r3, #1
 8016b98:	42b3      	cmp	r3, r6
 8016b9a:	bfa8      	it	ge
 8016b9c:	2200      	movge	r2, #0
 8016b9e:	18ab      	adds	r3, r5, r2
 8016ba0:	e7e1      	b.n	8016b66 <__sccl+0x32>
 8016ba2:	4610      	mov	r0, r2
 8016ba4:	e7da      	b.n	8016b5c <__sccl+0x28>
	...

08016ba8 <__sflush_r>:
 8016ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bb0:	0716      	lsls	r6, r2, #28
 8016bb2:	4605      	mov	r5, r0
 8016bb4:	460c      	mov	r4, r1
 8016bb6:	d454      	bmi.n	8016c62 <__sflush_r+0xba>
 8016bb8:	684b      	ldr	r3, [r1, #4]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	dc02      	bgt.n	8016bc4 <__sflush_r+0x1c>
 8016bbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	dd48      	ble.n	8016c56 <__sflush_r+0xae>
 8016bc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016bc6:	2e00      	cmp	r6, #0
 8016bc8:	d045      	beq.n	8016c56 <__sflush_r+0xae>
 8016bca:	2300      	movs	r3, #0
 8016bcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016bd0:	682f      	ldr	r7, [r5, #0]
 8016bd2:	6a21      	ldr	r1, [r4, #32]
 8016bd4:	602b      	str	r3, [r5, #0]
 8016bd6:	d030      	beq.n	8016c3a <__sflush_r+0x92>
 8016bd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016bda:	89a3      	ldrh	r3, [r4, #12]
 8016bdc:	0759      	lsls	r1, r3, #29
 8016bde:	d505      	bpl.n	8016bec <__sflush_r+0x44>
 8016be0:	6863      	ldr	r3, [r4, #4]
 8016be2:	1ad2      	subs	r2, r2, r3
 8016be4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016be6:	b10b      	cbz	r3, 8016bec <__sflush_r+0x44>
 8016be8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016bea:	1ad2      	subs	r2, r2, r3
 8016bec:	2300      	movs	r3, #0
 8016bee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016bf0:	6a21      	ldr	r1, [r4, #32]
 8016bf2:	4628      	mov	r0, r5
 8016bf4:	47b0      	blx	r6
 8016bf6:	1c43      	adds	r3, r0, #1
 8016bf8:	89a3      	ldrh	r3, [r4, #12]
 8016bfa:	d106      	bne.n	8016c0a <__sflush_r+0x62>
 8016bfc:	6829      	ldr	r1, [r5, #0]
 8016bfe:	291d      	cmp	r1, #29
 8016c00:	d82b      	bhi.n	8016c5a <__sflush_r+0xb2>
 8016c02:	4a2a      	ldr	r2, [pc, #168]	@ (8016cac <__sflush_r+0x104>)
 8016c04:	40ca      	lsrs	r2, r1
 8016c06:	07d6      	lsls	r6, r2, #31
 8016c08:	d527      	bpl.n	8016c5a <__sflush_r+0xb2>
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	6062      	str	r2, [r4, #4]
 8016c0e:	04d9      	lsls	r1, r3, #19
 8016c10:	6922      	ldr	r2, [r4, #16]
 8016c12:	6022      	str	r2, [r4, #0]
 8016c14:	d504      	bpl.n	8016c20 <__sflush_r+0x78>
 8016c16:	1c42      	adds	r2, r0, #1
 8016c18:	d101      	bne.n	8016c1e <__sflush_r+0x76>
 8016c1a:	682b      	ldr	r3, [r5, #0]
 8016c1c:	b903      	cbnz	r3, 8016c20 <__sflush_r+0x78>
 8016c1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016c22:	602f      	str	r7, [r5, #0]
 8016c24:	b1b9      	cbz	r1, 8016c56 <__sflush_r+0xae>
 8016c26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016c2a:	4299      	cmp	r1, r3
 8016c2c:	d002      	beq.n	8016c34 <__sflush_r+0x8c>
 8016c2e:	4628      	mov	r0, r5
 8016c30:	f7fe fd8a 	bl	8015748 <_free_r>
 8016c34:	2300      	movs	r3, #0
 8016c36:	6363      	str	r3, [r4, #52]	@ 0x34
 8016c38:	e00d      	b.n	8016c56 <__sflush_r+0xae>
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	4628      	mov	r0, r5
 8016c3e:	47b0      	blx	r6
 8016c40:	4602      	mov	r2, r0
 8016c42:	1c50      	adds	r0, r2, #1
 8016c44:	d1c9      	bne.n	8016bda <__sflush_r+0x32>
 8016c46:	682b      	ldr	r3, [r5, #0]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d0c6      	beq.n	8016bda <__sflush_r+0x32>
 8016c4c:	2b1d      	cmp	r3, #29
 8016c4e:	d001      	beq.n	8016c54 <__sflush_r+0xac>
 8016c50:	2b16      	cmp	r3, #22
 8016c52:	d11e      	bne.n	8016c92 <__sflush_r+0xea>
 8016c54:	602f      	str	r7, [r5, #0]
 8016c56:	2000      	movs	r0, #0
 8016c58:	e022      	b.n	8016ca0 <__sflush_r+0xf8>
 8016c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c5e:	b21b      	sxth	r3, r3
 8016c60:	e01b      	b.n	8016c9a <__sflush_r+0xf2>
 8016c62:	690f      	ldr	r7, [r1, #16]
 8016c64:	2f00      	cmp	r7, #0
 8016c66:	d0f6      	beq.n	8016c56 <__sflush_r+0xae>
 8016c68:	0793      	lsls	r3, r2, #30
 8016c6a:	680e      	ldr	r6, [r1, #0]
 8016c6c:	bf08      	it	eq
 8016c6e:	694b      	ldreq	r3, [r1, #20]
 8016c70:	600f      	str	r7, [r1, #0]
 8016c72:	bf18      	it	ne
 8016c74:	2300      	movne	r3, #0
 8016c76:	eba6 0807 	sub.w	r8, r6, r7
 8016c7a:	608b      	str	r3, [r1, #8]
 8016c7c:	f1b8 0f00 	cmp.w	r8, #0
 8016c80:	dde9      	ble.n	8016c56 <__sflush_r+0xae>
 8016c82:	6a21      	ldr	r1, [r4, #32]
 8016c84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016c86:	4643      	mov	r3, r8
 8016c88:	463a      	mov	r2, r7
 8016c8a:	4628      	mov	r0, r5
 8016c8c:	47b0      	blx	r6
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	dc08      	bgt.n	8016ca4 <__sflush_r+0xfc>
 8016c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c9a:	81a3      	strh	r3, [r4, #12]
 8016c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ca4:	4407      	add	r7, r0
 8016ca6:	eba8 0800 	sub.w	r8, r8, r0
 8016caa:	e7e7      	b.n	8016c7c <__sflush_r+0xd4>
 8016cac:	20400001 	.word	0x20400001

08016cb0 <_fflush_r>:
 8016cb0:	b538      	push	{r3, r4, r5, lr}
 8016cb2:	690b      	ldr	r3, [r1, #16]
 8016cb4:	4605      	mov	r5, r0
 8016cb6:	460c      	mov	r4, r1
 8016cb8:	b913      	cbnz	r3, 8016cc0 <_fflush_r+0x10>
 8016cba:	2500      	movs	r5, #0
 8016cbc:	4628      	mov	r0, r5
 8016cbe:	bd38      	pop	{r3, r4, r5, pc}
 8016cc0:	b118      	cbz	r0, 8016cca <_fflush_r+0x1a>
 8016cc2:	6a03      	ldr	r3, [r0, #32]
 8016cc4:	b90b      	cbnz	r3, 8016cca <_fflush_r+0x1a>
 8016cc6:	f7fc fe5f 	bl	8013988 <__sinit>
 8016cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d0f3      	beq.n	8016cba <_fflush_r+0xa>
 8016cd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016cd4:	07d0      	lsls	r0, r2, #31
 8016cd6:	d404      	bmi.n	8016ce2 <_fflush_r+0x32>
 8016cd8:	0599      	lsls	r1, r3, #22
 8016cda:	d402      	bmi.n	8016ce2 <_fflush_r+0x32>
 8016cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016cde:	f7fd fe80 	bl	80149e2 <__retarget_lock_acquire_recursive>
 8016ce2:	4628      	mov	r0, r5
 8016ce4:	4621      	mov	r1, r4
 8016ce6:	f7ff ff5f 	bl	8016ba8 <__sflush_r>
 8016cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016cec:	07da      	lsls	r2, r3, #31
 8016cee:	4605      	mov	r5, r0
 8016cf0:	d4e4      	bmi.n	8016cbc <_fflush_r+0xc>
 8016cf2:	89a3      	ldrh	r3, [r4, #12]
 8016cf4:	059b      	lsls	r3, r3, #22
 8016cf6:	d4e1      	bmi.n	8016cbc <_fflush_r+0xc>
 8016cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016cfa:	f7fd fe73 	bl	80149e4 <__retarget_lock_release_recursive>
 8016cfe:	e7dd      	b.n	8016cbc <_fflush_r+0xc>

08016d00 <__malloc_lock>:
 8016d00:	4801      	ldr	r0, [pc, #4]	@ (8016d08 <__malloc_lock+0x8>)
 8016d02:	f7fd be6e 	b.w	80149e2 <__retarget_lock_acquire_recursive>
 8016d06:	bf00      	nop
 8016d08:	200067a8 	.word	0x200067a8

08016d0c <__malloc_unlock>:
 8016d0c:	4801      	ldr	r0, [pc, #4]	@ (8016d14 <__malloc_unlock+0x8>)
 8016d0e:	f7fd be69 	b.w	80149e4 <__retarget_lock_release_recursive>
 8016d12:	bf00      	nop
 8016d14:	200067a8 	.word	0x200067a8

08016d18 <_Balloc>:
 8016d18:	b570      	push	{r4, r5, r6, lr}
 8016d1a:	69c6      	ldr	r6, [r0, #28]
 8016d1c:	4604      	mov	r4, r0
 8016d1e:	460d      	mov	r5, r1
 8016d20:	b976      	cbnz	r6, 8016d40 <_Balloc+0x28>
 8016d22:	2010      	movs	r0, #16
 8016d24:	f7ff fcfc 	bl	8016720 <malloc>
 8016d28:	4602      	mov	r2, r0
 8016d2a:	61e0      	str	r0, [r4, #28]
 8016d2c:	b920      	cbnz	r0, 8016d38 <_Balloc+0x20>
 8016d2e:	4b18      	ldr	r3, [pc, #96]	@ (8016d90 <_Balloc+0x78>)
 8016d30:	4818      	ldr	r0, [pc, #96]	@ (8016d94 <_Balloc+0x7c>)
 8016d32:	216b      	movs	r1, #107	@ 0x6b
 8016d34:	f7fd fe92 	bl	8014a5c <__assert_func>
 8016d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016d3c:	6006      	str	r6, [r0, #0]
 8016d3e:	60c6      	str	r6, [r0, #12]
 8016d40:	69e6      	ldr	r6, [r4, #28]
 8016d42:	68f3      	ldr	r3, [r6, #12]
 8016d44:	b183      	cbz	r3, 8016d68 <_Balloc+0x50>
 8016d46:	69e3      	ldr	r3, [r4, #28]
 8016d48:	68db      	ldr	r3, [r3, #12]
 8016d4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016d4e:	b9b8      	cbnz	r0, 8016d80 <_Balloc+0x68>
 8016d50:	2101      	movs	r1, #1
 8016d52:	fa01 f605 	lsl.w	r6, r1, r5
 8016d56:	1d72      	adds	r2, r6, #5
 8016d58:	0092      	lsls	r2, r2, #2
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	f000 fec7 	bl	8017aee <_calloc_r>
 8016d60:	b160      	cbz	r0, 8016d7c <_Balloc+0x64>
 8016d62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016d66:	e00e      	b.n	8016d86 <_Balloc+0x6e>
 8016d68:	2221      	movs	r2, #33	@ 0x21
 8016d6a:	2104      	movs	r1, #4
 8016d6c:	4620      	mov	r0, r4
 8016d6e:	f000 febe 	bl	8017aee <_calloc_r>
 8016d72:	69e3      	ldr	r3, [r4, #28]
 8016d74:	60f0      	str	r0, [r6, #12]
 8016d76:	68db      	ldr	r3, [r3, #12]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d1e4      	bne.n	8016d46 <_Balloc+0x2e>
 8016d7c:	2000      	movs	r0, #0
 8016d7e:	bd70      	pop	{r4, r5, r6, pc}
 8016d80:	6802      	ldr	r2, [r0, #0]
 8016d82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016d86:	2300      	movs	r3, #0
 8016d88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016d8c:	e7f7      	b.n	8016d7e <_Balloc+0x66>
 8016d8e:	bf00      	nop
 8016d90:	080183d9 	.word	0x080183d9
 8016d94:	08018590 	.word	0x08018590

08016d98 <_Bfree>:
 8016d98:	b570      	push	{r4, r5, r6, lr}
 8016d9a:	69c6      	ldr	r6, [r0, #28]
 8016d9c:	4605      	mov	r5, r0
 8016d9e:	460c      	mov	r4, r1
 8016da0:	b976      	cbnz	r6, 8016dc0 <_Bfree+0x28>
 8016da2:	2010      	movs	r0, #16
 8016da4:	f7ff fcbc 	bl	8016720 <malloc>
 8016da8:	4602      	mov	r2, r0
 8016daa:	61e8      	str	r0, [r5, #28]
 8016dac:	b920      	cbnz	r0, 8016db8 <_Bfree+0x20>
 8016dae:	4b09      	ldr	r3, [pc, #36]	@ (8016dd4 <_Bfree+0x3c>)
 8016db0:	4809      	ldr	r0, [pc, #36]	@ (8016dd8 <_Bfree+0x40>)
 8016db2:	218f      	movs	r1, #143	@ 0x8f
 8016db4:	f7fd fe52 	bl	8014a5c <__assert_func>
 8016db8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016dbc:	6006      	str	r6, [r0, #0]
 8016dbe:	60c6      	str	r6, [r0, #12]
 8016dc0:	b13c      	cbz	r4, 8016dd2 <_Bfree+0x3a>
 8016dc2:	69eb      	ldr	r3, [r5, #28]
 8016dc4:	6862      	ldr	r2, [r4, #4]
 8016dc6:	68db      	ldr	r3, [r3, #12]
 8016dc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016dcc:	6021      	str	r1, [r4, #0]
 8016dce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016dd2:	bd70      	pop	{r4, r5, r6, pc}
 8016dd4:	080183d9 	.word	0x080183d9
 8016dd8:	08018590 	.word	0x08018590

08016ddc <__multadd>:
 8016ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016de0:	690d      	ldr	r5, [r1, #16]
 8016de2:	4607      	mov	r7, r0
 8016de4:	460c      	mov	r4, r1
 8016de6:	461e      	mov	r6, r3
 8016de8:	f101 0c14 	add.w	ip, r1, #20
 8016dec:	2000      	movs	r0, #0
 8016dee:	f8dc 3000 	ldr.w	r3, [ip]
 8016df2:	b299      	uxth	r1, r3
 8016df4:	fb02 6101 	mla	r1, r2, r1, r6
 8016df8:	0c1e      	lsrs	r6, r3, #16
 8016dfa:	0c0b      	lsrs	r3, r1, #16
 8016dfc:	fb02 3306 	mla	r3, r2, r6, r3
 8016e00:	b289      	uxth	r1, r1
 8016e02:	3001      	adds	r0, #1
 8016e04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016e08:	4285      	cmp	r5, r0
 8016e0a:	f84c 1b04 	str.w	r1, [ip], #4
 8016e0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016e12:	dcec      	bgt.n	8016dee <__multadd+0x12>
 8016e14:	b30e      	cbz	r6, 8016e5a <__multadd+0x7e>
 8016e16:	68a3      	ldr	r3, [r4, #8]
 8016e18:	42ab      	cmp	r3, r5
 8016e1a:	dc19      	bgt.n	8016e50 <__multadd+0x74>
 8016e1c:	6861      	ldr	r1, [r4, #4]
 8016e1e:	4638      	mov	r0, r7
 8016e20:	3101      	adds	r1, #1
 8016e22:	f7ff ff79 	bl	8016d18 <_Balloc>
 8016e26:	4680      	mov	r8, r0
 8016e28:	b928      	cbnz	r0, 8016e36 <__multadd+0x5a>
 8016e2a:	4602      	mov	r2, r0
 8016e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8016e60 <__multadd+0x84>)
 8016e2e:	480d      	ldr	r0, [pc, #52]	@ (8016e64 <__multadd+0x88>)
 8016e30:	21ba      	movs	r1, #186	@ 0xba
 8016e32:	f7fd fe13 	bl	8014a5c <__assert_func>
 8016e36:	6922      	ldr	r2, [r4, #16]
 8016e38:	3202      	adds	r2, #2
 8016e3a:	f104 010c 	add.w	r1, r4, #12
 8016e3e:	0092      	lsls	r2, r2, #2
 8016e40:	300c      	adds	r0, #12
 8016e42:	f7fd fded 	bl	8014a20 <memcpy>
 8016e46:	4621      	mov	r1, r4
 8016e48:	4638      	mov	r0, r7
 8016e4a:	f7ff ffa5 	bl	8016d98 <_Bfree>
 8016e4e:	4644      	mov	r4, r8
 8016e50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016e54:	3501      	adds	r5, #1
 8016e56:	615e      	str	r6, [r3, #20]
 8016e58:	6125      	str	r5, [r4, #16]
 8016e5a:	4620      	mov	r0, r4
 8016e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e60:	080184f3 	.word	0x080184f3
 8016e64:	08018590 	.word	0x08018590

08016e68 <__s2b>:
 8016e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e6c:	460c      	mov	r4, r1
 8016e6e:	4615      	mov	r5, r2
 8016e70:	461f      	mov	r7, r3
 8016e72:	2209      	movs	r2, #9
 8016e74:	3308      	adds	r3, #8
 8016e76:	4606      	mov	r6, r0
 8016e78:	fb93 f3f2 	sdiv	r3, r3, r2
 8016e7c:	2100      	movs	r1, #0
 8016e7e:	2201      	movs	r2, #1
 8016e80:	429a      	cmp	r2, r3
 8016e82:	db09      	blt.n	8016e98 <__s2b+0x30>
 8016e84:	4630      	mov	r0, r6
 8016e86:	f7ff ff47 	bl	8016d18 <_Balloc>
 8016e8a:	b940      	cbnz	r0, 8016e9e <__s2b+0x36>
 8016e8c:	4602      	mov	r2, r0
 8016e8e:	4b19      	ldr	r3, [pc, #100]	@ (8016ef4 <__s2b+0x8c>)
 8016e90:	4819      	ldr	r0, [pc, #100]	@ (8016ef8 <__s2b+0x90>)
 8016e92:	21d3      	movs	r1, #211	@ 0xd3
 8016e94:	f7fd fde2 	bl	8014a5c <__assert_func>
 8016e98:	0052      	lsls	r2, r2, #1
 8016e9a:	3101      	adds	r1, #1
 8016e9c:	e7f0      	b.n	8016e80 <__s2b+0x18>
 8016e9e:	9b08      	ldr	r3, [sp, #32]
 8016ea0:	6143      	str	r3, [r0, #20]
 8016ea2:	2d09      	cmp	r5, #9
 8016ea4:	f04f 0301 	mov.w	r3, #1
 8016ea8:	6103      	str	r3, [r0, #16]
 8016eaa:	dd16      	ble.n	8016eda <__s2b+0x72>
 8016eac:	f104 0909 	add.w	r9, r4, #9
 8016eb0:	46c8      	mov	r8, r9
 8016eb2:	442c      	add	r4, r5
 8016eb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016eb8:	4601      	mov	r1, r0
 8016eba:	3b30      	subs	r3, #48	@ 0x30
 8016ebc:	220a      	movs	r2, #10
 8016ebe:	4630      	mov	r0, r6
 8016ec0:	f7ff ff8c 	bl	8016ddc <__multadd>
 8016ec4:	45a0      	cmp	r8, r4
 8016ec6:	d1f5      	bne.n	8016eb4 <__s2b+0x4c>
 8016ec8:	f1a5 0408 	sub.w	r4, r5, #8
 8016ecc:	444c      	add	r4, r9
 8016ece:	1b2d      	subs	r5, r5, r4
 8016ed0:	1963      	adds	r3, r4, r5
 8016ed2:	42bb      	cmp	r3, r7
 8016ed4:	db04      	blt.n	8016ee0 <__s2b+0x78>
 8016ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016eda:	340a      	adds	r4, #10
 8016edc:	2509      	movs	r5, #9
 8016ede:	e7f6      	b.n	8016ece <__s2b+0x66>
 8016ee0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016ee4:	4601      	mov	r1, r0
 8016ee6:	3b30      	subs	r3, #48	@ 0x30
 8016ee8:	220a      	movs	r2, #10
 8016eea:	4630      	mov	r0, r6
 8016eec:	f7ff ff76 	bl	8016ddc <__multadd>
 8016ef0:	e7ee      	b.n	8016ed0 <__s2b+0x68>
 8016ef2:	bf00      	nop
 8016ef4:	080184f3 	.word	0x080184f3
 8016ef8:	08018590 	.word	0x08018590

08016efc <__hi0bits>:
 8016efc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016f00:	4603      	mov	r3, r0
 8016f02:	bf36      	itet	cc
 8016f04:	0403      	lslcc	r3, r0, #16
 8016f06:	2000      	movcs	r0, #0
 8016f08:	2010      	movcc	r0, #16
 8016f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016f0e:	bf3c      	itt	cc
 8016f10:	021b      	lslcc	r3, r3, #8
 8016f12:	3008      	addcc	r0, #8
 8016f14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016f18:	bf3c      	itt	cc
 8016f1a:	011b      	lslcc	r3, r3, #4
 8016f1c:	3004      	addcc	r0, #4
 8016f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016f22:	bf3c      	itt	cc
 8016f24:	009b      	lslcc	r3, r3, #2
 8016f26:	3002      	addcc	r0, #2
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	db05      	blt.n	8016f38 <__hi0bits+0x3c>
 8016f2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016f30:	f100 0001 	add.w	r0, r0, #1
 8016f34:	bf08      	it	eq
 8016f36:	2020      	moveq	r0, #32
 8016f38:	4770      	bx	lr

08016f3a <__lo0bits>:
 8016f3a:	6803      	ldr	r3, [r0, #0]
 8016f3c:	4602      	mov	r2, r0
 8016f3e:	f013 0007 	ands.w	r0, r3, #7
 8016f42:	d00b      	beq.n	8016f5c <__lo0bits+0x22>
 8016f44:	07d9      	lsls	r1, r3, #31
 8016f46:	d421      	bmi.n	8016f8c <__lo0bits+0x52>
 8016f48:	0798      	lsls	r0, r3, #30
 8016f4a:	bf49      	itett	mi
 8016f4c:	085b      	lsrmi	r3, r3, #1
 8016f4e:	089b      	lsrpl	r3, r3, #2
 8016f50:	2001      	movmi	r0, #1
 8016f52:	6013      	strmi	r3, [r2, #0]
 8016f54:	bf5c      	itt	pl
 8016f56:	6013      	strpl	r3, [r2, #0]
 8016f58:	2002      	movpl	r0, #2
 8016f5a:	4770      	bx	lr
 8016f5c:	b299      	uxth	r1, r3
 8016f5e:	b909      	cbnz	r1, 8016f64 <__lo0bits+0x2a>
 8016f60:	0c1b      	lsrs	r3, r3, #16
 8016f62:	2010      	movs	r0, #16
 8016f64:	b2d9      	uxtb	r1, r3
 8016f66:	b909      	cbnz	r1, 8016f6c <__lo0bits+0x32>
 8016f68:	3008      	adds	r0, #8
 8016f6a:	0a1b      	lsrs	r3, r3, #8
 8016f6c:	0719      	lsls	r1, r3, #28
 8016f6e:	bf04      	itt	eq
 8016f70:	091b      	lsreq	r3, r3, #4
 8016f72:	3004      	addeq	r0, #4
 8016f74:	0799      	lsls	r1, r3, #30
 8016f76:	bf04      	itt	eq
 8016f78:	089b      	lsreq	r3, r3, #2
 8016f7a:	3002      	addeq	r0, #2
 8016f7c:	07d9      	lsls	r1, r3, #31
 8016f7e:	d403      	bmi.n	8016f88 <__lo0bits+0x4e>
 8016f80:	085b      	lsrs	r3, r3, #1
 8016f82:	f100 0001 	add.w	r0, r0, #1
 8016f86:	d003      	beq.n	8016f90 <__lo0bits+0x56>
 8016f88:	6013      	str	r3, [r2, #0]
 8016f8a:	4770      	bx	lr
 8016f8c:	2000      	movs	r0, #0
 8016f8e:	4770      	bx	lr
 8016f90:	2020      	movs	r0, #32
 8016f92:	4770      	bx	lr

08016f94 <__i2b>:
 8016f94:	b510      	push	{r4, lr}
 8016f96:	460c      	mov	r4, r1
 8016f98:	2101      	movs	r1, #1
 8016f9a:	f7ff febd 	bl	8016d18 <_Balloc>
 8016f9e:	4602      	mov	r2, r0
 8016fa0:	b928      	cbnz	r0, 8016fae <__i2b+0x1a>
 8016fa2:	4b05      	ldr	r3, [pc, #20]	@ (8016fb8 <__i2b+0x24>)
 8016fa4:	4805      	ldr	r0, [pc, #20]	@ (8016fbc <__i2b+0x28>)
 8016fa6:	f240 1145 	movw	r1, #325	@ 0x145
 8016faa:	f7fd fd57 	bl	8014a5c <__assert_func>
 8016fae:	2301      	movs	r3, #1
 8016fb0:	6144      	str	r4, [r0, #20]
 8016fb2:	6103      	str	r3, [r0, #16]
 8016fb4:	bd10      	pop	{r4, pc}
 8016fb6:	bf00      	nop
 8016fb8:	080184f3 	.word	0x080184f3
 8016fbc:	08018590 	.word	0x08018590

08016fc0 <__multiply>:
 8016fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fc4:	4617      	mov	r7, r2
 8016fc6:	690a      	ldr	r2, [r1, #16]
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	bfa8      	it	ge
 8016fce:	463b      	movge	r3, r7
 8016fd0:	4689      	mov	r9, r1
 8016fd2:	bfa4      	itt	ge
 8016fd4:	460f      	movge	r7, r1
 8016fd6:	4699      	movge	r9, r3
 8016fd8:	693d      	ldr	r5, [r7, #16]
 8016fda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	6879      	ldr	r1, [r7, #4]
 8016fe2:	eb05 060a 	add.w	r6, r5, sl
 8016fe6:	42b3      	cmp	r3, r6
 8016fe8:	b085      	sub	sp, #20
 8016fea:	bfb8      	it	lt
 8016fec:	3101      	addlt	r1, #1
 8016fee:	f7ff fe93 	bl	8016d18 <_Balloc>
 8016ff2:	b930      	cbnz	r0, 8017002 <__multiply+0x42>
 8016ff4:	4602      	mov	r2, r0
 8016ff6:	4b41      	ldr	r3, [pc, #260]	@ (80170fc <__multiply+0x13c>)
 8016ff8:	4841      	ldr	r0, [pc, #260]	@ (8017100 <__multiply+0x140>)
 8016ffa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016ffe:	f7fd fd2d 	bl	8014a5c <__assert_func>
 8017002:	f100 0414 	add.w	r4, r0, #20
 8017006:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801700a:	4623      	mov	r3, r4
 801700c:	2200      	movs	r2, #0
 801700e:	4573      	cmp	r3, lr
 8017010:	d320      	bcc.n	8017054 <__multiply+0x94>
 8017012:	f107 0814 	add.w	r8, r7, #20
 8017016:	f109 0114 	add.w	r1, r9, #20
 801701a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801701e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8017022:	9302      	str	r3, [sp, #8]
 8017024:	1beb      	subs	r3, r5, r7
 8017026:	3b15      	subs	r3, #21
 8017028:	f023 0303 	bic.w	r3, r3, #3
 801702c:	3304      	adds	r3, #4
 801702e:	3715      	adds	r7, #21
 8017030:	42bd      	cmp	r5, r7
 8017032:	bf38      	it	cc
 8017034:	2304      	movcc	r3, #4
 8017036:	9301      	str	r3, [sp, #4]
 8017038:	9b02      	ldr	r3, [sp, #8]
 801703a:	9103      	str	r1, [sp, #12]
 801703c:	428b      	cmp	r3, r1
 801703e:	d80c      	bhi.n	801705a <__multiply+0x9a>
 8017040:	2e00      	cmp	r6, #0
 8017042:	dd03      	ble.n	801704c <__multiply+0x8c>
 8017044:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017048:	2b00      	cmp	r3, #0
 801704a:	d055      	beq.n	80170f8 <__multiply+0x138>
 801704c:	6106      	str	r6, [r0, #16]
 801704e:	b005      	add	sp, #20
 8017050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017054:	f843 2b04 	str.w	r2, [r3], #4
 8017058:	e7d9      	b.n	801700e <__multiply+0x4e>
 801705a:	f8b1 a000 	ldrh.w	sl, [r1]
 801705e:	f1ba 0f00 	cmp.w	sl, #0
 8017062:	d01f      	beq.n	80170a4 <__multiply+0xe4>
 8017064:	46c4      	mov	ip, r8
 8017066:	46a1      	mov	r9, r4
 8017068:	2700      	movs	r7, #0
 801706a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801706e:	f8d9 3000 	ldr.w	r3, [r9]
 8017072:	fa1f fb82 	uxth.w	fp, r2
 8017076:	b29b      	uxth	r3, r3
 8017078:	fb0a 330b 	mla	r3, sl, fp, r3
 801707c:	443b      	add	r3, r7
 801707e:	f8d9 7000 	ldr.w	r7, [r9]
 8017082:	0c12      	lsrs	r2, r2, #16
 8017084:	0c3f      	lsrs	r7, r7, #16
 8017086:	fb0a 7202 	mla	r2, sl, r2, r7
 801708a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801708e:	b29b      	uxth	r3, r3
 8017090:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017094:	4565      	cmp	r5, ip
 8017096:	f849 3b04 	str.w	r3, [r9], #4
 801709a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801709e:	d8e4      	bhi.n	801706a <__multiply+0xaa>
 80170a0:	9b01      	ldr	r3, [sp, #4]
 80170a2:	50e7      	str	r7, [r4, r3]
 80170a4:	9b03      	ldr	r3, [sp, #12]
 80170a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80170aa:	3104      	adds	r1, #4
 80170ac:	f1b9 0f00 	cmp.w	r9, #0
 80170b0:	d020      	beq.n	80170f4 <__multiply+0x134>
 80170b2:	6823      	ldr	r3, [r4, #0]
 80170b4:	4647      	mov	r7, r8
 80170b6:	46a4      	mov	ip, r4
 80170b8:	f04f 0a00 	mov.w	sl, #0
 80170bc:	f8b7 b000 	ldrh.w	fp, [r7]
 80170c0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80170c4:	fb09 220b 	mla	r2, r9, fp, r2
 80170c8:	4452      	add	r2, sl
 80170ca:	b29b      	uxth	r3, r3
 80170cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80170d0:	f84c 3b04 	str.w	r3, [ip], #4
 80170d4:	f857 3b04 	ldr.w	r3, [r7], #4
 80170d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80170dc:	f8bc 3000 	ldrh.w	r3, [ip]
 80170e0:	fb09 330a 	mla	r3, r9, sl, r3
 80170e4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80170e8:	42bd      	cmp	r5, r7
 80170ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80170ee:	d8e5      	bhi.n	80170bc <__multiply+0xfc>
 80170f0:	9a01      	ldr	r2, [sp, #4]
 80170f2:	50a3      	str	r3, [r4, r2]
 80170f4:	3404      	adds	r4, #4
 80170f6:	e79f      	b.n	8017038 <__multiply+0x78>
 80170f8:	3e01      	subs	r6, #1
 80170fa:	e7a1      	b.n	8017040 <__multiply+0x80>
 80170fc:	080184f3 	.word	0x080184f3
 8017100:	08018590 	.word	0x08018590

08017104 <__pow5mult>:
 8017104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017108:	4615      	mov	r5, r2
 801710a:	f012 0203 	ands.w	r2, r2, #3
 801710e:	4607      	mov	r7, r0
 8017110:	460e      	mov	r6, r1
 8017112:	d007      	beq.n	8017124 <__pow5mult+0x20>
 8017114:	4c25      	ldr	r4, [pc, #148]	@ (80171ac <__pow5mult+0xa8>)
 8017116:	3a01      	subs	r2, #1
 8017118:	2300      	movs	r3, #0
 801711a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801711e:	f7ff fe5d 	bl	8016ddc <__multadd>
 8017122:	4606      	mov	r6, r0
 8017124:	10ad      	asrs	r5, r5, #2
 8017126:	d03d      	beq.n	80171a4 <__pow5mult+0xa0>
 8017128:	69fc      	ldr	r4, [r7, #28]
 801712a:	b97c      	cbnz	r4, 801714c <__pow5mult+0x48>
 801712c:	2010      	movs	r0, #16
 801712e:	f7ff faf7 	bl	8016720 <malloc>
 8017132:	4602      	mov	r2, r0
 8017134:	61f8      	str	r0, [r7, #28]
 8017136:	b928      	cbnz	r0, 8017144 <__pow5mult+0x40>
 8017138:	4b1d      	ldr	r3, [pc, #116]	@ (80171b0 <__pow5mult+0xac>)
 801713a:	481e      	ldr	r0, [pc, #120]	@ (80171b4 <__pow5mult+0xb0>)
 801713c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017140:	f7fd fc8c 	bl	8014a5c <__assert_func>
 8017144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017148:	6004      	str	r4, [r0, #0]
 801714a:	60c4      	str	r4, [r0, #12]
 801714c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017154:	b94c      	cbnz	r4, 801716a <__pow5mult+0x66>
 8017156:	f240 2171 	movw	r1, #625	@ 0x271
 801715a:	4638      	mov	r0, r7
 801715c:	f7ff ff1a 	bl	8016f94 <__i2b>
 8017160:	2300      	movs	r3, #0
 8017162:	f8c8 0008 	str.w	r0, [r8, #8]
 8017166:	4604      	mov	r4, r0
 8017168:	6003      	str	r3, [r0, #0]
 801716a:	f04f 0900 	mov.w	r9, #0
 801716e:	07eb      	lsls	r3, r5, #31
 8017170:	d50a      	bpl.n	8017188 <__pow5mult+0x84>
 8017172:	4631      	mov	r1, r6
 8017174:	4622      	mov	r2, r4
 8017176:	4638      	mov	r0, r7
 8017178:	f7ff ff22 	bl	8016fc0 <__multiply>
 801717c:	4631      	mov	r1, r6
 801717e:	4680      	mov	r8, r0
 8017180:	4638      	mov	r0, r7
 8017182:	f7ff fe09 	bl	8016d98 <_Bfree>
 8017186:	4646      	mov	r6, r8
 8017188:	106d      	asrs	r5, r5, #1
 801718a:	d00b      	beq.n	80171a4 <__pow5mult+0xa0>
 801718c:	6820      	ldr	r0, [r4, #0]
 801718e:	b938      	cbnz	r0, 80171a0 <__pow5mult+0x9c>
 8017190:	4622      	mov	r2, r4
 8017192:	4621      	mov	r1, r4
 8017194:	4638      	mov	r0, r7
 8017196:	f7ff ff13 	bl	8016fc0 <__multiply>
 801719a:	6020      	str	r0, [r4, #0]
 801719c:	f8c0 9000 	str.w	r9, [r0]
 80171a0:	4604      	mov	r4, r0
 80171a2:	e7e4      	b.n	801716e <__pow5mult+0x6a>
 80171a4:	4630      	mov	r0, r6
 80171a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80171aa:	bf00      	nop
 80171ac:	08018744 	.word	0x08018744
 80171b0:	080183d9 	.word	0x080183d9
 80171b4:	08018590 	.word	0x08018590

080171b8 <__lshift>:
 80171b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171bc:	460c      	mov	r4, r1
 80171be:	6849      	ldr	r1, [r1, #4]
 80171c0:	6923      	ldr	r3, [r4, #16]
 80171c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80171c6:	68a3      	ldr	r3, [r4, #8]
 80171c8:	4607      	mov	r7, r0
 80171ca:	4691      	mov	r9, r2
 80171cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80171d0:	f108 0601 	add.w	r6, r8, #1
 80171d4:	42b3      	cmp	r3, r6
 80171d6:	db0b      	blt.n	80171f0 <__lshift+0x38>
 80171d8:	4638      	mov	r0, r7
 80171da:	f7ff fd9d 	bl	8016d18 <_Balloc>
 80171de:	4605      	mov	r5, r0
 80171e0:	b948      	cbnz	r0, 80171f6 <__lshift+0x3e>
 80171e2:	4602      	mov	r2, r0
 80171e4:	4b28      	ldr	r3, [pc, #160]	@ (8017288 <__lshift+0xd0>)
 80171e6:	4829      	ldr	r0, [pc, #164]	@ (801728c <__lshift+0xd4>)
 80171e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80171ec:	f7fd fc36 	bl	8014a5c <__assert_func>
 80171f0:	3101      	adds	r1, #1
 80171f2:	005b      	lsls	r3, r3, #1
 80171f4:	e7ee      	b.n	80171d4 <__lshift+0x1c>
 80171f6:	2300      	movs	r3, #0
 80171f8:	f100 0114 	add.w	r1, r0, #20
 80171fc:	f100 0210 	add.w	r2, r0, #16
 8017200:	4618      	mov	r0, r3
 8017202:	4553      	cmp	r3, sl
 8017204:	db33      	blt.n	801726e <__lshift+0xb6>
 8017206:	6920      	ldr	r0, [r4, #16]
 8017208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801720c:	f104 0314 	add.w	r3, r4, #20
 8017210:	f019 091f 	ands.w	r9, r9, #31
 8017214:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017218:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801721c:	d02b      	beq.n	8017276 <__lshift+0xbe>
 801721e:	f1c9 0e20 	rsb	lr, r9, #32
 8017222:	468a      	mov	sl, r1
 8017224:	2200      	movs	r2, #0
 8017226:	6818      	ldr	r0, [r3, #0]
 8017228:	fa00 f009 	lsl.w	r0, r0, r9
 801722c:	4310      	orrs	r0, r2
 801722e:	f84a 0b04 	str.w	r0, [sl], #4
 8017232:	f853 2b04 	ldr.w	r2, [r3], #4
 8017236:	459c      	cmp	ip, r3
 8017238:	fa22 f20e 	lsr.w	r2, r2, lr
 801723c:	d8f3      	bhi.n	8017226 <__lshift+0x6e>
 801723e:	ebac 0304 	sub.w	r3, ip, r4
 8017242:	3b15      	subs	r3, #21
 8017244:	f023 0303 	bic.w	r3, r3, #3
 8017248:	3304      	adds	r3, #4
 801724a:	f104 0015 	add.w	r0, r4, #21
 801724e:	4560      	cmp	r0, ip
 8017250:	bf88      	it	hi
 8017252:	2304      	movhi	r3, #4
 8017254:	50ca      	str	r2, [r1, r3]
 8017256:	b10a      	cbz	r2, 801725c <__lshift+0xa4>
 8017258:	f108 0602 	add.w	r6, r8, #2
 801725c:	3e01      	subs	r6, #1
 801725e:	4638      	mov	r0, r7
 8017260:	612e      	str	r6, [r5, #16]
 8017262:	4621      	mov	r1, r4
 8017264:	f7ff fd98 	bl	8016d98 <_Bfree>
 8017268:	4628      	mov	r0, r5
 801726a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801726e:	f842 0f04 	str.w	r0, [r2, #4]!
 8017272:	3301      	adds	r3, #1
 8017274:	e7c5      	b.n	8017202 <__lshift+0x4a>
 8017276:	3904      	subs	r1, #4
 8017278:	f853 2b04 	ldr.w	r2, [r3], #4
 801727c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017280:	459c      	cmp	ip, r3
 8017282:	d8f9      	bhi.n	8017278 <__lshift+0xc0>
 8017284:	e7ea      	b.n	801725c <__lshift+0xa4>
 8017286:	bf00      	nop
 8017288:	080184f3 	.word	0x080184f3
 801728c:	08018590 	.word	0x08018590

08017290 <__mcmp>:
 8017290:	690a      	ldr	r2, [r1, #16]
 8017292:	4603      	mov	r3, r0
 8017294:	6900      	ldr	r0, [r0, #16]
 8017296:	1a80      	subs	r0, r0, r2
 8017298:	b530      	push	{r4, r5, lr}
 801729a:	d10e      	bne.n	80172ba <__mcmp+0x2a>
 801729c:	3314      	adds	r3, #20
 801729e:	3114      	adds	r1, #20
 80172a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80172a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80172a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80172ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80172b0:	4295      	cmp	r5, r2
 80172b2:	d003      	beq.n	80172bc <__mcmp+0x2c>
 80172b4:	d205      	bcs.n	80172c2 <__mcmp+0x32>
 80172b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80172ba:	bd30      	pop	{r4, r5, pc}
 80172bc:	42a3      	cmp	r3, r4
 80172be:	d3f3      	bcc.n	80172a8 <__mcmp+0x18>
 80172c0:	e7fb      	b.n	80172ba <__mcmp+0x2a>
 80172c2:	2001      	movs	r0, #1
 80172c4:	e7f9      	b.n	80172ba <__mcmp+0x2a>
	...

080172c8 <__mdiff>:
 80172c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172cc:	4689      	mov	r9, r1
 80172ce:	4606      	mov	r6, r0
 80172d0:	4611      	mov	r1, r2
 80172d2:	4648      	mov	r0, r9
 80172d4:	4614      	mov	r4, r2
 80172d6:	f7ff ffdb 	bl	8017290 <__mcmp>
 80172da:	1e05      	subs	r5, r0, #0
 80172dc:	d112      	bne.n	8017304 <__mdiff+0x3c>
 80172de:	4629      	mov	r1, r5
 80172e0:	4630      	mov	r0, r6
 80172e2:	f7ff fd19 	bl	8016d18 <_Balloc>
 80172e6:	4602      	mov	r2, r0
 80172e8:	b928      	cbnz	r0, 80172f6 <__mdiff+0x2e>
 80172ea:	4b3f      	ldr	r3, [pc, #252]	@ (80173e8 <__mdiff+0x120>)
 80172ec:	f240 2137 	movw	r1, #567	@ 0x237
 80172f0:	483e      	ldr	r0, [pc, #248]	@ (80173ec <__mdiff+0x124>)
 80172f2:	f7fd fbb3 	bl	8014a5c <__assert_func>
 80172f6:	2301      	movs	r3, #1
 80172f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80172fc:	4610      	mov	r0, r2
 80172fe:	b003      	add	sp, #12
 8017300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017304:	bfbc      	itt	lt
 8017306:	464b      	movlt	r3, r9
 8017308:	46a1      	movlt	r9, r4
 801730a:	4630      	mov	r0, r6
 801730c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017310:	bfba      	itte	lt
 8017312:	461c      	movlt	r4, r3
 8017314:	2501      	movlt	r5, #1
 8017316:	2500      	movge	r5, #0
 8017318:	f7ff fcfe 	bl	8016d18 <_Balloc>
 801731c:	4602      	mov	r2, r0
 801731e:	b918      	cbnz	r0, 8017328 <__mdiff+0x60>
 8017320:	4b31      	ldr	r3, [pc, #196]	@ (80173e8 <__mdiff+0x120>)
 8017322:	f240 2145 	movw	r1, #581	@ 0x245
 8017326:	e7e3      	b.n	80172f0 <__mdiff+0x28>
 8017328:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801732c:	6926      	ldr	r6, [r4, #16]
 801732e:	60c5      	str	r5, [r0, #12]
 8017330:	f109 0310 	add.w	r3, r9, #16
 8017334:	f109 0514 	add.w	r5, r9, #20
 8017338:	f104 0e14 	add.w	lr, r4, #20
 801733c:	f100 0b14 	add.w	fp, r0, #20
 8017340:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017344:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017348:	9301      	str	r3, [sp, #4]
 801734a:	46d9      	mov	r9, fp
 801734c:	f04f 0c00 	mov.w	ip, #0
 8017350:	9b01      	ldr	r3, [sp, #4]
 8017352:	f85e 0b04 	ldr.w	r0, [lr], #4
 8017356:	f853 af04 	ldr.w	sl, [r3, #4]!
 801735a:	9301      	str	r3, [sp, #4]
 801735c:	fa1f f38a 	uxth.w	r3, sl
 8017360:	4619      	mov	r1, r3
 8017362:	b283      	uxth	r3, r0
 8017364:	1acb      	subs	r3, r1, r3
 8017366:	0c00      	lsrs	r0, r0, #16
 8017368:	4463      	add	r3, ip
 801736a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801736e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017372:	b29b      	uxth	r3, r3
 8017374:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017378:	4576      	cmp	r6, lr
 801737a:	f849 3b04 	str.w	r3, [r9], #4
 801737e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017382:	d8e5      	bhi.n	8017350 <__mdiff+0x88>
 8017384:	1b33      	subs	r3, r6, r4
 8017386:	3b15      	subs	r3, #21
 8017388:	f023 0303 	bic.w	r3, r3, #3
 801738c:	3415      	adds	r4, #21
 801738e:	3304      	adds	r3, #4
 8017390:	42a6      	cmp	r6, r4
 8017392:	bf38      	it	cc
 8017394:	2304      	movcc	r3, #4
 8017396:	441d      	add	r5, r3
 8017398:	445b      	add	r3, fp
 801739a:	461e      	mov	r6, r3
 801739c:	462c      	mov	r4, r5
 801739e:	4544      	cmp	r4, r8
 80173a0:	d30e      	bcc.n	80173c0 <__mdiff+0xf8>
 80173a2:	f108 0103 	add.w	r1, r8, #3
 80173a6:	1b49      	subs	r1, r1, r5
 80173a8:	f021 0103 	bic.w	r1, r1, #3
 80173ac:	3d03      	subs	r5, #3
 80173ae:	45a8      	cmp	r8, r5
 80173b0:	bf38      	it	cc
 80173b2:	2100      	movcc	r1, #0
 80173b4:	440b      	add	r3, r1
 80173b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80173ba:	b191      	cbz	r1, 80173e2 <__mdiff+0x11a>
 80173bc:	6117      	str	r7, [r2, #16]
 80173be:	e79d      	b.n	80172fc <__mdiff+0x34>
 80173c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80173c4:	46e6      	mov	lr, ip
 80173c6:	0c08      	lsrs	r0, r1, #16
 80173c8:	fa1c fc81 	uxtah	ip, ip, r1
 80173cc:	4471      	add	r1, lr
 80173ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80173d2:	b289      	uxth	r1, r1
 80173d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80173d8:	f846 1b04 	str.w	r1, [r6], #4
 80173dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80173e0:	e7dd      	b.n	801739e <__mdiff+0xd6>
 80173e2:	3f01      	subs	r7, #1
 80173e4:	e7e7      	b.n	80173b6 <__mdiff+0xee>
 80173e6:	bf00      	nop
 80173e8:	080184f3 	.word	0x080184f3
 80173ec:	08018590 	.word	0x08018590

080173f0 <__ulp>:
 80173f0:	b082      	sub	sp, #8
 80173f2:	ed8d 0b00 	vstr	d0, [sp]
 80173f6:	9a01      	ldr	r2, [sp, #4]
 80173f8:	4b0f      	ldr	r3, [pc, #60]	@ (8017438 <__ulp+0x48>)
 80173fa:	4013      	ands	r3, r2
 80173fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017400:	2b00      	cmp	r3, #0
 8017402:	dc08      	bgt.n	8017416 <__ulp+0x26>
 8017404:	425b      	negs	r3, r3
 8017406:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801740a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801740e:	da04      	bge.n	801741a <__ulp+0x2a>
 8017410:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017414:	4113      	asrs	r3, r2
 8017416:	2200      	movs	r2, #0
 8017418:	e008      	b.n	801742c <__ulp+0x3c>
 801741a:	f1a2 0314 	sub.w	r3, r2, #20
 801741e:	2b1e      	cmp	r3, #30
 8017420:	bfda      	itte	le
 8017422:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017426:	40da      	lsrle	r2, r3
 8017428:	2201      	movgt	r2, #1
 801742a:	2300      	movs	r3, #0
 801742c:	4619      	mov	r1, r3
 801742e:	4610      	mov	r0, r2
 8017430:	ec41 0b10 	vmov	d0, r0, r1
 8017434:	b002      	add	sp, #8
 8017436:	4770      	bx	lr
 8017438:	7ff00000 	.word	0x7ff00000

0801743c <__b2d>:
 801743c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017440:	6906      	ldr	r6, [r0, #16]
 8017442:	f100 0814 	add.w	r8, r0, #20
 8017446:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801744a:	1f37      	subs	r7, r6, #4
 801744c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017450:	4610      	mov	r0, r2
 8017452:	f7ff fd53 	bl	8016efc <__hi0bits>
 8017456:	f1c0 0320 	rsb	r3, r0, #32
 801745a:	280a      	cmp	r0, #10
 801745c:	600b      	str	r3, [r1, #0]
 801745e:	491b      	ldr	r1, [pc, #108]	@ (80174cc <__b2d+0x90>)
 8017460:	dc15      	bgt.n	801748e <__b2d+0x52>
 8017462:	f1c0 0c0b 	rsb	ip, r0, #11
 8017466:	fa22 f30c 	lsr.w	r3, r2, ip
 801746a:	45b8      	cmp	r8, r7
 801746c:	ea43 0501 	orr.w	r5, r3, r1
 8017470:	bf34      	ite	cc
 8017472:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017476:	2300      	movcs	r3, #0
 8017478:	3015      	adds	r0, #21
 801747a:	fa02 f000 	lsl.w	r0, r2, r0
 801747e:	fa23 f30c 	lsr.w	r3, r3, ip
 8017482:	4303      	orrs	r3, r0
 8017484:	461c      	mov	r4, r3
 8017486:	ec45 4b10 	vmov	d0, r4, r5
 801748a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801748e:	45b8      	cmp	r8, r7
 8017490:	bf3a      	itte	cc
 8017492:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017496:	f1a6 0708 	subcc.w	r7, r6, #8
 801749a:	2300      	movcs	r3, #0
 801749c:	380b      	subs	r0, #11
 801749e:	d012      	beq.n	80174c6 <__b2d+0x8a>
 80174a0:	f1c0 0120 	rsb	r1, r0, #32
 80174a4:	fa23 f401 	lsr.w	r4, r3, r1
 80174a8:	4082      	lsls	r2, r0
 80174aa:	4322      	orrs	r2, r4
 80174ac:	4547      	cmp	r7, r8
 80174ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80174b2:	bf8c      	ite	hi
 80174b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80174b8:	2200      	movls	r2, #0
 80174ba:	4083      	lsls	r3, r0
 80174bc:	40ca      	lsrs	r2, r1
 80174be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80174c2:	4313      	orrs	r3, r2
 80174c4:	e7de      	b.n	8017484 <__b2d+0x48>
 80174c6:	ea42 0501 	orr.w	r5, r2, r1
 80174ca:	e7db      	b.n	8017484 <__b2d+0x48>
 80174cc:	3ff00000 	.word	0x3ff00000

080174d0 <__d2b>:
 80174d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80174d4:	460f      	mov	r7, r1
 80174d6:	2101      	movs	r1, #1
 80174d8:	ec59 8b10 	vmov	r8, r9, d0
 80174dc:	4616      	mov	r6, r2
 80174de:	f7ff fc1b 	bl	8016d18 <_Balloc>
 80174e2:	4604      	mov	r4, r0
 80174e4:	b930      	cbnz	r0, 80174f4 <__d2b+0x24>
 80174e6:	4602      	mov	r2, r0
 80174e8:	4b23      	ldr	r3, [pc, #140]	@ (8017578 <__d2b+0xa8>)
 80174ea:	4824      	ldr	r0, [pc, #144]	@ (801757c <__d2b+0xac>)
 80174ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80174f0:	f7fd fab4 	bl	8014a5c <__assert_func>
 80174f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80174f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80174fc:	b10d      	cbz	r5, 8017502 <__d2b+0x32>
 80174fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017502:	9301      	str	r3, [sp, #4]
 8017504:	f1b8 0300 	subs.w	r3, r8, #0
 8017508:	d023      	beq.n	8017552 <__d2b+0x82>
 801750a:	4668      	mov	r0, sp
 801750c:	9300      	str	r3, [sp, #0]
 801750e:	f7ff fd14 	bl	8016f3a <__lo0bits>
 8017512:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017516:	b1d0      	cbz	r0, 801754e <__d2b+0x7e>
 8017518:	f1c0 0320 	rsb	r3, r0, #32
 801751c:	fa02 f303 	lsl.w	r3, r2, r3
 8017520:	430b      	orrs	r3, r1
 8017522:	40c2      	lsrs	r2, r0
 8017524:	6163      	str	r3, [r4, #20]
 8017526:	9201      	str	r2, [sp, #4]
 8017528:	9b01      	ldr	r3, [sp, #4]
 801752a:	61a3      	str	r3, [r4, #24]
 801752c:	2b00      	cmp	r3, #0
 801752e:	bf0c      	ite	eq
 8017530:	2201      	moveq	r2, #1
 8017532:	2202      	movne	r2, #2
 8017534:	6122      	str	r2, [r4, #16]
 8017536:	b1a5      	cbz	r5, 8017562 <__d2b+0x92>
 8017538:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801753c:	4405      	add	r5, r0
 801753e:	603d      	str	r5, [r7, #0]
 8017540:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017544:	6030      	str	r0, [r6, #0]
 8017546:	4620      	mov	r0, r4
 8017548:	b003      	add	sp, #12
 801754a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801754e:	6161      	str	r1, [r4, #20]
 8017550:	e7ea      	b.n	8017528 <__d2b+0x58>
 8017552:	a801      	add	r0, sp, #4
 8017554:	f7ff fcf1 	bl	8016f3a <__lo0bits>
 8017558:	9b01      	ldr	r3, [sp, #4]
 801755a:	6163      	str	r3, [r4, #20]
 801755c:	3020      	adds	r0, #32
 801755e:	2201      	movs	r2, #1
 8017560:	e7e8      	b.n	8017534 <__d2b+0x64>
 8017562:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017566:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801756a:	6038      	str	r0, [r7, #0]
 801756c:	6918      	ldr	r0, [r3, #16]
 801756e:	f7ff fcc5 	bl	8016efc <__hi0bits>
 8017572:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017576:	e7e5      	b.n	8017544 <__d2b+0x74>
 8017578:	080184f3 	.word	0x080184f3
 801757c:	08018590 	.word	0x08018590

08017580 <__ratio>:
 8017580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017584:	b085      	sub	sp, #20
 8017586:	e9cd 1000 	strd	r1, r0, [sp]
 801758a:	a902      	add	r1, sp, #8
 801758c:	f7ff ff56 	bl	801743c <__b2d>
 8017590:	9800      	ldr	r0, [sp, #0]
 8017592:	a903      	add	r1, sp, #12
 8017594:	ec55 4b10 	vmov	r4, r5, d0
 8017598:	f7ff ff50 	bl	801743c <__b2d>
 801759c:	9b01      	ldr	r3, [sp, #4]
 801759e:	6919      	ldr	r1, [r3, #16]
 80175a0:	9b00      	ldr	r3, [sp, #0]
 80175a2:	691b      	ldr	r3, [r3, #16]
 80175a4:	1ac9      	subs	r1, r1, r3
 80175a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80175aa:	1a9b      	subs	r3, r3, r2
 80175ac:	ec5b ab10 	vmov	sl, fp, d0
 80175b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	bfce      	itee	gt
 80175b8:	462a      	movgt	r2, r5
 80175ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80175be:	465a      	movle	r2, fp
 80175c0:	462f      	mov	r7, r5
 80175c2:	46d9      	mov	r9, fp
 80175c4:	bfcc      	ite	gt
 80175c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80175ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80175ce:	464b      	mov	r3, r9
 80175d0:	4652      	mov	r2, sl
 80175d2:	4620      	mov	r0, r4
 80175d4:	4639      	mov	r1, r7
 80175d6:	f7e9 f949 	bl	800086c <__aeabi_ddiv>
 80175da:	ec41 0b10 	vmov	d0, r0, r1
 80175de:	b005      	add	sp, #20
 80175e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080175e4 <__copybits>:
 80175e4:	3901      	subs	r1, #1
 80175e6:	b570      	push	{r4, r5, r6, lr}
 80175e8:	1149      	asrs	r1, r1, #5
 80175ea:	6914      	ldr	r4, [r2, #16]
 80175ec:	3101      	adds	r1, #1
 80175ee:	f102 0314 	add.w	r3, r2, #20
 80175f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80175f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80175fa:	1f05      	subs	r5, r0, #4
 80175fc:	42a3      	cmp	r3, r4
 80175fe:	d30c      	bcc.n	801761a <__copybits+0x36>
 8017600:	1aa3      	subs	r3, r4, r2
 8017602:	3b11      	subs	r3, #17
 8017604:	f023 0303 	bic.w	r3, r3, #3
 8017608:	3211      	adds	r2, #17
 801760a:	42a2      	cmp	r2, r4
 801760c:	bf88      	it	hi
 801760e:	2300      	movhi	r3, #0
 8017610:	4418      	add	r0, r3
 8017612:	2300      	movs	r3, #0
 8017614:	4288      	cmp	r0, r1
 8017616:	d305      	bcc.n	8017624 <__copybits+0x40>
 8017618:	bd70      	pop	{r4, r5, r6, pc}
 801761a:	f853 6b04 	ldr.w	r6, [r3], #4
 801761e:	f845 6f04 	str.w	r6, [r5, #4]!
 8017622:	e7eb      	b.n	80175fc <__copybits+0x18>
 8017624:	f840 3b04 	str.w	r3, [r0], #4
 8017628:	e7f4      	b.n	8017614 <__copybits+0x30>

0801762a <__any_on>:
 801762a:	f100 0214 	add.w	r2, r0, #20
 801762e:	6900      	ldr	r0, [r0, #16]
 8017630:	114b      	asrs	r3, r1, #5
 8017632:	4298      	cmp	r0, r3
 8017634:	b510      	push	{r4, lr}
 8017636:	db11      	blt.n	801765c <__any_on+0x32>
 8017638:	dd0a      	ble.n	8017650 <__any_on+0x26>
 801763a:	f011 011f 	ands.w	r1, r1, #31
 801763e:	d007      	beq.n	8017650 <__any_on+0x26>
 8017640:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017644:	fa24 f001 	lsr.w	r0, r4, r1
 8017648:	fa00 f101 	lsl.w	r1, r0, r1
 801764c:	428c      	cmp	r4, r1
 801764e:	d10b      	bne.n	8017668 <__any_on+0x3e>
 8017650:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017654:	4293      	cmp	r3, r2
 8017656:	d803      	bhi.n	8017660 <__any_on+0x36>
 8017658:	2000      	movs	r0, #0
 801765a:	bd10      	pop	{r4, pc}
 801765c:	4603      	mov	r3, r0
 801765e:	e7f7      	b.n	8017650 <__any_on+0x26>
 8017660:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017664:	2900      	cmp	r1, #0
 8017666:	d0f5      	beq.n	8017654 <__any_on+0x2a>
 8017668:	2001      	movs	r0, #1
 801766a:	e7f6      	b.n	801765a <__any_on+0x30>

0801766c <__submore>:
 801766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017670:	460c      	mov	r4, r1
 8017672:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017678:	4299      	cmp	r1, r3
 801767a:	d11d      	bne.n	80176b8 <__submore+0x4c>
 801767c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8017680:	f7ff f878 	bl	8016774 <_malloc_r>
 8017684:	b918      	cbnz	r0, 801768e <__submore+0x22>
 8017686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801768a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801768e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017692:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017694:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8017698:	6360      	str	r0, [r4, #52]	@ 0x34
 801769a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801769e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80176a2:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80176a6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80176aa:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80176ae:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80176b2:	6020      	str	r0, [r4, #0]
 80176b4:	2000      	movs	r0, #0
 80176b6:	e7e8      	b.n	801768a <__submore+0x1e>
 80176b8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80176ba:	0077      	lsls	r7, r6, #1
 80176bc:	463a      	mov	r2, r7
 80176be:	f000 f821 	bl	8017704 <_realloc_r>
 80176c2:	4605      	mov	r5, r0
 80176c4:	2800      	cmp	r0, #0
 80176c6:	d0de      	beq.n	8017686 <__submore+0x1a>
 80176c8:	eb00 0806 	add.w	r8, r0, r6
 80176cc:	4601      	mov	r1, r0
 80176ce:	4632      	mov	r2, r6
 80176d0:	4640      	mov	r0, r8
 80176d2:	f7fd f9a5 	bl	8014a20 <memcpy>
 80176d6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80176da:	f8c4 8000 	str.w	r8, [r4]
 80176de:	e7e9      	b.n	80176b4 <__submore+0x48>

080176e0 <fiprintf>:
 80176e0:	b40e      	push	{r1, r2, r3}
 80176e2:	b503      	push	{r0, r1, lr}
 80176e4:	4601      	mov	r1, r0
 80176e6:	ab03      	add	r3, sp, #12
 80176e8:	4805      	ldr	r0, [pc, #20]	@ (8017700 <fiprintf+0x20>)
 80176ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80176ee:	6800      	ldr	r0, [r0, #0]
 80176f0:	9301      	str	r3, [sp, #4]
 80176f2:	f7fe fefd 	bl	80164f0 <_vfiprintf_r>
 80176f6:	b002      	add	sp, #8
 80176f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80176fc:	b003      	add	sp, #12
 80176fe:	4770      	bx	lr
 8017700:	200001d4 	.word	0x200001d4

08017704 <_realloc_r>:
 8017704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017708:	4607      	mov	r7, r0
 801770a:	4614      	mov	r4, r2
 801770c:	460d      	mov	r5, r1
 801770e:	b921      	cbnz	r1, 801771a <_realloc_r+0x16>
 8017710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017714:	4611      	mov	r1, r2
 8017716:	f7ff b82d 	b.w	8016774 <_malloc_r>
 801771a:	b92a      	cbnz	r2, 8017728 <_realloc_r+0x24>
 801771c:	f7fe f814 	bl	8015748 <_free_r>
 8017720:	4625      	mov	r5, r4
 8017722:	4628      	mov	r0, r5
 8017724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017728:	f000 f9f5 	bl	8017b16 <_malloc_usable_size_r>
 801772c:	4284      	cmp	r4, r0
 801772e:	4606      	mov	r6, r0
 8017730:	d802      	bhi.n	8017738 <_realloc_r+0x34>
 8017732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017736:	d8f4      	bhi.n	8017722 <_realloc_r+0x1e>
 8017738:	4621      	mov	r1, r4
 801773a:	4638      	mov	r0, r7
 801773c:	f7ff f81a 	bl	8016774 <_malloc_r>
 8017740:	4680      	mov	r8, r0
 8017742:	b908      	cbnz	r0, 8017748 <_realloc_r+0x44>
 8017744:	4645      	mov	r5, r8
 8017746:	e7ec      	b.n	8017722 <_realloc_r+0x1e>
 8017748:	42b4      	cmp	r4, r6
 801774a:	4622      	mov	r2, r4
 801774c:	4629      	mov	r1, r5
 801774e:	bf28      	it	cs
 8017750:	4632      	movcs	r2, r6
 8017752:	f7fd f965 	bl	8014a20 <memcpy>
 8017756:	4629      	mov	r1, r5
 8017758:	4638      	mov	r0, r7
 801775a:	f7fd fff5 	bl	8015748 <_free_r>
 801775e:	e7f1      	b.n	8017744 <_realloc_r+0x40>

08017760 <__swbuf_r>:
 8017760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017762:	460e      	mov	r6, r1
 8017764:	4614      	mov	r4, r2
 8017766:	4605      	mov	r5, r0
 8017768:	b118      	cbz	r0, 8017772 <__swbuf_r+0x12>
 801776a:	6a03      	ldr	r3, [r0, #32]
 801776c:	b90b      	cbnz	r3, 8017772 <__swbuf_r+0x12>
 801776e:	f7fc f90b 	bl	8013988 <__sinit>
 8017772:	69a3      	ldr	r3, [r4, #24]
 8017774:	60a3      	str	r3, [r4, #8]
 8017776:	89a3      	ldrh	r3, [r4, #12]
 8017778:	071a      	lsls	r2, r3, #28
 801777a:	d501      	bpl.n	8017780 <__swbuf_r+0x20>
 801777c:	6923      	ldr	r3, [r4, #16]
 801777e:	b943      	cbnz	r3, 8017792 <__swbuf_r+0x32>
 8017780:	4621      	mov	r1, r4
 8017782:	4628      	mov	r0, r5
 8017784:	f000 f89a 	bl	80178bc <__swsetup_r>
 8017788:	b118      	cbz	r0, 8017792 <__swbuf_r+0x32>
 801778a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801778e:	4638      	mov	r0, r7
 8017790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017792:	6823      	ldr	r3, [r4, #0]
 8017794:	6922      	ldr	r2, [r4, #16]
 8017796:	1a98      	subs	r0, r3, r2
 8017798:	6963      	ldr	r3, [r4, #20]
 801779a:	b2f6      	uxtb	r6, r6
 801779c:	4283      	cmp	r3, r0
 801779e:	4637      	mov	r7, r6
 80177a0:	dc05      	bgt.n	80177ae <__swbuf_r+0x4e>
 80177a2:	4621      	mov	r1, r4
 80177a4:	4628      	mov	r0, r5
 80177a6:	f7ff fa83 	bl	8016cb0 <_fflush_r>
 80177aa:	2800      	cmp	r0, #0
 80177ac:	d1ed      	bne.n	801778a <__swbuf_r+0x2a>
 80177ae:	68a3      	ldr	r3, [r4, #8]
 80177b0:	3b01      	subs	r3, #1
 80177b2:	60a3      	str	r3, [r4, #8]
 80177b4:	6823      	ldr	r3, [r4, #0]
 80177b6:	1c5a      	adds	r2, r3, #1
 80177b8:	6022      	str	r2, [r4, #0]
 80177ba:	701e      	strb	r6, [r3, #0]
 80177bc:	6962      	ldr	r2, [r4, #20]
 80177be:	1c43      	adds	r3, r0, #1
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d004      	beq.n	80177ce <__swbuf_r+0x6e>
 80177c4:	89a3      	ldrh	r3, [r4, #12]
 80177c6:	07db      	lsls	r3, r3, #31
 80177c8:	d5e1      	bpl.n	801778e <__swbuf_r+0x2e>
 80177ca:	2e0a      	cmp	r6, #10
 80177cc:	d1df      	bne.n	801778e <__swbuf_r+0x2e>
 80177ce:	4621      	mov	r1, r4
 80177d0:	4628      	mov	r0, r5
 80177d2:	f7ff fa6d 	bl	8016cb0 <_fflush_r>
 80177d6:	2800      	cmp	r0, #0
 80177d8:	d0d9      	beq.n	801778e <__swbuf_r+0x2e>
 80177da:	e7d6      	b.n	801778a <__swbuf_r+0x2a>

080177dc <_strtoul_l.isra.0>:
 80177dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80177e0:	4e34      	ldr	r6, [pc, #208]	@ (80178b4 <_strtoul_l.isra.0+0xd8>)
 80177e2:	4686      	mov	lr, r0
 80177e4:	460d      	mov	r5, r1
 80177e6:	4628      	mov	r0, r5
 80177e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177ec:	5d37      	ldrb	r7, [r6, r4]
 80177ee:	f017 0708 	ands.w	r7, r7, #8
 80177f2:	d1f8      	bne.n	80177e6 <_strtoul_l.isra.0+0xa>
 80177f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80177f6:	d110      	bne.n	801781a <_strtoul_l.isra.0+0x3e>
 80177f8:	782c      	ldrb	r4, [r5, #0]
 80177fa:	2701      	movs	r7, #1
 80177fc:	1c85      	adds	r5, r0, #2
 80177fe:	f033 0010 	bics.w	r0, r3, #16
 8017802:	d115      	bne.n	8017830 <_strtoul_l.isra.0+0x54>
 8017804:	2c30      	cmp	r4, #48	@ 0x30
 8017806:	d10d      	bne.n	8017824 <_strtoul_l.isra.0+0x48>
 8017808:	7828      	ldrb	r0, [r5, #0]
 801780a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801780e:	2858      	cmp	r0, #88	@ 0x58
 8017810:	d108      	bne.n	8017824 <_strtoul_l.isra.0+0x48>
 8017812:	786c      	ldrb	r4, [r5, #1]
 8017814:	3502      	adds	r5, #2
 8017816:	2310      	movs	r3, #16
 8017818:	e00a      	b.n	8017830 <_strtoul_l.isra.0+0x54>
 801781a:	2c2b      	cmp	r4, #43	@ 0x2b
 801781c:	bf04      	itt	eq
 801781e:	782c      	ldrbeq	r4, [r5, #0]
 8017820:	1c85      	addeq	r5, r0, #2
 8017822:	e7ec      	b.n	80177fe <_strtoul_l.isra.0+0x22>
 8017824:	2b00      	cmp	r3, #0
 8017826:	d1f6      	bne.n	8017816 <_strtoul_l.isra.0+0x3a>
 8017828:	2c30      	cmp	r4, #48	@ 0x30
 801782a:	bf14      	ite	ne
 801782c:	230a      	movne	r3, #10
 801782e:	2308      	moveq	r3, #8
 8017830:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017834:	2600      	movs	r6, #0
 8017836:	fbb8 f8f3 	udiv	r8, r8, r3
 801783a:	fb03 f908 	mul.w	r9, r3, r8
 801783e:	ea6f 0909 	mvn.w	r9, r9
 8017842:	4630      	mov	r0, r6
 8017844:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017848:	f1bc 0f09 	cmp.w	ip, #9
 801784c:	d810      	bhi.n	8017870 <_strtoul_l.isra.0+0x94>
 801784e:	4664      	mov	r4, ip
 8017850:	42a3      	cmp	r3, r4
 8017852:	dd1e      	ble.n	8017892 <_strtoul_l.isra.0+0xb6>
 8017854:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017858:	d007      	beq.n	801786a <_strtoul_l.isra.0+0x8e>
 801785a:	4580      	cmp	r8, r0
 801785c:	d316      	bcc.n	801788c <_strtoul_l.isra.0+0xb0>
 801785e:	d101      	bne.n	8017864 <_strtoul_l.isra.0+0x88>
 8017860:	45a1      	cmp	r9, r4
 8017862:	db13      	blt.n	801788c <_strtoul_l.isra.0+0xb0>
 8017864:	fb00 4003 	mla	r0, r0, r3, r4
 8017868:	2601      	movs	r6, #1
 801786a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801786e:	e7e9      	b.n	8017844 <_strtoul_l.isra.0+0x68>
 8017870:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017874:	f1bc 0f19 	cmp.w	ip, #25
 8017878:	d801      	bhi.n	801787e <_strtoul_l.isra.0+0xa2>
 801787a:	3c37      	subs	r4, #55	@ 0x37
 801787c:	e7e8      	b.n	8017850 <_strtoul_l.isra.0+0x74>
 801787e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017882:	f1bc 0f19 	cmp.w	ip, #25
 8017886:	d804      	bhi.n	8017892 <_strtoul_l.isra.0+0xb6>
 8017888:	3c57      	subs	r4, #87	@ 0x57
 801788a:	e7e1      	b.n	8017850 <_strtoul_l.isra.0+0x74>
 801788c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017890:	e7eb      	b.n	801786a <_strtoul_l.isra.0+0x8e>
 8017892:	1c73      	adds	r3, r6, #1
 8017894:	d106      	bne.n	80178a4 <_strtoul_l.isra.0+0xc8>
 8017896:	2322      	movs	r3, #34	@ 0x22
 8017898:	f8ce 3000 	str.w	r3, [lr]
 801789c:	4630      	mov	r0, r6
 801789e:	b932      	cbnz	r2, 80178ae <_strtoul_l.isra.0+0xd2>
 80178a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178a4:	b107      	cbz	r7, 80178a8 <_strtoul_l.isra.0+0xcc>
 80178a6:	4240      	negs	r0, r0
 80178a8:	2a00      	cmp	r2, #0
 80178aa:	d0f9      	beq.n	80178a0 <_strtoul_l.isra.0+0xc4>
 80178ac:	b106      	cbz	r6, 80178b0 <_strtoul_l.isra.0+0xd4>
 80178ae:	1e69      	subs	r1, r5, #1
 80178b0:	6011      	str	r1, [r2, #0]
 80178b2:	e7f5      	b.n	80178a0 <_strtoul_l.isra.0+0xc4>
 80178b4:	08018641 	.word	0x08018641

080178b8 <_strtoul_r>:
 80178b8:	f7ff bf90 	b.w	80177dc <_strtoul_l.isra.0>

080178bc <__swsetup_r>:
 80178bc:	b538      	push	{r3, r4, r5, lr}
 80178be:	4b29      	ldr	r3, [pc, #164]	@ (8017964 <__swsetup_r+0xa8>)
 80178c0:	4605      	mov	r5, r0
 80178c2:	6818      	ldr	r0, [r3, #0]
 80178c4:	460c      	mov	r4, r1
 80178c6:	b118      	cbz	r0, 80178d0 <__swsetup_r+0x14>
 80178c8:	6a03      	ldr	r3, [r0, #32]
 80178ca:	b90b      	cbnz	r3, 80178d0 <__swsetup_r+0x14>
 80178cc:	f7fc f85c 	bl	8013988 <__sinit>
 80178d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178d4:	0719      	lsls	r1, r3, #28
 80178d6:	d422      	bmi.n	801791e <__swsetup_r+0x62>
 80178d8:	06da      	lsls	r2, r3, #27
 80178da:	d407      	bmi.n	80178ec <__swsetup_r+0x30>
 80178dc:	2209      	movs	r2, #9
 80178de:	602a      	str	r2, [r5, #0]
 80178e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178e4:	81a3      	strh	r3, [r4, #12]
 80178e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80178ea:	e033      	b.n	8017954 <__swsetup_r+0x98>
 80178ec:	0758      	lsls	r0, r3, #29
 80178ee:	d512      	bpl.n	8017916 <__swsetup_r+0x5a>
 80178f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80178f2:	b141      	cbz	r1, 8017906 <__swsetup_r+0x4a>
 80178f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80178f8:	4299      	cmp	r1, r3
 80178fa:	d002      	beq.n	8017902 <__swsetup_r+0x46>
 80178fc:	4628      	mov	r0, r5
 80178fe:	f7fd ff23 	bl	8015748 <_free_r>
 8017902:	2300      	movs	r3, #0
 8017904:	6363      	str	r3, [r4, #52]	@ 0x34
 8017906:	89a3      	ldrh	r3, [r4, #12]
 8017908:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801790c:	81a3      	strh	r3, [r4, #12]
 801790e:	2300      	movs	r3, #0
 8017910:	6063      	str	r3, [r4, #4]
 8017912:	6923      	ldr	r3, [r4, #16]
 8017914:	6023      	str	r3, [r4, #0]
 8017916:	89a3      	ldrh	r3, [r4, #12]
 8017918:	f043 0308 	orr.w	r3, r3, #8
 801791c:	81a3      	strh	r3, [r4, #12]
 801791e:	6923      	ldr	r3, [r4, #16]
 8017920:	b94b      	cbnz	r3, 8017936 <__swsetup_r+0x7a>
 8017922:	89a3      	ldrh	r3, [r4, #12]
 8017924:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017928:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801792c:	d003      	beq.n	8017936 <__swsetup_r+0x7a>
 801792e:	4621      	mov	r1, r4
 8017930:	4628      	mov	r0, r5
 8017932:	f000 f84c 	bl	80179ce <__smakebuf_r>
 8017936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801793a:	f013 0201 	ands.w	r2, r3, #1
 801793e:	d00a      	beq.n	8017956 <__swsetup_r+0x9a>
 8017940:	2200      	movs	r2, #0
 8017942:	60a2      	str	r2, [r4, #8]
 8017944:	6962      	ldr	r2, [r4, #20]
 8017946:	4252      	negs	r2, r2
 8017948:	61a2      	str	r2, [r4, #24]
 801794a:	6922      	ldr	r2, [r4, #16]
 801794c:	b942      	cbnz	r2, 8017960 <__swsetup_r+0xa4>
 801794e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017952:	d1c5      	bne.n	80178e0 <__swsetup_r+0x24>
 8017954:	bd38      	pop	{r3, r4, r5, pc}
 8017956:	0799      	lsls	r1, r3, #30
 8017958:	bf58      	it	pl
 801795a:	6962      	ldrpl	r2, [r4, #20]
 801795c:	60a2      	str	r2, [r4, #8]
 801795e:	e7f4      	b.n	801794a <__swsetup_r+0x8e>
 8017960:	2000      	movs	r0, #0
 8017962:	e7f7      	b.n	8017954 <__swsetup_r+0x98>
 8017964:	200001d4 	.word	0x200001d4

08017968 <__ascii_wctomb>:
 8017968:	4603      	mov	r3, r0
 801796a:	4608      	mov	r0, r1
 801796c:	b141      	cbz	r1, 8017980 <__ascii_wctomb+0x18>
 801796e:	2aff      	cmp	r2, #255	@ 0xff
 8017970:	d904      	bls.n	801797c <__ascii_wctomb+0x14>
 8017972:	228a      	movs	r2, #138	@ 0x8a
 8017974:	601a      	str	r2, [r3, #0]
 8017976:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801797a:	4770      	bx	lr
 801797c:	700a      	strb	r2, [r1, #0]
 801797e:	2001      	movs	r0, #1
 8017980:	4770      	bx	lr

08017982 <__swhatbuf_r>:
 8017982:	b570      	push	{r4, r5, r6, lr}
 8017984:	460c      	mov	r4, r1
 8017986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801798a:	2900      	cmp	r1, #0
 801798c:	b096      	sub	sp, #88	@ 0x58
 801798e:	4615      	mov	r5, r2
 8017990:	461e      	mov	r6, r3
 8017992:	da0d      	bge.n	80179b0 <__swhatbuf_r+0x2e>
 8017994:	89a3      	ldrh	r3, [r4, #12]
 8017996:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801799a:	f04f 0100 	mov.w	r1, #0
 801799e:	bf14      	ite	ne
 80179a0:	2340      	movne	r3, #64	@ 0x40
 80179a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80179a6:	2000      	movs	r0, #0
 80179a8:	6031      	str	r1, [r6, #0]
 80179aa:	602b      	str	r3, [r5, #0]
 80179ac:	b016      	add	sp, #88	@ 0x58
 80179ae:	bd70      	pop	{r4, r5, r6, pc}
 80179b0:	466a      	mov	r2, sp
 80179b2:	f000 f883 	bl	8017abc <_fstat_r>
 80179b6:	2800      	cmp	r0, #0
 80179b8:	dbec      	blt.n	8017994 <__swhatbuf_r+0x12>
 80179ba:	9901      	ldr	r1, [sp, #4]
 80179bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80179c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80179c4:	4259      	negs	r1, r3
 80179c6:	4159      	adcs	r1, r3
 80179c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80179cc:	e7eb      	b.n	80179a6 <__swhatbuf_r+0x24>

080179ce <__smakebuf_r>:
 80179ce:	898b      	ldrh	r3, [r1, #12]
 80179d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179d2:	079d      	lsls	r5, r3, #30
 80179d4:	4606      	mov	r6, r0
 80179d6:	460c      	mov	r4, r1
 80179d8:	d507      	bpl.n	80179ea <__smakebuf_r+0x1c>
 80179da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80179de:	6023      	str	r3, [r4, #0]
 80179e0:	6123      	str	r3, [r4, #16]
 80179e2:	2301      	movs	r3, #1
 80179e4:	6163      	str	r3, [r4, #20]
 80179e6:	b003      	add	sp, #12
 80179e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179ea:	ab01      	add	r3, sp, #4
 80179ec:	466a      	mov	r2, sp
 80179ee:	f7ff ffc8 	bl	8017982 <__swhatbuf_r>
 80179f2:	9f00      	ldr	r7, [sp, #0]
 80179f4:	4605      	mov	r5, r0
 80179f6:	4639      	mov	r1, r7
 80179f8:	4630      	mov	r0, r6
 80179fa:	f7fe febb 	bl	8016774 <_malloc_r>
 80179fe:	b948      	cbnz	r0, 8017a14 <__smakebuf_r+0x46>
 8017a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a04:	059a      	lsls	r2, r3, #22
 8017a06:	d4ee      	bmi.n	80179e6 <__smakebuf_r+0x18>
 8017a08:	f023 0303 	bic.w	r3, r3, #3
 8017a0c:	f043 0302 	orr.w	r3, r3, #2
 8017a10:	81a3      	strh	r3, [r4, #12]
 8017a12:	e7e2      	b.n	80179da <__smakebuf_r+0xc>
 8017a14:	89a3      	ldrh	r3, [r4, #12]
 8017a16:	6020      	str	r0, [r4, #0]
 8017a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017a1c:	81a3      	strh	r3, [r4, #12]
 8017a1e:	9b01      	ldr	r3, [sp, #4]
 8017a20:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017a24:	b15b      	cbz	r3, 8017a3e <__smakebuf_r+0x70>
 8017a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a2a:	4630      	mov	r0, r6
 8017a2c:	f000 f826 	bl	8017a7c <_isatty_r>
 8017a30:	b128      	cbz	r0, 8017a3e <__smakebuf_r+0x70>
 8017a32:	89a3      	ldrh	r3, [r4, #12]
 8017a34:	f023 0303 	bic.w	r3, r3, #3
 8017a38:	f043 0301 	orr.w	r3, r3, #1
 8017a3c:	81a3      	strh	r3, [r4, #12]
 8017a3e:	89a3      	ldrh	r3, [r4, #12]
 8017a40:	431d      	orrs	r5, r3
 8017a42:	81a5      	strh	r5, [r4, #12]
 8017a44:	e7cf      	b.n	80179e6 <__smakebuf_r+0x18>

08017a46 <memmove>:
 8017a46:	4288      	cmp	r0, r1
 8017a48:	b510      	push	{r4, lr}
 8017a4a:	eb01 0402 	add.w	r4, r1, r2
 8017a4e:	d902      	bls.n	8017a56 <memmove+0x10>
 8017a50:	4284      	cmp	r4, r0
 8017a52:	4623      	mov	r3, r4
 8017a54:	d807      	bhi.n	8017a66 <memmove+0x20>
 8017a56:	1e43      	subs	r3, r0, #1
 8017a58:	42a1      	cmp	r1, r4
 8017a5a:	d008      	beq.n	8017a6e <memmove+0x28>
 8017a5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a64:	e7f8      	b.n	8017a58 <memmove+0x12>
 8017a66:	4402      	add	r2, r0
 8017a68:	4601      	mov	r1, r0
 8017a6a:	428a      	cmp	r2, r1
 8017a6c:	d100      	bne.n	8017a70 <memmove+0x2a>
 8017a6e:	bd10      	pop	{r4, pc}
 8017a70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a78:	e7f7      	b.n	8017a6a <memmove+0x24>
	...

08017a7c <_isatty_r>:
 8017a7c:	b538      	push	{r3, r4, r5, lr}
 8017a7e:	4d06      	ldr	r5, [pc, #24]	@ (8017a98 <_isatty_r+0x1c>)
 8017a80:	2300      	movs	r3, #0
 8017a82:	4604      	mov	r4, r0
 8017a84:	4608      	mov	r0, r1
 8017a86:	602b      	str	r3, [r5, #0]
 8017a88:	f7eb fc40 	bl	800330c <_isatty>
 8017a8c:	1c43      	adds	r3, r0, #1
 8017a8e:	d102      	bne.n	8017a96 <_isatty_r+0x1a>
 8017a90:	682b      	ldr	r3, [r5, #0]
 8017a92:	b103      	cbz	r3, 8017a96 <_isatty_r+0x1a>
 8017a94:	6023      	str	r3, [r4, #0]
 8017a96:	bd38      	pop	{r3, r4, r5, pc}
 8017a98:	200067ac 	.word	0x200067ac

08017a9c <_sbrk_r>:
 8017a9c:	b538      	push	{r3, r4, r5, lr}
 8017a9e:	4d06      	ldr	r5, [pc, #24]	@ (8017ab8 <_sbrk_r+0x1c>)
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	4604      	mov	r4, r0
 8017aa4:	4608      	mov	r0, r1
 8017aa6:	602b      	str	r3, [r5, #0]
 8017aa8:	f7eb fc48 	bl	800333c <_sbrk>
 8017aac:	1c43      	adds	r3, r0, #1
 8017aae:	d102      	bne.n	8017ab6 <_sbrk_r+0x1a>
 8017ab0:	682b      	ldr	r3, [r5, #0]
 8017ab2:	b103      	cbz	r3, 8017ab6 <_sbrk_r+0x1a>
 8017ab4:	6023      	str	r3, [r4, #0]
 8017ab6:	bd38      	pop	{r3, r4, r5, pc}
 8017ab8:	200067ac 	.word	0x200067ac

08017abc <_fstat_r>:
 8017abc:	b538      	push	{r3, r4, r5, lr}
 8017abe:	4d07      	ldr	r5, [pc, #28]	@ (8017adc <_fstat_r+0x20>)
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	4604      	mov	r4, r0
 8017ac4:	4608      	mov	r0, r1
 8017ac6:	4611      	mov	r1, r2
 8017ac8:	602b      	str	r3, [r5, #0]
 8017aca:	f7eb fc0f 	bl	80032ec <_fstat>
 8017ace:	1c43      	adds	r3, r0, #1
 8017ad0:	d102      	bne.n	8017ad8 <_fstat_r+0x1c>
 8017ad2:	682b      	ldr	r3, [r5, #0]
 8017ad4:	b103      	cbz	r3, 8017ad8 <_fstat_r+0x1c>
 8017ad6:	6023      	str	r3, [r4, #0]
 8017ad8:	bd38      	pop	{r3, r4, r5, pc}
 8017ada:	bf00      	nop
 8017adc:	200067ac 	.word	0x200067ac

08017ae0 <abort>:
 8017ae0:	b508      	push	{r3, lr}
 8017ae2:	2006      	movs	r0, #6
 8017ae4:	f000 f848 	bl	8017b78 <raise>
 8017ae8:	2001      	movs	r0, #1
 8017aea:	f7eb fbcb 	bl	8003284 <_exit>

08017aee <_calloc_r>:
 8017aee:	b570      	push	{r4, r5, r6, lr}
 8017af0:	fba1 5402 	umull	r5, r4, r1, r2
 8017af4:	b934      	cbnz	r4, 8017b04 <_calloc_r+0x16>
 8017af6:	4629      	mov	r1, r5
 8017af8:	f7fe fe3c 	bl	8016774 <_malloc_r>
 8017afc:	4606      	mov	r6, r0
 8017afe:	b928      	cbnz	r0, 8017b0c <_calloc_r+0x1e>
 8017b00:	4630      	mov	r0, r6
 8017b02:	bd70      	pop	{r4, r5, r6, pc}
 8017b04:	220c      	movs	r2, #12
 8017b06:	6002      	str	r2, [r0, #0]
 8017b08:	2600      	movs	r6, #0
 8017b0a:	e7f9      	b.n	8017b00 <_calloc_r+0x12>
 8017b0c:	462a      	mov	r2, r5
 8017b0e:	4621      	mov	r1, r4
 8017b10:	f7fc fe7c 	bl	801480c <memset>
 8017b14:	e7f4      	b.n	8017b00 <_calloc_r+0x12>

08017b16 <_malloc_usable_size_r>:
 8017b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b1a:	1f18      	subs	r0, r3, #4
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	bfbc      	itt	lt
 8017b20:	580b      	ldrlt	r3, [r1, r0]
 8017b22:	18c0      	addlt	r0, r0, r3
 8017b24:	4770      	bx	lr

08017b26 <_raise_r>:
 8017b26:	291f      	cmp	r1, #31
 8017b28:	b538      	push	{r3, r4, r5, lr}
 8017b2a:	4605      	mov	r5, r0
 8017b2c:	460c      	mov	r4, r1
 8017b2e:	d904      	bls.n	8017b3a <_raise_r+0x14>
 8017b30:	2316      	movs	r3, #22
 8017b32:	6003      	str	r3, [r0, #0]
 8017b34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b38:	bd38      	pop	{r3, r4, r5, pc}
 8017b3a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017b3c:	b112      	cbz	r2, 8017b44 <_raise_r+0x1e>
 8017b3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017b42:	b94b      	cbnz	r3, 8017b58 <_raise_r+0x32>
 8017b44:	4628      	mov	r0, r5
 8017b46:	f000 f831 	bl	8017bac <_getpid_r>
 8017b4a:	4622      	mov	r2, r4
 8017b4c:	4601      	mov	r1, r0
 8017b4e:	4628      	mov	r0, r5
 8017b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b54:	f000 b818 	b.w	8017b88 <_kill_r>
 8017b58:	2b01      	cmp	r3, #1
 8017b5a:	d00a      	beq.n	8017b72 <_raise_r+0x4c>
 8017b5c:	1c59      	adds	r1, r3, #1
 8017b5e:	d103      	bne.n	8017b68 <_raise_r+0x42>
 8017b60:	2316      	movs	r3, #22
 8017b62:	6003      	str	r3, [r0, #0]
 8017b64:	2001      	movs	r0, #1
 8017b66:	e7e7      	b.n	8017b38 <_raise_r+0x12>
 8017b68:	2100      	movs	r1, #0
 8017b6a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017b6e:	4620      	mov	r0, r4
 8017b70:	4798      	blx	r3
 8017b72:	2000      	movs	r0, #0
 8017b74:	e7e0      	b.n	8017b38 <_raise_r+0x12>
	...

08017b78 <raise>:
 8017b78:	4b02      	ldr	r3, [pc, #8]	@ (8017b84 <raise+0xc>)
 8017b7a:	4601      	mov	r1, r0
 8017b7c:	6818      	ldr	r0, [r3, #0]
 8017b7e:	f7ff bfd2 	b.w	8017b26 <_raise_r>
 8017b82:	bf00      	nop
 8017b84:	200001d4 	.word	0x200001d4

08017b88 <_kill_r>:
 8017b88:	b538      	push	{r3, r4, r5, lr}
 8017b8a:	4d07      	ldr	r5, [pc, #28]	@ (8017ba8 <_kill_r+0x20>)
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	4604      	mov	r4, r0
 8017b90:	4608      	mov	r0, r1
 8017b92:	4611      	mov	r1, r2
 8017b94:	602b      	str	r3, [r5, #0]
 8017b96:	f7eb fb65 	bl	8003264 <_kill>
 8017b9a:	1c43      	adds	r3, r0, #1
 8017b9c:	d102      	bne.n	8017ba4 <_kill_r+0x1c>
 8017b9e:	682b      	ldr	r3, [r5, #0]
 8017ba0:	b103      	cbz	r3, 8017ba4 <_kill_r+0x1c>
 8017ba2:	6023      	str	r3, [r4, #0]
 8017ba4:	bd38      	pop	{r3, r4, r5, pc}
 8017ba6:	bf00      	nop
 8017ba8:	200067ac 	.word	0x200067ac

08017bac <_getpid_r>:
 8017bac:	f7eb bb52 	b.w	8003254 <_getpid>

08017bb0 <_init>:
 8017bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bb2:	bf00      	nop
 8017bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bb6:	bc08      	pop	{r3}
 8017bb8:	469e      	mov	lr, r3
 8017bba:	4770      	bx	lr

08017bbc <_fini>:
 8017bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bbe:	bf00      	nop
 8017bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017bc2:	bc08      	pop	{r3}
 8017bc4:	469e      	mov	lr, r3
 8017bc6:	4770      	bx	lr
